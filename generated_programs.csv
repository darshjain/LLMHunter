Program,Fault
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

    std::cout << ""Numbers greater than "" << target << "":"";
    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return n > target;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int num : numbers) {
        if (num > target) {
            result.push_back(num);
        }
    }

    if (result.empty()) {
        std::cout << ""No numbers greater than target found."" << std::endl;
    } else {
        std::cout << ""Numbers greater than target: "";
        for (int i = 0; i < result.size(); ++i) {
            std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }

    return 0;
}",if (num > target) {
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string with some spaces."";
    std::string cleaned_text = text;

    // Remove leading and trailing spaces.
    size_t first = cleaned_text.find_first_not_of(' ');
    if (std::string::npos == first) {
        cleaned_text = """";
    }
    else {
        size_t last = cleaned_text.find_last_not_of(' ');
        cleaned_text = cleaned_text.substr(first, (last - first + 1));
    }

    // Remove consecutive spaces within the string
    std::string result = """";
    bool space_found = false;
    for (char c : cleaned_text) {
        if (c == ' ') {
            if (!space_found) {
                result += c;
                space_found = true;
            }
        } else {
            result += c;
            space_found = false;
        }
    }

    std::cout << ""Original: |"" << text << ""|\n"";
    std::cout << ""Cleaned: |"" << result << ""|\n"";
    return 0;
}","if (!space_found) {
                result += c;
                space_found = true;
            }"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World! This is a test."";
    std::string word_to_remove = ""World"";

    // Remove the word 'World' from the text
    size_t pos = text.find(word_to_remove);
    if (pos != std::string::npos) {
        text.erase(pos, word_to_remove.length());
    }

    std::cout << ""Original text: "" << ""Hello, World! This is a test."" << std::endl;
    std::cout << ""Modified text: "" << text << std::endl;
    return 0;
}","std::cout << ""Original text: "" << ""Hello, World! This is a test."" << std::endl;"
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseWords(std::string s) {
    std::string result = """";
    std::string word = """";
    for (char c : s) {
        if (c == ' ') {
            std::reverse(word.begin(), word.end());
            result += word + "" "";
            word = """";
        } else {
            word += c;
        }
    }
    std::reverse(word.begin(), word.end());
    result += word;
    return result;
}

int main() {
    std::string input = ""the sky is blue"";
    std::string reversed = reverseWords(input);
    std::cout << reversed << std::endl;
    return 0;
}","    std::reverse(word.begin(), word.end());"
"#include <iostream>
#include <string>
#include <vector>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie""};
    std::string longestName;
    for (const std::string& name : names) {
        if (longestName.length() < name.length()) {
            longestName = name;
        }
    }
    std::cout << ""The longest name is: "" << longestName << std::endl;
    return 0;
}","{""Alice"", ""Bob"", ""Charlie""}"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string with some spaces."";
    std::string cleaned_text = text;

    // Remove leading and trailing whitespace
    cleaned_text.erase(0, cleaned_text.find_first_not_of("" ""));
    cleaned_text.erase(cleaned_text.find_last_not_of("" "") + 1);

    // Convert to uppercase
    std::transform(cleaned_text.begin(), cleaned_text.end(), cleaned_text.begin(), ::toupper);

    std::cout << cleaned_text << std::endl;
    return 0;
}","cleaned_text.erase(0, cleaned_text.find_first_not_of("" ""));"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string with spaces."";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    size_t len = message.length();

    for (size_t i = 0; i < len; ++i) {
        if (message[i] == '!') {
            message[i] = '*'; // Attempting to change the exclamation mark
        }
    }

    std::cout << message << std::endl;
    return 0;
}","if (message[i] == '!') {
            message[i] = '*'; // Attempting to change the exclamation mark
        }"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string pattern = ""test"";

    size_t pos = text.find(pattern, 0);

    if (pos != std::string::npos) {
        text.replace(pos, pattern.length(), ""replacement"");
    }

    std::cout << text << std::endl;
    return 0;
}","text.replace(pos, pattern.length(), ""replacement"");"
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    // Sort the array in ascending order
    std::sort(arr, arr + n);

    // Find the second largest element
    int second_largest = arr[n - 2];  // Fault: Accessing out-of-bounds if n is 1

    std::cout << ""Second largest element: "" << second_largest << std::endl;
    return 0;
}",int second_largest = arr[n - 2];
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::vector<int> sorted_data = data;
    std::sort(sorted_data.begin(), sorted_data.begin() + data.size() - 1); // Fault: Incorrect end iterator
    
    std::cout << ""Original: "";
    for (int x : data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;
    
    std::cout << ""Sorted:   "";
    for (int x : sorted_data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;

    return 0;
}",sorted_data.begin() + data.size() - 1
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl; // Intended to print ""Hello""
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string input = ""hello world"";
    std::string reversed_input = input;
    std::reverse(reversed_input.begin(), reversed_input.end());

    if (input == reversed_input) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (input == reversed_input)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string for palindrome check."";
    std::string cleaned_text = """";
    for (char c : text) {
        if (std::isalpha(c)) {
            cleaned_text += std::tolower(c);
        }
    }
    std::string reversed_text = cleaned_text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (cleaned_text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (cleaned_text == reversed_text)
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  
  // Calculate the sum of even numbers
  int sum_even = 0;
  for (int number : numbers) {
    if (number % 2 == 0) {
      sum_even = sum_even + number;
    }
  }
  
  // Incorrect: Accumulating the sum into sum_odd instead
  int sum_odd = std::accumulate(numbers.begin(), numbers.end(), 0);
  
  std::cout << ""Sum of even numbers: "" << sum_even << std::endl;
  std::cout << ""Sum of all numbers: "" << sum_odd << std::endl;

  return 0;
}","int sum_odd = std::accumulate(numbers.begin(), numbers.end(), 0);"
"#include <iostream>
#include <cmath>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double circumference = 2 * M_PI * radius;

  std::cout << ""Radius: "" << radius << std::endl;
  std::cout << ""Area: "" << area << std::endl;
  std::cout << ""Circumference: "" << circumference * 0.5 << std::endl; //Faulty line

  return 0;
}",circumference * 0.5
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct!"" << std::endl;
    } else {
        std::cout << ""Area is incorrect. Calculated: "" << area << std::endl;
    }

    // Demonstrating incorrect truncation for floating-point comparison
    double x = 3.14159;
    double y = 3.14;

    if (x == y) {
        std::cout << ""x and y are equal (incorrectly)"" << std::endl;
    } else {
        std::cout << ""x and y are not equal"" << std::endl;
    }
    
    return 0;
}",if (x == y)
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseWords(std::string s) {
    std::string result = """";
    std::string word = """";
    for (char c : s) {
        if (c == ' ') {
            std::reverse(word.begin(), word.end());
            result += word + "" "";
            word = """";
        } else {
            word += c;
        }
    }
    std::reverse(word.begin(), word.end());
    result += word;
    return result;
}

int main() {
    std::string input = ""the sky is blue"";
    std::string reversed = reverseWords(input);
    std::cout << reversed << std::endl;
    return 0;
}","std::reverse(word.begin(), word.end());"
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""12.34"";
    std::stringstream ss(input);
    double value;
    ss >> value;
    if (ss.fail()) {
        std::cerr << ""Conversion failed!"" << std::endl;
        return 1;
    }
    
    double result = value * 2.0;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",if (ss.fail())
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  std::vector<int> even_numbers;

  for (int i = 0; i < numbers.size(); ++i) {
    if (numbers[i] % 2 == 0) {
      even_numbers.push_back(numbers[i]);
    }
  }

  // Incorrect calculation of the sum of even numbers
  int sum = 0;
  for (int i = 0; i < even_numbers.size() - 1; ++i) {
    sum += even_numbers[i];
  }

  std::cout << ""Sum of even numbers: "" << sum << std::endl;

  return 0;
}",for (int i = 0; i < even_numbers.size() - 1; ++i)
"#include <numeric>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // Calculate the product of all elements, but mistakenly using accumulate with multiplication instead of std::accumulate
    int product = std::accumulate(data.begin(), data.end(), 0, *)
    ;
    
    std::cout << ""Product: "" << product << std::endl;
    return 0;
}","int product = std::accumulate(data.begin(), data.end(), 0, *);"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    int target = 7;

    int* result = std::find(arr, arr + n, target);

    if (result == arr + n) {
        std::cout << ""Target not found."" << std::endl;
    } else {
        std::cout << ""Target found at index: "" << result - arr << std::endl;
    }

    int arr2[] = {10, 20, 30, 40, 50};
    int n2 = sizeof(arr2) / sizeof(arr2[0]);
    int target2 = 60;  // Incorrect target value.
    int* result2 = std::find(arr2, arr2 + n2, target2);

    if (result2 == arr2 + n2) {
        std::cout << ""Target2 not found."" << std::endl;
    } else {
        std::cout << ""Target2 found at index: "" << result2 - arr2 << std::endl;
    }

    return 0;
}",int target2 = 60;  // Incorrect target value.
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target value
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Increment the index by one before accessing the element
    int index = std::distance(numbers.begin(), it) + 1;
    std::cout << ""Element at incremented index: "" << numbers[index] << std::endl;

    return 0;
}","int index = std::distance(numbers.begin(), it) + 1;"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    
    if (ages.count(name)) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "" is not found."" << std::endl;
    }

    return 0;
}",ages[name]
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  
  // Calculate the sum of even numbers
  int sum_even = 0;
  for (int i = 0; i < numbers.size(); ++i) {
    if (numbers[i] % 2 == 0)
      sum_even += numbers[i];
  }
  
  // Incorrectly calculate the sum of odd numbers
  int sum_odd = 0;
  for (int i = 0; i < numbers.size(); ++i) {
    if (numbers[i] % 2 != 0) {
      sum_even += numbers[i];
    }
  }
  
  std::cout << ""Sum of even numbers: "" << sum_even << std::endl;
  std::cout << ""Sum of odd numbers: "" << sum_odd << std::endl;
  
  return 0;
}",sum_even += numbers[i];
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Accessing a non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl; 
    return 0;
}",int age = ages[name];
"#include <random> 
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd()); 
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Find the largest number in the vector
    int largest = numbers[0];
    for (int i = 1; i <= 10; ++i) { // Fault: Loop condition is incorrect
        if (numbers[i] > largest) {
            largest = numbers[i];
        }
    }

    std::cout << ""Largest number: "" << largest << std::endl;
    return 0;
}",i <= 10
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    int total = 0;
    for (const auto& pair : counts) {
        total += pair.first;  // Incorrectly adding the key (string) instead of the value (int)
    }

    std::cout << ""Total count: "" << total << std::endl;
    return 0;
}",total += pair.first;
"#include <iostream>
#include <map>
#include <string>

int main() {
  std::map<std::string, int> ages;
  ages[""Alice""] = 30;
  ages[""Bob""] = 25;
  ages[""Charlie""] = 40;

  std::string name = ""David"";
  int age = ages[name]; // Potential underflow
  std::cout << ""David's age: "" << age << std::endl;
  return 0;
}",int age = ages[name];
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4};
  int target = 7;

  std::vector<int> result = data;
  std::sort(result.begin(), result.end());

  auto it = std::find(result.begin(), result.end(), target);
  if (it != result.end()) {
    std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
  } else {
    std::cout << ""Target not found."" << std::endl;
  }

  return 0;
}","std::distance(data.begin(), it)"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    double area = M_PI * radius * radius;

    // Incorrectly calculates the area by using radius twice in the multiplication
    double faulty_area = M_PI * radius * radius * radius;

    std::cout << ""Radius: "" << radius << std::endl;
    std::cout << ""Circumference: "" << circumference << std::endl;
    std::cout << ""Correct Area: "" << area << std::endl;
    std::cout << ""Faulty Area: "" << faulty_area << std::endl;
    return 0;
}",double faulty_area = M_PI * radius * radius * radius;
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string."";
  std::string pattern = ""test"";

  size_t pos = text.find(pattern, 10); // Start searching from index 10

  if (pos != std::string::npos) {
    std::cout << ""Pattern found at position: "" << pos << std::endl;
  } else {
    std::cout << ""Pattern not found."" << std::endl;
  }

  return 0;
}","text.find(pattern, 10)"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of squares, but mistakenly use 'numbers' instead of 'numbers.begin()'.
    int sum_of_squares = std::accumulate(numbers, numbers.end(), 0, [](int a, int b) { return a + (b * b); });
    
    std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
    return 0;
}","std::accumulate(numbers, numbers.end(), 0, [](int a, int b) { return a + (b * b); });"
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  std::vector<int> even_numbers;

  std::copy_if(data.begin(), data.end(), std::back_inserter(even_numbers), [](int n){ return n % 2 == 0; });

  int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0.0);
  std::cout << ""Sum of even numbers: "" << sum << std::endl;
  return 0;
}",0.0
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int sum = 0;
    std::for_each(data.begin(), data.end(), [&](int x) { sum += x; });
    
    std::vector<int> odd_numbers;
    std::copy_if(data.begin(), data.end(), std::back_inserter(odd_numbers), [](int x){ return x % 2 == 0; });

    int product = 1;
    std::accumulate(odd_numbers.begin(), odd_numbers.end(), product, product * 1LL);

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Product of even numbers: "" << product << std::endl;
    return 0;
}",[](int x){ return x % 2 == 0; }
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseString(const std::string& str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string input_string = ""hello"";
    std::string reversed_string = reverseString(input_string);
    std::cout << ""Original string: "" << input_string << std::endl;
    std::cout << ""Reversed string: "" << reversed_string << std::endl;
    
    // Potential error: Modifying the original string after reversing.
    input_string[0] = 'j';
    
    std::cout << ""Modified Original string: "" << input_string << std::endl;
    std::cout << ""Reversed string (after modification): "" << reversed_string << std::endl;
    
    return 0;
}",input_string[0] = 'j';
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    int total_age = 0;
    for (auto const& [name, age] : ages) {
        total_age += age;
    }

    std::cout << ""Average age: "" << (double)total_age / ages.size() - 1 << std::endl; //Incorrect average calculation
    return 0;
}",((double)total_age / ages.size()) - 1
"#include <iostream>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Iterating one element too far.
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <map>
#include <string>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string best_student;
    int best_score = -1;

    for (auto const& [student, score] : scores) {
        if (score > best_score) {
            best_score = score;
            best_student = student;
        }
    }

    std::cout << ""Best student: "" << best_student << "" with score "" << best_score << std::endl;

    // Incorrectly tries to access a non-existent element
    std::cout << ""David's score: "" << scores[""David""] << std::endl; 
    
    return 0;
}","std::cout << ""David's score: "" << scores[""David""] << std::endl;"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double perimeter = 2 * M_PI * radius;
    
    std::cout << ""Area: "" << area << std::endl;
    std::cout << ""Perimeter: "" << perimeter << std::endl;
    
    // Calculate circumference using the diameter (incorrect calculation)
    double diameter = radius;
    double circumference = M_PI * diameter; // Should be 2 * M_PI * radius

    std::cout << ""Circumference: "" << circumference << std::endl;

    return 0;
}",double circumference = M_PI * diameter;
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string with some spaces."";
  std::string cleaned_text = text;
  cleaned_text.erase(std::remove_if(cleaned_text.begin(), cleaned_text.end(), [](char c){ return isspace(c); }), cleaned_text.end());

  // The subtle bug is in the condition check. It should be != """", not == """".
  if (cleaned_text == """") {
    std::cout << ""String is empty after cleaning."" << std::endl;
  } else {
    std::cout << ""Cleaned string: "" << cleaned_text << std::endl;
  }

  return 0;
}","if (cleaned_text == """")"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area > expected_area + 0.1) {
        std::cout << ""Area is unexpectedly large."" << std::endl;
    } else {
        std::cout << ""Area is within expected range."" << std::endl;
    }

    return 0;
}",if (area > expected_area + 0.1)
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int x : data) {
        if (x == target) {
            result.push_back(x);
        }
    }

    if (result.empty()) {
        std::cout << ""Target not found in data."" << std::endl;
    } else {
        std::cout << ""Target found in data: "";
        for (int i = 0; i < result.size(); ++i) {
            std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }

    return 0;
}",if (x == target) {
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;
    
    std::vector<int> result = data;
    std::sort(result.begin(), result.end());
    
    auto it = std::find(result.begin(), result.end(), target);
    
    if (it != result.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl; 
    } else {
        std::cout << ""Target not found."" << std::endl;
    }
    
    return 0;
}","std::distance(data.begin(), it)"
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    // Calculate the average, but incorrectly sum only even numbers.
    int sum_even = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0) {
            sum_even += numbers[i];
        }
    }

    double average = static_cast<double>(sum_even) / numbers.size();

    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = static_cast<double>(sum_even) / numbers.size();
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::sort(data.begin(), data.end(), [](int a, int b) { return a > b; }); // Incorrect comparison for ascending sort

    std::cout << ""Sorted data: "";
    for (int x : data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;

    return 0;
}","[](int a, int b) { return a > b; }"
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.45;
    int quantity = 3;

    double total_cost = price * quantity;

    std::cout << std::fixed << std::setprecision(2) << ""Subtotal: "" << total_cost << std::endl;
    double tax_rate = 0.075;
    double tax_amount = total_cost * tax_rate;
    std::cout << std::fixed << std::setprecision(2) << ""Tax: "" << tax_amount << std::endl;

    double final_cost = total_cost + tax_amount;
    std::cout << std::fixed << std::setprecision(2) << ""Final Cost: "" << final_cost << std::endl;
    
    return 0;
}",double tax_rate = 0.075;
"#include <iostream>
#include <random>
#include <chrono>

int main() {
    std::chrono::system_clock::time_point seed_time = std::chrono::system_clock::now();
    std::mt19937 generator(seed_time.time_since_epoch().count());
    std::uniform_int_distribution<int> distribution(1, 100);

    int numbers[10];
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distribution(generator);
    }

    int sum = 0;
    for (int i = 0; i <= 10; ++i) { // Faulty loop: should be i < 10
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= 10; ++i)
"#include <random>
#include <iostream>
#include <vector>

int main() {
    std::random_device rd;  
    std::mt19937 gen(rd()); 
    std::uniform_int_distribution<> distrib(1, 100); 

    std::vector<int> numbers(10);
    for (int i = 0; i < numbers.size(); ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average, but only use the first 5 elements.
    double sum = 0.0;
    for (int i = 0; i < 5; ++i) {
        sum += numbers[i];
    }

    double average = sum / numbers.size();

    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",sum / numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores; 
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    std::cout << ""Total score: "" << total_score / 3 << std::endl; // Integer division intended for average, but accidentally used for total.
    return 0;
}",total_score / 3
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string best_student = """";
    int highest_score = -1;

    for (auto const& [name, score] : scores) {
        if (score > highest_score) {
            highest_score = score;
            best_student = name;
        }
    }

    std::cout << ""Best student: "" << best_student << "" with score: "" << highest_score << std::endl;
    
    scores.erase(""Bob""); // Erase Bob after finding him - should not happen here

    return 0;
}","scores.erase(""Bob"");"
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World! This is a test."";
  std::string substring = text.substr(10, 10); // Intentionally off-by-one error
  std::cout << ""Substring: "" << substring << std::endl;
  return 0;
}","text.substr(10, 10)"
"#include <vector>
#include <numeric>
#include <algorithm>
#include <iostream>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;

  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    double area = M_PI * radius * radius;

    // Incorrectly casting the circumference to an integer before printing.
    std::cout << ""Circumference: "" << static_cast<int>(circumference) << std::endl;
    std::cout << ""Area: "" << area << std::endl;

    return 0;
}",static_cast<int>(circumference)
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1, causing the last element to be omitted

    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}","arr, arr + n - 1"
"#include <vector>
#include <algorithm>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> processed_data;

    for (int i = 0; i < data.size(); ++i) {
        processed_data.push_back(data[i] * 2);
    }

    int sum = std::accumulate(processed_data.begin(), processed_data.end(), 0);
    
    //Incorrectly assigning the sum to the first element instead of printing it
    processed_data[0] = sum;

    std::cout << ""Sum: "" << processed_data[0] << std::endl;
    
    return 0;
}",processed_data[0] = sum;
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> squares(data.size());

  std::transform(data.begin(), data.end(), squares.begin(), [](int x){ return x * x; });

  int sum = 0;
  for (size_t i = 0; i < squares.size() - 1; ++i) {
    sum += squares[i];
  }

  std::cout << ""Sum of squares (excluding last element): "" << sum << std::endl;
  return 0;
}",for (size_t i = 0; i < squares.size() - 1; ++i)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test sentence."";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
  std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
  int target = 7;

  std::vector<int> result;
  std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n) {
    return n < target - 1; // Fault: Incorrect comparison. Should be n < target.
  });

  std::cout << ""Numbers less than "" << target << "": "";
  for (int num : result) {
    std::cout << num << "" "";
  }
  std::cout << std::endl;

  return 0;
}",return n < target - 1;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string with some spaces."";
  std::string trimmed_text = text;
  trimmed_text.erase(0, trimmed_text.find_first_not_of("" ""));
  trimmed_text.erase(trimmed_text.find_last_not_of("" "") + 1);
  std::cout << ""Trimmed text: "" << trimmed_text << std::endl;
  return 0;
}","trimmed_text.erase(0, trimmed_text.find_first_not_of("" ""));"
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string best_player = """";
    int highest_score = -1;

    for (auto const& [player, score] : scores) {
        if (score > highest_score) {
            highest_score = score;
            best_player = player;
        }
    }

    std::cout << ""Best player: "" << best_player << "" with score "" << highest_score << std::endl;

    //Incorrectly removing from map after use.
    scores.erase(""Alice"");

    return 0;
}","scores.erase(""Alice"");"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string str = ""Hello, World!"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    
    if (str == reversed_str) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    
    std::string test_str = ""racecar"";
    std::string reversed_test_str = test_str;
    std::reverse(reversed_test_str.begin(), reversed_test_str.end());
    if (test_str == reversed_test_str) {
        std::cout << ""The string 'racecar' is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string 'racecar' is not a palindrome."" << std::endl;
    }
    
    return 0;
}",if (str == reversed_str)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }

  return 0;
}",if (text == reversed_text)
"#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double value = 123.456789;
    std::string formatted_value = format_number(value);
    std::cout << ""Formatted value: "" << formatted_value << std::endl;

    // Simulate a calculation using the formatted value
    double calculated_value = std::stod(formatted_value) * 2.0;
    std::cout << ""Calculated value: "" << calculated_value << std::endl;

    return 0;
}","std::cout << ""Calculated value: "" << calculated_value << std::endl;"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""Area of circle with radius "" << radius << "": "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of circle with radius "" << radius << "": "" << circumference << std::endl;
    
    double perimeter = radius + radius + radius;
    std::cout << ""Perimeter of circle with radius "" << radius << "": "" << perimeter << std::endl;
    
    return 0;
}",double perimeter = radius + radius + radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Faulty: Sorting only up to n-1

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseWords(std::string s) {
    std::string result = """";
    std::string word = """";
    for (char c : s) {
        if (c == ' ') {
            std::reverse(word.begin(), word.end());
            result += word + "" "";
            word = """";
        } else {
            word += c;
        }
    }
    std::reverse(word.begin(), word.end());
    result += word;
    return result;
}

int main() {
    std::string input = ""the sky is blue"";
    std::string reversed = reverseWords(input);
    std::cout << reversed << std::endl;
    return 0;
}","    std::reverse(word.begin(), word.end());"
"#include <iostream>
#include <algorithm>

int main() {
  int arr[] = {5, 2, 8, 1, 9, 4};
  int n = sizeof(arr) / sizeof(arr[0]);
  
  std::sort(arr, arr + n - 1); // Faulty line: Sorting only up to n-1
  
  std::cout << ""Sorted array: "";
  for (int i = 0; i < n; ++i) {
    std::cout << arr[i] << "" "";
  }
  std::cout << std::endl;
  
  return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());
    
    std::cout << ""Sorted in descending order: "";
    for (size_t i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << (i == numbers.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
    
    std::cout << ""First element: "" << numbers[0] << std::endl;
    std::cout << ""Last element: "" << numbers[numbers.size()-1] << std::endl;
    
    return 0;
}","std::cout << ""Last element: "" << numbers[numbers.size()-1] << std::endl;"
"#include <iostream>
#include <algorithm>

int main() {
  int arr[] = {5, 2, 8, 1, 9, 4};
  int n = sizeof(arr) / sizeof(arr[0]);

  std::sort(arr, arr + n - 1); // Fault: Sorting only up to n-1, leaving the last element unsorted.

  std::cout << ""Sorted array: "";
  for (int i = 0; i < n; ++i) {
    std::cout << arr[i] << "" "";
  }
  std::cout << std::endl;

  return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting only up to n-1, leaving the last element unsorted

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::vector<int> even_numbers;

    for (int num : data) {
        if (num % 2 == 0) {
            even_numbers.push_back(num);
        }
    }

    std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());
    
    std::cout << ""Even numbers in descending order: "";
    for (int i = 0; i < even_numbers.size(); ++i) {
        std::cout << even_numbers[i] << (i == even_numbers.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
    return 0;
}","std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string pattern = ""test"";
    size_t pos = text.find(pattern);

    if (pos != std::string::npos) {
        text.erase(pos, 1); // Intended to remove one 't', but removes 'test'
    }

    std::cout << text << std::endl;
    return 0;
}","text.erase(pos, 1);"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string pattern = ""test"";

    size_t pos = text.find(pattern, 10); // Starting search from position 10
    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a < b; });

    // Find the second largest element
    if (numbers.size() < 2) {
        std::cout << ""Not enough elements to find the second largest."" << std::endl;
        return 1;
    }

    int second_largest = numbers[numbers.size()-2]; // Potential Fault
    
    std::cout << ""Second largest element: "" << second_largest << std::endl;
    return 0;
}",int second_largest = numbers[numbers.size()-2];
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1, potentially losing the last element's true position

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    double new_radius = sqrt(area / M_PI);
    std::cout << ""New Radius: "" << new_radius << std::endl;
    
    if (new_radius > radius) {
        std::cout << ""New radius is larger than original."" << std::endl;
    } else {
        std::cout << ""New radius is smaller or equal to original."" << std::endl;
    }
    
    return 0;
}",if (new_radius > radius)
"#include <iostream>
#include <algorithm>

int main() {
    int numbers[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(numbers) / sizeof(numbers[0]);
    std::sort(numbers, numbers + n - 1); // Fault: Sorting up to n-1 instead of n
    
    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}","std::sort(numbers, numbers + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    int max_val = arr[0];

    for (int i = 1; i <= n; ++i) {
        if (arr[i] > max_val) {
            max_val = arr[i];
        }
    }

    std::cout << ""Maximum value: "" << max_val << std::endl;
    return 0;
}",i <= n
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    // Sort the array in ascending order
    std::sort(arr, arr + n);

    // Print the sorted array
    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; i++) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    // Find the element closest to a target value
    int target = 6;
    int closest = arr[0];
    int min_diff = abs(arr[0] - target);

    for (int i = 1; i < n; i++) {
       if (abs(arr[i] - target) < min_diff) {
           min_diff = abs(arr[i] - target);
           closest = arr[i];
       }
    }

    std::cout << ""Closest element to "" << target << "" is: "" << closest << std::endl;

    //Incorrectly calculate the sum of elements.
    int sum = 0;
    for (int i = 0; i < n-1; ++i) {
        sum += arr[i];
    }
    std::cout << ""Sum of elements: "" << sum << std::endl;

    return 0;
}",for (int i = 0; i < n-1; ++i)
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting only up to n-1

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    int target = 7;

    std::sort(arr, arr + n);

    int count = 0;
    for (int i = 0; i < n; ++i) {
        if (arr[i] == target) {
            count++;
        }
    }

    std::cout << ""The number of times "" << target << "" appears in the sorted array: "" << count << std::endl;
    return 0;
}",if (arr[i] == target)
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a < b; });

    int sum = 0;
    for (int i = 1; i <= numbers.size(); ++i) {
        sum += numbers[i - 1];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 1; i <= numbers.size(); ++i) {
        sum += numbers[i - 1];
    }"
"#include <iostream>
#include <algorithm>

int main() {
  int arr[] = {5, 2, 8, 1, 9, 4};
  int n = sizeof(arr) / sizeof(arr[0]);
  int expected_sum = 0;
  for (int i = 0; i < n; ++i) {
    expected_sum += arr[i];
  }
  int actual_sum = 0;
  std::sort(arr, arr + n);
  for (int i = 0; i < n - 1; ++i) {
    actual_sum += arr[i];
  }
  std::cout << ""Expected sum: "" << expected_sum << std::endl;
  std::cout << ""Actual sum: "" << actual_sum << std::endl;
  if (expected_sum == actual_sum) {
    std::cout << ""The sums match!"" << std::endl;
  } else {
    std::cout << ""The sums do not match!"" << std::endl;
  }
  return 0;
}",for (int i = 0; i < n - 1; ++i)
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test sentence."";
  std::string vowels = ""aeiouAEIOU"";
  int vowel_count = 0;

  for (char c : text) {
    if (vowels.find(c) != std::string::npos)
    {
      vowel_count++;
    }
  }
  
  if (vowel_count == 0) {
    std::cout << ""No vowels found."" << std::endl;
  } else {
    std::cout << ""Number of vowels: "" << vowel_count - 1 << std::endl; // Fault: Subtracting 1
  }

  return 0;
}","std::cout << ""Number of vowels: "" << vowel_count - 1 << std::endl;"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> even;
    
    for (int x : data) {
        if (x % 2 == 1) {
            even.push_back(x);
        }
    }
    
    std::sort(even.begin(), even.end(), std::greater<int>());
    
    for (int x : even) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;
    return 0;
}",if (x % 2 == 1)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::vector<int> sorted_data = data;
    std::sort(sorted_data.begin(), sorted_data.begin() + sorted_data.size() - 1); // Faulty line
    for (int value : sorted_data) {
        std::cout << value << "" "";
    }
    std::cout << std::endl;
    return 0;
}",sorted_data.begin() + sorted_data.size() - 1
"#include <iostream>
#include <string>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""cherry""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit]; //Potential issue: default construction if key doesn't exist
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

    return 0;
}",int count = counts[fruit];
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    double area = M_PI * radius * radius;

    std::cout << ""Radius: "" << radius << std::endl;
    std::cout << ""Circumference: "" << circumference << std::endl;
    std::cout << ""Area: "" << area << std::endl;

    double expected_area = 78.5398; // Approximate value for radius 5
    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Warning: Area calculation may be inaccurate.""
    }

    return 0;
}",double expected_area = 78.5398; // Approximate value for radius 5
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    int expected_sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    if (sum != expected_sum) {
        std::cout << ""Sum is incorrect!\n"";
    } else {
        std::cout << ""Sum is correct!\n"";
    }
    std::cout << ""Calculated sum: "" << sum << ""\n"";
    std::cout << ""Expected sum: "" << expected_sum << ""\n"";
    return 0;
}","int expected_sum = std::accumulate(numbers.begin(), numbers.end(), 0);"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation incorrect: "" << area << std::endl;
    } else {
        std::cout << ""Area calculation correct: "" << area << std::endl;
    }

    //Intentional error:  Calculating circumference incorrectly.
    double circumference = 2 * M_PI * radius;
    circumference = circumference / 2.0; //Incorrect division
    
    std::cout << ""Calculated circumference: "" << circumference << std::endl;

    return 0;
}",circumference = circumference / 2.0;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.53981633974483;

    if (fabs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!\n"";
    } else {
        std::cout << ""Area calculation is correct!\n"";
    }

    // Calculate circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    return 0;
}",double expected_area = 78.53981633974483;
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""cherry""] = 7;

    std::string fruit = ""grape"";
    if (counts.find(fruit) == counts.end()) {
        std::cout << ""Fruit not found. Setting count to 0."" << std::endl;
    }

    std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl; // Should print 0 but will print garbage or crash
    
    return 0;
}","std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> squares(data.size());
  std::transform(data.begin(), data.end(), squares.begin(), [](int x){ return x * x; });
  
  int sum = 0;
  for (size_t i = 0; i < squares.size(); ++i) {
      sum += squares[i];
  }

  // Incorrectly calculates the average by dividing by data.size() instead of squares.size()
  double average = static_cast<double>(sum) / data.size();

  std::cout << ""Average of squares: "" << average << std::endl;
  return 0;
}",double average = static_cast<double>(sum) / data.size();
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> words = {""apple"", ""banana"", ""cherry"", ""date""};
    std::string target = ""berry"";

    auto it = std::find(words.begin(), words.end(), target);
    if (it != words.end()) {
        std::cout << ""Found: "" << *it << std::endl;
    } else {
        std::cout << ""Not found"" << std::endl;
    }
    
    std::string modifiedTarget = target.substr(0, 3); 
    it = std::find(words.begin(), words.end(), modifiedTarget); 
    if (it != words.end()) {
        std::cout << ""Found modified: "" << *it << std::endl;
    } else {
        std::cout << ""Modified not found"" << std::endl;
    }

    return 0;
}","std::string modifiedTarget = target.substr(0, 3);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n < target; });

    int sum = 0;
    for (size_t i = 1; i < result.size(); ++i) { // Faulty index starts at 1 instead of 0.
        sum += result[i];
    }

    std::cout << ""Sum of numbers less than target: "" << sum << std::endl;
    return 0;
}",for (size_t i = 1; i < result.size(); ++i)
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Accessing a non-existent key
    
    std::cout << ""David's age is: "" << age << std::endl;
    return 0;
}",int age = ages[name];
"#include <random>
#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average, but incorrectly sum only even numbers
    int sum_even = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0) {
            sum_even += numbers[i];
        }
    }

    double average = static_cast<double>(sum_even) / 10.0; // Incorrect average calculation.
    std::cout << ""Average of even numbers: "" << average << std::endl;
    return 0;
}",double average = static_cast<double>(sum_even) / 10.0;
"#include <iostream>
#include <numeric>

int main() {
    double numbers[] = {1.0, 2.0, 3.0, 4.0, 5.0};
    int size = sizeof(numbers) / sizeof(numbers[0]);

    double sum = 0.0;
    for (int i = 0; i <= size; ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= size; ++i)
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the product of the numbers, but using accumulate with a faulty initial value.
    int product = std::accumulate(numbers.begin(), numbers.end(), 1.0); 
    
    std::cout << ""Product: "" << product << std::endl;
    return 0;
}",1.0
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }
    
    //Problem: Area calculation is incorrect. It should be M_PI * pow(radius, 2);
    
    return 0;
}",double area = M_PI * radius * radius;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double perimeter = 2 * M_PI * radius;

    std::cout << ""Area: "" << area << std::endl;
    std::cout << ""Perimeter: "" << perimeter << std::endl;

    // Calculate the diameter incorrectly
    double diameter = radius / 2.0;
    std::cout << ""Diameter: "" << diameter << std::endl;
    
    return 0;
}",double diameter = radius / 2.0;
"#include <iostream>
#include <map>
#include <string>

int main() {
  std::map<std::string, int> scores;
  scores[""Alice""] = 90;
  scores[""Bob""] = 80;
  scores[""Charlie""] = 70;

  std::string best_player = ""David""; // Intentionally incorrect
  
  if (scores.count(best_player) > 0) {
    std::cout << ""Best player score: "" << scores[best_player] << std::endl;
  } else {
    std::cout << ""No score found for "" << best_player << std::endl;
  }

  return 0;
}","std::string best_player = ""David""; // Intentionally incorrect"
"#include <vector>
#include <numeric>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of squares of only even numbers in the vector.
    int sumOfSquares = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 != 0) { // Fault: Should be numbers[i] % 2 == 0
            sumOfSquares += numbers[i] * numbers[i];
        }
    }
    
    std::cout << ""Sum of squares of even numbers: "" << sumOfSquares << std::endl;
    return 0;
}",if (numbers[i] % 2 != 0)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string input = ""Hello, World!"";
    std::string reversed_input = input;
    std::reverse(reversed_input.begin(), reversed_input.end());
    if (input == reversed_input) {
        std::cout << ""The input is a palindrome."" << std::endl;
    } else {
        std::cout << ""The input is not a palindrome."" << std::endl;
    }
    return 0;
}",if (input == reversed_input)
"#include <iostream>
#include <algorithm>

int main() {
  int arr[] = {5, 2, 8, 1, 9};
  int n = sizeof(arr) / sizeof(arr[0]);

  std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1 instead of n

  std::cout << ""Sorted array: "";
  for (int i = 0; i < n; ++i) {
    std::cout << arr[i] << "" "";
  }
  std::cout << std::endl;

  return 0;
}","std::sort(arr, arr + n - 1);"
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string."";
  std::string pattern = ""test"";
  size_t pos = text.find(pattern);

  if (pos != std::string::npos) {
    std::cout << ""Pattern found at position: "" << pos << std::endl;
  } else {
    std::cout << ""Pattern not found."" << std::endl;
  }

  // Faulty logic: Should be text.substr(pos) to extract the substring after the pattern, but extracts the entire string.
  std::string after_pattern = text.substr(0); 
  std::cout << ""Substring after pattern: "" << after_pattern << std::endl;
  return 0;
}",std::string after_pattern = text.substr(0);
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    // Find the maximum element
    int max_val = arr[0];
    for (int i = 1; i < n - 1; ++i) {
        if (arr[i] > max_val) {
            max_val = arr[i];
        }
    }

    std::cout << ""Maximum element: "" << max_val << std::endl;
    return 0;
}",for (int i = 1; i < n - 1; ++i)
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4, 7, 3, 6, 0};
    int n = sizeof(arr) / sizeof(arr[0]);
    int k = 3; // Find the kth smallest element

    std::sort(arr, arr + n); // Sort the array

    if (k > 0 && k <= n) {
        std::cout << ""The "" << k << ""th smallest element is: "" << arr[k - 1] << std::endl;
    } else {
        std::cout << ""Invalid value of k. It should be between 1 and "" << n << std::endl;
    }
    
    return 0;
}",if (k > 0 && k <= n) {
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 10;

    // Find the sum of all numbers that are greater than or equal to the target.
    int sum = 0;
    for (int number : numbers) {
        if (number < target) {
            sum += number;
        }
    }

    std::cout << ""Sum of numbers less than target: "" << sum << std::endl;
    return 0;
}",if (number < target) {
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::sort(data.begin(), data.end(), std::greater<int>());
    std::cout << ""Sorted in descending order: "";
    for (int i = 0; i < data.size(); ++i) {
        std::cout << data[i] << (i == data.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
    std::vector<int> even_numbers;
    for (int num : data) {
        if (num % 2 == 1) {
            even_numbers.push_back(num);
        }
    }

    std::cout << ""Even numbers: "";
    for (int num : even_numbers) {
        std::cout << num << (num == even_numbers.back() ? """" : "", "");
    }
    std::cout << std::endl;
    return 0;
}",if (num % 2 == 1)
"#include <map>
#include <iostream>
#include <string>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;

    std::string name = ""Charlie"";
    int age = 40;

    ages[name] = age - 5; // Fault: Incorrect age assigned.
    
    std::cout << ""Alice's age: "" << ages[""Alice""] << std::endl;
    std::cout << ""Bob's age: "" << ages[""Bob""] << std::endl;
    std::cout << ""Charlie's age: "" << ages[name] << std::endl;

    return 0;
}",ages[name] = age - 5;
"#include <iostream>
#include <random>
#include <ctime>

int main() {
    std::srand(std::time(nullptr));
    int array_size = 10;
    int arr[array_size];

    for (int i = 0; i < array_size; ++i) {
        arr[i] = std::rand() % 100;
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    int sum = 0;
    for (int i = 0; i <= array_size; ++i) { // Fault: i <= array_size
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= array_size; ++i)
"#include <random>
#include <chrono>
#include <vector>
#include <numeric>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Faulty loop condition
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string."";
  std::string pattern = ""test"";

  size_t pos = text.find(pattern, 10); // Starts searching from index 10

  if (pos != std::string::npos) {
    std::cout << ""Pattern found at position: "" << pos << std::endl;
  } else {
    std::cout << ""Pattern not found."" << std::endl;
  }

  return 0;
}","text.find(pattern, 10)"
"#include <iostream>
#include <cmath>

int main() {
    double x = 2.0;
    double y = 3.0;
    double result = std::pow(x, y);
    
    if (result > 10) {
        std::cout << ""Result is greater than 10: "" << result << std::endl;
    } else {
        std::cout << ""Result is not greater than 10: "" << result << std::endl;
    }
    
    return 0;
}","else {
        std::cout << ""Result is not greater than 10: "" << result << std::endl;
    }"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> even_numbers;

  for (int x : data) {
    if (x % 2 == 0) {
      even_numbers.push_back(x);
    }
  }

  // Incorrectly calculate the product of the even numbers.  Should use std::accumulate
  int product = 0; // Fault
  for (int x : even_numbers) {
    product *= x;
  }

  std::cout << ""Product of even numbers: "" << product << std::endl;

  return 0;
}",int product = 0;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <numeric>
#include <vector>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <numeric>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the average of the numbers
    double sum = 0.0;
    for (int number : numbers) {
        sum += number;
    }
    double average = sum / numbers.size();
    
    // Find the largest number that is less than the average
    int largest_less_than_average = numbers[0];
    for (int number : numbers) {
        if (number < average && number > largest_less_than_average) {
            largest_less_than_average = number;
        }
    }
    
    std::cout << ""Largest number less than average: "" << largest_less_than_average << std::endl;
    
    return 0;
}",if (number < average && number > largest_less_than_average)
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 12;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return n > target;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!\n"";
    } else {
        std::cout << ""Area calculation is correct!\n"";
    }

    // Simulate a scenario where user input affects radius 
    double user_input_scale = 0.9;  // Intended to scale the radius
    radius *= user_input_scale;
    area = M_PI * radius * radius; 

    if (std::abs(area - expected_area) > 0.0001) {
       std::cout << ""Area calculation is incorrect after user input!\n"";
    } else {
        std::cout << ""Area calculation is correct after user input!\n"";
    }

    return 0;
}",radius *= user_input_scale;
"#include <iostream>
#include <cmath>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area: "" << area << std::endl;

  double circumference = 2 * M_PI * radius;
  std::cout << ""Circumference: "" << circumference << std::endl;

  double expected_circumference = 31.41592653589793;
  if (std::abs(circumference - expected_circumference) > 0.0001) {
    std::cout << ""Circumference calculation is incorrect!"" << std::endl;
  } else {
    std::cout << ""Circumference calculation is correct!"" << std::endl;
  }

  return 0;
}",if (std::abs(circumference - expected_circumference) > 0.0001)
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
    }

    return 0;
}",if (ages.find(name) != ages.end())
"#include <vector>
#include <cmath>

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    double sum = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += sqrt(data[i]);
    }
    double average = sum / data.size();
    std::cout << ""Average of square roots: "" << average << std::endl;
    return 0;
}",sqrt(data[i])
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> transformed_data;

    for (int i = 0; i < data.size(); ++i) {
        transformed_data.push_back(data[i] * 2);
    }

    // Incorrectly calculating the sum of squares
    int sum_of_squares = 0;
    for (int i = 0; i < transformed_data.size(); ++i) {
        sum_of_squares += transformed_data[i]; // Should be transformed_data[i] * transformed_data[i]
    }

    std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
    return 0;
}",sum_of_squares += transformed_data[i];
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();
    std::string reversed_text = """";

    for (int i = len - 1; i >= 0; --i) {
        reversed_text += text[i];
    }

    if (reversed_text == ""dlrow ,olleH"") {
        std::cout << ""Reversed correctly!"" << std::endl;
    } else {
        std::cout << ""Reversal failed."" << std::endl;
    }

    return 0;
}","if (reversed_text == ""dlrow ,olleH"")"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());

    if (str == reversed_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }

    std::string str2 = ""level"";
    std::string reversed_str2 = str2;
    std::reverse(reversed_str2.begin(), reversed_str2.end());

    if (str2 == reversed_str2) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }

    std::string str3 = ""rotor"";
    std::string reversed_str3 = str3;
    std::reverse(reversed_str3.begin(), reversed_str3.end());

    if (str3 == reversed_str3) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }

    std::string str4 = ""hello world"";
    std::string reversed_str4 = str4;
    std::reverse(reversed_str4.begin(), reversed_str4.end());

    if (str4 == reversed_str4) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }

    return 0;
}",std::string reversed_str4 = str4;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    int sum = 0;

    for (int i = 0; i < n; ++i) {
        sum += arr[i];
    }

    // Incorrectly calculates the average by dividing by n - 1 instead of n
    double average = static_cast<double>(sum) / (n - 1);

    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = static_cast<double>(sum) / (n - 1);
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; });

    std::cout << ""Sorted in descending order: "";
    for (int i = 0; i <= numbers.size(); ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",i <= numbers.size()
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());
    std::cout << ""Sorted in descending order: "";
    for (size_t i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << (i == numbers.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
    return 0;
}",std::greater<int>()
"#include <iostream>
#include <unordered_map>
#include <string>

int main() {
  std::unordered_map<std::string, int> ages;
  ages[""Alice""] = 30;
  ages[""Bob""] = 25;
  ages[""Charlie""] = 40;

  std::string name = ""David"";
  int age = ages[name]; // Potential default construction issue
  std::cout << ""David's age is: "" << age << std::endl;

  return 0;
}",int age = ages[name];
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct!"" << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "" is not found."" << std::endl;
        std::cout << ""Default age: "" << 0 << std::endl;
    }

    return 0;
}","std::cout << ""Default age: "" << 0 << std::endl;"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    double expected_area = M_PI * radius * radius;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculated incorrectly!"" << std::endl;
    } else {
        std::cout << ""Area calculated correctly: "" << area << std::endl;
    }

    return 0;
}",double area = 3.14 * radius * radius;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""The area of the circle is: "" << area << std::endl;
    
    //Calculate circumference, subtly incorrect
    double circumference = 2 * M_PI * radius * 0.9;
    std::cout << ""The circumference of the circle is: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius * 0.9;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
  
  std::vector<int> squares(numbers.size());
  std::transform(numbers.begin(), numbers.end(), squares.begin(), [](int x){ return x * x; });
  
  int expected_sum = 55; // Correct sum of squares: 1 + 4 + 9 + 16 + 25 = 55
  int calculated_sum = std::accumulate(squares.begin(), squares.end(), 0);
  
  if (calculated_sum != expected_sum) {
      std::cout << ""Error: Sum of squares is incorrect!\n"";
  } else {
      std::cout << ""Sum of squares is correct!\n"";
  }
  
  return 0;
}",int expected_sum = 55; // Correct sum of squares: 1 + 4 + 9 + 16 + 25 = 55
"#include <iostream>
#include <cmath>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (std::abs(area - expected_area) > 0.0001) {
    std::cout << ""Area calculation is incorrect!"" << std::endl;
  } else {
    std::cout << ""Area calculation is correct!"" << std::endl;
  }

  // Calculate circumference
  double circumference = 2 * M_PI * radius;

  // Subtly incorrect comparison with expected circumference (off by one)
  double expected_circumference = 31.4159265359;
  if (circumference == expected_circumference) {
      std::cout << ""Circumference is also correct."" << std::endl;
  } else {
      std::cout << ""Circumference calculation is wrong."" << std::endl;
  }

  return 0;
}",if (circumference == expected_circumference)
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = """";

    for (int i = 0; i <= text.length(); ++i) {
        reversed_text += text[text.length() - i];
    }

    std::cout << ""Original: "" << text << std::endl;
    std::cout << ""Reversed: "" << reversed_text << std::endl;
    return 0;
}",i <= text.length()
"#include <random>
#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::random_device rd;  
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    std::sort(numbers.begin(), numbers.end(), [](int a, int b) {
        return a < b; // Intended to sort ascending
    });

    // Find the index of the smallest number (should be 0 after sorting)
    auto it = std::find(numbers.begin(), numbers.end(), 1);
    if (it != numbers.end()) {
        size_t index = std::distance(numbers.begin(), it);
        std::cout << ""Smallest number index: "" << index << std::endl;
    } else {
        std::cout << ""Smallest number not found."" << std::endl;
    }

    return 0;
}",return a < b;
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie""};
    std::string search_name = ""David"";

    auto it = std::find(names.begin(), names.end(), search_name);

    if (it != names.end()) {
        std::cout << ""Name found!"" << std::endl;
    } else {
        std::cout << ""Name not found."" << std::endl;
    }

    return 0;
}","std::string search_name = ""David"";"
"#include <iostream>
#include <algorithm>

int main() {
  int arr[] = {5, 2, 8, 1, 9, 4};
  int n = sizeof(arr) / sizeof(arr[0]);

  int max_val = arr[0];
  for (int i = 1; i <= n; ++i) {  //Fault: Should be i < n
    if (arr[i] > max_val) {
      max_val = arr[i];
    }
  }

  std::cout << ""Maximum value: "" << max_val << std::endl;
  return 0;
}",i <= n
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> sorted_data = data;
    std::sort(sorted_data.begin(), sorted_data.begin() + 4); //sorts only first 4 elements

    for (int x : sorted_data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::sort(sorted_data.begin(), sorted_data.begin() + 4);"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> doubled_data(data.size());

    // Incorrect assumption: doubling each element directly assigns it
    for (size_t i = 0; i < data.size(); ++i) {
        doubled_data[i] = data[i] * 2;
    }

    // Calculate the sum of the 'doubled_data' using std::accumulate
    int sum = std::accumulate(doubled_data.begin(), doubled_data.end(), 0);

    // Print the sum
    std::cout << ""Sum of doubled elements: "" << sum << std::endl;
    
    return 0;
}",doubled_data[i] = data[i] * 2;
"#include <iostream>
#include <cmath>

int main() {
  double x = 2.0;
  double y = 0.5;
  double result = std::pow(x, y);
  std::cout << ""Result: "" << result << std::endl;
  if (result > 1.0) {
    std::cout << ""Result is greater than 1."" << std::endl;
  } else {
    std::cout << ""Result is not greater than 1."" << std::endl;
  }
  return 0;
}","else {
    std::cout << ""Result is not greater than 1."" << std::endl;
  }"
"#include <iostream>
#include <cmath>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;
  
  if (std::abs(area - expected_area) > 0.0001) {
    std::cout << ""Area calculation is incorrect!"" << std::endl;
    std::cout << ""Calculated area: "" << area << std::endl;
    std::cout << ""Expected area: "" << expected_area << std::endl;
  } else {
    std::cout << ""Area calculation is correct."" << std::endl;
    std::cout << ""Area: "" << area << std::endl;
  }
  
  return 0;
}",double area = M_PI * radius * radius;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> processed_data;

    for (int i = 0; i < data.size(); ++i) {
        processed_data.push_back(data[i] * 2);
    }

    // Incorrectly calculate the sum of all elements.
    int sum = std::accumulate(processed_data.begin(), processed_data.end(), 0.0);

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <iostream>
#include <cmath>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area: "" << area << std::endl;

  double circumference = 2 * M_PI * radius;
  std::cout << ""Circumference: "" << circumference << std::endl;

  double calculated_radius = circumference / (2 * M_PI);
  std::cout << ""Calculated Radius: "" << calculated_radius << std::endl;

  if (abs(radius - calculated_radius) > 0.0001) {
     std::cout << ""Error: Radius mismatch!"" << std::endl;
  }

  return 0;
}",  double calculated_radius = circumference / (2 * M_PI);
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculated incorrectly: "" << area << std::endl;
    } else {
        std::cout << ""Area is correct: "" << area << std::endl;
    }

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    return 0;
}",2 * M_PI * radius
"#include <iostream>
#include <string>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = ""40""; // Fault: String key assigned to integer value.

    std::cout << ""Alice's age: "" << ages[""Alice""] << std::endl;
    std::cout << ""Bob's age: "" << ages[""Bob""] << std::endl;
    std::cout << ""Charlie's age: "" << ages[""Charlie""] << std::endl;

    return 0;
}","ages[""Charlie""] = ""40"";"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());
  if (text == reversed_text)
    std::cout << ""Palindrome!"" << std::endl;
  else
    std::cout << ""Not a palindrome."" << std::endl;
  return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <algorithm>

int main() {
    int numbers[] = {5, 2, 8, 1, 9, 4};
    int size = sizeof(numbers) / sizeof(numbers[0]);
    
    int max_val = numbers[0];
    for (int i = 1; i <= size; ++i) { // Fault: Should be i < size
        if (numbers[i] > max_val) {
            max_val = numbers[i];
        }
    }
    
    std::cout << ""The maximum value is: "" << max_val << std::endl;
    return 0;
}",i <= size
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double perimeter = 2 * M_PI * radius;
  
  std::cout << ""Area: "" << area << std::endl;
  std::cout << ""Perimeter: "" << perimeter << std::endl;
  
  // Calculate the circumference incorrectly.
  double incorrect_circumference = M_PI + 2 * radius; // Intent was 2 * M_PI * radius
  std::cout << ""Incorrect Circumference: "" << incorrect_circumference << std::endl;
  
  return 0;
}",double incorrect_circumference = M_PI + 2 * radius;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: sorts only up to n-1

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a < b; });
    
    int sum = 0;
    for (size_t i = 0; i <= numbers.size(); ++i) { // Fault: Loop goes one element too far
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    // Sort the array in descending order
    std::sort(arr, arr + n, [](int a, int b) { return a < b; }); // Incorrect comparison

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}",return a < b;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    // Sort the array in ascending order (incorrect sort)
    std::sort(arr, arr + n -1); 

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n -1);"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    // Calculate the sum of even numbers.
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 1) {  // Fault: Checking for odd numbers instead of even
            sum += numbers[i];
        }
    }

    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}",if (numbers[i] % 2 == 1)
"#include <iostream>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> w = z * z; // Intended to be z + z
    std::cout << ""z = "" << z << std::endl;
    std::cout << ""w = "" << w << std::endl;
    return 0;
}",std::complex<double> w = z * z;
"#include <iostream>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> result = z * z;
    
    std::cout << ""z = "" << z << std::endl;
    std::cout << ""z*z = "" << result << std::endl;
    
    if (result.real() == 2.0 && result.imag() == 0.0) {
        std::cout << ""The result is 2.0 + 0.0i"" << std::endl;
    } else {
        std::cout << ""The result is not 2.0 + 0.0i"" << std::endl;
    }
    
    return 0;
}",if (result.real() == 2.0 && result.imag() == 0.0)
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> values = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= values.size(); ++i) {
    sum += values[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}","for (int i = 0; i <= values.size(); ++i) {
"
"#include <string>
#include <algorithm>

std::string reverseWords(std::string s) {
    std::string result = """";
    std::string word = """";
    for (char c : s) {
        if (c == ' ') {
            std::reverse(word.begin(), word.end());
            result += word + "" "";
            word = """";
        } else {
            word += c;
        }
    }
    std::reverse(word.begin(), word.end());
    result += word;
    return result;
}

int main() {
    std::string input = ""the sky is blue"";
    std::string reversed = reverseWords(input);
    std::cout << reversed << std::endl;
    return 0;
}","    std::reverse(word.begin(), word.end());"
"#include <map>
#include <iostream>

int main() {
  std::map<std::string, int> ages; 
  ages[""Alice""] = 30; 
  ages[""Bob""] = 25; 
  ages[""Charlie""] = 40;

  std::string name = ""David"";
  int age = ages[name]; // Should use ages.at(name) to handle missing keys gracefully.
  std::cout << ""David's age is: "" << age << std::endl;
  return 0;
}",int age = ages[name];
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    // Incorrect rounding - truncates instead of rounds
    int roundedArea = (int)area;
    
    std::cout << ""Area: "" << area << std::endl;
    std::cout << ""Rounded Area: "" << roundedArea << std::endl;
    
    return 0;
}",(int)area
"#include <iostream>
#include <string>
#include <vector>

std::string format_name(const std::string& name) {
    if (name.empty()) {
        return ""Unknown"";
    }
    std::string formatted_name = name;
    formatted_name[0] = std::toupper(formatted_name[0]);
    return formatted_name;
}

int main() {
    std::vector<std::string> names = {""alice"", ""bob"", ""charlie""};
    for (const std::string& name : names) {
        std::cout << format_name(name) << std::endl;
    }
    std::string empty_name;
    std::cout << format_name(empty_name) << std::endl;
    return 0;
}",formatted_name[0] = std::toupper(formatted_name[0]);
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    double area = 3.14159 * radius * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    std::cout << ""Area: "" << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    for (int num : numbers) {
        if (num % 2 == 0) {
            even_numbers.push_back(num);
        }
    }

    // Calculate the sum of even numbers using std::accumulate
    int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0.0);
    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}",0.0
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = 3.14 * radius * radius;
  double expected_area = M_PI * radius * radius;

  if (std::abs(area - expected_area) > 0.001) {
    std::cout << ""Area calculation is incorrect!"" << std::endl;
  } else {
    std::cout << ""Area calculation is correct."" << std::endl;
  }

  return 0;
}",double area = 3.14 * radius * radius;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorts only up to n-1, leaving the last element unsorted

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::vector<int> even_numbers;

    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0)
            even_numbers.push_back(numbers[i]);
    }

    // Incorrectly sorts in descending order instead of ascending
    std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());

    std::cout << ""Even numbers in descending order: "";
    for (int num : even_numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());"
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> result(data.size());

  std::transform(data.begin(), data.end(), result.begin(), [](int x) { return x * x; });

  // Calculate the sum of squares, but use the wrong size for the accumulation
  int sum = std::accumulate(result.begin(), result.begin() + data.size() - 1, 0);

  std::cout << ""Sum of squares: "" << sum << std::endl;
  return 0;
}",result.begin() + data.size() - 1
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Eve""};
    std::sort(names.begin(), names.end(), [](const std::string& a, const std::string& b) {
        return a.length() < b.length(); // Incorrect comparison: sorts by length, not alphabetically
    });

    for (const std::string& name : names) {
        std::cout << name << std::endl;
    }
    return 0;
}",return a.length() < b.length();
"#include <iostream>
#include <iomanip>
#include <complex>

int main() {
  std::complex<double> z(1.0, 1.0);
  double angle = std::arg(z);
  std::cout << std::fixed << std::setprecision(10) << angle << std::endl;
  
  std::complex<double> w(0.0, -1.0); // i
  double angle2 = std::arg(w);
  std::cout << std::fixed << std::setprecision(10) << angle2 << std::endl;

  return 0;
}",double angle2 = std::arg(w);
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 10;

    // Find the index of the first element greater than the target
    auto it = std::upper_bound(numbers.begin(), numbers.end(), target - 1); // Faulty line

    if (it != numbers.end()) {
        std::cout << ""The first element greater than target - 1 is: "" << *it << std::endl;
    } else {
        std::cout << ""No element greater than target - 1 found."" << std::endl;
    }

    return 0;
}","auto it = std::upper_bound(numbers.begin(), numbers.end(), target - 1);"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string pattern = ""test"";

    size_t pos = text.find(pattern, 10); // Starts search at index 10

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> squares(data.size());
    std::transform(data.begin(), data.end(), squares.begin(), [](int x){ return x * x; });

    long long sum = 0;
    for (size_t i = 0; i < squares.size(); ++i) {
        sum += squares[i];
    }

    std::cout << ""Sum of squares: "" << sum << std::endl;
    return 0;
}",long long sum = 0;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation correct!"" << std::endl;
    }

    //Incorrectly calculating circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area > expected_area + 0.1) {
        std::cout << ""Area is significantly larger than expected."" << std::endl;
    } else if (area < expected_area - 0.1) {
        std::cout << ""Area is significantly smaller than expected."" << std::endl;
    } else {
        std::cout << ""Area is within tolerance."" << std::endl;
    }

    return 0;
}",if (area > expected_area + 0.1) {
"#include <cmath>
#include <vector>

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    double sum = 0.0;
    for (int i = 0; i < data.size(); ++i) {
        sum += std::sqrt(data[i]);
    }
    double mean = sum / data.size();
    double variance = 0.0;
    for (int i = 0; i < data.size(); ++i) {
        variance += std::pow(data[i] - mean, 2);
    }
    double stddev = std::sqrt(variance / (data.size() - 1)); // Fault: Using (data.size() - 1) instead of data.size() for unbiased sample variance

    std::cout << ""Standard Deviation: "" << stddev << std::endl;
    return 0;
}",double stddev = std::sqrt(variance / (data.size() - 1));
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> even_data;

    for (int x : data) {
        if (x % 2 == 0) {
            even_data.push_back(x);
        }
    }

    int sum = std::accumulate(even_data.begin(), even_data.end(), 0);

    // Incorrectly print the sum of all elements, not just even ones.
    std::cout << ""Sum of even numbers: "" << sum << std::endl;

    return 0;
}","std::cout << ""Sum of even numbers: "" << sum << std::endl;"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  
  // Calculate the product of all even numbers in the vector
  int product = 1;
  for (int num : numbers) {
    if (num % 2 == 0) {
      product *= num;
    }
  }
  
  //The problem is that the 'product' is initialized to 1 which makes the output incorrect.

  std::cout << ""Product of even numbers: "" << product << std::endl;
  return 0;
}",int product = 1;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, world!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }
  return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World! This is a test."";
    std::string wordToFind = ""test"";

    size_t pos = text.find(wordToFind, 15); // Intended to find after index 15

    if (pos != std::string::npos) {
        std::cout << ""Found: "" << pos << std::endl;
    } else {
        std::cout << ""Not found"" << std::endl;
    }

    return 0;
}","text.find(wordToFind, 15)"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World! This is a test."";
    std::string search_string = ""World!"";

    size_t pos = text.find(search_string, 0);
    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }

    std::string modified_text = text;
    modified_text.erase(pos, 100); //Potential crash if the position is near the end
    std::cout << ""Modified text: "" << modified_text << std::endl;

    return 0;
}","modified_text.erase(pos, 100);"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string with some repeated words, like test and string."";
    std::string word_to_count = ""test"";
    size_t count = 0;
    size_t pos = text.find(word_to_count, 0);
    while (pos != std::string::npos) {
        count++;
        pos = text.find(word_to_count, pos + 1);
    }
    std::cout << ""The word '"" << word_to_count << ""' appears "" << count << "" times."" << std::endl;
    return 0;
}","pos = text.find(word_to_count, pos + 1);"
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""12.34abc56"";
    std::stringstream ss(input);
    double num;
    char comma;

    if (ss >> num >> comma) {
        std::cout << ""Extracted number: "" << num << std::endl;
        std::cout << ""Extracted character: "" << comma << std::endl;
    } else {
        std::cout << ""Conversion failed!"" << std::endl;
    }

    return 0;
}",if (ss >> num >> comma)
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <random> 
#include <iostream>
#include <vector>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: i <= numbers.size()
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""The area of the circle is: "" << area << std::endl;

  double circumference = 2 * M_PI * radius;
  std::cout << ""The circumference of the circle is: "" << circumference << std::endl;

  // Incorrect calculation of diameter
  double diameter = radius / 2.0;
  std::cout << ""The diameter of the circle is: "" << diameter << std::endl;
  return 0;
}",double diameter = radius / 2.0;
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // Find the index of the largest element
    auto it = std::max_element(numbers.begin(), numbers.end());
    int index = std::distance(numbers.begin(), it) - 1; // Potential fault: Subtracting 1 is incorrect
    
    std::cout << ""Index of the largest element: "" << index << std::endl;
    std::cout << ""Largest element: "" << numbers[index] << std::endl;
    
    return 0;
}","int index = std::distance(numbers.begin(), it) - 1;"
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> squares(data.size());

    std::transform(data.begin(), data.end(), squares.begin(), [](int x){ return x * x; });

    // Calculate the sum of squares.  Potential overflow.
    long long sum = std::accumulate(squares.begin(), squares.end(), 0LL);

    // Print the sum of squares.
    std::cout << sum << std::endl;

    return 0;
}","long long sum = std::accumulate(squares.begin(), squares.end(), 0LL);"
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.456789;
    std::cout << ""Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    double taxRate = 0.085;
    double taxAmount = price * taxRate;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    double totalCost = price + taxAmount;
    std::cout << ""Total: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;
    
    // Incorrectly rounding the total cost to the nearest integer
    int roundedTotal = (int)totalCost;
    std::cout << ""Rounded Total (incorrect): "" << roundedTotal << std::endl;
    
    return 0;
}",int roundedTotal = (int)totalCost;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string best_player;
    int highest_score = -1;

    for (const auto& pair : scores) {
        if (pair.second > highest_score) {
            highest_score = pair.second;
            best_player = pair.first;
        }
    }
    
    std::cout << ""Best player: "" << best_player << "" with score "" << highest_score << std::endl;
    
    return 0;
}",highest_score = -1;
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    
    // Sort the vector in ascending order.
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());

    std::cout << ""Sorted numbers: "";
    for (int number : numbers) {
        std::cout << number << "" "";
    }
    std::cout << std::endl;

    return 0;
}",std::greater<int>()
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (reversed_text == text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (reversed_text == text)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseWords(std::string s) {
    std::string result = """";
    std::string word = """";
    for (char c : s) {
        if (c == ' ') {
            std::reverse(word.begin(), word.end());
            result += word + "" "";
            word = """";
        } else {
            word += c;
        }
    }
    std::reverse(word.begin(), word.end());
    result += word;
    return result;
}

int main() {
    std::string input = ""the sky is blue"";
    std::string reversed = reverseWords(input);
    std::cout << reversed << std::endl;
    return 0;
}","    std::reverse(word.begin(), word.end());"
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, world!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }

  return 0;
}",if (text == reversed_text)
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    for (const auto& pair : ages) {
        std::cout << pair.first << "" is "" << pair.second << "" years old."" << std::endl;
    }

    // Incorrectly attempt to increment all ages by 1
    for (auto& pair : ages) {
        pair.second++ ; // Missing the semicolon
    }

    std::cout << ""After incrementing ages:"" << std::endl;
     for (const auto& pair : ages) {
        std::cout << pair.first << "" is "" << pair.second << "" years old."" << std::endl;
    }

    return 0;
}",pair.second++
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
  
  //Incorrectly calculating the average
  double average = sum / numbers.size();

  std::cout << ""Sum: "" << sum << std::endl;
  std::cout << ""Average: "" << average << std::endl;
  return 0;
}",double average = sum / numbers.size();
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct: "" << area << std::endl;
    } else {
        std::cout << ""Area is incorrect: Calculated "" << area << "", Expected "" << expected_area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4, 7, 3, 6}; 
    std::vector<int> even_numbers;

    for (int number : numbers) {
        if (number % 2 == 0) {
            even_numbers.push_back(number);
        }
    }

    std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());
    
    std::cout << ""Even numbers in descending order: "";
    for (int i = 0; i < even_numbers.size(); ++i) {
        std::cout << even_numbers[i] << (i == even_numbers.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;

    return 0;
}","std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());"
"#include <iostream>
#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 123.456789;
    std::string formatted_price = format_number(price);
    std::cout << ""The formatted price is: "" << formatted_price << std::endl;
    
    double tax_rate = 0.075;
    double tax_amount = price * tax_rate;
    std::string formatted_tax_amount = format_number(tax_amount);
    std::cout << ""The tax amount is: "" << formatted_tax_amount << std::endl;
    
    double total_price = price + tax_amount;
    std::string formatted_total_price = format_number(total_price);
    std::cout << ""The total price is: "" << formatted_total_price << std::endl;

    return 0;
}","std::cout << ""The total price is: "" << formatted_total_price << std::endl;"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <numeric>
#include <vector>

int main() {
  std::vector<int> values = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i < values.size(); ++i) {
    sum += values[i];
  }
  
  int expected_sum = std::accumulate(values.begin(), values.end(), 0);

  if (sum != expected_sum) {
    std::cout << ""Sum is incorrect!\n"";
  } else {
    std::cout << ""Sum is correct!\n"";
  }

  return 0;
}",int sum = 0;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  
  // Calculate the product of all elements.
  long long product = 1;
  for (int i = 0; i < data.size(); ++i) {
    product *= data[i];
  }
  
  // Print the product.
  std::cout << ""Product: "" << product << std::endl;

  // Calculate the average.
  double sum = std::accumulate(data.begin(), data.end(), 0.0); // Incorrect initialization to double.
  double average = sum / data.size();
  std::cout << ""Average: "" << average << std::endl;
  
  return 0;
}","double sum = std::accumulate(data.begin(), data.end(), 0.0);"
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (reversed_text == text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }
  return 0;
}",if (reversed_text == text)
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the product of all elements using std::accumulate
    int product = std::accumulate(numbers.begin(), numbers.end(), 1, [](int a, int b) { return a * b; });
    
    // Incorrectly multiply the product by 2, leading to an incorrect result
    product *= 2;
    
    std::cout << ""The product of the numbers multiplied by 2 is: "" << product << std::endl;
    
    return 0;
}",product *= 2;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    double area = 3.14 * radius * radius; // Using a fixed PI value instead of M_PI
    
    std::cout << ""Radius: "" << radius << std::endl;
    std::cout << ""Circumference: "" << circumference << std::endl;
    std::cout << ""Area: "" << area << std::endl;
    
    return 0;
}",double area = 3.14 * radius * radius;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Faulty line

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4, 7, 3, 6};
    int n = sizeof(arr) / sizeof(arr[0]);
    int k = 3; // Find the k-th largest element

    std::sort(arr, arr + n); // Sort the array in ascending order

    int kthLargest = arr[n - k];

    std::cout << ""The "" << k << ""-th largest element is: "" << kthLargest << std::endl;

    return 0;
}",int k = 3;
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> filtered_data;

    for (int x : data) {
        if (x > 2) {
            filtered_data.push_back(x);
        }
    }

    // Calculate the sum of elements in the filtered vector, but using the original data size.
    int sum = std::accumulate(data.begin(), data.end(), 0);

    std::cout << ""Sum of filtered elements: "" << sum << std::endl;
    return 0;
}","int sum = std::accumulate(data.begin(), data.end(), 0);"
"#include <iostream>
#include <map>

int main() {
  std::map<std::string, int> scores;
  scores[""Alice""] = 85;
  scores[""Bob""] = 92;
  scores[""Charlie""] = 78;

  int total_score = 0;
  for (auto const& [name, score] : scores) {
    total_score += score;
  }

  double average_score = total_score / scores.size();
  std::cout << ""Average score: "" << average_score << std::endl;
  return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> shifted_data(data.size());
  for (size_t i = 0; i < data.size(); ++i) {
    shifted_data[i] = data[(i - 1 + data.size()) % data.size()];
  }
  
  int sum = 0;
  for (int val : shifted_data) {
    sum += val;
  }
  
  std::cout << ""Sum of shifted data: "" << sum << std::endl;
  return 0;
}",shifted_data[i] = data[(i - 1 + data.size()) % data.size()];
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4};
  int target = 7;

  std::vector<int> result = data;
  std::sort(result.begin(), result.end());

  auto it = std::find(result.begin(), result.end(), target);

  if (it != result.end()) {
    std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
  } else {
    std::cout << ""Target not found."" << std::endl;
  }

  return 0;
}","std::distance(data.begin(), it)"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World! This is a test."";
    std::string pattern = ""World"";

    size_t pos = text.find(pattern);
    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    //Incorrectly using substr with an out-of-range index
    std::string substring = text.substr(pos, 200); //Potential out-of-bounds access
    std::cout << ""Substring: "" << substring << std::endl;

    return 0;
}","std::string substring = text.substr(pos, 200);"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!\n"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    std::cout << ""Original: "" << text << ""Reversed: "" << reversed_text << std::endl;
    return 0;
}","std::reverse(reversed_text.begin(), reversed_text.end());"
"#include <string>
#include <sstream>
#include <vector>
#include <algorithm>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    std::vector<double> data = {1.234, 5.678, 9.012, 3.456};
    std::vector<std::string> formatted_data;

    for (double value : data) {
        formatted_data.push_back(format_number(value));
    }

    // Incorrectly try to sort strings lexicographically instead of numbers
    std::sort(formatted_data.begin(), formatted_data.end());

    for (const std::string& str : formatted_data) {
        std::cout << str << std::endl;
    }

    return 0;
}","std::sort(formatted_data.begin(), formatted_data.end());"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double perimeter = 2 * M_PI * radius;

    std::cout << ""Area: "" << area << std::endl;
    std::cout << ""Perimeter: "" << perimeter << std::endl;
    
    double circumference_squared = perimeter * perimeter;
    std::cout << ""Circumference Squared: "" << circumference_squared << std::endl;

    // Incorrect Calculation: The problem arises here by squaring the perimeter directly. A true check would need to relate the circumference to a known value.
    if (circumference_squared > 100.0) {
        std::cout << ""Circumference is large."" << std::endl;
    } else {
        std::cout << ""Circumference is small."" << std::endl;
    }
    
    return 0;
}",if (circumference_squared > 100.0)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expectedArea = 78.5398;
    
    if (std::abs(area - expectedArea) > 0.0001) {
        std::cout << ""Area calculation incorrect. Expected: "" << expectedArea << "", Calculated: "" << area << std::endl;
    } else {
        std::cout << ""Area calculation correct.
"";
    }
    
    // Attempting to calculate the circumference, but introducing an error
    double circumference = 2 * M_PI * radius;
    circumference = circumference + 1.0; // Incorrect addition
    std::cout << ""Circumference: "" << circumference << std::endl;

    return 0;
}",circumference = circumference + 1.0;
"#include <cmath>
#include <vector>

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    double sum = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += sqrt(data[i]);
    }
    double average = sum / data.size();
    std::cout << ""Average of square roots: "" << average << std::endl;
    return 0;
}",double average = sum / data.size();
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
  std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
  int target = 7;
  
  std::vector<int> result;
  std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n < target; });
  
  std::cout << ""Numbers less than "" << target << "":"";
  for (int num : result) {
    std::cout << num << "" "";
  }
  std::cout << std::endl;
  return 0;
}","std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n < target; })"
"#include <iostream>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    if (str == reversed_str) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == reversed_str)
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4, 7, 3, 6};
  int target = 10;

  std::vector<int> result;
  std::copy_if(data.begin(), data.end(), std::back_inserter(result), [target](int x){ return x > target; });

  std::cout << ""Elements greater than "" << target << "":"";
  for (size_t i = 0; i < result.size(); ++i) {
    std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
  }
  std::cout << std::endl;

  return 0;
}",return x > target;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::vector<int> even_numbers;

    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0)
            even_numbers.push_back(numbers[i]);
    }

    // Incorrectly calculate the sum by using numbers.size() instead of even_numbers.size()
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += even_numbers[i];
    }

    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i < numbers.size(); ++i) {
        sum += even_numbers[i];
    }"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30; 
    ages[""Bob""] = 25; 
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Accessing non-existent key without checking
    std::cout << ""David's age is: "" << age << std::endl; 
    
    return 0;
}",int age = ages[name];
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string."";
  std::string vowels = ""aeiouAEIOU"";
  std::string result = """";

  for (char c : text) {
    if (vowels.find(c) != std::string::npos) {
      result += c;
    }
  }

  std::cout << result << std::endl;
  return 0;
}",if (vowels.find(c) != std::string::npos)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }

  return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!\nThis is a test."";
    std::string lowercase_text = text;
    std::transform(lowercase_text.begin(), lowercase_text.end(), lowercase_text.begin(), ::tolower);
    std::cout << lowercase_text << std::endl;
    return 0;
}",::tolower
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    
    if (text == reversed_text) {
        std::cout << ""The text is a palindrome."" << std::endl;
    } else {
        std::cout << ""The text is not a palindrome."" << std::endl;
    }
    
    return 0;
}",if (text == reversed_text)
"#include <string>
#include <vector>
#include <algorithm>

std::string reverseString(const std::string& str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::vector<std::string> words = {""hello"", ""world"", """", ""c++""};
    for (const std::string& word : words) {
        std::string reversed = reverseString(word);
        if (reversed.length() < word.length()) {
            std::cout << ""Error: Reversed string is shorter than original: "" << word << std::endl;
        } else {
            std::cout << ""Original: "" << word << "", Reversed: "" << reversed << std::endl;
        }
    }
    return 0;
}",if (reversed.length() < word.length())
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""Area of circle with radius "" << radius << "": "" << area << std::endl;
    
    // Incorrectly calculate circumference
    double circumference = 2 * M_PI * radius * 0.5;

    std::cout << ""Circumference of circle with radius "" << radius << "": "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius * 0.5;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    
    // Calculate the sum of the elements, but the loop condition is wrong
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) { // Fault: Should be i < data.size() 
        sum += data[i];
    }
    
    std::cout << ""Sum: "" << sum << std::endl;
    
    return 0;
}",i <= data.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    
    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect."" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }
    
    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string input = ""hello world"";
    std::string reversed_input = input;
    std::reverse(reversed_input.begin(), reversed_input.end());

    if (input == reversed_input) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    std::string another_string = ""racecar"";
    std::string reversed_another_string = another_string;
    std::reverse(reversed_another_string.begin(), reversed_another_string.end());

    if (another_string == reversed_another_string) {
      std::cout << ""The second string is a palindrome."" << std::endl;
    } else {
      std::cout << ""The second string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (input == reversed_input)
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    // Find the index of the target value
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << it - numbers.begin() << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Calculate the sum of elements after the target (if found)
    int sum_after = 0;
    for (auto i = it; i != numbers.end(); ++i) {  //Fault: it is uninitialized if target not found
        sum_after += *i;
    }

    std::cout << ""Sum of elements after target: "" << sum_after << std::endl;
    return 0;
}",for (auto i = it; i != numbers.end(); ++i)
"#include <iostream>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> conjugate_z = z.real();
    std::cout << ""Original Complex Number: "" << z << std::endl;
    std::cout << ""Conjugate (Incorrect): "" << conjugate_z << std::endl;
    return 0;
}",std::complex<double> conjugate_z = z.real();
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> even_data;

  for (int i = 0; i < data.size(); ++i) {
    if (data[i] % 2 == 0) {
      even_data.push_back(data[i]);
    }
  }

  // Calculate the sum of the even numbers
  int sum = std::accumulate(even_data.begin(), even_data.end(), 0);

  // Incorrectly print the size of the original data vector instead of the even_data vector
  std::cout << ""Sum of even numbers: "" << sum << "" (calculated over a size of: "" << data.size() << "")"" << std::endl;

  return 0;
}","std::cout << ""Sum of even numbers: "" << sum << "" (calculated over a size of: "" << data.size() << "")"" << std::endl;"
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    std::cout << ""Sum: "" << sum << std::endl;
    
    std::vector<int> even_numbers; 
    for (int num : numbers) {
        if (num % 2 == 0) {
            even_numbers.push_back(num);
        }
    }

    int even_sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);
    std::cout << ""Even sum: "" << even_sum << std::endl;
    
    return 0;
}","int even_sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);"
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();
    std::string reversed_text = """";

    for (int i = 0; i <= len; ++i) {
        reversed_text += text[len - i];
    }

    std::cout << ""Original: "" << text << std::endl;
    std::cout << ""Reversed: "" << reversed_text << std::endl;
    return 0;
}",i <= len
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());
  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }
  return 0;
}",if (text == reversed_text)
"#include <string>
#include <vector>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie""};
    std::string longestName;
    for (const std::string& name : names) {
        if (longestName.length() < name.length()) {
            longestName = name;
        }
    }
    std::string result = ""The longest name is: "" + longestName;
    std::cout << result << std::endl;
    return 0;
}",longestName = name;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;
    
    for (int number : numbers) {
        if (number % 2 == 0) {
            even_numbers.push_back(number);
        }
    }

    // Intentionally calculate the product of all elements in even_numbers, but use numbers instead.
    long long product = 1;
    for (int number : numbers) {
        product *= number;
    }

    std::cout << ""Product of even numbers: "" << product << std::endl;
    return 0;
}","for (int number : numbers) {
        product *= number;
    }"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect. Expected: "" << expected_area << "", Calculated: "" << area << std::endl;
    } else {
        std::cout << ""Area calculation is correct: "" << area << std::endl;
    }
    
    // Simulate a physics calculation
    double gravity = 9.81; // m/s^2
    double height = 10.0; // meters
    double time = std::sqrt(2.0 * gravity / height);
    std::cout << ""Time to fall: "" << time << "" seconds"" << std::endl;
    
    return 0;
}",double time = std::sqrt(2.0 * gravity / height);
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double circumference = 2 * 3.14159 * radius;
    double area = 3.14159 * radius * radius;

    // Incorrectly assigning the circumference to the area
    double calculatedArea = circumference;

    std::cout << ""Radius: "" << radius << std::endl;
    std::cout << ""Area (calculated): "" << calculatedArea << std::endl;
    std::cout << ""Area (correct): "" << area << std::endl;

    return 0;
}",double calculatedArea = circumference;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Incorrect sort range

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Faulty: sorts up to n-2 instead of n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    std::sort(arr, arr + n - 1); // Faulty line: sorting only up to n-1

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4, 7, 3, 6};
    std::sort(data.begin(), data.end(), [](int a, int b) { return a < b; });

    std::cout << ""Sorted data: "";
    for (size_t i = 0; i < data.size(); ++i) {
        std::cout << data[i] << (i == data.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;

    int sum = 0;
    for (int value : data) {
        sum += value;
    }

    std::cout << ""Sum of elements: "" << sum << std::endl;

    // Find the minimum value
    int min_val = data[0];
    for (size_t i = 1; i < data.size(); ++i) {
        if (data[i] < min_val) {
            min_val = data[i];
        }
    }

    std::cout << ""Minimum value: "" << min_val << std::endl;

    //Incorrectly calculate average
    double average = sum / data.size(); //Integer division

    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = sum / data.size(); //Integer division
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4, 7, 3, 6};
    std::vector<int> sorted_data = data;
    
    std::sort(sorted_data.begin(), sorted_data.begin() + 5); // Sort only the first 5 elements
    
    for (int i = 0; i < sorted_data.size(); ++i) {
        std::cout << sorted_data[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}",sorted_data.begin() + 5
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    auto it = std::find(data.begin(), data.end(), target);

    if (it != data.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Calculate the sum of all elements in the vector
    int sum = 0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum of elements: "" << sum << std::endl;

    // Find the maximum value in the vector
    int max_val = data[0];
    for (size_t i = 1; i < data.size(); ++i) {
        if (data[i] > max_val) {
            max_val = data[i];
        }
    }

    std::cout << ""Maximum value: "" << max_val << std::endl;

    // Sort the vector in ascending order
    std::sort(data.begin(), data.end());

    std::cout << ""Sorted vector: "";
    for (int val : data) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;

    return 0;
}",if (data[i] > max_val)
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // Calculate the sum of even numbers only
    int sum = 0;
    for (int i = 0; i < data.size(); ++i) {
        if (data[i] % 2 == 1) {
            sum += data[i];
        }
    }
    
    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}",if (data[i] % 2 == 1)
"#include <string>
#include <algorithm>

std::string reverseWords(std::string s) {
    std::string result = """";
    std::string word = """";
    for (char c : s) {
        if (c == ' ') {
            std::reverse(word.begin(), word.end());
            result += word + "" "";
            word = """";
        } else {
            word += c;
        }
    }
    std::reverse(word.begin(), word.end());
    result += word;
    return result;
}

int main() {
    std::string input = ""the sky is blue"";
    std::string reversed = reverseWords(input);
    std::cout << reversed << std::endl;
    return 0;
}",if (c == ' ')
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.count(name) > 0) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
    }

    return 0;
}",if (ages.count(name) > 0)
"#include <map>
#include <string>
#include <iostream>

int main() {
  std::map<std::string, int> ages;
  ages[""Alice""] = 30;
  ages[""Bob""] = 25;
  ages[""Charlie""] = 40;

  std::string name = ""David"";
  if (ages.find(name) == ages.end()) {
    std::cout << ""Age of "" << name << "" not found."" << std::endl;
  } else {
    std::cout << ""Age of "" << name << "" is "" << ages[name] << std::endl;
  }
  
  return 0;
}","std::cout << ""Age of "" << name << "" is "" << ages[name] << std::endl;"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    // Incorrectly truncates the area to an integer before output
    std::cout << (int)area << std::endl; 
    
    return 0;
}",std::cout << (int)area << std::endl;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    
    // Incorrect rounding: truncates instead of rounds.
    int roundedCircumference = (int)circumference;
    
    std::cout << ""Radius: "" << radius << std::endl;
    std::cout << ""Circumference: "" << circumference << std::endl;
    std::cout << ""Rounded Circumference: "" << roundedCircumference << std::endl;
    
    return 0;
}",(int)circumference
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""The area of the circle is: "" << area << std::endl;

    // Incorrectly calculate circumference using radius squared
    double circumference = 2 * M_PI * radius * radius;
    std::cout << ""The circumference of the circle is: "" << circumference << std::endl;
    return 0;
}",double circumference = 2 * M_PI * radius * radius;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string."";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());
  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }
  return 0;
}",if (text == reversed_text)
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  std::vector<int> even_numbers;

  for (int i = 0; i < data.size(); ++i) {
    if (data[i] % 2 == 0) {
      even_numbers.push_back(data[i]);
    }
  }

  //Incorrectly calculates the sum of even numbers
  int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0.0);

  std::cout << ""Sum of even numbers: "" << sum << std::endl;
  return 0;
}","int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0.0);"
"#include <random>
#include <numeric>
#include <algorithm>
#include <vector>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: should be i < numbers.size()
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> squares(data.size());

    std::transform(data.begin(), data.end(), squares.begin(), [](int x) { return x * x; });

    // Incorrect sum calculation - using data instead of squares
    int sum = std::accumulate(data.begin(), data.end(), 0);

    std::cout << ""Sum of squares: "" << sum << std::endl;
    return 0;
}","int sum = std::accumulate(data.begin(), data.end(), 0);"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  
  // Calculate the sum of squares, but incorrectly uses the original data.
  int sum_of_squares = std::accumulate(data.begin(), data.end(), 0, [](int sum, int x){ return sum + x; });

  //The expected sum of squares would be 1*1 + 2*2 + 3*3 + 4*4 + 5*5 = 55
  std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
  return 0;
}","[](int sum, int x){ return sum + x; }"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string pattern = ""test"";

    size_t pos = text.find(pattern, 10); // Start searching after index 9.
    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <array>
#include <numeric>
#include <iostream>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <iostream>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    double angle = atan(z.imag() / z.real());
    std::cout << ""Angle: "" << angle << std::endl;
    return 0;
}",double angle = atan(z.imag() / z.real());
"#include <iostream>
#include <tuple>

int main() {
    std::tuple<int, double, std::string> my_tuple = std::make_tuple(10, 3.14, ""Hello"");
    
    int int_val = std::get<0>(my_tuple);
    double double_val = std::get<1>(my_tuple);
    std::string string_val = std::get<2>(my_tuple);
    
    std::cout << ""Integer: "" << int_val << std::endl;
    std::cout << ""Double: "" << double_val << std::endl;
    std::cout << ""String: "" << string_val << std::endl;

    // Incorrectly accessing the tuple element using a wrong index.
    int incorrect_val = std::get<3>(my_tuple); 
    std::cout << ""Incorrect Value: "" << incorrect_val << std::endl; 
    
    return 0;
}",int incorrect_val = std::get<3>(my_tuple);
"#include <iostream>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> w = z * z;
    std::cout << ""w = "" << w << std::endl;
    std::cout << ""Magnitude of w: "" << std::abs(w) << std::endl;
    
    double a = 5.0;
    double b = 2.0;
    double result = a / (b - b); //Division by zero subtly hidden in variable assignment.
    std::cout << ""Result: "" << result << std::endl;
    
    return 0;
}",double result = a / (b - b);
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""cherry""] = 7;

    std::string fruit = ""grape"";
    if (counts.find(fruit) == counts.end()) {
        std::cout << ""Fruit not found."" << std::endl;
    }
    std::cout << counts[fruit] << std::endl; // Accessing non-existent key
    return 0;
}",std::cout << counts[fruit] << std::endl;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> differences(data.size() - 1);

  for (size_t i = 0; i < data.size() - 1; ++i) {
    differences[i] = data[i + 1] - data[i];
  }

  int sum_of_differences = std::accumulate(differences.begin(), differences.end(), 0);

  // Incorrectly uses data.size() instead of differences.size() for printing
  for (size_t i = 0; i < data.size(); ++i) {
    std::cout << differences[i] << "" "";
  }
  std::cout << std::endl;
  std::cout << ""Sum of differences: "" << sum_of_differences << std::endl;

  return 0;
}","for (size_t i = 0; i < data.size(); ++i) {
    std::cout << differences[i] << "" "";
  }"
"#include <iostream>
#include <tuple>

int main() {
    std::tuple<int, double, std::string> my_tuple = std::make_tuple(10, 3.14, ""hello"");
    
    auto& [a, b, c] = my_tuple; // Potential issue: Modifying tuple elements through reference
    
    a = 20; // Modifying 'a' will change the original tuple element
    b = 6.28;
    c = ""world"";
    
    std::cout << ""Original Tuple: "" << std::get<0>(my_tuple) << "", "" << std::get<1>(my_tuple) << "", "" << std::get<2>(my_tuple) << std::endl;
    std::cout << ""Modified Tuple (via reference): "" << a << "", "" << b << "", "" << c << std::endl;
    
    return 0;
}","a = 20;\nb = 6.28;\nc = ""world"";"
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (std::abs(area - expected_area) > 0.001) {
    std::cout << ""Area calculation is incorrect! Expected: "" << expected_area << "", Calculated: "" << area << std::endl;
  } else {
    std::cout << ""Area calculation is correct: "" << area << std::endl;
  }

  //A seemingly correct calculation is off due to precision issues
  double x = 0.1 + 0.2;
  if (x != 0.3) {
    std::cout << ""Floating point comparison failed: "" << x << std::endl;
  }
  
  return 0;
}",if (x != 0.3)
"#include <iostream>
#include <unordered_map>
#include <string>

int main() {
    std::unordered_map<std::string, int> scores;
    scores[""Alice""] = 100;
    scores[""Bob""] = 85;
    scores[""Charlie""] = 92;

    std::string best_player;
    int highest_score = -1;

    for (const auto& pair : scores) {
        if (pair.second > highest_score) {
            highest_score = pair.second;
            best_player = pair.first;
        }
    }

    std::cout << ""Best player: "" << best_player << "" with score: "" << highest_score << std::endl;

    std::string winner = ""David"";
    if (winner != best_player) {
        std::cout << ""The winner is actually: "" << winner << std::endl;
    } else {
        std::cout << ""Confirmed, "" << best_player << "" is the winner."" << std::endl;
    }

    return 0;
}","std::string winner = ""David"";"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::vector<int> sorted_data = data;
    std::sort(sorted_data.begin(), sorted_data.end(), std::greater<int>());

    // The bug is here.  The loop should terminate when i < sorted_data.size(), not <=.
    for (size_t i = 0; i <= sorted_data.size(); ++i) {
        std::cout << sorted_data[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",for (size_t i = 0; i <= sorted_data.size(); ++i)
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string vowels = ""aeiouAEIOU"";

    // Count the number of vowels in the string
    int vowel_count = 0;
    for (char c : text) {
        if (vowels.find(c) != std::string::npos)
            vowel_count++;
    }

    // Incorrectly calculate the length of the vowels string
    int vowels_length = vowels.size() - 1;

    std::cout << ""Number of vowels: "" << vowel_count << std::endl;
    std::cout << ""Length of vowels string: "" << vowels_length << std::endl;
    return 0;
}",int vowels_length = vowels.size() - 1;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};

    // Find the minimum element
    auto min_it = std::min_element(numbers.begin(), numbers.end());

    // Increment the minimum element before printing (Faulty Logic)
    *min_it = (*min_it) + 10;

    std::cout << ""Minimum element: "" << *min_it << std::endl;

    return 0;
}",*min_it = (*min_it) + 10;
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4, 7, 3, 6};
  std::sort(data.begin(), data.end());
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {  // Fault: i <= data.size()
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int target = 7;

  std::vector<int> result;
  std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

  std::cout << ""Numbers greater than "" << target << "":"";
  for (int num : result) {
    std::cout << num << "" "";
  }
  std::cout << std::endl;

  return 0;
}",return n > target;
"#include <iostream>
#include <unordered_map>
#include <string>

int main() {
    std::unordered_map<std::string, int> ages; 
    ages[""Alice""] = 30; 
    ages[""Bob""] = 25; 

    std::string name = ""Charlie"";
    if (ages.find(name) == ages.end()) {
        ages[name] = 0; //Initialize to 0 instead of -1.
    }

    std::cout << ""Charlie's age: "" << ages[name] << std::endl;
    return 0;
}",ages[name] = 0;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string for checking palindrome."";
    std::string clean_text = """";
    for (char c : text) {
        if (std::isalnum(c)) {
            clean_text += std::tolower(c);
        }
    }

    std::string reversed_text = clean_text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (clean_text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (clean_text == reversed_text)
"#include <iostream>
#include <iomanip>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    double angle = atan2(z.imag(), z.real()); // Should calculate the angle correctly
    std::cout << ""The angle of the complex number is: "" << std::fixed << std::setprecision(6) << angle << std::endl;

    std::complex<double> w(0.0, -1.0);
    double angle_w = atan2(w.imag(), w.real()); //Should calculate the angle correctly
    std::cout << ""The angle of the complex number w is: "" << std::fixed << std::setprecision(6) << angle_w << std::endl;

    std::complex<double> v(1.0, -1.0);
    double angle_v = atan2(v.imag(), v.real());
    std::cout << ""The angle of the complex number v is: "" << std::fixed << std::setprecision(6) << angle_v << std::endl;

    std::complex<double> u(-1.0, -1.0);
    double angle_u = atan2(u.imag(), u.real());
    std::cout << ""The angle of the complex number u is: "" << std::fixed << std::setprecision(6) << angle_u << std::endl;
    return 0;
}","double angle = atan2(z.imag(), z.real());"
"#include <random> 
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd()); 
    std::uniform_int_distribution<> distrib(1, 100); 

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Find the maximum value in the vector
    int max_val = numbers[0];
    for (int i = 1; i <= 10; ++i) {  // Fault: Loop condition should be i < 10
        if (numbers[i] > max_val) {
            max_val = numbers[i];
        }
    }

    std::cout << ""Maximum value: "" << max_val << std::endl;

    return 0;
}",i <= 10
"#include <iostream>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect: "" << area << std::endl;
    } else {
        std::cout << ""Area calculation is correct: "" << area << std::endl;
    }

    double circumference = 2 * M_PI * radius;
    double expected_circumference = 31.4159;

    if (std::abs(circumference - expected_circumference) > 0.0001) {
        std::cout << ""Circumference calculation is incorrect: "" << circumference << std::endl;
    } else {
        std::cout << ""Circumference calculation is correct: "" << circumference << std::endl;
    }
    
    return 0;
}",double area = M_PI * radius * radius;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!\nThis is a test."";
    size_t pos = text.find(""World!"");
    if (pos != std::string::npos) {
        text.erase(pos, 5);
    }
    std::cout << text << std::endl;
    return 0;
}","text.erase(pos, 5);"
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};

  // Calculate the sum of squares, but incorrectly calculate the squared value.
  int sumOfSquares = 0;
  for (int i = 0; i < numbers.size(); ++i) {
    sumOfSquares += numbers[i] * numbers[i - 1]; // Incorrect squaring
  }

  std::cout << ""Sum of squares: "" << sumOfSquares << std::endl;
  return 0;
}",sumOfSquares += numbers[i] * numbers[i - 1];
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct!"" << std::endl;
    }

    double perimeter = 2 * M_PI * radius;
    std::cout << ""Perimeter: "" << perimeter << std::endl;

    return 0;
}",double area = M_PI * radius * radius;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::sort(data.begin(), data.end());
    
    // Incorrectly assume the last element is the maximum after sorting
    int maxValue = data[data.size() - 1];
    
    std::cout << ""Maximum value: "" << maxValue << std::endl;
    
    // Demonstrate a further calculation using the assumed maximum
    int result = maxValue * 2;
    std::cout << ""Result: "" << result << std::endl;
    
    return 0;
}",int maxValue = data[data.size() - 1];
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  
  // Calculate the average
  double sum = std::accumulate(data.begin(), data.end(), 0.0);
  double average = sum / data.size();
  
  // Corrected calculation - intended to add 1 to each element and then take the average
  std::vector<int> modified_data;
  for (int i = 0; i < data.size(); ++i) {
     modified_data.push_back(data[i] + 1); 
  }
  double modified_sum = std::accumulate(modified_data.begin(), modified_data.end(), 0.0);
  double modified_average = modified_sum / modified_data.size();

  std::cout << ""Original Average: "" << average << std::endl;
  std::cout << ""Modified Average: "" << modified_average << std::endl;
  
  return 0;
}","double modified_sum = std::accumulate(modified_data.begin(), modified_data.end(), 0.0);"
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    
    // Sort the vector in ascending order
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());

    std::cout << ""Sorted numbers: "";
    for (int number : numbers) {
        std::cout << number << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(numbers.begin(), numbers.end(), std::greater<int>());"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> indices = {0, 1, 2, 3, 4};

    // Calculate the sum of elements at the specified indices
    int sum = 0;
    for (size_t i = 0; i < indices.size(); ++i) {
        sum += data[indices[i]];
    }

    // Attempt to sort the indices vector *in place* to show incorrect behavior
    std::sort(indices.begin(), indices.end());

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Indices after sort: "";
    for (int index : indices) {
        std::cout << index << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(indices.begin(), indices.end());"
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> ageMap;
    ageMap[""Alice""] = 30;
    ageMap[""Bob""] = 25;
    ageMap[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ageMap[name]; // Should check if name exists in map first

    std::cout << ""David's age: "" << age << std::endl;
    return 0;
}",int age = ageMap[name];
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average Score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <unordered_map>
#include <string>

int main() {
  std::unordered_map<std::string, int> ageMap;
  ageMap[""Alice""] = 30;
  ageMap[""Bob""] = 25;
  ageMap[""Charlie""] = 40;

  std::string name = ""David"";
  int age = ageMap[name]; // Fault: Accessing non-existent key
  std::cout << ""Age of "" << name << "": "" << age << std::endl;

  return 0;
}",int age = ageMap[name];
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> processed_data;

    for (int i = 0; i < data.size(); ++i) {
        processed_data.push_back(data[i] * 2);
    }

    // Calculate the sum of processed_data using accumulate
    int sum = std::accumulate(processed_data.begin(), processed_data.end(), 0);

    // Incorrectly increment sum instead of multiplying it by a factor.
    sum++; 

    std::cout << ""Sum of processed data: "" << sum << std::endl;
    return 0;
}",sum++;
"#include <string>
#include <sstream>
#include <iostream>

int main() {
  std::string input = ""12.34"";
  std::stringstream ss(input);
  double value;
  if (ss >> value) {
    std::cout << ""Successfully converted: "" << value << std::endl;
  } else {
    std::cout << ""Conversion failed."" << std::endl;
  }

  std::string input2 = ""abc"";
  std::stringstream ss2(input2);
  double value2;
  if (ss2 >> value2) {
     std::cout << ""Successfully converted: "" << value2 << std::endl;
  } else {
    std::cout << ""Conversion failed."" << std::endl;
  }
  return 0;
}","if (ss2 >> value2) {
     std::cout << ""Successfully converted: "" << value2 << std::endl;
  } else {"
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i < data.size(); ++i) {
    sum = std::accumulate(data.begin(), data.begin() + i, sum);
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}","std::accumulate(data.begin(), data.begin() + i, sum);"
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area: "" << area << std::endl;

  // Calculate circumference incorrectly
  double circumference = 2 * M_PI * radius - 0.1;
  std::cout << ""Circumference: "" << circumference << std::endl;

  return 0;
}",double circumference = 2 * M_PI * radius - 0.1;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);
    std::sort(arr, arr + n - 1); // Faulty: Sorts up to n-1, leaving last element unsorted.
    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
  int arr[] = {5, 2, 8, 1, 9, 4};
  int n = sizeof(arr) / sizeof(arr[0]);

  int max_val = arr[0];
  for (int i = 1; i < n - 1; ++i) {
    if (arr[i] > max_val) {
      max_val = arr[i];
    }
  }

  std::cout << ""Maximum value: "" << max_val << std::endl;
  return 0;
}",for (int i = 1; i < n - 1; ++i)
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  
  // Calculate the sum of squares of even numbers
  int sum_of_squares = 0;
  for (int x : data) {
    if (x % 2 == 0) {
      sum_of_squares += x * x;
    }
  }
  
  //Incorrectly calculate the average
  double average = sum_of_squares / data.size();
  
  std::cout << ""Sum of squares of even numbers: "" << sum_of_squares << std::endl;
  std::cout << ""Average: "" << average << std::endl;
  
  return 0;
}",double average = sum_of_squares / data.size();
"#include <iostream>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> w = z + 2.0;
    std::cout << ""w = "" << w << std::endl;

    double pi = 3.1415;
    double angle = pi / 2.0;
    std::complex<double> rotated_z = z * std::exp(std::complex<double>(0.0, angle));
    std::cout << ""rotated_z = "" << rotated_z << std::endl;

    double real_part = rotated_z.real();
    double imag_part = rotated_z.imag();
    std::cout << ""Real part: "" << real_part << std::endl;
    std::cout << ""Imaginary part: "" << imag_part << std::endl;
    return 0;
}",double pi = 3.1415;
"#include <iostream>
#include <numeric>

int main() {
  double values[] = {1.0, 2.0, 3.0, 4.0, 5.0};
  int size = sizeof(values) / sizeof(values[0]);
  double sum = std::accumulate(values, values + size, 0.0);

  double average = sum / (size - 1);
  std::cout << ""Average: "" << average << std::endl;
  return 0;
}",double average = sum / (size - 1);
"#include <iostream>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> w = z * z; 
    double magnitudeSquared = w.real() + w.imag();
    double magnitude = magnitudeSquared;
    std::cout << ""Magnitude: "" << magnitude << std::endl;
    return 0;
}",double magnitude = magnitudeSquared;
"#include <random> 
#include <iostream>
#include <vector>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Off-by-one error in loop condition
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string for palindrome checking."";
  std::string cleaned_text = """";
  for (char c : text) {
    if (std::isalnum(c)) {
      cleaned_text += std::tolower(c);
    }
  }

  std::string reversed_text = cleaned_text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (cleaned_text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }
  return 0;
}",if (cleaned_text == reversed_text)
"#include <vector>
#include <numeric>
#include <algorithm>
#include <iostream>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  std::vector<int> even_numbers;
  
  for (int i = 0; i < data.size(); ++i) {
    if (data[i] % 2 == 0) {
      even_numbers.push_back(data[i]);
    }
  }
  
  // Incorrect calculation of the sum of even numbers
  int sum_even = std::accumulate(even_numbers.begin(), even_numbers.end(), 0.0);
  
  std::cout << ""Sum of even numbers: "" << sum_even << std::endl;
  return 0;
}","int sum_even = std::accumulate(even_numbers.begin(), even_numbers.end(), 0.0);"
"#include <string>
#include <algorithm>

std::string reverseWords(std::string s) {
    std::string result = """";
    std::string word = """";
    for (char c : s) {
        if (c == ' ') {
            std::reverse(word.begin(), word.end());
            result += word + "" "";
            word = """";
        } else {
            word += c;
        }
    }
    std::reverse(word.begin(), word.end());
    result += word;
    return result;
}

int main() {
    std::string input = ""the sky is blue"";
    std::string reversed = reverseWords(input);
    std::cout << reversed << std::endl;
    return 0;
}",    if (c == ' ')
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation correct!"" << std::endl;
    }

    // Calculate circumference
    double circumference = 2 * M_PI * radius;

    if (circumference > 30.0){
        std::cout << ""Circumference is unusually large!"" << std::endl;
    } else {
        std::cout << ""Circumference looks right."" << std::endl;
    }

    return 0;
}",if (circumference > 30.0)
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Find the index of the largest element
    auto it = std::max_element(numbers.begin(), numbers.end());
    size_t index = std::distance(numbers.begin(), it) - 1;
    
    std::cout << ""The index of the largest element is: "" << index << std::endl;
    
    // Attempt to access an element outside of vector bounds
    std::cout << ""Element at index "" << index + 2 << "": "" << numbers[index + 2] << std::endl; 

    return 0;
}","std::cout << ""Element at index "" << index + 2 << "": "" << numbers[index + 2] << std::endl;"
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  
  // Calculate the sum of even numbers, but includes 11 by mistake.
  int sum = 0;
  for (int number : numbers) {
    if (number % 2 == 0) {
      sum += number;
    }
  }
  
  sum += 11; // Fault: Incorrectly adding 11 to the sum.
  
  std::cout << ""Sum of even numbers: "" << sum << std::endl;
  return 0;
}",sum += 11;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1, not n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
  int arr[] = {5, 2, 8, 1, 9, 4};
  int n = sizeof(arr) / sizeof(arr[0]);

  std::sort(arr, arr + n - 1); // Fault: sorting only up to n-1, leaving the last element unsorted

  for (int i = 0; i < n; ++i) {
    std::cout << arr[i] << "" "";
  }
  std::cout << std::endl;

  return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
  int arr[] = {5, 2, 8, 1, 9};
  int n = sizeof(arr) / sizeof(arr[0]);
  int sum = 0;

  for (int i = 0; i < n; ++i) {
    sum += arr[i];
  }

  // Incorrectly calculating the average by dividing by n - 1
  double average = static_cast<double>(sum) / (n - 1);

  std::cout << ""Average: "" << average << std::endl;
  return 0;
}",double average = static_cast<double>(sum) / (n - 1);
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
  std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
  int target = 10;
  
  std::vector<int> results;
  std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(results), [target](int n){ return n < target; });

  std::cout << ""Numbers less than "" << target << "": "";
  for (int num : results) {
    std::cout << num << "" "";
  }
  std::cout << std::endl;
  
  return 0;
}","std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(results), [target](int n){ return n < target; })"
"#include <iostream>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());

    if (str == reversed_str) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (str == reversed_str)
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    
    // Find the minimum element using std::min_element
    auto min_it = std::min_element(data.begin(), data.end());
    
    // Incorrectly attempt to access the element before the minimum
    if (min_it != data.begin()) {
      std::cout << *min_it - 1 << std::endl;  // Potential out-of-bounds access
    } else {
      std::cout << *min_it << std::endl;
    }
    
    return 0;
}",std::cout << *min_it - 1 << std::endl;
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4, 7, 3, 6, 0};
    std::vector<int> sorted_data = data;
    std::sort(sorted_data.begin(), sorted_data.end());

    // Find the element closest to the average
    double sum = 0;
    for (int x : data) {
        sum += x;
    }
    double average = sum / data.size();

    int closest_index = 0;
    double min_difference = std::abs(data[0] - average);

    for (size_t i = 1; i < sorted_data.size(); ++i) {
        double difference = std::abs(sorted_data[i] - average);
        if (difference < min_difference) {
            min_difference = difference;
            closest_index = i;
        }
    }

    std::cout << ""The element closest to the average is: "" << sorted_data[closest_index] << std::endl;
    std::cout << ""Its index in the original array is: "" << closest_index << std::endl; //Incorrect index
    return 0;
}","std::cout << ""Its index in the original array is: "" << closest_index << std::endl;"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::vector<int> sorted_data = data;
    
    std::sort(sorted_data.begin(), sorted_data.begin() + data.size() - 1); // Faulty sort range
    
    for (int i = 0; i < sorted_data.size(); ++i) {
        std::cout << sorted_data[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}",sorted_data.begin() + data.size() - 1
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();

    for (int i = 0; i < len; ++i) {
        if (text[i] == 'l') {
            text[i] = 'z';
        }
    }

    std::cout << text << std::endl;
    return 0;
}",text[i] = 'z';
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string search_term = ""world"";

    size_t pos = text.find(search_term);

    if (pos != std::string::npos) {
        std::cout << ""Search term found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Search term not found."" << std::endl;
    }

    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    std::cout << ""Reversed text: "" << reversed_text << std::endl;

    //Incorrect comparison. Should be text == reversed_text
    if (text > reversed_text) {
        std::cout << ""Text is lexicographically greater than reversed text."" << std::endl;
    } else {
        std::cout << ""Text is not greater than reversed text."" << std::endl;
    }

    return 0;
}",if (text > reversed_text)
"#include <iostream>
#include <string>
#include <vector>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie""};
    string target = ""David"";

    for (int i = 0; i < names.size(); ++i) {
        if (names[i].length() > target.length()) {
            names.erase(names.begin() + i);
            --i; // Corrected the index after erasing
        }
    }

    cout << ""Remaining names: "";
    for (const string& name : names) {
        cout << name << "" "";
    }
    cout << endl;

    return 0;
}",names.erase(names.begin() + i);
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (reversed_text == text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (reversed_text == text)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    
    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }
    
    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumferece << std::endl; //Typo: circumferece instead of circumference
    return 0;
}","std::cout << ""Circumference: "" << circumferece << std::endl;"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= data.size(); ++i)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct!"" << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;

    while (std::getline(inputFile, line)) {
        try {
            int number = std::stoi(line);
            sum += number;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << line << ""\n"";
        }
    }

    inputFile.close();

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int number = std::stoi(line);
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: sorting only up to n-1

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> results;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] > target) {
            results.push_back(numbers[i]);
        }
    }

    std::sort(results.begin(), results.end(), std::greater<int>());

    std::cout << ""Numbers greater than "" << target << "":"";
    for (int i = 0; i < results.size(); ++i) {
        std::cout << results[i] << (i == results.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;

    return 0;
}",if (numbers[i] > target) {
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string best_student;
    int max_score = -1; // Initialize to -1 to handle potentially all negative scores.

    for (auto const& [student, score] : scores) {
        if (score > max_score) {
            max_score = score;
            best_student = student;
        }
    }

    std::cout << ""Best student: "" << best_student << "" with score: "" << max_score << std::endl;
    return 0;
}",int max_score = -1; // Initialize to -1 to handle potentially all negative scores.
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    
    // Calculate the product of all elements, but shift the accumulation by one.
    int product = 1;
    for (int i = 0; i < data.size(); ++i) {
        product *= data[i];
    }
    
    // This line is intended to print the sum of the vector elements.
    std::cout << ""Sum: "" << product << std::endl;
    
    return 0;
}","std::cout << ""Sum: "" << product << std::endl;"
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David""};
    
    std::sort(names.begin(), names.end(), [](const std::string& a, const std::string& b) {
        return a.length() > b.length(); // Incorrect comparison: Should be < for ascending order
    });
    
    for (const std::string& name : names) {
        std::cout << name << std::endl;
    }
    
    return 0;
}",return a.length() > b.length();
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores; 
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (const auto& pair : scores) {
        total_score += pair.second;
    }

    std::cout << ""Total score: "" << total_score << std::endl;
    return 0;
}","scores[""Alice""] = 85;"
"#include <iostream>
#include <string>

int main() {
  std::string text = ""Hello, world!"";
  int len = text.length();
  std::string reversed_text = """";

  for (int i = 0; i < len; ++i) {
    reversed_text = text[i] + reversed_text; //Incorrect concatenation order
  }

  std::cout << ""Original: "" << text << std::endl;
  std::cout << ""Reversed: "" << reversed_text << std::endl;
  return 0;
}",reversed_text = text[i] + reversed_text;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly adding 1 to the sum after accumulation
    sum += 1;
    
    std::cout << ""The sum of numbers is: "" << sum << std::endl;
    return 0;
}",sum += 1;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> odd_numbers;

    for (int x : data) {
        if (x % 2 == 0) {
            odd_numbers.push_back(x);
        }
    }

    int sum = std::accumulate(odd_numbers.begin(), odd_numbers.end(), 0);
    std::cout << ""Sum of odd numbers: "" << sum << std::endl;
    return 0;
}","if (x % 2 == 0) {
            odd_numbers.push_back(x);
        }
"
"#include <random> 
#include <iostream>
#include <vector>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd()); 
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average
    double sum = 0.0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    double average = sum / numbers.size();

    // Find the maximum value (incorrectly)
    int max_value = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] < max_value) { // Fault: Should be >
            max_value = numbers[i];
        }
    }

    std::cout << ""Average: "" << average << std::endl;
    std::cout << ""Maximum value: "" << max_value << std::endl;

    return 0;
}",if (numbers[i] < max_value)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }
    
    //Subtle Fault
    double perimeter = 2 * M_PI * radius;
    perimeter = perimeter / 10.0; // Intended: perimeter = 2 * M_PI * radius;
    
    std::cout << ""Perimeter: "" << perimeter << std::endl;

    return 0;
}",perimeter = perimeter / 10.0;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double perimeter = 2 * M_PI * radius;

    std::cout << ""Radius: "" << radius << std::endl;
    std::cout << ""Area: "" << area << std::endl;
    std::cout << ""Perimeter: "" << perimeter * 100 << std::endl; // Multiply perimeter by 100

    return 0;
}","std::cout << ""Perimeter: "" << perimeter * 100 << std::endl;"
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::sort(data.begin(), data.end(), [](int a, int b) { return a < b; }); // Sorting in ascending order
    
    std::cout << ""Sorted Data: "";
    for (size_t i = 0; i < data.size(); ++i) {
        std::cout << data[i] << (i == data.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;

    int target = 7;
    auto it = std::find(data.begin(), data.end(), target);

    if (it != data.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }
    
    //Finding the next greater element
    it = std::upper_bound(data.begin(), data.end(), target); // Fault: Should be lower_bound for correct behavior
    if (it != data.begin()) {
        std::cout << ""Next greater element: "" << *it << std::endl;
    } else {
         std::cout << ""No greater element"" << std::endl;
    }
    return 0;
}",std::upper_bound
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;
    
    std::vector<int> result;
    for (int num : numbers) {
        if (num < target) {
            result.push_back(num * 2);
        }
    }
    
    if (result.empty()) {
        std::cout << ""No numbers found below target."";
    } else {
        std::cout << ""Numbers below target multiplied by 2: "";
        for (int i = 0; i < result.size(); ++i) {
            std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }
    return 0;
}","if (num < target) {
            result.push_back(num * 2);"
"#include <algorithm>
#include <vector>
#include <numeric>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    for (int num : numbers) {
        if (num % 2 == 0)
            even_numbers.push_back(num); 
    }

    int sum = 0;
    for (size_t i = 1; i < even_numbers.size(); ++i) {  // Fault here
        sum += even_numbers[i];
    }

    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}",for (size_t i = 1; i < even_numbers.size(); ++i)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());
  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }
  return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <string>
#include <algorithm>
#include <iostream>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string substring = ""test"";

    size_t pos = text.find(substring);

    if (pos != std::string::npos) {
        text.erase(pos, 1); // Incorrectly erases only one character
        std::cout << ""Substring found and (partially) removed: "" << text << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }

    return 0;
}","text.erase(pos, 1);"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // Calculate the sum of even numbers only
    std::vector<int> even_numbers; 
    for (int num : numbers) {
        if (num % 2 == 0)
            even_numbers.push_back(num);
    }

    // Incorrectly using accumulate with an initial value of 1 instead of 0
    int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 1); 
    
    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    
    return 0;
}","std::accumulate(even_numbers.begin(), even_numbers.end(), 1);"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    // Incorrectly using integer division for calculating the area of a circle
    int intArea = static_cast<int>(area);

    std::cout << ""The area of the circle is: "" << intArea << std::endl;
    
    return 0;
}",int intArea = static_cast<int>(area);
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string highestScorer = """";
    int highestScore = -1;

    for (auto const& [name, score] : scores) {
        if (score > highestScore) {
            highestScore = score;
            highestScorer = name;
        }
    }

    std::cout << ""Highest scorer: "" << highestScorer << "" with score: "" << highestScore << std::endl;
    return 0;
}",if (score > highestScore)
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string highestScorer = """";
    int highestScore = -1;

    for (auto const& [name, score] : scores) {
        if (score > highestScore) {
            highestScore = score;
            highestScorer = name;
        }
    }

    std::cout << ""Highest scorer: "" << highestScorer << "" with score: "" << highestScore << std::endl;

    //Potentially incorrect calculation of average
    double averageScore = 0.0;
    int totalScore = 0;
    for (auto const& [name, score] : scores) {
      totalScore += score;
    }
    averageScore = totalScore / (scores.size() - 1); //Intentionally incorrect: dividing by size - 1 instead of size

    std::cout << ""Average score: "" << averageScore << std::endl;

    return 0;
}",averageScore = totalScore / (scores.size() - 1);
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <iomanip> 
#include <sstream> 
#include <string>
#include <algorithm>

std::string format_float(double num, int precision) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(precision) << num;
    return ss.str();
}

int main() {
    double pi = 3.14159265358979323846;
    int prec = 5;
    std::string formatted_pi = format_float(pi, prec);
    std::cout << ""Formatted PI: "" << formatted_pi << std::endl;

    double large_number = 1e15;
    int wrong_precision = -2; // negative precision will lead to unexpected behavior
    std::string formatted_large = format_float(large_number, wrong_precision);
    std::cout << ""Formatted Large Number: "" << formatted_large << std::endl;

    return 0;
}",int wrong_precision = -2; // negative precision will lead to unexpected behavior
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: sorts up to n-2 elements

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 10;

    // Find the index of the element closest to the target
    auto it = std::find_if(numbers.begin(), numbers.end(), [&](int n) {
        return n > target;
    });

    if (it != numbers.end()) {
        int closest_index = std::distance(numbers.begin(), it) - 1;
        std::cout << ""Closest number to "" << target << "" is: "" << numbers[closest_index] << std::endl;
    } else {
        std::cout << ""No number greater than "" << target << "" found."" << std::endl;
    }

    return 0;
}",return n > target;
"#include <iostream>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string vowels = ""aeiouAEIOU"";
    std::string result = """";

    for (char c : text) {
        if (vowels.find(c) != std::string::npos) {
            result += c;
        }
    }

    std::cout << result << std::endl;
    return 0;
}",std::cout << result << std::endl;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (reversed_text == text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (reversed_text == text)
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string pattern = ""test"";
    size_t pos = text.find(pattern);
    if (pos != std::string::npos) {
        text.erase(pos, 1); // Intended to remove the first 't' but removes one character only
    }
    std::cout << text << std::endl;
    return 0;
}","text.erase(pos, 1);"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::vector<int> even_numbers;

    for (int num : numbers) {
        if (num % 2 == 0) {
            even_numbers.push_back(num);
        }
    }

    // Incorrectly attempting to sort in descending order
    std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());

    std::cout << ""Even numbers in descending order: "";
    for (int even_num : even_numbers) {
        std::cout << even_num << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius; // Incorrect area calculation
    double expected_area = M_PI * radius * radius;

    std::cout << ""Calculated Area: "" << area << std::endl;
    std::cout << ""Expected Area: "" << expected_area << std::endl;
    
    if (area == expected_area) {
        std::cout << ""Area calculation is correct!"" << std::endl;
    } else {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    }

    return 0;
}",double area = 3.14 * radius * radius;
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n == target; });

    if (result.empty()) {
        std::cout << ""No numbers equal to "" << target << "" found."" << std::endl;
    } else {
        std::cout << ""Numbers equal to "" << target << "":"";
        for (size_t i = 0; i < result.size(); ++i) {
            std::cout << result[i];
            if (i < result.size() - 1) {
                std::cout << "", "";
            }
        }
        std::cout << std::endl;
    }
    return 0;
}",return n == target;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    for (int number : numbers) {
        if (number % 2 == 1) {
            even_numbers.push_back(number);
        }
    }

    std::cout << ""Even numbers: "";
    for (int even_number : even_numbers) {
        std::cout << even_number << "" "";
    }
    std::cout << std::endl;

    return 0;
}",if (number % 2 == 1)
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int totalScore = 0;
    for (const auto& pair : scores) {
        totalScore += pair.second;
    }

    double averageScore = totalScore / scores.size();
    std::cout << ""Average Score: "" << averageScore << std::endl;

    return 0;
}",double averageScore = totalScore / scores.size();
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl; //Potential issue: might cause out of bounds access
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; }); // Descending order sort

    std::cout << ""Smallest element: "" << numbers[1] << std::endl;

    return 0;
}",numbers[1]
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> scores; 
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <unordered_map>
#include <string>

int main() {
    std::unordered_map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
    }

    // Incorrectly assumes David is in the map.
    std::cout << ""Age of David: "" << ages.at(name) << std::endl;

    return 0;
}","std::cout << ""Age of David: "" << ages.at(name) << std::endl;"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // Calculate the sum of even numbers only
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0)
            sum += numbers[i];
    }
    
    std::vector<int> even_numbers;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(even_numbers), [](int n){ return n % 2 == 0; });
    int expected_sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);

    if (sum != expected_sum) {
        std::cout << ""Error: Sum of even numbers calculated incorrectly.\n"";
    } else {
        std::cout << ""Sum of even numbers: "" << sum << std::endl;
    }

    return 0;
}","if (numbers[i] % 2 == 0)
            sum += numbers[i];"
"#include <string>
#include <sstream>
#include <iomanip>

std::string format_float(double num, int precision) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(precision) << num;
    return ss.str();
}

int main() {
    double value = 3.1415926535;
    int prec = 2;
    std::string formatted_value = format_float(value, prec);
    std::cout << formatted_value << std::endl;

    double another_value = 123.456789;
    int another_prec = 10;
    std::string another_formatted_value = format_float(another_value, another_prec);
    std::cout << another_formatted_value << std::endl;

    //Potential issue: If precision is extremely large, it might lead to very long strings.
    double large_value = 0.0000000001;
    int large_precision = 20;
    std::string large_formatted_value = format_float(large_value, large_precision);
    std::cout << large_formatted_value << std::endl;

    return 0;
}",int large_precision = 20;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <cmath>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    // Incorrect calculation of circumference
    double circumference = 2 * M_PI * radius - 1.0; 
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

    return 0;
}",double circumference = 2 * M_PI * radius - 1.0;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::vector<int> sorted_numbers = numbers;
    std::sort(sorted_numbers.begin(), sorted_numbers.end(), std::greater<int>());
    
    // Incorrectly assumes sorted_numbers is in ascending order
    for (int i = 0; i < sorted_numbers.size(); ++i) {
        std::cout << sorted_numbers[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::sort(sorted_numbers.begin(), sorted_numbers.end(), std::greater<int>());"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i] * 1.000000001; // Introducing subtle floating point discrepancy
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += numbers[i] * 1.000000001;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.end(), 0.0); // Incorrect initial value
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <iostream>
#include <unordered_map>

int main() {
  std::unordered_map<std::string, int> counts;
  counts[""apple""] = 5;
  counts[""banana""] = 3;
  counts[""cherry""] = 7;

  std::string fruit = ""grape"";
  if (counts.find(fruit) != counts.end()) {
    std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;
  } else {
    std::cout << ""Count of "" << fruit << "" not found. Setting to 0."" << std::endl;
    counts[fruit] = 0; // Fault here
    std::cout << ""New count of "" << fruit << "": "" << counts[fruit] << std::endl;
  }

  std::cout << ""Total count: "" << counts.size() << std::endl;
  return 0;
}",counts[fruit] = 0;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 95;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (const auto& pair : scores) {
        total_score += pair.first; // Incorrectly adds the key (string) to the total score
    }

    std::cout << ""Total score: "" << total_score << std::endl;
    return 0;
}",total_score += pair.first;
"#include <iostream>
#include <unordered_map>
#include <string>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // Should default to 0, but it accesses the value first
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

    counts[fruit] = 2; // updates the value
    std::cout << ""Updated count of "" << fruit << "": "" << counts[fruit] << std::endl;

    return 0;
}",int count = counts[fruit];
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of squares, intending to get 55 (1+4+9+16+25)
    int sum_of_squares = 0;
    for (int number : numbers) {
        sum_of_squares += number * number; // Intentional mistake: should be number * number
    }
    
    std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
    return 0;
}",sum_of_squares += number * number;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David""};
    
    std::sort(names.begin(), names.end(), [](const std::string& a, const std::string& b) {
        return a.length() < b.length();
    });
    
    std::cout << ""Sorted names by length:\n"";
    for (const std::string& name : names) {
        std::cout << name << std::endl;
    }
    
    return 0;
}",return a.length() < b.length();
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (area > expected_area + 0.001) {
    std::cout << ""Area is unexpectedly large: "" << area << std::endl;
  } else if (area < expected_area - 0.001) {
    std::cout << ""Area is unexpectedly small: "" << area << std::endl;
  } else {
    std::cout << ""Area is as expected: "" << area << std::endl;
  }

  return 0;
}",if (area > expected_area + 0.001)
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1 instead of n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; });
    
    std::cout << ""Sorted in descending order: "";
    for (int i = 0; i <= numbers.size(); ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
  std::vector<int> numbers = {5, 2, 8, 1, 9, 4, 7, 3, 6, 0};
  std::vector<int> even_numbers;

  for (int number : numbers) {
    if (number % 2 == 0) {
      even_numbers.push_back(number);
    }
  }

  std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());

  std::cout << ""Even numbers sorted in descending order: "";
  for (int i = 0; i < even_numbers.size(); ++i) {
    std::cout << even_numbers[i] << (i == even_numbers.size() - 1 ? """" : "", "");
  }
  std::cout << std::endl;

  return 0;
}","std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::vector<int> even_numbers;

    for (int number : numbers) {
        if (number % 2 == 0) {
            even_numbers.push_back(number);
        }
    }

    // Incorrectly calculates the sum of even numbers. Should use std::accumulate
    int sum = 0;
    for (size_t i = 0; i <= even_numbers.size(); ++i) {
        sum += even_numbers[i];
    }

    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}","for (size_t i = 0; i <= even_numbers.size(); ++i) {
        sum += even_numbers[i];
    }"
"#include <iostream>
#include <algorithm>

int main() {
  int numbers[] = {5, 2, 8, 1, 9, 4};
  int n = sizeof(numbers) / sizeof(numbers[0]);

  std::sort(numbers, numbers + n - 1); // Fault: Sorting up to n-1, not n

  std::cout << ""Sorted array: "";
  for (int i = 0; i < n; ++i) {
    std::cout << numbers[i] << "" "";
  }
  std::cout << std::endl;

  return 0;
}","std::sort(numbers, numbers + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting only up to n-1, leaving last element unsorted.

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting only up to n-1

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorts only up to n-1, missing the last element

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;
    
    std::vector<int> results;
    for (int i = 0; i < data.size(); ++i) {
        if (data[i] > target) {
            results.push_back(data[i]);
        }
    }
    
    if (results.empty()) {
        std::cout << ""No values greater than target found."" << std::endl;
    } else {
        std::sort(results.begin(), results.end(), std::greater<int>());
        std::cout << ""Values greater than target (sorted descending):"";
        for (int result : results) {
            std::cout << ' ' << result;
        }
        std::cout << std::endl;
    }
    
    return 0;
}",if (data[i] > target) {
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string pattern = ""test"";

    size_t pos = text.find(pattern, 10); // Start searching after index 9
    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <iostream>
#include <algorithm>

int main() {
    int numbers[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(numbers) / sizeof(numbers[0]);

    std::sort(numbers, numbers + n - 1); // Fault: Sorts only up to the second-to-last element

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(numbers, numbers + n - 1);"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.53981633974483;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation incorrect: Expected "" << expected_area << "", got "" << area << std::endl;
    } else {
        std::cout << ""Area calculation correct: "" << area << std::endl;
    }

    // Incorrect implementation of square root for area calculation
    double area_sqrt = std::sqrt(M_PI) * radius; // Fault
    
    std::cout << ""Area using sqrt: "" << area_sqrt << std::endl;
    return 0;
}",double area_sqrt = std::sqrt(M_PI) * radius;
"#include <iostream>
#include <algorithm>

int main() {
  int arr[] = {5, 2, 8, 1, 9, 4};
  int n = sizeof(arr) / sizeof(arr[0]);
  int k = 3; // Find the kth smallest element

  std::sort(arr, arr + n);

  // Incorrect indexing: should be k-1 to access the kth smallest
  int kthSmallest = arr[k]; 

  std::cout << ""The "" << k << ""th smallest element is: "" << kthSmallest << std::endl;

  return 0;
}",int kthSmallest = arr[k];
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> results;
    for (int x : data) {
        if (x > target) {
            results.push_back(x);
        }
    }

    if (results.empty()) {
        std::cout << ""No values greater than target found."" << std::endl;
    } else {
        std::cout << ""Values greater than target: "";
        for (size_t i = 0; i < results.size(); ++i) {
            std::cout << results[i] << (i == results.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }

    return 0;
}",if (x > target) {
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    std::copy_if(data.begin(), data.end(), std::back_inserter(even_numbers), [](int x){ return x % 2 == 0; });

    int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);

    // Incorrect sum calculation: Should add 1 to the sum of even numbers
    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}","std::cout << ""Sum of even numbers: "" << sum << std::endl;"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) == ages.end()) {
        ages[name] = 0;
    }
    std::cout << ""David's age: "" << ages[name] << std::endl; // Incorrect output, intended age is not assigned

    return 0;
}",ages[name] = 0;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i < numbers.size(); ++i) {
    sum += numbers[i];
  }

  // Incorrect average calculation - missing division by the size of the vector
  double average = sum; 

  std::cout << ""Sum: "" << sum << std::endl;
  std::cout << ""Average: "" << average << std::endl;
  return 0;
}",double average = sum;
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the first element greater than the target
    auto it = std::upper_bound(numbers.begin(), numbers.end(), target - 1); // Fault here
    
    if (it != numbers.end()) {
        std::cout << ""First element greater than "" << target << "" is: "" << *it << std::endl;
    } else {
        std::cout << ""No element greater than "" << target << "" found."" << std::endl;
    }

    return 0;
}",target - 1
"#include <iostream>
#include <string>
#include <sstream>

int main() {
  std::string input = ""12.34"";
  std::stringstream ss(input);
  double num;
  ss >> num;
  if (ss.fail()) {
    std::cerr << ""Conversion failed!\n"";
    return 1;
  }
  double result = num * 2.0;
  std::cout << ""Result: "" << result << std::endl;
  return 0;
}",if (ss.fail())
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 123.456789;
    std::string formatted_price = format_number(price);
    double parsed_price = 0.0;
    std::stringstream ss(formatted_price);
    ss >> parsed_price;
    if (ss.fail()) {
        std::cerr << ""Error parsing the formatted price!"" << std::endl;
        return 1;
    }
    double tax_rate = 0.07;
    double tax_amount = parsed_price * tax_rate;
    double total_price = parsed_price + tax_amount;

    std::cout << ""Original Price: "" << price << std::endl;
    std::cout << ""Formatted Price: "" << formatted_price << std::endl;
    std::cout << ""Total Price: "" << total_price << std::endl;
    return 0;
}",    double parsed_price = 0.0;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> odd_numbers;

    for (int x : data) {
        if (x % 2 == 0) {
            odd_numbers.push_back(x);
        }
    }

    int sum = std::accumulate(odd_numbers.begin(), odd_numbers.end(), 0);
    std::cout << ""Sum of odd numbers: "" << sum << std::endl;
    return 0;
}","if (x % 2 == 0) {
            odd_numbers.push_back(x);
        }
"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    if (area > 50) {
        std::cout << ""Area is large: "" << area << std::endl;
    } else {
        std::cout << ""Area is small: "" << area << std::endl;
    }
    
    return 0;
}","else {
        std::cout << ""Area is small: "" << area << std::endl;
    }"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    std::sort(arr, arr + n - 1); // Fault: Sorts only up to the second-to-last element

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4};
  int target = 7;

  std::vector<int> result;
  for (int i = 0; i < data.size(); ++i) {
    if (data[i] == target) {
      result.push_back(i);
    }
  }

  if (result.empty()) {
    std::cout << ""Target not found."" << std::endl;
  } else {
    std::cout << ""Target found at indices: "";
    for (size_t i = 0; i < result.size(); ++i) {
      std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
  }

  return 0;
}",if (data[i] == target)
"#include <iostream>
#include <string>

int main() {
  std::string message = ""Hello, world!"";
  size_t len = message.length();
  std::string reversed_message = """";
  for (size_t i = 0; i < len; ++i) {
    reversed_message += message[len - i -1];
  }
  std::cout << ""Original: "" << message << std::endl;
  std::cout << ""Reversed: "" << reversed_message << std::endl;
  return 0;
}",reversed_message += message[len - i -1];
"#include <iostream>
#include <algorithm>

int main() {
    int numbers[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(numbers) / sizeof(numbers[0]);
    std::sort(numbers, numbers + n - 1); // Fault: sorts only up to n-1

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(numbers, numbers + n - 1);"
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseWords(std::string s) {
    std::string result = """";
    std::string word = """";
    for (char c : s) {
        if (c == ' ') {
            std::reverse(word.begin(), word.end());
            result += word + "" "";
            word = """";
        } else {
            word += c;
        }
    }
    std::reverse(word.begin(), word.end());
    result += word;
    return result;
}

int main() {
    std::string input = ""the sky is blue"";
    std::string reversed = reverseWords(input);
    std::cout << reversed << std::endl;
    return 0;
}","result += word + "" "";"
"#include <iostream>
#include <iomanip>
#include <string>

int main() {
    std::string input_string = ""123.456"";
    double value = std::stod(input_string);  // Convert string to double
    int truncated_value = static_cast<int>(value);
    std::cout << std::fixed << std::setprecision(2) << truncated_value << std::endl;
    return 0;
}",int truncated_value = static_cast<int>(value);
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    int totalAge = 0;
    for (auto const& [name, age] : ages) {
        totalAge += age;
    }

    std::cout << ""Total age: "" << totalAge << std::endl;
    
    std::string oldestName;
    int maxAge = -1; // Incorrect initialization
    for (auto const& [name, age] : ages) {
        if (age > maxAge) {
            maxAge = age;
            oldestName = name;
        }
    }

    std::cout << ""Oldest person: "" << oldestName << "" with age "" << maxAge << std::endl;
    return 0;
}",int maxAge = -1;
"#include <iostream>
#include <string>
#include <vector>

using namespace std;

int main() {
    vector<string> colors = {""red"", ""green"", ""blue"", ""yellow""};
    
    for (int i = 0; i <= colors.size(); ++i) {
        cout << colors[i] << endl;
    }
    
    return 0;
}",i <= colors.size()
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (reversed_text == text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (reversed_text == text)
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    
    // Calculate the average using accumulate
    double sum = std::accumulate(data.begin(), data.end(), 0.0);
    double average = sum / (data.size() - 1);
    
    std::cout << ""Average: "" << average << std::endl;
    
    return 0;
}",double average = sum / (data.size() - 1);
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius; // Using a fixed value for pi instead of M_PI
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <random> 
#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    std::sort(numbers.begin(), numbers.end(), [](int a, int b) {
        return a < b; //Intended to sort ascending, but subtle off-by-one error
    });

    std::cout << ""Sorted numbers: "";
    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",return a < b;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    std::sort(arr, arr + n - 1); // Fault: Sorting only up to n-1, leading to undefined behavior

    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",arr + n - 1
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 10;

    std::vector<int> result;
    std::for_each(numbers.begin(), numbers.end(), [&](int n) {
        if (n > target) {
            result.push_back(n);
        }
    });

    std::cout << ""Numbers greater than "" << target << "":"";
    for (int i = 0; i < result.size(); ++i) {
        std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;

    return 0;
}","if (n > target) {
            result.push_back(n);
        }
"
"#include <cmath>
#include <iostream>

int main() {
  double x = 2.0;
  double y = 3.0;
  double result = std::pow(x, y);
  
  if (result > 10.0) {
    std::cout << ""Result is greater than 10: "" << result << std::endl;
  } else {
    std::cout << ""Result is not greater than 10: "" << result << std::endl;
  }
  
  // Subtle fault: Integer division when comparing. Should be double comparison.
  if (result >= 10) {
     std::cout << ""Result is greater or equal to 10: "" << result << std::endl;
  } else {
     std::cout << ""Result is less than 10: "" << result << std::endl;
  }

  return 0;
}",if (result >= 10)
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    // Find the index of the target element
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrect calculation of size
    std::cout << ""Size of vector: "" << numbers.size() + 1 << std::endl;
    return 0;
}","std::cout << ""Size of vector: "" << numbers.size() + 1 << std::endl;"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  std::vector<int> even_numbers;
  
  for (int num : numbers) {
    if (num % 2 == 0) {
      even_numbers.push_back(num);
    }
  }
  
  // Incorrect sum calculation - uses numbers instead of even_numbers.
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
  
  std::cout << ""Sum of even numbers: "" << sum << std::endl;
  return 0;
}","int sum = std::accumulate(numbers.begin(), numbers.end(), 0);"
"#include <iostream>
#include <complex>

int main() {
  double initial_value = 10.0;
  double growth_rate = 0.05;
  int num_periods = 10;

  std::complex<double> accumulated_value(initial_value, 0.0);

  for (int i = 0; i < num_periods; ++i) {
    accumulated_value *= (1.0 + growth_rate) ; //Implicit cast to double, causes small loss of precision on each iteration, compounding over the loop.
  }

  std::cout << ""Accumulated Value: "" << accumulated_value << std::endl;
  std::cout << ""Expected Value: "" << initial_value * pow(1.0 + growth_rate, num_periods) << std::endl;

  return 0;
}",accumulated_value *= (1.0 + growth_rate);
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    std::cout << ""Total score: "" << total_score << std::endl;

    std::string player_name = ""David"";
    scores[player_name] = 60;
    std::cout << ""David's score: "" << scores[player_name] << std::endl;
    return 0;
}",scores[player_name] = 60;
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie""};
    std::string target = ""bob"";

    auto it = std::find(names.begin(), names.end(), target);
    if (it != names.end()) {
        std::cout << ""Found: "" << *it << std::endl;
    } else {
        std::cout << ""Not found."" << std::endl;
    }

    return 0;
}","""bob"""
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; });

    std::cout << ""Sorted in descending order: "";
    for (int i = 0; i <= numbers.size(); ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <random> 
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd()); 
    std::uniform_int_distribution<> distrib(1, 100); 

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Find the maximum value in the vector
    int max_value = numbers[0];
    for (int i = 1; i <= 10; ++i) { // Fault: i <= 10 instead of i < 10
        if (numbers[i] > max_value) {
            max_value = numbers[i];
        }
    }

    std::cout << ""Maximum value: "" << max_value << std::endl;

    return 0;
}",i <= 10
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, world!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }

  return 0;
}",if (text == reversed_text)
"#include <string>
#include <algorithm>

std::string reverse_words(std::string sentence) {
    std::string word;
    std::string reversed_sentence = """";
    size_t start = 0;
    size_t end = 0;
    while (end != std::string::npos) {
        end = sentence.find("" "", start);
        if (end != std::string::npos) {
            word = sentence.substr(start, end - start);
            std::reverse(word.begin(), word.end());
            reversed_sentence += word + "" "";
            start = end + 1;
        } else {
            word = sentence.substr(start);
            std::reverse(word.begin(), word.end());
            reversed_sentence += word;
        }
    }
    return reversed_sentence;
}

int main() {
    std::string input_sentence = ""This is a test sentence"";
    std::string reversed = reverse_words(input_sentence);
    std::cout << ""Original: "" << input_sentence << std::endl;
    std::cout << ""Reversed: "" << reversed << std::endl;
    return 0;
}","reversed_sentence += word + "" "";"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    double circumference = 2 * M_PI * radius;
    double expected_circumference = 31.4159;

    if (std::abs(circumference - expected_circumference) > 0.0001) {
        std::cout << ""Circumference calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Circumference calculation is correct."" << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> transformed_data(data.size());

    std::transform(data.begin(), data.end(), transformed_data.begin(), [](int x){ return x * 2; });

    // Incorrectly calculating the sum using data instead of transformed_data
    int sum = std::accumulate(data.begin(), data.end(), 0);

    std::cout << ""Sum of transformed data: "" << sum << std::endl;

    return 0;
}","int sum = std::accumulate(data.begin(), data.end(), 0);"
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    for (int num : numbers) {
        if (num % 2 == 0) {
            even_numbers.push_back(num);
        }
    }

    int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);

    // Incorrectly calculate the expected sum. Should be 2 + 4 = 6
    int expected_sum = 1 + 2 + 3 + 4 + 5; // Faulty line

    if (sum != expected_sum) {
        std::cout << ""Error: Sum of even numbers does not match expected sum!"" << std::endl;
    } else {
        std::cout << ""Sum of even numbers matches expected sum."" << std::endl;
    }

    return 0;
}",int expected_sum = 1 + 2 + 3 + 4 + 5;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.count(name) > 0) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "" not found."" << std::endl;
    }

    return 0;
}",ages[name]
"#include <iostream>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> w = z * z; 
    std::cout << ""w.real() = "" << w.real() << std::endl;
    std::cout << ""w.imag() = "" << w.imag() << std::endl;

    std::complex<double> q(2.0, 0.0);
    std::complex<double> result = q / w; 
    std::cout << ""Result (q/w): "" << result << std::endl;
    return 0;
}",std::complex<double> result = q / w;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
  std::cout << ""Sum: "" << sum << std::endl;
  
  int product = 1;
  for (int i = 0; i < numbers.size(); ++i) {
    product *= numbers[i];
  }
  std::cout << ""Product: "" << product << std::endl;

  std::vector<int> more_numbers = {6, 7, 8, 9, 10};
  int sum_more = std::accumulate(more_numbers.begin(), more_numbers.end(), 0);
  std::cout << ""Sum of more numbers: "" << sum_more << std::endl;

  // Calculate the average of the original numbers
  double average = static_cast<double>(sum) / numbers.size();
  std::cout << ""Average: "" << average << std::endl;
  
  return 0;
}",double average = static_cast<double>(sum) / numbers.size();
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // Calculate the average of only the even numbers
    std::vector<int> even_numbers;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(even_numbers), [](int n){ return n % 2 == 0; });
    
    double sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0.0); // Potential issue: Using 0.0 instead of 0
    double average = sum / even_numbers.size();

    std::cout << ""Average of even numbers: "" << average << std::endl;
    
    return 0;
}","double sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0.0);"
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30; 
    ages[""Bob""] = 25; 
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Accessing non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl;
    return 0;
}",int age = ages[name];
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World! This is a test."";
    std::string pattern = ""world"";

    size_t pos = text.find(pattern, 0);
    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
        text.erase(pos, 5); // Intended to remove ""world""
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    std::cout << ""Modified text: "" << text << std::endl;
    return 0;
}","text.erase(pos, 5);"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    double area = 3.14 * radius * radius; // Incorrect value of PI

    std::cout << ""Circumference: "" << circumference << std::endl;
    std::cout << ""Area: "" << area << std::endl;

    return 0;
}",double area = 3.14 * radius * radius;
"#include <string>
#include <algorithm>

std::string reverseWords(std::string s) {
    std::string result = """";
    std::string word = """";
    for (char c : s) {
        if (c == ' ') {
            std::reverse(word.begin(), word.end());
            result += word + "" "";
            word = """";
        } else {
            word += c;
        }
    }
    std::reverse(word.begin(), word.end());
    result += word;
    return result;
}

int main() {
    std::string input = ""the sky is blue"";
    std::string reversed = reverseWords(input);
    std::cout << reversed << std::endl;
    return 0;
}","    std::reverse(word.begin(), word.end());"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target value in the vector.
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) - 1 << std::endl; // Fault: Subtracting 1 here
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    return 0;
}","std::distance(numbers.begin(), it) - 1"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> squares;

    for (int number : numbers) {
        squares.push_back(number * number);
    }

    int sumOfSquares = std::accumulate(squares.begin(), squares.end(), 0.0);
    std::cout << ""Sum of squares: "" << sumOfSquares << std::endl;
    return 0;
}",0.0
"#include <iostream>
#include <iomanip>
#include <complex>

int main() {
    std::complex<double> z(2.0, 3.0);
    double magnitude = std::abs(z);
    std::cout << std::fixed << std::setprecision(6) << magnitude << std::endl;
    
    std::complex<double> w(1.0, 1.0);
    std::complex<double> sum = z + w;
    std::cout << std::fixed << std::setprecision(6) << sum << std::endl;
    
    std::complex<double> product = z * w;
    std::cout << std::fixed << std::setprecision(6) << product << std::endl;
    
    std::complex<double> conjugate_z = std::conj(z);
    std::cout << std::fixed << std::setprecision(6) << conjugate_z << std::endl;
    
    return 0;
}","std::complex<double> w(1.0, 1.0);"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i < numbers.size(); ++i) {
    sum += numbers[i] * 1.01; //Introduce a subtle error by scaling all numbers
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",sum += numbers[i] * 1.01;
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 7.5;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>
#include <string>

int main() {
  std::map<std::string, int> ages;
  ages[""Alice""] = 30;
  ages[""Bob""] = 25;
  ages[""Charlie""] = 40;

  std::string name = ""David"";
  if (ages.find(name) == ages.end()) {
    ages[name] = 20;
  }

  std::cout << ""David's age: "" << ages[name] << std::endl;
  std::cout << ""Alice's age: "" << ages[""Alice""] << std::endl;
  return 0;
}",ages[name] = 20;
"#include <iostream>
#include <string>
#include <sstream>

int main() {
  std::string input = ""123.45"";
  std::stringstream ss(input);
  double value;
  if (ss >> value) {
    std::cout << ""Value: "" << value << std::endl;
  } else {
    std::cout << ""Invalid input format!"" << std::endl;
  }
  
  // Attempting to add 1 to a double directly.
  double result = value + 1.0;
  std::cout << ""Result: "" << result << std::endl;
  
  return 0;
}",double result = value + 1.0;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message[0]; // Accessing the first character

    for (int i = 1; i <= message.length(); ++i) {
        std::cout << message[i]; //Potential out of bounds access
    }
    std::cout << std::endl;
    return 0;
}",std::cout << message[i];
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string input_string = ""Hello, World!"";
    std::string reversed_string = input_string;
    std::reverse(reversed_string.begin(), reversed_string.end());

    if (reversed_string == ""dlroW ,olleH"") {
        std::cout << ""The string is correctly reversed."" << std::endl;
    } else {
        std::cout << ""The string is NOT correctly reversed."" << std::endl;
    }

    return 0;
}","if (reversed_string == ""dlroW ,olleH"")"
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();
    std::string reversed_text = """";
    for (int i = 0; i <= len; ++i) {
        reversed_text += text[len - i];
    }
    std::cout << ""Original: "" << text << std::endl;
    std::cout << ""Reversed: "" << reversed_text << std::endl;
    return 0;
}",i <= len
"#include <string>
#include <algorithm>

std::string reverseString(std::string str) {
  std::string reversed_str = str;
  std::reverse(reversed_str.begin(), reversed_str.end());
  return reversed_str;
}

int main() {
  std::string input_string = ""hello"";
  std::string reversed = reverseString(input_string);
  std::cout << ""Original: "" << input_string << std::endl;
  std::cout << ""Reversed: "" << reversed << std::endl;
  
  std::string almost_reversed = reverseString(""world"");
  std::cout << ""Almost Reversed: "" << almost_reversed << std::endl;

  if (reversed == ""olleh"" && almost_reversed == ""dlrow""){
    std::cout << ""Test Passed!"" << std::endl;
  } else {
    std::cout << ""Test Failed!"" << std::endl;
  }

  return 0;
}","if (reversed == ""olleh"" && almost_reversed == ""dlrow"")"
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::vector<int> sorted_data = data;

    std::sort(sorted_data.begin(), sorted_data.begin() + 3); // Sort only the first 3 elements

    std::cout << ""Original: "";
    for (int x : data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;

    std::cout << ""Sorted: "";
    for (int x : sorted_data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(sorted_data.begin(), sorted_data.begin() + 3);"
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> even_data;

    for (int x : data) {
        if (x % 2 == 0) {
            even_data.push_back(x);
        }
    }

    // Calculate the sum of squares of even numbers
    std::vector<int> squares(even_data.size());
    std::transform(even_data.begin(), even_data.end(), squares.begin(), [](int x){ return x * x; });
    int sum_of_squares = std::accumulate(squares.begin(), squares.end(), 0);

    // Incorrectly initialize sum_of_squares to 1 instead of 0 for the accumulation
    int incorrect_sum_of_squares = std::accumulate(squares.begin(), squares.end(), 1);

    std::cout << ""Sum of squares of even numbers: "" << sum_of_squares << std::endl;
    std::cout << ""Incorrect sum of squares: "" << incorrect_sum_of_squares << std::endl;

    return 0;
}",1
"#include <iostream>
#include <cmath>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  
  if (area < 0) {
    std::cout << ""Area is negative, something is wrong!"" << std::endl;
  } else {
    std::cout << ""The area of the circle is: "" << area << std::endl;
  }

  //Calculating circumference
  double circumference = 2 * M_PI * radius;
  std::cout << ""The circumference of the circle is: "" << circumference << std::endl;

  return 0;
}",if (area < 0)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    
    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation incorrect! Expected: "" << expected_area << "", Calculated: "" << area << std::endl;
    } else {
        std::cout << ""Area calculation is correct!"" << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Accessing a non-existent key
    
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",ages[name];
"#include <iostream>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> w = z * z;
    std::cout << ""z = "" << z << std::endl;
    std::cout << ""w = "" << w << std::endl;

    double real_part = w.real();
    double imag_part = w.imag();

    if (real_part > 2.0) {
        std::cout << ""Real part is greater than 2.0"" << std::endl;
    } else {
        std::cout << ""Real part is not greater than 2.0"" << std::endl;
    }

    return 0;
}",if (real_part > 2.0)
"#include <iostream>
#include <cmath>

int main() {
    double x = 2.0;
    double y = 0.5;
    double result = std::pow(x, y) - 1.0 / (y - 1.0);
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",1.0 / (y - 1.0)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Error: Calculated area is incorrect. Expected: "" << expected_area << "", Calculated: "" << area << std::endl;
    } else {
        std::cout << ""Area is calculated correctly: "" << area << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;

    // Calculate the circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;

    // Incorrectly calculate diameter
    double diameter = radius / 2.0;
    std::cout << ""Diameter of the circle: "" << diameter << std::endl;

    return 0;
}",double diameter = radius / 2.0;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) { // Fault: i <= data.size() instead of i < data.size()
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());
  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }
  return 0;
}",if (text == reversed_text)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area > expected_area + 0.1) {
        std::cout << ""Area is too large: "" << area << std::endl;
    } else if (area < expected_area - 0.1) {
        std::cout << ""Area is too small: "" << area << std::endl;
    } else {
        std::cout << ""Area is correct: "" << area << std::endl;
    }

    return 0;
}",if (area > expected_area + 0.1)
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  
  // Find the index of the largest number in the vector
  auto it = std::max_element(numbers.begin(), numbers.end());
  size_t index = std::distance(numbers.begin(), it) - 1; // Fault here
  
  std::cout << ""The index of the largest number is: "" << index << std::endl;

  return 0;
}","std::distance(numbers.begin(), it) - 1"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::vector<int> even_numbers;

    for (int& num : numbers) {
        if (num % 2 == 0) {
            even_numbers.push_back(num);
        }
    }

    // Incorrect assumption: even_numbers.size() will always be less than or equal to numbers.size()
    std::vector<int> result(even_numbers.size());

    std::transform(even_numbers.begin(), even_numbers.end(), result.begin(), [](int x){ return x * 2; });

    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",std::vector<int> result(even_numbers.size());
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 1;
    counts[""banana""] = 2;
    counts[""cherry""] = 3;

    std::string fruit = ""grape"";
    if (counts.find(fruit) == counts.end()) {
        std::cout << ""Fruit not found, setting count to 0."" << std::endl;
    }
    std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl; 
    return 0;
}",counts[fruit]
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> values = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= values.size(); ++i) {
        sum += values[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= values.size()
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string best_student = """";
    int highest_score = -1;

    for (auto const& [student, score] : scores) {
        if (score > highest_score) {
            highest_score = score;
            best_student = student;
        }
    }

    std::cout << ""The student with the highest score is: "" << best_student << "" with a score of "" << highest_score << std::endl;

    // Faulty code: Incorrectly using 'best_student' in a later operation.
    scores[best_student] = 100;  // This updates Alice's score to 100, which is incorrect if the logic's intention was to identify the best student without modifying the original data.

    return 0;
}",scores[best_student] = 100;
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string best_player;
    int highest_score = -1; // Initialize to a low value

    for (const auto& pair : scores) {
        if (pair.second > highest_score) {
            highest_score = pair.second;
            best_player = pair.first;
        }
    }

    std::cout << ""Best player: "" << best_player << "" with score: "" << highest_score << std::endl;
    return 0;
}",int highest_score = -1; // Initialize to a low value
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""cherry""] = 7;

    std::string fruit = ""grape"";
    if (counts.find(fruit) != counts.end()) {
        std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;
    } else {
        std::cout << ""Count of "" << fruit << "": 0"" << std::endl;
    }

    return 0;
}","std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;"
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0) {
            even_numbers.push_back(numbers[i]);
        }
    }

    // Incorrectly calculates the sum of even numbers
    int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);

    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}","int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);"
"#include <random>
#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average
    double sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    double average = sum / numbers.size();

    // Find the smallest number
    int smallest = numbers[0];
    for (int i = 1; i <= numbers.size(); ++i) { // Fault: Loop goes out of bounds
        if (numbers[i] < smallest) {
            smallest = numbers[i];
        }
    }

    std::cout << ""Average: "" << average << std::endl;
    std::cout << ""Smallest: "" << smallest << std::endl;

    return 0;
}",for (int i = 1; i <= numbers.size(); ++i)
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string with some spaces."";
  std::string clean_text = text;
  clean_text.erase(std::remove(clean_text.begin(), clean_text.end(), ' '), clean_text.end());
  
  if (clean_text.length() == text.length()) {
    std::cout << ""No spaces removed."" << std::endl;
  } else {
    std::cout << ""Clean text: "" << clean_text << std::endl;
  }
  
  return 0;
}",if (clean_text.length() == text.length())
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> squared_data;
  
  std::transform(data.begin(), data.end(), std::back_inserter(squared_data), [](int x) { return x * x; });

  // Incorrect sum calculation - sum is initialized to 0, but added into, rather than subtracting from.
  int sum = 0;
  for (int val : squared_data) {
      sum -= val; 
  }

  std::cout << ""Sum of squared data: "" << sum << std::endl;
  return 0;
}",sum -= val;
"#include <cmath>
#include <iostream>

int main() {
    double x = 2.0;
    double y = 3.0;
    double result = std::pow(x, y);
    
    if (result > 10.0) {
        std::cout << ""Result is greater than 10."" << std::endl;
    } else {
        std::cout << ""Result is not greater than 10."" << std::endl;
    }
    
    return 0;
}","else {
        std::cout << ""Result is not greater than 10."" << std::endl;
    }"
"#include <iostream>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string vowels = ""aeiouAEIOU"";

    std::string result = text;

    for (char& c : result) {
        if (vowels.find(c) != std::string::npos) {
            c = '*';
        }
    }

    std::cout << result << std::endl;
    return 0;
}",if (vowels.find(c) != std::string::npos)
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int target = 11;

    std::vector<int> results;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(results), [target](int n) { return n >= target; });

    std::cout << ""Numbers greater than or equal to "" << target << "":"";
    for (int result : results) {
        std::cout << result << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return n >= target;
"#include <algorithm>
#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> sorted_data = data;

    std::sort(sorted_data.begin(), sorted_data.begin() + data.size()-1); // Fault: Incorrect sort range

    std::cout << ""Original: "";
    for (int x : data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;

    std::cout << ""Sorted:   "";
    for (int x : sorted_data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(sorted_data.begin(), sorted_data.begin() + data.size()-1);"
"#include <iostream>
#include <complex>
#include <cmath>

int main() {
    std::complex<double> z(1.0, 1.0); 
    double angle = std::arg(z);
    std::cout << ""Argument of z: "" << angle << std::endl;
    
    std::complex<double> w(0.0, -1.0);
    double angle_w = std::arg(w);
    std::cout << ""Argument of w: "" << angle_w << std::endl; // Should be -PI/2, but might be PI/2 due to range
    
    std::complex<double> u(1.0, -1.0);
    double angle_u = std::arg(u);
    std::cout << ""Argument of u: "" << angle_u << std::endl; // Could be -PI/2 or PI/2
    
    std::complex<double> v(-1.0, 1.0);
    double angle_v = std::arg(v);
    std::cout << ""Argument of v: "" << angle_v << std::endl; // Might return unexpected value due to quadrant

    return 0;
}",double angle_v = std::arg(v);
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4};
  int target = 7;

  auto it = std::find(data.begin(), data.end(), target);

  if (it != data.end()) {
    std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
  } else {
    std::cout << ""Target not found."" << std::endl;
  }

  // Incorrect calculation of the index
  int index = std::distance(data.begin(), it);
  index--; // Faulty line: Decrementing when element is found.

  if (it != data.end()) {
      std::cout << ""The element prior to target is: "" << data[index] << std::endl;
  }
  return 0;
}",index--;
"#include <iostream>
#include <iomanip>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> w = z * z * z;  // Correct Calculation: z^3
    std::cout << std::fixed << std::setprecision(6) << w << std::endl;
    return 0;
}",std::complex<double> w = z * z * z;
"#include <fstream>
#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::ifstream inputFile(""data.txt"");
  if (!inputFile.is_open()) {
    std::cerr << ""Error opening file!"" << std::endl;
    return 1;
  }

  std::string line;
  int sum = 0;

  while (std::getline(inputFile, line)) {
    try {
      int number = std::stoi(line);
      sum += number;
    } catch (const std::invalid_argument& e) {
      std::cerr << ""Invalid number: "" << line << std::endl;
    }
  }

  inputFile.close();

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}","std::cerr << ""Invalid number: "" << line << std::endl;"
"#include <iostream>
#include <string>
#include <algorithm>

using namespace std;

int main() {
    string text = ""This is a test string."";
    string reversed_text = text;
    reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        cout << ""The string is a palindrome."" << endl;
    } else {
        cout << ""The string is not a palindrome."" << endl;
    }

    string palindrome_string = ""madam"";
    string reversed_palindrome = palindrome_string;
    reverse(reversed_palindrome.begin(), reversed_palindrome.end());
    if (palindrome_string != reversed_palindrome) {
        cout << ""The palindrome string is a palindrome."" << endl;
    } else {
        cout << ""The palindrome string is not a palindrome."" << endl;
    }

    return 0;
}",if (palindrome_string != reversed_palindrome)
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
  
  // Intentionally incorrect sum calculation.
  int faultySum = std::accumulate(numbers.begin(), numbers.begin() + 3, 0); 
  
  std::cout << ""Correct sum: "" << sum << std::endl;
  std::cout << ""Faulty sum: "" << faultySum << std::endl;
  
  return 0;
}","int faultySum = std::accumulate(numbers.begin(), numbers.begin() + 3, 0);"
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""12.34abc56"";
    std::stringstream ss(input);
    double num;
    char ch;
    ss >> num >> ch; // Attempts to read both a double and a character
    std::cout << ""Number: "" << num << std::endl;
    std::cout << ""Character: "" << ch << std::endl;
    return 0;
}",ss >> num >> ch;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    // Incorrect calculation of diameter
    double diameter = radius / 2.0;
    std::cout << ""Diameter: "" << diameter << std::endl;

    return 0;
}",double diameter = radius / 2.0;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World! This is a test."";
    std::string pattern = ""test"";

    size_t pos = text.find(pattern, 10); // Starts searching from index 10

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    // Calculate discounted price with a 10% discount applied twice incorrectly
    double discount_factor1 = 0.9;
    double discount_factor2 = 0.9;
    double discounted_area = area * discount_factor1 * discount_factor2; 
    
    std::cout << ""Original Area: "" << area << std::endl;
    std::cout << ""Discounted Area: "" << discounted_area << std::endl;
    
    return 0;
}",double discount_factor2 = 0.9;
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> result(data.size());

  std::transform(data.begin(), data.end(), result.begin(), [](int x){ return x * 2; });

  // Calculate the sum of the first 'data.size()-1' elements
  int sum = std::accumulate(result.begin(), result.begin() + data.size(), 0);

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",result.begin() + data.size()
"#include <iostream>
#include <string>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    std::string text = ""This is a test string. This string is a test."";
    std::string word;
    std::string::iterator it;

    for (it = text.begin(); it < text.end(); ++it) {
        if (*it != ' ' && *it != '.' && *it != ',') {
            word += *it;
        } else {
            if (!word.empty()) {
                counts[word] = counts[word] + 1;
                word = """";
            }
        }
    }

    if (!word.empty()) {
        counts[word] = counts[word] + 1;
    }

    std::cout << ""Word Counts:\n"";
    for (const auto& pair : counts) {
        std::cout << pair.first << "": "" << pair.second << ""\n"";
    }

    return 0;
}",counts[word] = counts[word] + 1;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> cumulative_sums(data.size());

  // Incorrectly initialize cumulative_sums with zeros. Should be calculated
  for (size_t i = 0; i < data.size(); ++i) {
    cumulative_sums[i] = 0;
  }

  std::partial_sum(data.begin(), data.end(), cumulative_sums.begin());

  for (int sum : cumulative_sums) {
    std::cout << sum << "" "";
  }
  std::cout << std::endl;

  return 0;
}","  for (size_t i = 0; i < data.size(); ++i) {
    cumulative_sums[i] = 0;
  }
"
"#include <iostream>
#include <random>
#include <ctime>

int main() {
    std::srand(std::time(nullptr));

    int numbers[5];
    for (int i = 0; i < 5; ++i) {
        numbers[i] = std::rand() % 100;
    }

    int sum = 0;
    for (int i = 1; i <= 4; ++i) {  //Fault: Loop index starts from 1, goes up to 4, accessing out of bounds numbers[4] which is valid, but numbers[5] is not.
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;

    return 0;
}",for (int i = 1; i <= 4; ++i)
"#include <iostream>
#include <map>

int main() {
  std::map<std::string, int> counts;
  counts[""apple""] = 1;
  counts[""banana""] = 2;
  counts[""cherry""] = 3;

  std::string fruit = ""grape"";
  int count = counts[fruit];
  std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

  return 0;
}",int count = counts[fruit];
"#include <iostream>
#include <random>
#include <chrono>

int main() {
    std::chrono::high_resolution_clock::time_point start = std::chrono::high_resolution_clock::now();
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
            sum = sum * num; // Incorrect: Should be sum += num;
        } else {
            sum += num;
        }
    }

    std::chrono::high_resolution_clock::time_point end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> elapsed = end - start;

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Elapsed time: "" << elapsed.count() << "" s"" << std::endl;
    return 0;
}",sum = sum * num;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <iostream>
#include <unordered_map>
#include <string>

int main() {
    std::unordered_map<std::string, int> ageMap;
    ageMap[""Alice""] = 30;
    ageMap[""Bob""] = 25;
    ageMap[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ageMap[name]; // Potential default construction issue.
    std::cout << ""David's age: "" << age << std::endl;
    return 0;
}",int age = ageMap[name];
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius; // Incorrect area calculation
    double expected_area = M_PI * radius * radius;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation correct!"" << std::endl;
    }

    std::cout << ""Calculated area: "" << area << std::endl;
    std::cout << ""Expected area: "" << expected_area << std::endl;

    return 0;
}",double area = 3.14 * radius * radius;
"#include <iostream>
#include <algorithm>

int main() {
  int arr[] = {5, 2, 8, 1, 9, 4};
  int n = sizeof(arr) / sizeof(arr[0]);

  std::sort(arr, arr + n - 1); // Fault: sorting up to n-1 instead of n

  std::cout << ""Sorted array: "";
  for (int i = 0; i < n; ++i) {
    std::cout << arr[i] << "" "";
  }
  std::cout << std::endl;

  return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4, 7, 3, 6}; 
    
    // Find the index of the largest element
    auto it = std::max_element(data.begin(), data.end());

    // Incorrectly access element before max_element points to
    int largest_element_index = std::distance(data.begin(), it) - 1; 
    
    std::cout << ""Largest element: "" << data[largest_element_index] << std::endl;
    
    return 0;
}","int largest_element_index = std::distance(data.begin(), it) - 1;"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World! This is a test."";
    std::string keyword = ""test"";

    size_t pos = text.find(keyword, 11); // Start searching after index 10

    if (pos != std::string::npos) {
        std::cout << ""Keyword found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Keyword not found."" << std::endl;
    }

    return 0;
}","text.find(keyword, 11)"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};

    // Calculate the sum of elements but use the wrong size
    int sum = std::accumulate(data.begin(), data.begin() + 3, 0);

    // Print the calculated sum
    std::cout << ""Sum: "" << sum << std::endl;

    return 0;
}",data.begin() + 3
"#include <iostream>
#include <string>
#include <sstream>

int main() {
  std::string input = ""12.34"";
  std::stringstream ss(input);
  double num;
  ss >> num;

  if (ss.fail()) {
    std::cerr << ""Conversion failed!"" << std::endl;
    return 1;
  }

  int integer_part = num;  // Implicit truncation - potential loss of precision
  double fractional_part = num - integer_part;

  std::cout << ""Integer part: "" << integer_part << std::endl;
  std::cout << ""Fractional part: "" << fractional_part << std::endl;

  return 0;
}",int integer_part = num;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores; 
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size(); // integer division
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <random>
#include <iostream>
#include <vector>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average
    double sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    double average = sum / numbers.size();

    // Find the largest number
    int largest = numbers[0];
    for (int i = 1; i <= numbers.size(); ++i) { // Fault: Loop condition error
        if (numbers[i] > largest) {
            largest = numbers[i];
        }
    }

    std::cout << ""Average: "" << average << std::endl;
    std::cout << ""Largest: "" << largest << std::endl;

    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello"";
    std::string reversed_message = message;
    std::reverse(reversed_message.begin(), reversed_message.end());

    if (message == reversed_message) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }

    return 0;
}",if (message == reversed_message)
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> processed_data;

    for (int i = 0; i < data.size(); ++i) {
        processed_data.push_back(data[i] * 2);
    }

    int sum = std::accumulate(processed_data.begin(), processed_data.end(), 0);
    
    //Incorrectly shift the sum by a fixed value.  This masks the actual accumulated sum.
    sum += 1000; 

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += 1000;
"#include <iostream>
#include <cmath>

int main() {
    double x = 2.0;
    double y = 0.0;
    double result = std::pow(x, y) - 1.0;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}","double result = std::pow(x, y) - 1.0;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    // Incorrectly truncating the area to an integer before printing.
    std::cout << ""Area: "" << (int)area << std::endl;
    
    return 0;
}","std::cout << ""Area: "" << (int)area << std::endl;"
"#include <iostream>
#include <algorithm>

int main() {
    int numbers[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(numbers) / sizeof(numbers[0]);

    std::sort(numbers, numbers + n - 1); // Faulty line

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(numbers, numbers + n - 1);"
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    std::for_each(data.begin(), data.end(), [&](int x) { sum += x; });
    
    std::vector<int> more_data = {6, 7, 8, 9, 10};
    int product = 1;
    std::for_each(more_data.begin(), more_data.end(), [&](int x) { product *= x; });

    if (sum > product) {
        std::cout << ""Sum is greater than product"" << std::endl;
    } else {
        std::cout << ""Product is greater than or equal to sum"" << std::endl;
    }
    
    return 0;
}",if (sum > product) {
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  
  // Calculate the product of all elements, but include the initial value incorrectly.
  int product = 1;
  product = std::accumulate(numbers.begin(), numbers.end(), 0) ; 

  std::cout << ""Product: "" << product << std::endl;
  return 0;
}","product = std::accumulate(numbers.begin(), numbers.end(), 0)"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";

    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
    }

    return 0;
}","ages[""David""] = 20;"
"#include <iostream>
#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream stream;
    stream << std::fixed << std::setprecision(2) << num;
    return stream.str();
}

int main() {
    double price = 12.5;
    int quantity = 3;
    double total_cost = price * quantity;
    std::string formatted_total = format_number(total_cost);
    std::cout << ""Total cost: "" << formatted_total << std::endl;

    // Example of incorrect calculation for discount.
    double discount_rate = 0.1;
    double discounted_total = total_cost * (1 - discount_rate);
    std::string formatted_discounted_total = format_number(discounted_total);
    std::cout << ""Discounted total: "" << formatted_discounted_total << std::endl;
    return 0;
}",double discounted_total = total_cost * (1 - discount_rate);
"#include <string>
#include <algorithm>
#include <iostream>

int main() {
    std::string text = ""This is a test string."";
    std::string pattern = ""test"";

    size_t pos = text.find(pattern);

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }
    
    std::string modified_text = text;
    modified_text.erase(pos, 1); // Fault: Erasing only 1 character instead of the entire pattern
    
    std::cout << ""Modified text: "" << modified_text << std::endl;
    
    return 0;
}","modified_text.erase(pos, 1);"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string best_student = ""David""; // Incorrect initialization
    int best_score = -1;  //Initialize to a low value

    for (const auto& pair : scores) {
        if (pair.second > best_score) {
            best_score = pair.second;
            best_student = pair.first;
        }
    }

    std::cout << ""Best student: "" << best_student << "" with score "" << best_score << std::endl;
    return 0;
}","std::string best_student = ""David"";"
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""cherry""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit];
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;
    return 0;
}",int count = counts[fruit];
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> filtered_data;

    std::copy_if(data.begin(), data.end(), std::back_inserter(filtered_data), [](int x){ return x > 10; });

    int sum = std::accumulate(filtered_data.begin(), filtered_data.end(), 0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",[](int x){ return x > 10; }
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    double expected_area = 78.5398;
    if (area == expected_area) {
        std::cout << ""Area calculation is correct."" << std::endl;
    } else {
        std::cout << ""Area calculation is incorrect."" << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> processed_data;
    
    for (int i = 0; i < data.size(); ++i) {
        processed_data.push_back(data[i] * 2);
    }
    
    int sum = std::accumulate(processed_data.begin(), processed_data.end(), 0);
    
    //Incorrect comparison. Should be sum > 10, but uses sum == 10
    if (sum == 10) {
        std::cout << ""Sum is equal to 10."" << std::endl;
    } else {
        std::cout << ""Sum is not equal to 10."" << std::endl;
    }

    return 0;
}",if (sum == 10)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    double expected_area = 78.5398;
    
    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Warning: Area calculation might be slightly off due to floating-point precision.""
    }
    
    return 0;
}",double expected_area = 78.5398;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }

    int expected_sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    if (sum != expected_sum) {
        std::cout << ""Error: Sum is incorrect!"" << std::endl;
    } else {
        std::cout << ""Sum is correct."" << std::endl;
    }

    return 0;
}",int sum = 0;
"#include <iostream>
#include <cmath>

int main() {
    double x = 2.0;
    double y = 0.0;
    double result = std::pow(x, y) - 1.0;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}","double result = std::pow(x, y) - 1.0;"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation correct!"" << std::endl;
    }

    //Demonstrates a memory allocation issue, possibly leading to undefined behavior
    int* large_array = new int[1000000000];
    
    if (large_array == nullptr) {
      std::cout << ""Memory allocation failed!"" << std::endl;
    }
    
    delete[] large_array;
    return 0;
}",int* large_array = new int[1000000000];
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (std::abs(area - expected_area) > 0.001) {
    std::cout << ""Area calculation is incorrect. Calculated: "" << area << std::endl;
  } else {
    std::cout << ""Area calculation is correct. Calculated: "" << area << std::endl;
  }
  
  // Incorrectly calculating the circumference.
  double circumference = 2 * radius * 3;
  std::cout << ""Circumference: "" << circumference << std::endl;

  return 0;
}",double circumference = 2 * radius * 3;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string with some spaces."";
    std::string word = ""string"";

    size_t pos = text.find(word);
    if (pos != std::string::npos) {
        std::cout << ""Word found at position: "" << pos << std::endl;
    }
    else {
        std::cout << ""Word not found."" << std::endl;
    }

    std::string upper_text = text; 
    upper_text.erase(std::remove_if(upper_text.begin(), upper_text.end(), ::isspace), upper_text.end());
    size_t upper_pos = upper_text.find(word);
    if (upper_pos != std::string::npos) {
        std::cout << ""Word found in uppercase string at: "" << upper_pos << std::endl;
    } else {
        std::cout << ""Word not found in uppercase string"" << std::endl;
    }

    return 0;
}","upper_text.erase(std::remove_if(upper_text.begin(), upper_text.end(), ::isspace), upper_text.end());"
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> transformed_data;

    for (int x : data) {
        transformed_data.push_back(x * 2);
    }

    int sum = std::accumulate(transformed_data.begin(), transformed_data.end(), 0);

    // Fault: Incorrect calculation - should be transformed_data.size() 
    if (sum / 0 == 0) {
        std::cout << ""Sum is zero."" << std::endl;
    } else {
        std::cout << ""Sum is non-zero."" << std::endl;
    }

    return 0;
}",if (sum / 0 == 0)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, world! This is a test."";
  std::string word = ""world"";

  size_t pos = text.find(word, 10); // Start searching from index 10

  if (pos != std::string::npos) {
    std::cout << ""Word found at position: "" << pos << std::endl;
  } else {
    std::cout << ""Word not found."" << std::endl;
  }
  
  return 0;
}","text.find(word, 10)"
"#include <complex>
#include <cmath>
#include <iostream>

int main() {
    double angle = 3.14159265358979323846;
    std::complex<double> z(1.0, 0.0);
    std::complex<double> rotated_z = z * std::exp(std::complex<double>(angle, 0.0));

    double real_part = rotated_z.real();
    double imaginary_part = rotated_z.imag();

    // The intention is to verify that rotation by pi results in -1 + 0i.
    if (real_part != -1.0) {
        std::cout << ""Rotation error! Expected real part -1.0, got "" << real_part << std::endl;
    }
    if (imaginary_part != 0.0) {
        std::cout << ""Rotation error! Expected imaginary part 0.0, got "" << imaginary_part << std::endl;
    }

    return 0;
}",if (real_part != -1.0)
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target number
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) - 1 << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    return 0;
}","std::distance(numbers.begin(), it) - 1"
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::high_resolution_clock::time_point start = std::chrono::high_resolution_clock::now();
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        //Potential fault: incorrect comparison. Should be sum += num;
        if (num > 50) {
            sum = sum;
        } else {
            sum = 0;
        }
    }

    std::chrono::high_resolution_clock::time_point end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> duration = end - start;

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Time taken: "" << duration.count() << "" seconds"" << std::endl;
    return 0;
}",sum = 0;
"#include <array>
#include <numeric>
#include <algorithm>
#include <iostream>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (size_t i = 0; i <= data.size(); ++i) {
"#include <iostream>
#include <map>

int main() {
  std::map<std::string, int> scores; 
  scores[""Alice""] = 85;
  scores[""Bob""] = 92;
  scores[""Charlie""] = 78;
  
  int total_score = 0;
  for (auto const& [name, score] : scores) {
    total_score += score;
  }

  double average_score = total_score / scores.size();
  std::cout << ""Average score: "" << average_score << std::endl;
  return 0;
}",double average_score = total_score / scores.size();
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double perimeter = 2 * M_PI * radius;

    std::cout << ""Area: "" << area << std::endl;
    std::cout << ""Perimeter: "" << perimeter << std::endl;

    // Incorrect calculation of circumference
    double circumference = M_PI + 2 * radius;

    std::cout << ""Circumference: "" << circumference << std::endl;
    return 0;
}",double circumference = M_PI + 2 * radius;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }

  return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    size_t pos = text.find(""world"", 10); // Incorrect starting position
    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }
    return 0;
}","text.find(""world"", 10)"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());

    if (str == reversed_str) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (str == reversed_str)
"#include <iostream>
#include <string>

int main() {
  std::string message = ""Hello, world!\n"";
  size_t len = message.length();
  message[len] = '!'; // Attempting to write beyond the string's bounds
  std::cout << message << std::endl;
  return 0;
}",message[len] = '!' 
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string rev_str = str;
    std::reverse(rev_str.begin(), rev_str.end());

    if (str == rev_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }

    std::string empty_str = """";
    std::string rev_empty_str = empty_str;
    std::reverse(rev_empty_str.begin(), rev_empty_str.end());
    if (empty_str == rev_empty_str) {
        std::cout << ""Empty string is a palindrome."" << std::endl;
    } else {
        std::cout << ""Empty string is not a palindrome."" << std::endl;
    }

    return 0;
}","else {
        std::cout << ""Empty string is not a palindrome."" << std::endl;
    }"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the first element greater than the target
    auto it = std::upper_bound(numbers.begin(), numbers.end(), target - 1); //Faulty line

    if (it != numbers.end()) {
        std::cout << ""First element greater than "" << target - 1 << "" is: "" << *it << std::endl;
    } else {
        std::cout << ""No element greater than "" << target - 1 << "" found."" << std::endl;
    }

    return 0;
}",target - 1
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    std::cout << ""David's age: "" << ages[name] << std::endl; // Should ideally check if name exists first

    return 0;
}","std::cout << ""David's age: "" << ages[name] << std::endl;"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  std::vector<int> squares;

  for (int i = 0; i < numbers.size(); ++i) {
    squares.push_back(numbers[i] * numbers[i]);
  }

  // Calculate the product of squares, but using the wrong iterator type
  long long product = std::accumulate(squares.begin(), squares.end(), 1LL, [](long long acc, int val) { return acc * val; });

  std::cout << ""Product of squares: "" << product << std::endl;
  return 0;
}","long long product = std::accumulate(squares.begin(), squares.end(), 1LL, [](long long acc, int val) { return acc * val; });"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    
    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect! Expected: "" << expected_area << "", Calculated: "" << area << std::endl;
    } else {
        std::cout << ""Area calculation is correct!"" << std::endl;
    }
    
    // Calculate circumference
    double circumference = 2 * M_PI * radius;
    
    // Introduce a subtle error: Multiply circumference by 2 instead of displaying it.
    double incorrect_circumference = circumference * 2;
    
    std::cout << ""Circumference (incorrectly multiplied): "" << incorrect_circumference << std::endl;
    
    return 0;
}",double incorrect_circumference = circumference * 2;
"#include <iostream>
#include <string>
#include <sstream>

std::string formatAsCurrency(double amount) {
  std::stringstream ss;
  ss << ""$"" << amount;
  return ss.str();
}

int main() {
  double price = 1234.5678;
  std::string formattedPrice = formatAsCurrency(price);
  std::cout << ""The price is: "" << formattedPrice << std::endl;
  return 0;
}","  std::stringstream ss;
  ss << ""$"" << amount;"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {  // Fault here
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string.  It has some spaces."";
    std::string trimmed_text = text;

    trim(trimmed_text.begin(), trimmed_text.end(), isspace);

    std::cout << ""Original: \"""" << text << ""\""
"";
    std::cout << ""Trimmed: \"""" << trimmed_text << ""\""
"";
    return 0;
}","trim(trimmed_text.begin(), trimmed_text.end(), isspace);"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> modified_data;

  for (int i = 0; i < data.size(); ++i) {
      modified_data.push_back(data[i] * 2);
  }

  // Calculate the sum of the original data, but use the modified data instead.
  int sum = std::accumulate(modified_data.begin(), modified_data.end(), 0);

  std::cout << ""Sum of original data (incorrectly calculated): "" << sum << std::endl;
  return 0;
}","std::accumulate(modified_data.begin(), modified_data.end(), 0);"
"#include <iostream>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0); // Define a complex number
    double real_part = z.real();
    double imaginary_part = z.imag();

    std::cout << ""Complex number: "" << z << std::endl;
    std::cout << ""Real part: "" << real_part << std::endl;
    std::cout << ""Imaginary part: "" << imaginary_part << std::endl;

    // Incorrectly attempting to multiply the real part by the imaginary part and store it in the complex number's real part.
    real_part = real_part * imaginary_part; 
    z.real(real_part); 

    std::cout << ""Modified Complex number: "" << z << std::endl;
    std::cout << ""Modified Real part: "" << z.real() << std::endl;
    std::cout << ""Modified Imaginary part: "" << z.imag() << std::endl;

    return 0;
}",real_part = real_part * imaginary_part;
"#include <random> 
#include <chrono> 
#include <iostream>
#include <string>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 10);

    std::string message = """";
    for (int i = 0; i < 5; ++i) {
        int random_number = distribution(generator);
        message += std::to_string(random_number);
    }

    std::cout << ""Generated Message: "" << message << std::endl;

    //Incorrectly calculate length
    int message_length = message.length() - 1;

    std::cout << ""Message Length (incorrect): "" << message_length << std::endl;

    return 0;
}",int message_length = message.length() - 1;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string pattern = ""test"";

    size_t pos = text.find(pattern, 10); // Starts searching from index 10

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;

  // Calculate the sum of the first three elements only.
  for (int i = 0; i < numbers.size(); ++i) {
    sum += numbers[i];
  }

  // Print the calculated sum.
  std::cout << ""Sum of the first three elements: "" << sum << std::endl;

  return 0;
}",  for (int i = 0; i < numbers.size(); ++i) {
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 1;
    counts[""banana""] = 2;
    counts[""cherry""] = 3;

    std::string fruit = ""grape"";
    if (counts.find(fruit) != counts.end()) {
        std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;
    } else {
        std::cout << ""Count of "" << fruit << "": 0"" << std::endl;
    }
    return 0;
}","std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculated: "" << area << std::endl;
        std::cout << ""Expected area: "" << expected_area << std::endl;
        std::cout << ""Test Failed!"" << std::endl;
    } else {
        std::cout << ""Area calculated: "" << area << std::endl;
        std::cout << ""Test Passed!"" << std::endl;
    }
    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    // Calculate circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    
    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation incorrect. Calculated: "" << area << ""\nExpected: "" << expected_area << std::endl;
    } else {
        std::cout << ""Area calculation correct. Area: "" << area << std::endl;
    }
    
    // Attempt to calculate circumference using area
    double circumference = 2 * M_PI * std::sqrt(area / M_PI); 
    std::cout << ""Circumference calculated from area: "" << circumference << std::endl;

    return 0;
}",double circumference = 2 * M_PI * std::sqrt(area / M_PI);
"#include <vector>
#include <algorithm>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> even_data;

    for (int x : data) {
        if (x % 2 == 0) {
            even_data.push_back(x);
        }
    }

    int sum_even = std::accumulate(even_data.begin(), even_data.end(), 0);

    int sum_all = std::accumulate(data.begin(), data.end(), 0);

    if (sum_even == sum_all) {
        std::cout << ""The sum of even numbers is equal to the sum of all numbers.\n"";
    } else {
        std::cout << ""The sum of even numbers is not equal to the sum of all numbers.\n"";
    }

    return 0;
}","if (sum_even == sum_all) {
        std::cout << ""The sum of even numbers is equal to the sum of all numbers.\n"";
    } else {
        std::cout << ""The sum of even numbers is not equal to the sum of all numbers.\n"";
    }"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct."" << std::endl;
    } else {
        std::cout << ""Area is incorrect. Calculated: "" << area << "" Expected: "" << expected_area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <complex> 
#include <cmath> 
#include <vector>
#include <iostream>

int main() {
    std::vector<std::complex<double>> data = {
        std::complex<double>(1.0, 2.0), 
        std::complex<double>(3.0, 4.0), 
        std::complex<double>(5.0, 6.0)
    };

    double sum_real = 0.0;
    double sum_imag = 0.0;

    for (const auto& c : data) {
        sum_real += c.real();
        sum_imag -= c.imag();  // Fault: Should be sum_imag += c.imag();
    }

    std::cout << ""Sum of real parts: "" << sum_real << std::endl;
    std::cout << ""Sum of imaginary parts: "" << sum_imag << std::endl;

    return 0;
}",sum_imag -= c.imag();
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = ""28""; // Fault: Assigning a string to an int value in the map

    std::cout << ""Alice's age: "" << ages[""Alice""] << std::endl;
    std::cout << ""Bob's age: "" << ages[""Bob""] << std::endl;
    std::cout << ""Charlie's age: "" << ages[""Charlie""] << std::endl;

    return 0;
}","ages[""Charlie""] = ""28"";"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World! This is a test."";
  std::string target = ""test"";

  size_t pos = text.find(target);
  if (pos != std::string::npos) {
    std::cout << ""Substring found at position: "" << pos << std::endl;
  } else {
    std::cout << ""Substring not found."" << std::endl;
  }

  std::string modified_text = text.substr(0, pos - 1) + ""replaced"" + text.substr(pos + target.length());
  std::cout << ""Modified text: "" << modified_text << std::endl;
  return 0;
}",pos - 1
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    std::string reversed_message = message;
    for (int i = 0; i < reversed_message.length(); ++i) {
        reversed_message[i] = message[reversed_message.length() - 1 - i];
    }
    std::cout << reversed_message << std::endl;
    return 0;
}",reversed_message[i] = message[reversed_message.length() - 1 - i];
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!\n"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (reversed_text == text) {
        std::cout << ""The string is a palindrome!"" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (reversed_text == text)
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> sorted_data = data;

    std::sort(sorted_data.begin(), sorted_data.begin() + sorted_data.size()-1); // Fault: sorting up to the second-to-last element

    std::cout << ""Sorted Data: "";
    for (int x : sorted_data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(sorted_data.begin(), sorted_data.begin() + sorted_data.size()-1);"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> processed_data;

    for (int i = 0; i < data.size(); ++i) {
        processed_data.push_back(data[i] * 2);
    }

    // Calculate the sum of all elements in processed_data.
    int sum = std::accumulate(processed_data.begin(), processed_data.end(), 0);

    //Incorrectly initialize average before calculation
    double average = 0.0;
    average = sum / data.size();

    std::cout << ""Average: "" << average << std::endl;
    return 0;
}","double average = 0.0;
average = sum / data.size();"
"#include <iostream>
#include <unordered_map>
#include <string>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;

    std::string fruit = ""orange"";
    int count = counts[fruit]; // Intialization to default value
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

    counts[fruit] = 7; //Updates the count
    std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;
    return 0;
}",int count = counts[fruit];
"#include <map>
#include <vector>
#include <iostream>

int main() {
  std::map<int, std::string> student_grades;
  student_grades[1] = ""A"";
  student_grades[2] = ""B"";
  student_grades[3] = ""C"";

  std::vector<int> student_ids = {1, 2, 4};

  for (int id : student_ids) {
    std::cout << ""Student "" << id << ""'s grade: "" << student_grades[id] << std::endl;
  }

  return 0;
}","student_grades[4] = ""C"";"
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }

    // Incorrectly calculating average
    double average = sum / numbers.size();

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = sum / numbers.size();
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
  // Intent: Calculate the average of the numbers.
  double average = static_cast<double>(sum) / numbers.size();
  std::cout << ""Average: "" << average << std::endl;
  return 0;
}",0
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;

    // Subtle error: Integer division when comparing area with a threshold.
    if (area / 10 > 15) {
        std::cout << ""Area is large."" << std::endl;
    } else {
        std::cout << ""Area is not large."" << std::endl;
    }

    return 0;
}",if (area / 10 > 15)
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    // Incorrectly convert double to int for printing
    std::cout << ""Area: "" << (int)area << std::endl;
    
    return 0;
}",(int)area
"#include <random>
#include <chrono>
#include <iostream>
#include <vector>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    long long sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }

    // Calculate the average
    double average = sum / numbers.size(); //Potential integer division if numbers.size() is an int.
    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = sum / numbers.size();
"#include <string>
#include <algorithm>
#include <iostream>

int main() {
  std::string text = ""This is a test string with some punctuation."";
  std::string cleaned_text = text;

  // Remove all punctuation, but inadvertently removes underscores too.
  cleaned_text.erase(std::remove_if(cleaned_text.begin(), cleaned_text.end(), [](char c){ return std::ispunct(c); }), cleaned_text.end());

  std::cout << ""Original text: "" << text << std::endl;
  std::cout << ""Cleaned text: "" << cleaned_text << std::endl;

  return 0;
}",[](char c){ return std::ispunct(c); }
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    std::vector<int> squares(numbers.size());
    std::transform(numbers.begin(), numbers.end(), squares.begin(), [](int x){ return x * x; });

    int expected_sum = 55; //Expected sum of squares: 1 + 4 + 9 + 16 + 25 = 55
    if (sum != expected_sum) {
        std::cout << ""Error: Sum of squares is incorrect!\n"";
        std::cout << ""Calculated sum: "" << sum << ""\n"";
        std::cout << ""Expected sum: "" << expected_sum << ""\n"";
    }
    else {
        std::cout << ""Sum of squares is correct.\n"";
    }
    return 0;
}",int expected_sum = 55; //Expected sum of squares: 1 + 4 + 9 + 16 + 25 = 55
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> values = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= values.size(); ++i) {
        sum += values[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= values.size(); ++i) {
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect. Calculated: "" << area << ""\nExpected: "" << expected_area << std::endl;
    } else {
        std::cout << ""Area calculation is correct. Area: "" << area << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    double sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);

    // Intentionally truncate the sum to an integer before printing.
    int truncated_sum = (int)sum;

    std::cout << ""Sum (truncated): "" << truncated_sum << std::endl;
    return 0;
}",int truncated_sum = (int)sum;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string pattern = ""test"";

    size_t pos = text.find(pattern, 10); // Start searching after index 9

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;

  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    
    std::vector<int> another_numbers = {6, 7, 8, 9, 10};
    int another_sum = 0;
    for (int i = 0; i < another_numbers.size(); ++i) {
       another_sum += numbers[i];
    }
    
    std::cout << ""Sum of numbers: "" << sum << std::endl;
    std::cout << ""Sum of another_numbers: "" << another_sum << std::endl;
    
    return 0;
}",another_sum += numbers[i];
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Find the index of the first occurrence of 4
    auto it = std::find(numbers.begin(), numbers.end(), 4); 

    if (it != numbers.end()) {
        size_t index = std::distance(numbers.begin(), it) - 1; // Fault: Incorrect index calculation
        std::cout << ""Element 4 found at index: "" << index << std::endl;
    } else {
        std::cout << ""Element 4 not found."" << std::endl;
    }
    
    return 0;
}","size_t index = std::distance(numbers.begin(), it) - 1;"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> processed_data;
  
  for (int i = 0; i < data.size(); ++i) {
    processed_data.push_back(data[i] * 2);
  }

  // Calculate the sum of the first 'data.size()' elements of processed_data.
  int sum = std::accumulate(processed_data.begin(), processed_data.begin() + data.size() - 1, 0);

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",processed_data.begin() + data.size() - 1
"#include <iostream>
#include <cmath>

int main() {
    double x = 1.0;
    double y = 2.0;
    double z = std::sqrt(x + y);
    std::cout << ""Result: "" << z << std::endl;
    return 0;
}",double z = std::sqrt(x + y);
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!\n"";
    } else {
        std::cout << ""Area calculation is correct.\n"";
    }

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    return 0;
}",2 * M_PI * radius
"#include <iostream>
#include <algorithm>

int main() {
  int arr[] = {5, 2, 8, 1, 9, 4};
  int n = sizeof(arr) / sizeof(arr[0]);

  std::sort(arr, arr + n - 1); // Fault: Sorting only up to n-1

  std::cout << ""Sorted array: "";
  for (int i = 0; i < n; ++i) {
    std::cout << arr[i] << "" "";
  }
  std::cout << std::endl;

  return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4, 7, 3, 6};
    std::vector<int> even_numbers;

    for (int num : numbers) {
        if (num % 2 == 0) {
            even_numbers.push_back(num);
        }
    }

    std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());

    std::cout << ""Even numbers in descending order: "";
    for (int i = 0; i < even_numbers.size(); ++i) {
        std::cout << even_numbers[i] << (i == even_numbers.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;

    return 0;
}","std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::vector<int> sorted_data = data;
    std::sort(sorted_data.begin(), sorted_data.end(), std::greater<int>());

    // Intended to find the index of the smallest element in the sorted vector.
    auto it = std::find(sorted_data.begin(), sorted_data.end(), 1);
    int index = std::distance(sorted_data.begin(), it) - 1;

    std::cout << ""Index of the smallest element: "" << index << std::endl;
    return 0;
}","std::distance(sorted_data.begin(), it) - 1;"
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::vector<int> even_numbers;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0) {
            even_numbers.push_back(numbers[i]);
        }
    }
    
    // Calculate the sum of the even numbers
    int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);
    
    // Incorrectly compute the average.  Should be (double)sum / even_numbers.size()
    double average = sum / even_numbers.size(); 
    
    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    std::cout << ""Average of even numbers: "" << average << std::endl;
    return 0;
}",double average = sum / even_numbers.size();
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    size_t pos = text.find(""world"");

    if (pos != std::string::npos) {
        text.erase(pos, 5);
    }

    std::cout << text << std::endl;
    return 0;
}","text.erase(pos, 5);"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>

int main() {
    std::string text = ""This is a test string."";
    size_t len = text.length();
    std::string reversed_text = """";

    for (size_t i = 0; i < len; ++i) {
        reversed_text = text[i] + reversed_text;
    }

    std::cout << ""Original: "" << text << std::endl;
    std::cout << ""Reversed: "" << reversed_text << std::endl;
    return 0;
}",reversed_text = text[i] + reversed_text;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    size_t pos = message.find(""o"");
    if (pos != std::string::npos) {
        message.replace(pos, 1, ""X"");
    }
    std::cout << message << std::endl;
    return 0;
}","message.replace(pos, 1, ""X"");"
"#include <string>
#include <sstream>
#include <vector>
#include <algorithm>

std::string formatNumber(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    std::vector<double> data = {1.23, 4.567, 7.89, 10.1234};
    std::vector<std::string> formattedData;

    for (double val : data) {
        formattedData.push_back(formatNumber(val));
    }

    std::sort(formattedData.begin(), formattedData.end(), [](const std::string& a, const std::string& b) {
        return a.length() > b.length();
    });

    for (const std::string& str : formattedData) {
        std::cout << str << std::endl;
    }

    return 0;
}",return a.length() > b.length();
"#include <iostream>
#include <cmath>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expectedArea = 78.5398;

  if (std::abs(area - expectedArea) > 0.0001) {
    std::cout << ""Area calculation is incorrect!"" << std::endl;
  } else {
    std::cout << ""Area calculation is correct!"" << std::endl;
  }

  return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    double perimeter = 2 * M_PI * radius;
    
    std::cout << ""Perimeter: "" << perimeter << std::endl;
    std::cout << ""Area: "" << area << std::endl;
    return 0;
}",    double perimeter = 2 * M_PI * radius;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::vector<int> expected_sums(numbers.size());
    expected_sums[0] = 1; expected_sums[1] = 3; expected_sums[2] = 6; expected_sums[3] = 10; expected_sums[4] = 15;

    if (sum == std::accumulate(numbers.begin(), numbers.end(), 0)) {
        std::cout << ""Correct Sum!"" << std::endl;
    } else {
        std::cout << ""Incorrect Sum!"" << std::endl;
    }
    
    for (size_t i = 0; i < numbers.size(); ++i) {
        if (numbers[i] != expected_sums[i]) {
            std::cout << ""Mismatch at index "" << i << std::endl;
        }
    }

    return 0;
}",expected_sums[0] = 1; expected_sums[1] = 3; expected_sums[2] = 6; expected_sums[3] = 10; expected_sums[4] = 15;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // Calculate the sum of even numbers using std::accumulate with a custom lambda.
    int even_sum = std::accumulate(numbers.begin(), numbers.end(), 0, [](int sum, int n) { return (n % 2 == 0) ? sum : sum + 1; });

    std::cout << ""Sum of even numbers: "" << even_sum << std::endl;
    return 0;
}",return (n % 2 == 0) ? sum : sum + 1;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    std::sort(arr, arr + n);
    
    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; i++) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    int sum = 0;
    for (int i = 0; i < n - 1; i++) {
        sum += arr[i];
    }
    
    std::cout << ""Sum of elements (excluding the last): "" << sum << std::endl;
    
    return 0;
}",for (int i = 0; i < n - 1; i++)
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

    std::cout << ""Numbers greater than "" << target << "":"";
    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return n > target;
"#include <iostream>
#include <unordered_map>
#include <string>

int main() {
    std::unordered_map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 85;
    scores[""Charlie""] = 75;

    std::string name = ""David"";
    int score = scores[name]; // Incorrectly assumes default value is 0
    std::cout << ""David's score: "" << score << std::endl;
    return 0;
}",int score = scores[name];
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    
    if (area > 75.0) {
        std::cout << ""Area is large: "" << area << std::endl;
    } else {
        std::cout << ""Area is small: "" << area << std::endl;
    }
    
    return 0;
}",double area = 3.14 * radius * radius;
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseWords(std::string s) {
    std::string result = """";
    std::string word = """";
    for (char c : s) {
        if (c == ' ') {
            std::reverse(word.begin(), word.end());
            result += word + "" "";
            word = """";
        } else {
            word += c;
        }
    }
    std::reverse(word.begin(), word.end());
    result += word;
    return result;
}

int main() {
    std::string input = ""the sky is blue"";
    std::string reversed = reverseWords(input);
    std::cout << reversed << std::endl;
    return 0;
}","    std::reverse(word.begin(), word.end());"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (reversed_text == text) {
        std::cout << ""Palindrome detected!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }

    return 0;
}",if (reversed_text == text)
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseWords(std::string s) {
    std::string result = """";
    std::string word = """";
    for (char c : s) {
        if (c == ' ') {
            std::reverse(word.begin(), word.end());
            result += word + "" "";
            word = """";
        } else {
            word += c;
        }
    }
    std::reverse(word.begin(), word.end());
    result += word;
    return result;
}

int main() {
    std::string input = ""the sky is blue"";
    std::string reversed = reverseWords(input);
    std::cout << reversed << std::endl;
    return 0;
}","    std::reverse(word.begin(), word.end());"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test sentence."";
  std::string vowels = ""aeiouAEIOU"";
  std::string result = """";

  for (char c : text) {
    bool isVowel = false;
    for (char v : vowels) {
      if (c == v) {
        isVowel = true;
        break;
      }
    }
    if (isVowel) {
      result += '*';
    } else {
      result += c;
    }
  }

  // Incorrectly prints the length of text instead of result
  std::cout << text.length() << std::endl;
  return 0;
}",std::cout << text.length() << std::endl;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World! This is a test."";
    std::string pattern = ""test"";

    size_t pos = text.find(pattern, 15); // Start searching from index 15

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 15)"
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, world!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }
  return 0;
}",if (text == reversed_text)
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::vector<int> even_numbers;
    
    for (int i = 0; i < data.size(); ++i) {
        if (data[i] % 2 == 0)
            even_numbers.push_back(data[i]);
    }
    
    // Incorrectly iterating up to data.size() instead of even_numbers.size()
    for (int i = 0; i < data.size(); ++i) {
        std::cout << even_numbers[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}",for (int i = 0; i < data.size(); ++i)
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting only up to n-1, leaving the last element unsorted.

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> result(data.size());

    std::transform(data.begin(), data.end(), result.begin(), [](int x){ return x * 2; });

    // Incorrectly attempts to calculate the sum using the wrong iterator
    long long sum = std::accumulate(result.begin(), result.begin() + data.size() - 1, 0LL);

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","std::accumulate(result.begin(), result.begin() + data.size() - 1, 0LL);"
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string highestScorer = """";
    int highestScore = -1; // Initialize to -1 to ensure the first valid score is always higher

    for (auto const& [name, score] : scores) {
        if (score > highestScore) {
            highestScore = score;
            highestScorer = name;
        }
    }

    std::cout << ""Highest scorer: "" << highestScorer << "" with score "" << highestScore << std::endl;
    return 0;
}",int highestScore = -1; // Initialize to -1 to ensure the first valid score is always higher
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.53981633974483;

    if (area > expected_area + 0.001) {
        std::cout << ""Area is too large!"" << std::endl;
    } else if (area < expected_area - 0.001) {
        std::cout << ""Area is too small!"" << std::endl;
    } else {
        std::cout << ""Area is correct!"" << std::endl;
    }

    return 0;
}",if (area > expected_area + 0.001)
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; //Potential issue: accessing non-existent key
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <iostream>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    double angle = std::arg(z);

    if (angle > M_PI) {
        angle -= 2 * M_PI;
    }

    std::cout << ""Angle: "" << angle << std::endl;

    // Incorrectly assuming arg() returns radians but using degrees in the comparison.
    if (angle > 90) {
        std::cout << ""Angle is greater than 90 degrees."" << std::endl;
    } else {
        std::cout << ""Angle is not greater than 90 degrees."" << std::endl;
    }

    return 0;
}",if (angle > 90)
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::vector<int> even_numbers;
    for (int x : data) {
        if (x % 2 == 0) {
            even_numbers.push_back(x);
        }
    }

    // Calculate the sum of the even numbers
    int sum = 0;
    for (size_t i = 0; i < even_numbers.size(); ++i) {
        sum += even_numbers[i];
    }

    // Incorrectly print the *size* of the even numbers, not their sum
    std::cout << ""The sum of even numbers is: "" << even_numbers.size() << std::endl;
    return 0;
}","std::cout << ""The sum of even numbers is: "" << even_numbers.size() << std::endl;"
"#include <iostream>
#include <string>
#include <unordered_map>

int main() {
  std::unordered_map<std::string, int> ages;
  ages[""Alice""] = 30;
  ages[""Bob""] = 25;
  ages[""Charlie""] = 40;

  std::string name = ""David"";
  int age = ages[name] + 5; // Potential undefined behavior if David isn't in ages
  std::cout << ""David's age + 5: "" << age << std::endl;

  return 0;
}",ages[name] + 5
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string."";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());
  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }
  return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    size_t pos = message.find(""world!"");
    if (pos != std::string::npos) {
        message.replace(pos, 6, ""universe!"");
    }
    std::cout << message << std::endl;
    return 0;
}","message.replace(pos, 6, ""universe!"");"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""Hello, World!"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());

    if (str == reversed_str) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (str == reversed_str)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.53981633974483;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect. Actual: "" << area << "", Expected: "" << expected_area << std::endl;
    } else {
        std::cout << ""Area calculation is correct: "" << area << std::endl;
    }

    // Attempt to calculate circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    
    // Find the largest element in the vector
    auto it = std::min_element(numbers.begin(), numbers.end());
    
    std::cout << ""The smallest element is: "" << *it << std::endl;
    
    return 0;
}","auto it = std::min_element(numbers.begin(), numbers.end());"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    int sum = 0;

    for (int i = 0; i < n; ++i) {
        sum += arr[i];
    }

    int average = sum / n;

    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",int average = sum / n;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int x : data) {
        if (x < target) {
            result.push_back(x);
        }
    }

    std::sort(result.begin(), result.end(), std::greater<int>());

    std::cout << ""Sorted elements less than target: "";
    for (int i = 0; i < result.size(); ++i) {
        std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;

    return 0;
}","std::sort(result.begin(), result.end(), std::greater<int>());"
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseWords(std::string s) {
    std::string result = """";
    std::string word = """";
    for (char c : s) {
        if (c == ' ') {
            std::reverse(word.begin(), word.end());
            result += word + "" "";
            word = """";
        } else {
            word += c;
        }
    }
    std::reverse(word.begin(), word.end());
    result += word;
    return result;
}

int main() {
    std::string input = ""the sky is blue"";
    std::string reversed = reverseWords(input);
    std::cout << reversed << std::endl;
    return 0;
}","result += word + "" "";"
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // Potential default construction
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

    return 0;
}",int count = counts[fruit];
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> scores; 
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string highestScorer = """";
    int highestScore = -1;

    for (const auto& pair : scores) {
        if (pair.second > highestScore) {
            highestScore = pair.second;
            highestScorer = pair.first;
        }
    }

    std::cout << ""Highest scorer: "" << highestScorer << "" with score: "" << highestScore << std::endl;
    
    scores.erase(""Alice""); //Remove Alice after determining the highest scorer. Problem is that Alice could still be the highest. 
    
    std::cout << ""Alice's score after erase: "" << scores[""Alice""] << std::endl;
    
    return 0;
}","scores.erase(""Alice"");"
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) { // Fault: i <= data.size()
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <random>
#include <algorithm>

int main() {
    std::random_device rd;  
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average, but misinterpret sum / count.
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    double average = sum / numbers.size(); //Integer division truncates

    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = sum / numbers.size();
"#include <string>
#include <sstream>
#include <iostream>

std::string format_number(double num) {
    std::ostringstream stream;
    stream << std::fixed << std::setprecision(2) << num;
    return stream.str();
}

int main() {
    double price = 123.456789;
    double tax_rate = 0.075;
    double tax_amount = price * tax_rate;
    std::string formatted_tax = format_number(tax_amount);

    std::cout << ""Price: "" << format_number(price) << std::endl;
    std::cout << ""Tax Rate: "" << format_number(tax_rate) << std::endl;
    std::cout << ""Tax Amount: "" << formatted_tax << std::endl;

    double total_cost = price + tax_amount;
    std::cout << ""Total Cost: "" << format_number(total_cost) << std::endl;
    return 0;
}",std::string formatted_tax = format_number(tax_amount);
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    double area = M_PI * radius * radius;

    std::cout << ""Circumference: "" << circumference << std::endl;
    std::cout << ""Area: "" << area << std::endl;

    //Calculate the volume of a sphere
    double volume = (4.0/3.0) * M_PI * std::pow(radius, 2);
    std::cout << ""Volume: "" << volume << std::endl;

    //Small change to a crucial calculation
    double incorrect_volume = (4 / 3) * M_PI * std::pow(radius, 2);
    std::cout << ""Incorrect Volume: "" << incorrect_volume << std::endl;

    return 0;
}","double incorrect_volume = (4 / 3) * M_PI * std::pow(radius, 2);"
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> doubled_numbers;

    for (int i = 0; i < numbers.size(); ++i) {
        doubled_numbers.push_back(numbers[i] * 2);
    }

    // Calculate the sum of the first 'n' elements where n is defined as numbers.size()-1
    int sum = std::accumulate(doubled_numbers.begin(), doubled_numbers.begin() + numbers.size() - 2, 0);

    std::cout << ""Sum of the first "" << numbers.size() - 1 << "" doubled numbers: "" << sum << std::endl;

    return 0;
}",doubled_numbers.begin() + numbers.size() - 2
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    // Incorrectly divide by the size of the vector *after* the loop
    int size = numbers.size();
    double average = static_cast<double>(sum) / size;
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",int size = numbers.size();
"#include <iostream>
#include <algorithm>

int main() {
  int arr[] = {5, 2, 8, 1, 9};
  int n = sizeof(arr) / sizeof(arr[0]);

  // Sort the array in descending order
  std::sort(arr, arr + n, [](int a, int b) { return a < b; });

  std::cout << ""Sorted array: "";
  for (int i = 0; i < n; ++i) {
    std::cout << arr[i] << "" "";
  }
  std::cout << std::endl;

  return 0;
}","[](int a, int b) { return a < b; }"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    // Sort the array in ascending order, but incorrectly define the comparison function
    std::sort(arr, arr + n, [](int a, int b) { return a > b; });

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","[](int a, int b) { return a > b; }"
"#include <iostream>
#include <algorithm>

int main() {
  int arr[] = {5, 2, 8, 1, 9, 4};
  int n = sizeof(arr) / sizeof(arr[0]);

  std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1 instead of n

  std::cout << ""Sorted array: "";
  for (int i = 0; i < n; ++i) {
    std::cout << arr[i] << "" "";
  }
  std::cout << std::endl;

  return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
  int arr[] = {5, 2, 8, 1, 9, 4};
  int n = sizeof(arr) / sizeof(arr[0]);

  std::sort(arr, arr + n - 1); // Fault: sorts only up to the second to last element

  std::cout << ""Sorted array: "";
  for (int i = 0; i < n; ++i) {
    std::cout << arr[i] << "" "";
  }
  std::cout << std::endl;

  return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
  int arr[] = {5, 2, 8, 1, 9, 4};
  int n = sizeof(arr) / sizeof(arr[0]);

  std::sort(arr, arr + n - 1); // Faulty range

  std::cout << ""Sorted array: "";
  for (int i = 0; i < n; ++i) {
    std::cout << arr[i] << "" "";
  }
  std::cout << std::endl;

  return 0;
}",arr + n - 1
"#include <iostream>
#include <algorithm>

int main() {
    int numbers[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(numbers) / sizeof(numbers[0]);

    std::sort(numbers, numbers + n - 1); // Fault: Sorting only up to n-1

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(numbers, numbers + n - 1);"
"#include <cmath>
#include <vector>

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    double sum = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += std::sqrt(data[i]);
    }
    double average = sum / (data.size() - 1); // Fault: Dividing by data.size() - 1 instead of data.size()
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",sum / (data.size() - 1)
"#include <string>
#include <algorithm>

std::string reverseString(std::string str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string input_string = ""hello"";
    std::string reversed_string = reverseString(input_string);
    std::cout << ""Original string: "" << input_string << std::endl;
    std::cout << ""Reversed string: "" << reversed_string << std::endl;
    
    std::string another_string = ""world"";
    std::string another_reversed = reverseString(another_string);
    std::cout << ""Original string: "" << another_string << std::endl;
    std::cout << ""Reversed string: "" << another_reversed << std::endl;

    std::string combined = input_string + another_string;
    std::string combined_reversed = reverseString(combined);
    std::cout << ""Combined string: "" << combined << std::endl;
    std::cout << ""Combined reversed string: "" << combined_reversed << std::endl;

    return 0;
}",std::string reversed_str = str;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; });
    
    std::cout << ""Sorted in descending order: "";
    for (int i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << (i == numbers.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
    
    return 0;
}","[](int a, int b) { return a > b; }"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int target = 7;
  
  std::vector<int> results;
  for (int num : numbers) {
    results.push_back(num * 2);
  }
  
  int sum = 0;
  for (int i = 0; i < results.size(); ++i) {
    if (results[i] > target) {
      sum += results[i];
    }
  }
  
  std::cout << ""Sum of numbers greater than "" << target << "": "" << sum << std::endl;
  return 0;
}",if (results[i] > target)
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) { // Fault: Loop iterates one element too far
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <iostream>
#include <random>
#include <chrono>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    std::seed_seq seed{seed_time.time_since_epoch().count()};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<> distribution(1, 100);

    int numbers[10];
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distribution(generator);
    }

    int sum = 0;
    for (int i = 0; i <= 10; ++i) { // Fault: Loop iterates one element too far.
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= 10; ++i)
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; //Potential issue: Default value used when key doesn't exist.

    std::cout << ""David's age is: "" << age << std::endl; 
    return 0;
}",int age = ages[name];
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Should initialize with a default value
    std::cout << ""David's age is: "" << age << std::endl;
    
    return 0;
}",int age = ages[name];
"#include <iostream>
#include <random>
#include <iomanip>

int main() {
    std::random_device rd;  
    std::mt19937 gen(rd());
    std::uniform_real_distribution<> dis(0.0, 1.0);

    double total = 0.0;
    int num_samples = 1000;

    for (int i = 0; i < num_samples; ++i) {
        double value = dis(gen);
        if (value > 0.9) {
            total += value * value; 
        }  
    }

    std::cout << std::fixed << std::setprecision(10) << total << std::endl;
    return 0;
}","if (value > 0.9) {
            total += value * value; 
        }"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string highestScorer = """";
    int highestScore = -1; 

    for (auto const& [name, score] : scores) {
        if (score > highestScore) {
            highestScore = score;
            highestScorer = name;
        }
    }

    std::cout << ""Highest scorer: "" << highestScorer << "" with score: "" << highestScore << std::endl;
    return 0;
}",int highestScore = -1;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> ages;
    ages[25] = ""Alice"";
    ages[30] = ""Bob"";
    ages[25] = ""Charlie""; // Overwrites Alice's entry, subtle bug

    std::cout << ages[25] << std::endl;
    std::cout << ages[30] << std::endl;
    return 0;
}","ages[25] = ""Charlie"";"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> filtered_data;

    for (int x : data) {
        if (x % 2 == 0) {
            filtered_data.push_back(x);
        }
    }

    // Incorrect: using std::accumulate with an uninitialized value
    int sum = std::accumulate(filtered_data.begin(), filtered_data.end(), 0);
    
    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}","int sum = std::accumulate(filtered_data.begin(), filtered_data.end(), 0);"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string pattern = ""test"";

    size_t pos = text.find(pattern);
    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    }
    else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    // Faulty code: Incorrectly incrementing pattern length when calculating shift
    size_t shift = pattern.length() + 1;
    
    std::string remaining_text = text.substr(pos + shift);  // Intent was pos + pattern.length()
    
    if (!remaining_text.empty()) {
       std::cout << ""Remaining text: "" << remaining_text << std::endl;
    } else {
        std::cout << ""No remaining text."" << std::endl;
    }

    return 0;
}",size_t shift = pattern.length() + 1;
"#include <string>
#include <sstream>
#include <iostream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << ""Formatted: "" << num << "" (with extra zero)."";
    return ss.str();
}

int main() {
    double pi = 3.14159;
    std::string formatted_pi = format_number(pi);
    std::cout << formatted_pi << std::endl;
    double e = 2.71828;
    std::string formatted_e = format_number(e);
    std::cout << formatted_e << std::endl;
    
    double big_number = 123456789.987654321;
    std::string formatted_big = format_number(big_number);
    std::cout << formatted_big << std::endl;

    return 0;
}","ss << ""Formatted: "" << num << "" (with extra zero)."";"
"#include <random>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd;  
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 10);

    std::vector<int> numbers(5);
    for (int i = 0; i < numbers.size(); ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the sum of even numbers.
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0) {
            sum =+ numbers[i]; // Fault: Should be +=, not =+
        }
    }

    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}",sum =+ numbers[i];
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    // Find the index of the target value in the vector.
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }
    
    //Incorrectly calculating the size by subtracting one
    int size = numbers.size()-1;
    std::cout << ""Vector size: "" << size << std::endl;

    return 0;
}",int size = numbers.size()-1;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> squares;
  for (int x : data) {
    squares.push_back(x * x);
  }

  // Calculate the sum of squares.  Intended to be 55, but it's wrong due to integer overflow.
  long long sum = std::accumulate(squares.begin(), squares.end(), 0LL);
  
  if (sum == 55) {
    std::cout << ""Correct!\n"";
  } else {
    std::cout << ""Incorrect. Sum is: "" << sum << ""\n"";
  }

  return 0;
}","long long sum = std::accumulate(squares.begin(), squares.end(), 0LL);"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    if (area > 75.0) {
        std::cout << ""Area is large: "" << area << std::endl;
    } else {
        std::cout << ""Area is small: "" << area << std::endl;
    }

    // Incorrect calculation of circumference
    double circumference = 2 * M_PI * radius - 1.0;
    std::cout << ""Circumference: "" << circumference << std::endl;
    return 0;
}",double circumference = 2 * M_PI * radius - 1.0;
"#include <iostream>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> conjugate_z = z.real(); // Should be z.conjugate()
    std::cout << ""Original: "" << z << std::endl;
    std::cout << ""Conjugate (Incorrect): "" << conjugate_z << std::endl;
    return 0;
}",std::complex<double> conjugate_z = z.real();
"#include <iostream>
#include <complex>
#include <cmath>

int main() {
    double angle = 3.14159;
    std::complex<double> z(1.0, 0.0);
    
    std::complex<double> rotated_z = z * std::exp(std::complex<double>(0.0, angle));
    
    std::cout << ""Magnitude: "" << std::abs(rotated_z) << std::endl;
    std::cout << ""Argument: "" << std::arg(rotated_z) << std::endl;
    
    return 0;
}","std::complex<double> rotated_z = z * std::exp(std::complex<double>(0.0, angle));"
"#include <numeric>
#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the product of all numbers in the vector
    int product = 1;
    for (int i = 0; i < numbers.size(); ++i) {
        product *= numbers[i];
    }

    // Incorrectly calculate the sum of the vector elements.
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    std::cout << ""Product: "" << product << std::endl;
    std::cout << ""Sum: "" << sum << std::endl;
    
    return 0;
}","int sum = std::accumulate(numbers.begin(), numbers.end(), 0);"
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Incorrectly calculating the product using accumulate with an initial value
    int product = std::accumulate(numbers.begin(), numbers.end(), 1, std::multiplies<int>());
    
    std::cout << ""Product: "" << product << std::endl;
    
    return 0;
}","int product = std::accumulate(numbers.begin(), numbers.end(), 1, std::multiplies<int>());"
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

    std::cout << ""Numbers greater than "" << target << "":"";
    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return n > target;
"#include <map>
#include <string>
#include <iostream>

int main() {
  std::map<std::string, int> counts;
  counts[""apple""] = 5;
  counts[""banana""] = 3;
  counts[""orange""] = 7;

  int total = 0;
  for (const auto& pair : counts) {
    total += pair.second;
  }

  std::cout << ""Total fruit count: "" << total << std::endl;

  // Bug: Incorrect initialization of the total variable. It should be 0.
  // int total = 1; 

  return 0;
}",int total = 1;
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""Hello, World!"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());

    if (str == reversed_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }

    return 0;
}",if (str == reversed_str)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    double area = M_PI * radius * radius;
    
    // Incorrect type casting to int truncates the decimal part, leading to inaccurate result
    int int_circumference = (int)circumference;
    
    std::cout << ""Circumference: "" << circumference << std::endl;
    std::cout << ""Area: "" << area << std::endl;
    std::cout << ""Integer Circumference (truncated): "" << int_circumference << std::endl;
    
    return 0;
}",(int)circumference;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n >= target; });

    std::cout << ""Numbers greater than or equal to "" << target << "":"";
    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return n >= target;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <tuple>

int main() {
    int a = 5;
    int b = 10;
    int c = 15;

    auto [x, y, z] = std::make_tuple(a, b, c);

    if (x > y && y > z) {
        std::cout << ""Condition met!"" << std::endl;
    } else {
        std::cout << ""Condition not met."" << std::endl;
    }

    return 0;
}",if (x > y && y > z)
"#include <iostream>
#include <limits>

int main() {
    long long a = std::numeric_limits<long long>::max();
    long long b = 1;
    long long sum = a + b;
    std::cout << ""Sum: "" << sum << std::endl;  // Incorrectly prints a large negative number due to overflow
    return 0;
}",long long sum = a + b;
"#include <iostream>
#include <iomanip>

int main() {
    double value = 123.456789;
    std::cout << std::fixed << std::setprecision(3) << value << std::endl;
    return 0;
}",std::cout << std::fixed << std::setprecision(3) << value << std::endl;
"#include <iostream>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <random>
#include <iomanip>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
            sum += num / 2;
        } else {
            sum += num * 2;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += num * 2;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size(); //Integer division - incorrect average
    std::cout << ""Average score: "" << average_score << std::endl;

    return 0;
}",double average_score = total_score / scores.size();
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());
  
  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }
  
  return 0;
}",if (text == reversed_text)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area > expected_area + 0.1) {
        std::cout << ""Area is too large."" << std::endl;
    } else if (area < expected_area - 0.1) {
        std::cout << ""Area is too small."" << std::endl;
    } else {
        std::cout << ""Area is correct."" << std::endl;
    }
    return 0;
}",if (area > expected_area + 0.1)
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: i <= numbers.size() instead of i < numbers.size()
        sum += numbers[i];
    }
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int length = text.length();
    char lastChar = text[length]; // Potential out-of-bounds access
    std::cout << ""Last character: "" << lastChar << std::endl;
    return 0;
}",char lastChar = text[length];
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <iomanip>

int main() {
    double price = 100.0;
    int quantity = 5;
    double taxRate = 0.1;

    double subtotal = price * quantity;
    double taxAmount = subtotal * taxRate;
    double total = subtotal + taxAmount;

    std::cout << ""Subtotal: "" << std::fixed << std::setprecision(2) << subtotal << std::endl;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    std::cout << ""Total: "" << std::fixed << std::setprecision(2) << total << std::endl;

    return 0;
}","std::cout << ""Total: "" << std::fixed << std::setprecision(2) << total << std::endl;"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <fstream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    std::string line;
    int sum = 0;

    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line);
            sum += num;
        } catch (const std::invalid_argument& e) {
            // Handle non-integer lines (e.g., print an error message or skip the line)
            continue; // Skip non-integer lines
        }
    }

    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",continue;
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int numbers[10];
    for (int i = 0; i <= 10; ++i) {  // Fault: Loop iterates one element too far
        numbers[i] = distrib(gen);
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",for (int i = 0; i <= 10; ++i)
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is calculated correctly."" << std::endl;
    } else {
        std::cout << ""Area is calculated incorrectly. Expected: "" << expected_area << "", Actual: "" << area << std::endl;
    }
    return 0;
}",if (area == expected_area)
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int sum = 0;
    std::sort(numbers.begin(), numbers.end());
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: i <= numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>
#include <vector>

std::string reverseString(const std::string& str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string input_string = ""hello"";
    std::string reversed = reverseString(input_string);
    std::cout << ""Original: "" << input_string << std::endl;
    std::cout << ""Reversed: "" << reversed << std::endl;
    std::vector<std::string> words = {""This"", ""is"", ""a"", ""test""};
    std::string combined_words = """";
    for (size_t i = 0; i < words.size(); ++i) {
        combined_words += words[i];
    }
    std::string reversed_combined = reverseString(combined_words);
    std::cout << ""Combined reversed: "" << reversed_combined << std::endl;
    return 0;
}",        combined_words += words[i];
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    std::cout << myMap[4] << std::endl; // Accessing non-existent key
    
    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.count(name) > 0) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
    }

    return 0;
}","std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;"
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    size_t n = sizeof(arr) / sizeof(arr[0]);

    int sum = std::accumulate(arr, arr + n - 1, 0);

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",arr + n - 1
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Find the index of the largest element
    auto it = std::max_element(numbers.begin(), numbers.end());
    size_t index = std::distance(numbers.begin(), it);

    // Incorrect: Attempting to access beyond the vector's bounds
    std::cout << numbers[index + 1] << std::endl; 
    
    return 0;
}",std::cout << numbers[index + 1] << std::endl;
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};

    // Calculate the sum of elements using std::accumulate
    int sum = std::accumulate(data.begin(), data.end(), 0);

    // Incorrectly calculate average by dividing by the wrong number
    double average = static_cast<double>(sum) / 4; 

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = static_cast<double>(sum) / 4;
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    std::seed_seq seed{std::chrono::system_clock::now().time_since_epoch().count(), seed_time.time_since_epoch().count()};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distribution(generator);
        sum += randomNumber;
    }

    std::cout << ""Sum of 10 random numbers: "" << sum << std::endl;
    return 0;
}",int randomNumber = distribution(generator);
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, world! This is a test."";
  std::string pattern = ""world"";
  size_t pos = text.find(pattern, 10); // Incorrect starting position
  if (pos != std::string::npos) {
    std::cout << ""Pattern found at position: "" << pos << std::endl;
  } else {
    std::cout << ""Pattern not found."" << std::endl;
  }
  return 0;
}","text.find(pattern, 10)"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    // Find the index of the target in the vector.  If not found, return -1.
    auto it = std::find(numbers.begin(), numbers.end(), target);
    int index = std::distance(numbers.begin(), it); // potential fault

    if (index == -1) {
        std::cout << ""Target not found."" << std::endl;
    } else {
        std::cout << ""Target found at index: "" << index << std::endl;
    }

    return 0;
}","int index = std::distance(numbers.begin(), it);"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> sorted_data = data;
    std::sort(sorted_data.begin(), sorted_data.end());

    int sum = std::accumulate(data.begin(), data.end(), 0);
    int expected_sum = std::accumulate(sorted_data.begin(), sorted_data.end(), 0);

    if (sum != expected_sum) {
        std::cout << ""Sum mismatch!"" << std::endl;
    } else {
        std::cout << ""Sums match."" << std::endl;
    }

    return 0;
}","int sum = std::accumulate(data.begin(), data.end(), 0);"
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto const& [key, val] : myMap) {
        std::cout << ""Key: "" << key << "", Value: "" << val << std::endl;
    }

    myMap.erase(2);

    std::cout << ""After erasing key 2:\n"";
    for (auto const& [key, val] : myMap) {
        std::cout << ""Key: "" << key << "", Value: "" << val << std::endl;
    }

    // Incorrectly attempt to access a non-existent key after deletion
    std::cout << ""Value at key 2 (should not exist): "" << myMap[2] << std::endl;
    
    return 0;
}","std::cout << ""Value at key 2 (should not exist): "" << myMap[2] << std::endl;"
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int number = std::stoi(line);
            sum += number;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid number format: "" << line << ""\n"";
        }
    }
    
    inputFile.close();

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int number = std::stoi(line);
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <string>
#include <sstream>

std::string formatString(int num) {
    std::stringstream ss;
    ss << num;
    return ss.str();
}

int main() {
    int number = 12345;
    std::string formatted = formatString(number);
    
    // Incorrectly attempts to convert the string back to an integer
    int parsedNumber = formatted - 10000; 
    
    std::cout << ""Original Number: "" << number << std::endl;
    std::cout << ""Formatted String: "" << formatted << std::endl;
    std::cout << ""Parsed Number: "" << parsedNumber << std::endl;
    
    return 0;
}",int parsedNumber = formatted - 10000;
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;

    std::cout << std::fixed << std::setprecision(2) << ""Area of the circle: "" << area << std::endl;

    return 0;
}",double area = pi * radius * radius;
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;
  if (abs(area - expected_area) > 0.0001) {
    std::cout << ""Area calculation is incorrect!\n"";
    std::cout << ""Calculated area: "" << area << ""\n"";
  }
  else {
    std::cout << ""Area calculation is correct!\n"";
  }
  return 0;
}",double area = M_PI * radius * radius;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    
    // Find the maximum element's index (incorrect implementation)
    int max_index = std::max_element(numbers.begin(), numbers.end()) - numbers.begin();
    
    std::cout << ""Maximum element index: "" << max_index << std::endl;
    
    return 0;
}","int max_index = std::max_element(numbers.begin(), numbers.end()) - numbers.begin();"
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <string>

int main() {
  std::string message = ""Hello, world!\n"";
  size_t pos = message.find(""world!"");
  if (pos != std::string::npos) {
    std::cout << ""Substring found at position: "" << pos << std::endl;
  } else {
    std::cout << ""Substring not found."" << std::endl;
  }
  return 0;
}",std::string::npos
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""hello world"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());
  if (text == reversed_text)
    std::cout << ""Palindrome!"" << std::endl;
  else
    std::cout << ""Not a palindrome."" << std::endl;
  return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Find the index of the largest element
    auto it = std::max_element(numbers.begin(), numbers.end());
    size_t index = std::distance(numbers.begin(), it);
    
    // Incorrectly calculate the value at the next index
    int next_value = numbers[(index + 1) % numbers.size()];

    std::cout << ""Next value: "" << next_value << std::endl;

    return 0;
}",int next_value = numbers[(index + 1) % numbers.size()];
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto const& [key, val] : myMap) {
        std::cout << key << "": "" << val << std::endl;
    }

    myMap.erase(2);

    std::cout << ""After erasing element 2:\n"";
    for (auto const& [key, val] : myMap) {
        std::cout << key << "": "" << val << std::endl;
    }

    int numKeys = myMap.size();
    std::cout << ""Number of keys in the map: "" << numKeys << std::endl;
    
    return 0;
}",int numKeys = myMap.size();
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;

    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::high_resolution_clock::time_point start = std::chrono::high_resolution_clock::now();
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        sum += distrib(gen) * 2;
    }

    std::chrono::high_resolution_clock::time_point end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> duration = end - start;

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Time taken: "" << duration.count() << "" seconds"" << std::endl;

    return 0;
}",sum += distrib(gen) * 2;
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    
    std::vector<int> another_numbers = {6, 7, 8, 9, 10};
    int another_sum = std::accumulate(another_numbers.begin(), another_numbers.end(), 0);
    
    std::cout << ""Sum of numbers: "" << sum << std::endl;
    std::cout << ""Sum of another_numbers: "" << another_sum << std::endl;
    
    return 0;
}","std::vector<int> another_numbers = {6, 7, 8, 9, 10};"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct."" << std::endl;
    } else {
        std::cout << ""Area is incorrect. Calculated: "" << area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> results;
    for (int num : numbers) {
        if (num > target) {
            results.push_back(num);
        }
    }

    std::cout << ""Numbers greater than "" << target << "":"";
    for (int i = 0; i < results.size(); ++i) {
        std::cout << results[i] << (i == results.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;

    return 0;
}",if (num > target) {
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::sort(data.begin(), data.end());
    
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) { // Fault: i <= data.size()
        sum += data[i];
    }
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4, 7, 3, 6};
  std::vector<int> sorted_data = data;
  std::sort(sorted_data.begin(), sorted_data.begin() + sorted_data.size() - 1); // Fault: Sorts only up to the second-to-last element.
  
  std::cout << ""Original: "";
  for (int x : data) {
    std::cout << x << "" "";
  }
  std::cout << std::endl;

  std::cout << ""Sorted: "";
  for (int x : sorted_data) {
    std::cout << x << "" "";
  }
  std::cout << std::endl;

  return 0;
}",sorted_data.begin() + sorted_data.size() - 1
"#include <string>
#include <sstream>
#include <vector>

std::string format_vector(const std::vector<int>& data) {
    std::stringstream ss;
    ss << ""["";
    for (size_t i = 0; i < data.size(); ++i) {
        ss << data[i];
        if (i < data.size() - 1) {
            ss << "", "";
        }
    }
    ss << ""]"";
    return ss.str();
}

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::string formatted_string = format_vector(numbers);
    std::cout << formatted_string << std::endl;

    std::vector<int> empty_vector;
    std::string empty_formatted = format_vector(empty_vector);
    std::cout << empty_formatted << std::endl; // Should print ""[]"" but crashes due to accessing out of bounds

    return 0;
}","if (i < data.size() - 1) {
            ss << "", "";
        }"
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.45678;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl;
    double tax_rate = 0.075;
    double tax_amount = price * tax_rate;
    std::cout << ""Tax amount: "" << std::fixed << std::setprecision(2) << tax_amount << std::endl;
    double total_cost = price + tax_amount;
    std::cout << ""Total cost: "" << std::fixed << std::setprecision(2) << total_cost << std::endl;
    return 0;
}","std::cout << ""Tax amount: "" << std::fixed << std::setprecision(2) << tax_amount << std::endl;"
"#include <iostream>
#include <tuple>

int main() {
    int a = 5;
    int b = 10;

    auto [sum, difference] = std::make_tuple(a + b, a - b);

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Difference: "" << difference << std::endl;

    // Incorrect use of sum and difference after the tuple unpacking
    int product = sum * difference;
    std::cout << ""Product: "" << product << std::endl;
    return 0;
}",int product = sum * difference;
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseString(const std::string& str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string input_string = ""hello"";
    std::string reversed = reverseString(input_string);
    std::cout << ""Original: "" << input_string << std::endl;
    std::cout << ""Reversed: "" << reversed << std::endl;
    return 0;
}","std::reverse(reversed_str.begin(), reversed_str.end());"
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    double circumference = 2 * 3.14159 * radius;
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

    // Incorrect calculation of diameter
    double diameter = radius / 2.0;
    std::cout << ""Diameter of the circle: "" << std::fixed << std::setprecision(2) << diameter << std::endl;

    return 0;
}",double diameter = radius / 2.0;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!\n"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());
  std::cout << ""Original: "" << text << ""Reversed: "" << reversed_text << std::endl;
  return 0;
}","std::reverse(reversed_text.begin(), reversed_text.end());"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30; 
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Accessing non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl;
    return 0;
}",int age = ages[name];
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of circle: "" << area << std::endl;
    double perimeter = 2 * M_PI * radius;
    std::cout << ""Perimeter of circle: "" << perimeter << std::endl;
    double circumference_error = perimeter + 1.0; //adding extra 1.0 to perimiter calculation.
    std::cout << ""Circumference error: "" << circumference_error << std::endl;
    return 0;
}",double circumference_error = perimeter + 1.0;
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",0.0
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct."" << std::endl;
    } else {
        std::cout << ""Area is incorrect: Calculated = "" << area << "", Expected = "" << expected_area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;
    
    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n < target; });
    
    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return n < target;
"#include <string>
#include <sstream>

std::string formatNumber(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 123.456789;
    std::string formattedPrice = formatNumber(price);
    std::cout << ""The formatted price is: "" << formattedPrice << std::endl;
    double taxRate = 0.07;
    double totalPrice = price + (price * taxRate);
    std::string formattedTotalPrice = formatNumber(totalPrice);
    std::cout << ""The total price is: "" << formattedTotalPrice << std::endl;
    return 0;
}",std::string formattedTotalPrice = formatNumber(totalPrice);
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::sort(data.begin(), data.end(), std::greater<int>());
    
    std::cout << ""Sorted in descending order: "";
    for (size_t i = 0; i < data.size(); ++i) {
        std::cout << data[i] << (i == data.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
    
    //Find the index of 8 using linear search
    int target = 8;
    int index = -1;
    for (int i = 0; i < data.size(); ++i) {
        if (data[i] == target)
        {
            index = i;
            break;
        }
    }
    
    std::cout << ""Index of "" << target << "": "" << index << std::endl;
    
    return 0;
}","if (data[i] == target)
        {
            index = i;
            break;
        }"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Incorrect: Accessing a non-existent key
    std::cout << ""Age of "" << name << "" is: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << ""Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    double taxRate = 0.085;
    double taxAmount = price * taxRate;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    double totalCost = price + taxAmount;
    std::cout << ""Total Cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;

    // Incorrect rounding.  Should use round() instead of trunc().
    int truncatedTotal = (int)totalCost;
    std::cout << ""Truncated Total: "" << truncatedTotal << std::endl;
    return 0;
}",int truncatedTotal = (int)totalCost;
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!\n"";
    size_t pos = text.find(""world!"");
    if (pos != std::string::npos) {
        text.erase(pos, 5); // Intended to remove ""world!""
    }
    std::cout << text << std::endl;
    return 0;
}","text.erase(pos, 5);"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = ""35""; //Fault
    
    std::cout << ""Alice's age: "" << ages[""Alice""] << std::endl;
    std::cout << ""Bob's age: "" << ages[""Bob""] << std::endl;
    std::cout << ""Charlie's age: "" << ages[""Charlie""] << std::endl;
    
    return 0;
}","ages[""Charlie""] = ""35"";"
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    std::cout << myMap[4] << std::endl; // Accessing a non-existent key

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    int num_iterations = 5;
    int sum = 0;

    for (int i = 0; i < num_iterations; ++i) {
        int randomNumber = distrib(gen);
        sum += randomNumber;
    }

    std::cout << ""Sum of "" << num_iterations << "" random numbers: "" << sum << std::endl;
    std::cout << ""Average: "" << sum / num_iterations << std::endl; // Integer division truncates
    return 0;
}","std::cout << ""Average: "" << sum / num_iterations << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect: "" << area << std::endl;
    } else {
        std::cout << ""Area calculation is correct: "" << area << std::endl;
    }

    // Calculate circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    return 0;
}",double area = M_PI * radius * radius;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: should be < numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    if (ss >> number) {
        std::cout << ""Conversion successful: "" << number << std::endl;
    } else {
        std::cout << ""Conversion failed."" << std::endl;
    }
    
    std::string invalid_input = ""abc"";
    std::stringstream ss2(invalid_input);
    double number2;
    if (ss2 >> number2) {
        std::cout << ""Conversion successful: "" << number2 << std::endl;
    } else {
        std::cout << ""Conversion failed."" << std::endl;
    }
    
    return 0;
}",if (ss2 >> number2) {
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {  // Faulty loop condition
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <fstream>
#include <string>
#include <algorithm>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    std::string line;
    long long sum = 0;
    int count = 0;

    if (file.is_open()) {
        while (std::getline(file, line)) {
            try {
                long long num = std::stoll(line);
                sum += num;
                count++;
            } catch (const std::invalid_argument& e) {
                // Ignore lines that can't be converted to numbers
            }
            catch (const std::out_of_range& e) {
                //Ignore lines that are out of range.
            }
        }
        file.close();

        if (count > 0) {
            double average = sum / count;
            std::cout << ""Average: "" << average << std::endl;
        } else {
            std::cout << ""No valid numbers found in the file."" << std::endl;
        }
    } else {
        std::cerr << ""Unable to open file: "" << filename << std::endl;
        return 1;
    }
    return 0;
}",double average = sum / count;
"#include <iostream>
#include <queue>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int x = q.front();
        q.pop();
        if (x > 2) {
            q.push(x * 2);
        }
    }

    std::cout << q.size() << std::endl;
    return 0;
}",if (x > 2) {
"#include <iostream>
#include <array>

int main() {
    std::array<int, 5> numbers = {1, 2, 3, 4, 5};

    for (size_t i = 0; i <= numbers.size(); ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    double circumference = 2 * pi * radius;
    std::cout << ""Circumference of circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;
    
    int angle_degrees = 45;
    double angle_radians = angle_degrees * (M_PI / 180.0); // Incorrect formula.
    std::cout << ""Angle in radians: "" << angle_radians << std::endl;
    
    return 0;
}",double angle_radians = angle_degrees * (M_PI / 180.0);
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int david_score = scores[name]; // Default construction, not initialization
    
    std::cout << ""David's score: "" << david_score << std::endl;
    
    return 0;
}",int david_score = scores[name];
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::system_clock::time_point now = std::chrono::system_clock::now();
    std::seed_seq seed{std::chrono::duration_cast<std::chrono::seconds>(now - std::chrono::system_clock::from_time_t(0)).count(), now.time_since_epoch().count()};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distribution(generator);
        if (randomNumber % 2 == 0) {
            sum += randomNumber * 2;
        } else {
           sum -= randomNumber; // Fault: Should be sum += randomNumber;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= randomNumber;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double perimeter = 2 * M_PI * radius;
    
    std::cout << ""Area: "" << area << std::endl;
    std::cout << ""Perimeter: "" << perimeter << std::endl;
    
    // Incorrectly calculate circumference using area
    double circumference = sqrt(area);
    std::cout << ""Circumference (incorrect): "" << circumference << std::endl;
    
    return 0;
}",double circumference = sqrt(area);
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the average of the numbers
    double sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    
    double average = sum / numbers.size();
    
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",i <= numbers.size()
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string vowels = ""aeiouAEIOU"";
    std::string result = """";

    for (char c : text) {
        if (vowels.find(c) != std::string::npos) {
            result.erase(result.end()); // This is the fault: Clears the result string
        }
        else {
            result += c;
        }
    }

    std::cout << result << std::endl;
    return 0;
}",result.erase(result.end());
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

    std::cout << ""Numbers greater than "" << target << "":"";
    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",return n > target;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int sum = 0;
    for (int number : numbers) {
        sum += number;
    }
    
    int average = sum / numbers.size(); // Integer division truncates the decimal portion
    
    std::cout << ""The average is: "" << average << std::endl;
    return 0;
}",int average = sum / numbers.size();
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    double sum = std::accumulate(data.begin(), data.end(), 0.0);
    
    // Incorrect type conversion: converting double to int truncates the value
    int result = static_cast<int>(sum);
    
    std::cout << ""Sum (double): "" << sum << std::endl;
    std::cout << ""Sum (int): "" << result << std::endl;
    
    return 0;
}",static_cast<int>(sum);
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            sum += std::stoi(line); // Potential Overflow
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << e.what() << std::endl;
        } catch (const std::out_of_range& e) {
            std::cerr << ""Out of range: "" << e.what() << std::endl;
        }
    }

    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += std::stoi(line);
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;

    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    // Incorrectly calculates circumference - should be 2 * pi * radius
    double circumference = 2 + pi * radius;

    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

    return 0;
}",double circumference = 2 + pi * radius;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int david_score = scores[name]; // Default initialization

    std::cout << ""David's score: "" << david_score << std::endl;
    return 0;
}",int david_score = scores[name];
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Potential undefined behavior
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    // Faulty code: Incorrectly incrementing the iterator after accessing it
    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
       std::cout << it->first << "": "" << it->second << std::endl;
       ++it; // Skips one element in the map
    }

    return 0;
}",++it;
"#include <string>
#include <iostream>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    std::sort(nums.begin(), nums.end(), std::greater<int>());

    for (int i = 0; i <= nums.size(); ++i) {
        std::cout << nums[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",i <= nums.size()
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: should be i < numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Should ideally check if name exists first
    std::cout << ""David's age is: "" << age << std::endl;
    return 0;
}",int age = ages[name];
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string best_student = ""David""; // Incorrect initialization
    int best_score = -1;

    for (auto const& [student, score] : scores) {
        if (score > best_score) {
            best_score = score;
            best_student = student;
        }
    }

    std::cout << ""Best student: "" << best_student << "" with score "" << best_score << std::endl;
    return 0;
}","std::string best_student = ""David""; // Incorrect initialization"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) == ages.end()) {
        ages[name] = -1; // Intended to set default age
    }
    std::cout << ""David's age: "" << ages[name] << std::endl;
    
    return 0;
}",ages[name] = -1;
"#include <iostream>
#include <cmath>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double perimeter = 2 * M_PI * radius;

  std::cout << ""Area: "" << area << std::endl;
  std::cout << ""Perimeter: "" << perimeter << std::endl;
  
  if (radius < 0) {
    std::cout << ""Invalid radius. Please enter a positive value."" << std::endl;
  } else {
    std::cout << ""Radius is valid."" << std::endl;
  }

  return 0;
}","if (radius < 0) {
    std::cout << ""Invalid radius. Please enter a positive value."" << std::endl;
  } else {
    std::cout << ""Radius is valid."" << std::endl;
  }"
"#include <random>
#include <iostream>
#include <vector>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 10);

    std::vector<int> numbers(5);
    for (int i = 0; i < 5; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Should be i < numbers.size()
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    size_t len = message.length();
    std::string reversed_message = message.substr(len - 1);
    for (size_t i = 0; i < len; ++i) {
        reversed_message += message[i];
    }
    std::cout << ""Original: "" << message << ""\n"";
    std::cout << ""Reversed: "" << reversed_message << std::endl;
    return 0;
}",std::string reversed_message = message.substr(len - 1);
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string."";
  std::string pattern = ""test"";

  size_t pos = text.find(pattern, 10); // Starts search from index 10
  if (pos != std::string::npos) {
    std::cout << ""Pattern found at position: "" << pos << std::endl;
  } else {
    std::cout << ""Pattern not found."" << std::endl;
  }

  return 0;
}","text.find(pattern, 10)"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

    std::cout << ""Numbers greater than "" << target << "":"";
    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",return n > target;
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of squares
    int sum_of_squares = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum_of_squares += numbers[i] * numbers[i];
    }
    
    // Incorrectly calculate the average
    double average = sum_of_squares / numbers.size();

    std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = sum_of_squares / numbers.size();
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int target = 7;
  
  std::vector<int> result;
  std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });
  
  for (int num : result) {
    std::cout << num << "" "";
  }
  std::cout << std::endl;
  
  return 0;
}",return n > target;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of squares, but incorrectly multiply by 2
    int sum_of_squares = 0;
    for (int num : numbers) {
        sum_of_squares += num * num;
    }

    sum_of_squares *= 2; // Fault: Intentional double calculation.
    
    std::cout << ""Sum of squares (incorrectly doubled): "" << sum_of_squares << std::endl;
    
    return 0;
}",sum_of_squares *= 2;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculated incorrectly: "" << area << std::endl;
    } else {
        std::cout << ""Area calculated correctly: "" << area << std::endl;
    }

    // Incorrect calculation of circumference
    double circumference = 2 * M_PI * radius * 1.1; //Multiplied by 1.1 instead of 1
    std::cout << ""Circumference: "" << circumference << std::endl;

    return 0;
}",double circumference = 2 * M_PI * radius * 1.1;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <limits>

int main() {
  long long sum = 0;
  for (int i = 0; i < 1000000; ++i) {
    sum += i;
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",sum += i;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> squares;

  for (int x : data) {
    squares.push_back(x * x);
  }

  // Calculate the sum of squares, but the loop condition is incorrect.
  int sum = 0;
  for (size_t i = 0; i <= squares.size(); ++i) {
    sum += squares[i];
  }

  std::cout << ""Sum of squares: "" << sum << std::endl;
  return 0;
}",i <= squares.size()
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    int key = 4;
    std::cout << myMap[key] << std::endl; // Accessing a non-existent key.
    return 0;
}",std::cout << myMap[key] << std::endl;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: sorting only up to n-1

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::sort(data.begin(), data.begin() + data.size() - 1); // Incorrect sort range
    for (int x : data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;
    return 0;
}",data.begin() + data.size() - 1
"#include <iostream>
#include <string>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Default value will be used, which is 0.
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseString(std::string str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string input = ""hello"";
    std::string reversed = reverseString(input);
    std::cout << ""Original: "" << input << std::endl;
    std::cout << ""Reversed: "" << reversed << std::endl;
    std::string modified_input = input.substr(1, input.length() -1);
    std::string modified_reversed = reverseString(modified_input);
    std::cout << ""Modified input reversed: "" << modified_reversed << std::endl;
    return 0;
}","std::string modified_input = input.substr(1, input.length() -1);"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""The area of the circle is: "" << area << std::endl;
    return 0;
}",double area = M_PI * radius * radius;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    double area = M_PI * radius * radius;

    std::cout << ""Circumference: "" << circumference << std::endl;
    std::cout << ""Area: "" << area << std::endl;

    double expected_area = 78.5398; //Expected value, should be area
    if (area == expected_area) {
        std::cout << ""Area calculation is correct."" << std::endl;
    } else {
        std::cout << ""Area calculation is incorrect.""
         std::cout << ""Expected: "" << expected_area << std::endl;
    }

    return 0;
}","std::cout << ""Area calculation is incorrect.""
         std::cout << ""Expected: "" << expected_area << std::endl;"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string."";
  std::string sub = ""test"";

  size_t pos = text.find(sub);
  if (pos != std::string::npos) {
    text.erase(pos, 1); // Erase only one character instead of the substring
  }

  std::cout << text << std::endl;
  return 0;
}","text.erase(pos, 1);"
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Potential undefined behavior if name isn't a key
    std::cout << ""David's age is: "" << age << std::endl;
    return 0;
}",int age = ages[name];
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrect initialization of the vector to be used for calculating the product
    std::vector<int> product_numbers = {1, 2, 3, 4};
    int product = 1; // Initialize product to 1
    for (int i = 0; i < product_numbers.size(); ++i) {
        product *= product_numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Product: "" << product << std::endl;
    return 0;
}","std::vector<int> product_numbers = {1, 2, 3, 4};"
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::reverse(str.begin(), str.end());
    if (str == ""dlrow olleh"") {
        std::cout << ""Correct!"" << std::endl;
    } else {
        std::cout << ""Incorrect!"" << std::endl;
    }
    return 0;
}","if (str == ""dlrow olleh"")"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);
    std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1, not n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorts only up to the second-to-last element

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string pattern = ""world!"";

    size_t pos = text.find(pattern);

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    // Incorrect usage of std::replace: replacing all characters with 'x'
    std::replace(text.begin(), text.end(), ' ', 'x');

    std::cout << ""Modified text: "" << text << std::endl;
    return 0;
}","std::replace(text.begin(), text.end(), ' ', 'x');"
"#include <iostream>
#include <unordered_map>

int main() {
  std::unordered_map<std::string, int> counts;
  counts[""apple""] = 5;
  counts[""banana""] = 3;
  counts[""orange""] = 2;

  std::string fruit = ""grape"";
  int count = counts[fruit]; // Fault: Uses default construction for missing key
  std::cout << ""Count of "" << fruit << "": "" << count << std::endl;
  return 0;
}",int count = counts[fruit];
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int score = scores[name]; // Default construction for non-existent key
    std::cout << ""Score for "" << name << "": "" << score << std::endl;

    return 0;
}",int score = scores[name];
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculated incorrectly: "" << area << std::endl;
    } else {
        std::cout << ""Area calculated correctly: "" << area << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct."" << std::endl;
    } else {
        std::cout << ""Area is incorrect. Calculated: "" << area << "" Expected: "" << expected_area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = std::accumulate(data.begin(), data.end(), 0.0);
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",0.0
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    int secretNumber = distrib(gen);
    int guess = 50; // Initial guess

    std::cout << ""Welcome to the Number Guessing Game!\n"";
    std::cout << ""I'm thinking of a number between 1 and 100.\n"";

    while (guess < secretNumber) {
        std::cout << ""Too low! Guess again.\n"";
        guess += 50; // Increment by 50 - faulty logic
    }

    if (guess == secretNumber) {
        std::cout << ""Congratulations! You guessed the number.\n"";
    } else {
        std::cout << ""You ran out of guesses. The number was "" << secretNumber << "".\n"";
    }

    return 0;
}",guess += 50;
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    if (str == reversed_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == reversed_str)
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <array>

int main() {
    std::array<int, 5> arr = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= arr.size(); ++i) {
        sum += arr[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= arr.size()
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

  // Incorrectly subtract 10 from the sum instead of adding
  sum = sum - 10;

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",sum = sum - 10;
"#include <fstream>
#include <string>

int main() {
  std::string filename = ""data.txt"";
  std::ofstream outfile(filename);
  if (!outfile.is_open()) {
    std::cerr << ""Error opening file!\n"";
    return 1;
  }

  int numbers[] = {1, 2, 3, 4, 5};
  int size = sizeof(numbers) / sizeof(numbers[0]);

  for (int i = 0; i <= size; ++i) { // Fault: Loop goes out of bounds
    outfile << numbers[i] << "" "";
  }

  outfile.close();
  return 0;
}",i <= size
"#include <iostream>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    double perimeter = 4 * radius; // Intended to be circumference, but calculates perimeter of a square.
    std::cout << ""Perimeter: "" << perimeter << std::endl;
    
    return 0;
}",double perimeter = 4 * radius;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    //Incorrectly calculates circumference using area formula
    double circumference = sqrt(area) * 2.0;
    std::cout << ""Circumference: "" << circumference << std::endl;
    return 0;
}",double circumference = sqrt(area) * 2.0;
"#include <string>
#include <sstream>

std::string formatString(int number) {
    std::stringstream ss;
    ss << number;
    return ss.str();
}

int main() {
    int num = 123;
    std::string strNum = formatString(num);
    int parsedNum = std::stoi(strNum, nullptr, 2); // Incorrect base
    std::cout << ""Parsed number: "" << parsedNum << std::endl;
    return 0;
}","std::stoi(strNum, nullptr, 2)"
"#include <random>
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average of the numbers.
    double sum = 0.0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    double average = sum / numbers.size();

    // Find the smallest number.
    int smallest = numbers[0];
    for (int i = 1; i < numbers.size(); ++i) {
        if (numbers[i] < smallest) {
            smallest = numbers[i];
        }
    }

    // Intentionally use the average instead of the smallest to calculate a product. This is the fault.
    long long product = 1;
    for (int i = 0; i < numbers.size(); ++i) {
        product *= average;
    }

    std::cout << ""Product: "" << product << std::endl;

    return 0;
}",product *= average;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    for (int num : numbers) {
        if (num % 2 == 0)
            even_numbers.push_back(num);
    }

    // Incorrectly prints the size of 'numbers' instead of 'even_numbers'
    std::cout << ""Number of even numbers: "" << even_numbers.size() << std::endl;

    return 0;
}","std::cout << ""Number of even numbers: "" << even_numbers.size() << std::endl;"
"#include <iostream>
#include <map>

int main() {
  std::map<std::string, int> scores;
  scores[""Alice""] = 85;
  scores[""Bob""] = 92;
  scores[""Charlie""] = 78;

  int total = 0;
  for (auto const& [name, score] : scores) {
    total += score;
  }

  double average = total / scores.size(); // Integer division, incorrect average
  std::cout << ""Average score: "" << average << std::endl;

  return 0;
}",total / scores.size()
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseString(const std::string& str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string input_string = ""hello"";
    std::string reversed_string = reverseString(input_string);
    std::cout << ""Original: "" << input_string << std::endl;
    std::cout << ""Reversed: "" << reversed_string << std::endl;

    std::string another_string = ""world"";
    std::string incorrect_reversed = reverseString(another_string);
    std::cout << ""Another Original: "" << another_string << std::endl;
    std::cout << ""Incorrect Reversed: "" << incorrect_reversed << std::endl; //Should be dlrow, but prints something else due to incorrect usage of variable

    return 0;
}","std::cout << ""Incorrect Reversed: "" << incorrect_reversed << std::endl;"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());

    if (str == reversed_str) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    std::cout << reversed_str << std::endl;
    return 0;
}",if (str == reversed_str)
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30; 
    ages[""Bob""] = 25; 
    ages[""Charlie""] = 40; 

    std::string name = ""David"";
    int age = ages[name]; // Potential issue: Accessing a non-existent key.
    std::cout << ""David's age: "" << age << std::endl; 

    return 0;
}",int age = ages[name];
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 85;
    scores[""Charlie""] = 75;

    std::string name = ""David"";
    int davidScore = scores[name]; //Potential issue: Default value used.
    
    std::cout << ""David's score: "" << davidScore << std::endl;
    return 0;
}",int davidScore = scores[name];
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Loop condition should be i < numbers.size()
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {  // Off-by-one error
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    double perimeter = 2 * M_PI * radius;
    std::cout << ""Perimeter of the circle: "" << perimeter << std::endl;

    // Incorrect calculation of diameter
    double diameter = radius / 2.0;
    std::cout << ""Diameter of the circle: "" << diameter << std::endl;

    return 0;
}",double diameter = radius / 2.0;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""hello world"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculated incorrectly: "" << area << std::endl;
    } else {
        std::cout << ""Area is correct: "" << area << std::endl;
    }

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: sorting only up to n-1

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;

  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;
    
    for (int num : numbers) {
        if (num % 2 == 0)
            even_numbers.push_back(num);
    }
    
    // Calculate the product of even numbers
    long long product = 1; 
    for (int i = 0; i < even_numbers.size(); ++i) {
        product *= even_numbers[i];
    }
    
    std::cout << ""Product of even numbers: "" << product << std::endl;
    return 0;
}",long long product = 1;
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    // Incorrectly using an iterator to remove elements while iterating
    for (auto it = myMap.begin(); it != myMap.end(); ) {
        if (it->first % 2 != 0) {
            it = myMap.erase(it);
        }
        else {
            ++it;
        }
    }

    std::cout << ""Map size: "" << myMap.size() << std::endl;
    return 0;
}",it = myMap.erase(it);
"#include <iostream>
#include <limits>

int main() {
    unsigned int max_uint = std::numeric_limits<unsigned int>::max();
    unsigned int increment = 1;
    unsigned int result = max_uint + increment; // Overflow
    std::cout << ""Max unsigned int: "" << max_uint << std::endl;
    std::cout << ""Result after increment: "" << result << std::endl;
    return 0;
}",unsigned int result = max_uint + increment;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    
    // Sort the numbers in ascending order
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a < b - 1; });
    
    // Print the sorted numbers
    for (int number : numbers) {
        std::cout << number << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}",return a < b - 1;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string pattern = ""world!"";

    size_t pos = text.find(pattern);

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    text[0] = 'J'; // Subtle fault - modifying a character after find, causing unexpected output

    std::cout << ""Modified text: "" << text << std::endl;
    return 0;
}",text[0] = 'J';
"#include <string>
#include <iostream>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl; // Faulty substring extraction
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    double expected_circumference = 31.4159;
    if (circumference > expected_circumference) {
        std::cout << ""Circumference is too large."" << std::endl;
    } else {
        std::cout << ""Circumference is within acceptable range."" << std::endl;
    }

    return 0;
}",if (circumference > expected_circumference)
"#include <fstream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    if (file.is_open()) {
        std::string line;
        int sum = 0;
        while (std::getline(file, line)) {
            sum += line.length();
        }
        file.close();
        std::cout << ""Total characters read: "" << sum << std::endl;
    } else {
        std::cerr << ""Unable to open file!"" << std::endl;
        return 1;
    }
    return 0;
}",sum += line.length();
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target element using std::find
    auto it = std::find(nums.begin(), nums.end(), target);

    if (it != nums.end()) {
        std::cout << ""Target found at index: "" << std::distance(nums.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    //Incorrectly trying to access the element after the iterator.
    if (it != nums.end()) {
        std::cout << ""Element after target: "" << *(it + 1) << std::endl;
    }
    
    return 0;
}","std::cout << ""Element after target: "" << *(it + 1) << std::endl;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string pattern = ""test"";
    size_t pos = text.find(pattern, 10); // Start searching from index 10

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <string>
#include <sstream>

std::string formatString(int num) {
    std::stringstream ss;
    ss << num;
    return ss.str();
}

int main() {
    int age = 25;
    std::string ageStr = formatString(age);
    std::string message = ""You are "" + ageStr + "" years old."";

    // Incorrect comparison: should be ageStr > ""18"" for adult
    if (ageStr >= ""18"") {
        std::cout << message << std::endl;
    } else {
        std::cout << ""You are still a minor."" << std::endl;
    }

    return 0;
}","if (ageStr >= ""18"")"
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Potential problem: accessing non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl;
    return 0;
}",int age = ages[name];
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // Calculate the sum of even numbers
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 1) {
            sum += numbers[i];
        }
    }
    
    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    
    return 0;
}",if (numbers[i] % 2 == 1)
"#include <random>
#include <iostream>
#include <iomanip>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int numbers[10];

    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average of the first 9 elements, but use the 10th element in the calculation.
    double sum = 0.0;
    for (int i = 0; i < 9; ++i) {
        sum += numbers[i];
    }
    sum += numbers[10]; // Fault: Accessing out of bounds

    double average = sum / 9.0;

    std::cout << ""Average: "" << std::fixed << std::setprecision(2) << average << std::endl;
    return 0;
}",sum += numbers[10];
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.456789;
    std::cout << std::fixed << std::setprecision(3) << price << std::endl;
    double tax_rate = 0.075;
    double tax_amount = price * tax_rate;
    std::cout << ""Tax amount: "" << std::fixed << std::setprecision(2) << tax_amount << std::endl;
    double total_cost = price + tax_amount;
    std::cout << ""Total cost: "" << std::fixed << std::setprecision(2) << total_cost << std::endl;
    return 0;
}","std::cout << ""Tax amount: "" << std::fixed << std::setprecision(2) << tax_amount << std::endl;"
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int current = q.front();
        q.pop();

        if (current == 2) {
          // Incorrect condition – Should be > 0, not == 2
            continue; 
        }
        std::cout << current << "" "";
    }
    std::cout << std::endl;
    return 0;
}","if (current == 2) {
          // Incorrect condition – Should be > 0, not == 2
            continue; "
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  
  std::cout << ""Area of the circle: "" << area << std::endl;
  
  //Incorrectly assigning a value and causing integer truncation.
  int integer_area = (int)area;
  
  std::cout << ""Integer area: "" << integer_area << std::endl;
  
  double expected_area = 78.5398; 
  if (integer_area != (int)expected_area) {
    std::cout << ""Error: Area calculation is inaccurate."" << std::endl;
  } else {
    std::cout << ""Area calculation is correct."" << std::endl;
  }
  
  return 0;
}",int integer_area = (int)area;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // This line causes a default construction of int, not retrieval.
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> sorted_data = data; 
  std::sort(sorted_data.begin(), sorted_data.begin() + 4); // Fault: Only sorts the first 4 elements
  
  int sum = std::accumulate(sorted_data.begin(), sorted_data.end(), 0);
  
  std::cout << ""Sum of sorted data: "" << sum << std::endl;
  return 0;
}",sorted_data.begin() + 4
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    
    int average = sum / numbers.size(); //Integer division truncates the decimal
    
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",int average = sum / numbers.size();
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    // Calculate the sum of even numbers using std::accumulate and a lambda
    int sumOfEvens = std::accumulate(numbers.begin(), numbers.end(), 0, [](int acc, int num) { return acc + (num % 2 == 0 ? num : 0); });

    // Incorrectly calculate the average by dividing by the size of the vector instead of the number of even numbers
    double averageOfEvens = static_cast<double>(sumOfEvens) / numbers.size();

    std::cout << ""Sum of even numbers: "" << sumOfEvens << std::endl;
    std::cout << ""Average of even numbers: "" << averageOfEvens << std::endl;

    return 0;
}",double averageOfEvens = static_cast<double>(sumOfEvens) / numbers.size();
"#include <fstream>
#include <string>
#include <algorithm>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line);
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << line << ""\n"";
        } catch (const std::out_of_range& e) {
            std::cerr << ""Out of range: "" << line << ""\n"";
        }
    }

    inputFile.close();

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int num = std::stoi(line);
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> nums = {1, 2, 3, 4, 5};
    
    // Calculate the sum of squares
    int sum_of_squares = 0;
    for (int i = 0; i < nums.size(); ++i) {
        sum_of_squares += nums[i] * nums[i];
    }
    
    // Incorrectly attempt to find the square root using integer division
    int sqrt_sum = std::sqrt(sum_of_squares);

    std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
    std::cout << ""Integer square root: "" << sqrt_sum << std::endl;
    
    return 0;
}",int sqrt_sum = std::sqrt(sum_of_squares);
"#include <string>
#include <sstream>

std::string formatNumber(int number) {
    std::stringstream ss;
    ss << number;
    std::string str = ss.str();
    return str;
}

int main() {
    int num = 12345;
    std::string formattedNum = formatNumber(num);
    int convertedNum = std::stoi(formattedNum, nullptr, 2);
    std::cout << ""Converted number: "" << convertedNum << std::endl;
    return 0;
}","std::stoi(formattedNum, nullptr, 2);"
"#include <iostream>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> result = z * z;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",std::complex<double> result = z * z;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    //Incorrectly uses numbers.size() - 1 as the divisor. Should be numbers.size()
    double average = static_cast<double>(sum) / (numbers.size() - 1);
    
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = static_cast<double>(sum) / (numbers.size() - 1);
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (area == expected_area) {
    std::cout << ""Area is correct."" << std::endl;
  } else {
    std::cout << ""Area is incorrect! Calculated: "" << area << std::endl;
  }

  return 0;
}",if (area == expected_area)
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
  int target = 7;

  // Find the first element greater than the target.
  auto it = std::upper_bound(numbers.begin(), numbers.end(), target);

  if (it != numbers.end()) {
    std::cout << ""The first element greater than "" << target << "" is: "" << *it << std::endl;
  } else {
    std::cout << ""No element greater than "" << target << "" found."" << std::endl;
  }
  return 0;
}","auto it = std::upper_bound(numbers.begin(), numbers.end(), target);"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string name = ""David"";
    if (scores.find(name) != scores.end()) {
        std::cout << ""Score for "" << name << "": "" << scores[name] << std::endl;
    } else {
        std::cout << ""Score for "" << name << "": 0"" << std::endl;
    }
    
    return 0;
}","std::cout << ""Score for "" << name << "": 0"" << std::endl;"
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string highest_scorer = """";
    int highest_score = -1;

    for (const auto& pair : scores) {
        if (pair.second > highest_score) {
            highest_score = pair.second;
            highest_scorer = pair.first;
        }
    }

    std::cout << ""Highest scorer: "" << highest_scorer << "" with score: "" << highest_score << std::endl;

    // Incorrect comparison. Should be >= to include same scores
    if (scores[""Alice""] == highest_score) {
        std::cout << ""Alice is tied for the highest score."" << std::endl;
    }

    return 0;
}","if (scores[""Alice""] == highest_score)"
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message[0]; //Accessing only the first character
    return 0;
}",std::cout << message[0];
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 10;
    counts[""orange""] = 3;

    int total = 0;
    for (auto const& [key, val] : counts) {
        total += val;
    }

    std::cout << ""Total count: "" << total << std::endl;

    if (counts[""grape""] > 0) {
        std::cout << ""Grape count is positive."" << std::endl;
    } else {
        std::cout << ""Grape count is not positive."" << std::endl;
    }

    return 0;
}","if (counts[""grape""] > 0)"
"#include <iostream>
#include <vector>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""12.34abc"";
    std::stringstream ss(input);
    double number;
    if (ss >> number) {
        std::cout << ""Number: "" << number << std::endl;
    } else {
        std::cout << ""Invalid input format."" << std::endl;
    }
    std::cout << ""Successfully parsed!"" << std::endl;
    return 0;
}","std::cout << ""Successfully parsed!"" << std::endl;"
"#include <iostream>
#include <iomanip>

int main() {
    double price = 99.99;
    int quantity = 3;

    double total_cost = price * quantity;

    // Incorrect rounding - truncates instead of rounds
    int rounded_total = (int)total_cost;

    std::cout << ""Original total cost: "" << std::fixed << std::setprecision(2) << total_cost << std::endl;
    std::cout << ""Rounded total cost: "" << rounded_total << std::endl;

    return 0;
}",int rounded_total = (int)total_cost;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (int i = 1; i <= 3; ++i) {
        std::cout << myMap[i] << std::endl;
    }

    myMap.erase(2);

    std::cout << ""After erasing key 2:\n"";
    for (int i = 1; i <= 3; ++i) {
        std::cout << myMap[i] << std::endl;
    }

    return 0;
}",for (int i = 1; i <= 3; ++i) {
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    // Calculate the circumference, but with an off-by-one error
    double circumference = 2 * M_PI * radius - 1.0;
    
    std::cout << ""Area: "" << area << std::endl;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius - 1.0;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

    // Should filter numbers greater than 7, but logic is flawed.
    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return n > target;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> squared_data;

    for (int x : data) {
        squared_data.push_back(x * x);
    }

    int sum = std::accumulate(squared_data.begin(), squared_data.end(), 0);

    std::cout << ""Sum of squares: "" << sum << std::endl;
    return 0;
}",0
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 3, 0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers.begin() + 3
"#include <iostream>
#include <iomanip>

int main() {
    double price = 99.99;
    int quantity = 3;
    double tax_rate = 0.07;

    double subtotal = price * quantity;
    double tax_amount = subtotal * tax_rate;
    double total_amount = subtotal + tax_amount;

    std::cout << ""Subtotal: $<< fixed << setprecision(2) << subtotal << std::endl;
    std::cout << ""Tax: $<< fixed << setprecision(2) << tax_amount << std::endl;
    std::cout << ""Total: $<< fixed << setprecision(2) << total_amount << std::endl;

    return 0;
}","std::cout << ""Subtotal: $<< fixed << setprecision(2) << subtotal << std::endl;"
"#include <iostream>
#include <numeric>

int main() {
  double values[] = {1.0, 2.0, 3.0, 4.0, 5.0};
  int size = sizeof(values) / sizeof(values[0]);
  double sum = std::accumulate(values, values + size, 0.0);
  double average = sum / size;
  std::cout << ""Average: "" << average << std::endl;
  return 0;
}",double average = sum / size;
"#include <iostream>
#include <random>
#include <ctime>

int main() {
    std::srand(std::time(nullptr));
    int limit = 100;
    int count = 0;
    while (true) {
        int randomNumber = std::rand() % limit;
        if (randomNumber == 0) {
            count++;
        } else {
            break; // Incorrectly break out of the loop after finding a non-zero number
        }
    }
    std::cout << ""Number of times 0 was generated: "" << count << std::endl;
    return 0;
}",break; // Incorrectly break out of the loop after finding a non-zero number
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of squares, but incorrectly using std::inner_product.
    int sum_of_squares = std::inner_product(numbers.begin(), numbers.end(), numbers.begin(), 0, std::plus<int>(), [](int a, int b) { return a * b; });
    
    std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
    
    return 0;
}","[](int a, int b) { return a * b; }"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {  // Fault: Loop condition includes the element beyond the end
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <iomanip>

int main() {
  double price = 99.99;
  int quantity = 3;
  double taxRate = 0.075;

  double subtotal = price * quantity;
  double taxAmount = subtotal * taxRate;
  double total = subtotal + taxAmount;

  std::cout << ""Subtotal: $"" << std::fixed << std::setprecision(2) << subtotal << std::endl;
  std::cout << ""Tax: $"" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
  std::cout << ""Total: $"" << std::fixed << std::setprecision(2) << total << std::endl;

  return 0;
}",double taxAmount = subtotal * taxRate;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect."" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    return 0;
}",if (std::abs(area - expected_area) > 0.0001)
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Incorrect upper bound for sorting

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}",arr + n - 1
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorts up to n-1, missing the last element

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;
    
    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n >= target; });
    
    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return n >= target;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores; 
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int score = scores[name]; // Potential issue: accessing non-existent key
    std::cout << ""Score for "" << name << "": "" << score << std::endl;

    return 0;
}",int score = scores[name];
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <numeric>
#include <functional>
#include <vector>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  
  // Calculate the product of all elements using std::accumulate
  int product = std::accumulate(data.begin(), data.end(), 1, std::multiplies<int>());
  
  // Incorrectly printing the size of the vector instead of the product.
  std::cout << data.size() << std::endl;
  
  return 0;
}",std::cout << data.size() << std::endl;
"#include <random>
#include <chrono>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    std::vector<int> numbers(10);
    for (int i = 0; i < numbers.size(); ++i) {
        numbers[i] = distrib(gen);
    }

    // Find the largest number in the vector
    int largest = numbers[0];
    for (size_t i = 1; i <= numbers.size(); ++i) {  // Fault: i <= numbers.size() should be i < numbers.size()
        if (numbers[i] > largest) {
            largest = numbers[i];
        }
    }

    std::cout << ""Largest number: "" << largest << std::endl;

    return 0;
}",i <= numbers.size()
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""12.34"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cerr << ""Conversion failed!\n"";
        return 1;
    }
    
    double result = num * 2.0;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",if (ss.fail())
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: i <= numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  
  // Calculate the sum of squares of even numbers
  int sum_of_squares = 0;
  for (int i = 0; i < numbers.size(); ++i) {
    if (numbers[i] % 2 == 0) {
      sum_of_squares += numbers[i] * numbers[i];
    }
  }
  
  //Incorrectly print the number of elements
  std::cout << ""Sum of squares of even numbers: "" << sum_of_squares << std::endl;
  std::cout << ""Number of elements in the array: "" << numbers.size() << std::endl;
  
  return 0;
}","std::cout << ""Number of elements in the array: "" << numbers.size() << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct."" << std::endl;
    } else {
        std::cout << ""Area is incorrect. Calculated: "" << area << "" Expected: "" << expected_area << std::endl;
    }
    return 0;
}",if (area == expected_area)
"#include <iostream>
#include <queue>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    int sum = 0;
    while (!q.empty()) {
        int val = q.front();
        q.pop();
        sum += val;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int sum = 0;
"#include <algorithm>
#include <tuple>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""Hello"");
    int int_val = std::get<0>(data);
    double double_val = std::get<1>(data);
    std::string string_val = std::get<2>(data);

    // Incorrect type conversion leading to loss of precision
    int converted_double = int_val + static_cast<int>(double_val);
    std::cout << ""Converted Double: "" << converted_double << std::endl;

    return 0;
}",int converted_double = int_val + static_cast<int>(double_val);
"#include <ctime>
#include <iomanip>

int main() {
    std::time_t t = std::time(nullptr);
    std::tm* tm = std::localtime(&t);
    int year = tm->tm_year; // Year is 1900 + year
    int month = tm->tm_mon;
    int day = tm->tm_mday;

    // Incorrectly calculate the day of the year.
    int dayOfYear = (month == 1) ? day : (day + 31); // Fault: Only accounts for Jan 31

    std::cout << ""Year: "" << year << std::endl;
    std::cout << ""Month: "" << month << std::endl;
    std::cout << ""Day: "" << day << std::endl;
    std::cout << ""Day of Year: "" << dayOfYear << std::endl;

    return 0;
}",int dayOfYear = (month == 1) ? day : (day + 31);
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    // Incorrect use of find.  Should be myMap.find(key) != myMap.end()
    if (myMap.begin()->first == 2) {
        std::cout << ""Found banana!"" << std::endl;
    } else {
        std::cout << ""Banana not found."" << std::endl;
    }

    return 0;
}",if (myMap.begin()->first == 2)
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <random>
#include <iostream>
#include <string>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::string message = ""The number is: "";
    int randomNumber = distrib(gen);
    message += std::to_string(randomNumber);
    std::cout << message << std::endl;

    // Incorrectly incrementing the random number generator seed.  This drastically reduces the entropy and predictability of future random numbers.
    gen = gen + 1; 
    
    std::uniform_int_distribution<> distrib2(1, 100);
    int secondRandomNumber = distrib2(gen);
    std::cout << ""Second random number: "" << secondRandomNumber << std::endl;

    return 0;
}",gen = gen + 1;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    
    // Calculate the sum of elements using std::accumulate
    int sum = std::accumulate(data.begin(), data.end(), 0);

    // Incorrectly calculating the average by dividing by the size - 1 instead of the size
    double average = static_cast<double>(sum) / (data.size() - 1);

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = static_cast<double>(sum) / (data.size() - 1);
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 3, 0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers.begin() + 3
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string substring = text.substr(0, 5);
    std::cout << ""Substring: "" << substring << std::endl;
    std::string reversed_substring = substring;
    std::reverse(reversed_substring.begin(), reversed_substring.end());
    std::cout << ""Reversed Substring: "" << reversed_substring << std::endl;

    if (substring == reversed_substring) {
        std::cout << ""The substring is a palindrome."" << std::endl;
    } else {
        std::cout << ""The substring is not a palindrome."" << std::endl;
    }
    return 0;
}",if (substring == reversed_substring)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    
    if (area != expected_area) {
        std::cout << ""Area is "" << area << "" but expected "" << expected_area << std::endl;
    } else {
        std::cout << ""Area is correct: "" << area << std::endl;
    }

    return 0;
}",if (area != expected_area)
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    
    // Find the index of the element 6, which is not in the vector
    auto it = std::find(data.begin(), data.end(), 6); 

    if (it != data.end()) {
        std::cout << ""Element found at index: "" << std::distance(data.begin(), it) << std::endl;
    } else {
        std::cout << ""Element not found."" << std::endl;
        std::cout << ""Trying to access element at the end of the vector, which will cause out-of-bounds access: "" << data.at(data.size()) << std::endl; // Fault here
    }

    return 0;
}",data.at(data.size())
"#include <iostream>
#include <complex>

int main() {
    double real_part = 2.5;
    double imaginary_part = -1.0;
    std::complex<double> c(real_part, imaginary_part);

    std::cout << ""Complex number: "" << c << std::endl;

    // Incorrectly attempt to convert complex number to integer
    int integer_representation = static_cast<int>(c.real());
    std::cout << ""Integer representation: "" << integer_representation << std::endl;

    // Introduce a subtle error: calculate magnitude using incorrect formula
    double magnitude = std::sqrt(c.real() * c.real() + c.imag() * c.imag());
    std::cout << ""Magnitude (incorrect): "" << magnitude << std::endl;

    return 0;
}",double magnitude = std::sqrt(c.real() * c.real() + c.imag() * c.imag());
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    std::sort(arr, arr + n - 1); // Fault: sorts only up to the second-to-last element

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <limits>

int main() {
    long long num = std::numeric_limits<long long>::max();
    long long increment = 1;
    long long result = num + increment; // Overflow
    std::cout << result << std::endl;
    return 0;
}",long long result = num + increment;
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size(); //Integer division, truncates decimal part.
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <string>
#include <iostream>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message[0] << std::endl; // Accessing out of bounds
    return 0;
}",std::cout << message[0] << std::endl;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (size_t i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    // Incorrectly iterating past the end of the map, which leads to undefined behavior.
    for (auto it = myMap.end(); it != myMap.begin(); --it) {
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    return 0;
}",for (auto it = myMap.end(); it != myMap.begin(); --it)
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area > expected_area + 0.0001) {
        std::cout << ""Area is too large: "" << area << std::endl;
    } else if (area < expected_area - 0.0001) {
        std::cout << ""Area is too small: "" << area << std::endl;
    } else {
        std::cout << ""Area is correct: "" << area << std::endl;
    }
    return 0;
}",area > expected_area + 0.0001
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting only up to n-1

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int num : numbers) {
        if (num < target) {
            result.push_back(num);
        }
    }

    if (result.empty()) {
        std::cout << ""No numbers less than target found."" << std::endl;
    } else {
        std::sort(result.begin(), result.end(), std::greater<int>());
        std::cout << ""Numbers less than target (sorted descending):"";
        for (int num : result) {
            std::cout << "" "" << num;
        }
        std::cout << std::endl;
    }

    return 0;
}","std::sort(result.begin(), result.end(), std::greater<int>());"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "" is unknown."" << std::endl;
    }

    return 0;
}","ages[""David""] = 20;"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    
    // Attempt to find the index of the largest element
    auto it = std::max_element(numbers.begin(), numbers.end());
    size_t index = std::distance(numbers.begin(), it);

    //Incorrectly attempt to access an element beyond the vector's bounds using the calculated index
    std::cout << numbers[index + 1] << std::endl; 
    
    return 0;
}",std::cout << numbers[index + 1] << std::endl;
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    // Iterate and print map elements
    for (auto const& [key, val] : myMap) {
        std::cout << key << "": "" << val << std::endl;
    }

    // Incorrectly try to modify a value after iteration
    myMap[1] = ""uno"";

    std::cout << ""After modification:\n"";
    for (auto const& [key, val] : myMap) {
        std::cout << key << "": "" << val << std::endl;
    }

    return 0;
}","myMap[1] = ""uno"";"
"#include <iostream>
#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail() || !ss.eof()) {
        std::cerr << ""Invalid input format.\n"";
        return 1;
    }
    
    std::cout << ""The number is: "" << num << std::endl;
    std::cout << ""The number squared is: "" << num * num << std::endl;
    return 0;
}",if (ss.fail() || !ss.eof())
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    for (int num : numbers) {
        if (num % 2 == 0) {
            even_numbers.push_back(num);
        }
    }

    // Calculate the sum of even numbers
    int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);
    
    //Incorrectly print the size of 'numbers' instead of 'even_numbers'
    std::cout << ""Sum of even numbers: "" << sum << "" and the number of even numbers: "" << numbers.size() << std::endl;
    
    return 0;
}","std::cout << ""Sum of even numbers: "" << sum << "" and the number of even numbers: "" << numbers.size() << std::endl;"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int davidScore = scores[name]; // Intializes with default value (0) instead of throwing error
    std::cout << ""David's score: "" << davidScore << std::endl;
    return 0;
}",int davidScore = scores[name];
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct."" << std::endl;
    } else {
        std::cout << ""Area is incorrect."" << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    double expected_area = M_PI * radius * radius; //Using math constant for comparison

    if (area == expected_area) {
        std::cout << ""Area calculated correctly!"" << std::endl;
    } else {
        std::cout << ""Area calculation error!"" << std::endl;
        std::cout << ""Calculated Area: "" << area << std::endl;
        std::cout << ""Expected Area: "" << expected_area << std::endl;
    }

    return 0;
}",double area = 3.14 * radius * radius;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    // Find the index of the target value
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrectly modify the vector after searching
    numbers.push_back(target);

    std::cout << ""Vector after modification: "";
    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",numbers.push_back(target);
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Potential issue: accessing non-existent key.
    std::cout << ""Age of "" << name << "": "" << age << std::endl;
    
    return 0;
}",ages[name]
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string. It contains multiple words."";
    std::string word_to_find = ""string"";
    size_t pos = text.find(word_to_find, 0);

    if (pos != std::string::npos) {
        std::cout << ""Word found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Word not found."" << std::endl;
    }

    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    std::cout << ""Reversed text: "" << reversed_text << std::endl;

    // Subtle fault: Compare reversed text with original using == instead of content_equal
    if (reversed_text == text) {
        std::cout << ""The reversed text is equal to the original text."" << std::endl;
    } else {
        std::cout << ""The reversed text is not equal to the original text."" << std::endl;
    }
    
    return 0;
}",if (reversed_text == text)
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    message.erase(10); // Erasing past the end of the string
    std::cout << message << std::endl;
    return 0;
}",message.erase(10);
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }

  return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <random>
#include <ctime>

int main() {
    std::srand(std::time(nullptr));
    int n = 10;
    double sum = 0.0;
    for (int i = 0; i < n; ++i) {
        double random_val = (double)std::rand() / RAND_MAX; 
        if (random_val > 0.5) {
            sum += random_val * 2;
        } else {
            sum -= random_val * 2;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","if (random_val > 0.5) {
            sum += random_val * 2;
        } else {
            sum -= random_val * 2;
        }"
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << ""Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    double taxRate = 0.08;
    double taxAmount = price * taxRate;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    double totalCost = price + taxAmount;
    std::cout << ""Total: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;
    return 0;
}","std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;"
"#include <random>
#include <iostream>
#include <vector>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 10);

    std::vector<int> numbers(5);
    for (int i = 0; i < 5; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Loop goes out of bounds
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <iomanip>

int main() {
    double value = 123.456789;
    std::cout << std::fixed << std::setprecision(3) << value << std::endl; //Intended to display to 3 decimal places
    std::cout << std::fixed << std::setprecision(2) << value << std::endl; //Appears correct
    std::cout << std::fixed << std::setprecision(1) << value << std::endl;  //Problem: Precision changed and not correctly reset
    std::cout << std::fixed << std::setprecision(4) << value << std::endl; 
    return 0;
}",std::cout << std::fixed << std::setprecision(1) << value << std::endl;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Faulty loop condition
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::vector<int> even_numbers;
    for (int x : data) {
        if (x % 2 == 0)
            even_numbers.push_back(x);
    }
    
    // Incorrectly summing the squares of even numbers
    int sum_of_squares = 0;
    for (int i = 0; i < even_numbers.size(); ++i) {
        sum_of_squares += even_numbers[i];
    }
    
    std::cout << ""Sum of squares of even numbers: "" << sum_of_squares << std::endl;
    return 0;
}",sum_of_squares += even_numbers[i];
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    
    // Incorrectly calculate circumference
    double circumference = 2 * M_PI * radius * 1.0;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius * 1.0;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct!"" << std::endl;
    } else {
        std::cout << ""Area is incorrect! Calculated: "" << area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <fstream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line);
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid number format: "" << line << \""\n\"";
        }
    }
    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",    int num = std::stoi(line);
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl; // Intent: Print ""Hello""
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    size_t len = message.length();
    std::string reversed_message = """";

    for (size_t i = 0; i < len; ++i) {
        reversed_message += message[len - i - 1];
    }

    std::cout << ""Original: "" << message << std::endl;
    std::cout << ""Reversed: "" << reversed_message << std::endl;
    return 0;
}",reversed_message += message[len - i - 1];
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David""};
    std::string target = ""Bob"";

    auto it = std::find(names.begin(), names.end(), target);

    if (it != names.end()) {
        names.erase(it);
    }

    // Print the modified vector
    for (const std::string& name : names) {
        std::cout << name << "" "";
    }
    std::cout << std::endl;

    return 0;
}",names.erase(it);
"#include <unordered_map>
#include <vector>
#include <iostream>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    std::vector<int> keys = {1, 2, 4}; // Fault: 4 is not a key in the map

    for (int key : keys) {
        std::cout << myMap[key] << std::endl;
    }

    return 0;
}","std::vector<int> keys = {1, 2, 4};"
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
  
  // Incorrect multiplication by the sum instead of adding 10
  int result = sum * sum;
  
  std::cout << ""Result: "" << result << std::endl;
  return 0;
}",int result = sum * sum;
"#include <random>
#include <ctime>

int main() {
    std::srand(std::time(nullptr));
    int arr[5];
    for (int i = 0; i <= 5; ++i) {
        arr[i] = std::rand() % 100;
    }
    
    for (int i = 0; i < 5; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",for (int i = 0; i <= 5; ++i)
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> nums = {1, 2, 3, 4, 5};
    int target = 7;

    std::vector<int> result;
    for (int num : nums) {
        if (num < target) {
            result.push_back(num);
        }
    }

    if (result.empty()) {
        std::cout << ""No numbers found less than target.\n"";
    } else {
        std::cout << ""Numbers less than target: "";
        for (int i = 0; i < result.size(); ++i) {
            std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }

    return 0;
}",if (num < target) {
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Incorrect use of std::transform - should use a lambda or function
    std::vector<int> squared_numbers(numbers.size());
    std::transform(numbers.begin(), numbers.end(), squared_numbers.begin(), *numbers);
    
    for (int num : squared_numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}","std::transform(numbers.begin(), numbers.end(), squared_numbers.begin(), *numbers);"
"#include <iostream>
#include <string>

int main() {
  std::string text = ""Hello, World!\n"";
  size_t pos = text.find(""W"");

  if (pos != std::string::npos) {
    std::cout << ""Substring found at position: "" << pos << std::endl;
  } else {
    std::cout << ""Substring not found."" << std::endl;
  }

  std::string modified_text = text.substr(0, pos);
  std::cout << ""Modified text: "" << modified_text << std::endl;

  return 0;
}","std::string modified_text = text.substr(0, pos);"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of circle: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of circle: "" << circumference << std::endl;

    // Calculate the area of a square with the same perimeter as the circle
    double side = circumference / 4.0;
    double squareArea = side * side;
    std::cout << ""Area of square with same perimeter: "" << squareArea << std::endl;

    return 0;
}",double side = circumference / 4.0;
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!\n"";
    size_t pos = text.find(""world!"");
    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    }
    else {
        std::cout << ""Substring not found."" << std::endl;
    }

    std::string target = ""world!!"";
    size_t pos2 = text.find(target);
    if (pos2 != std::string::npos) {
        std::cout << ""Target 2 found at position: "" << pos2 << std::endl;
    } else {
        std::cout << ""Target 2 not found."" << std::endl;
    }

    return 0;
}","std::string target = ""world!!"";"
"#include <iostream>
#include <iomanip>
#include <sstream>

int main() {
    double pi = 3.14159;
    int radius = 5;
    double area = pi * radius * radius;
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << area;
    std::string area_str = ss.str();

    if (area_str.length() > 10) {
        std::cout << ""Area is: "" << area_str << std::endl;
    } else {
        std::cout << ""Area is: "" << area_str << std::endl;
    }

    return 0;
}","if (area_str.length() > 10) {
        std::cout << ""Area is: "" << area_str << std::endl;
    } else {
        std::cout << ""Area is: "" << area_str << std::endl;
    }"
"#include <iostream>
#include <iomanip>

int main() {
    double value = 123456789.987654321;
    std::cout << std::fixed << std::setprecision(15) << value << std::endl;
    return 0;
}",std::cout << std::fixed << std::setprecision(15) << value << std::endl;
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());

    if (str == reversed_str) {
        std::cout << ""String is palindrome"" << std::endl;
    } else {
        std::cout << ""String is not palindrome"" << std::endl;
    }

    return 0;
}",if (str == reversed_str)
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> values = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= values.size(); ++i) {
        sum += values[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= values.size()
"#include <random>
#include <ctime>
#include <iostream>

int main() {
    std::srand(std::time(nullptr));
    int numbers[5];
    for (int i = 0; i < 5; ++i) {
        numbers[i] = std::rand() % 10;
    }
    
    // Calculate the sum of the first 6 elements (out-of-bounds access)
    int sum = 0;
    for (int i = 0; i < 6; ++i) {
        sum += numbers[i];
    }
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i < 6; ++i)
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: sorts only up to n-1, leaving the last element unsorted

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Loop goes out of bounds
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (std::abs(area - expected_area) > 0.001) {
    std::cout << ""Area calculation is incorrect! Expected: "" << expected_area << "", Calculated: "" << area << std::endl;
  } else {
    std::cout << ""Area calculation is correct! Area: "" << area << std::endl;
  }

  // Simulate a scenario where the calculation is slightly off due to floating point precision.
  double result = 1.0 / 3.0 + 1.0 / 3.0 + 1.0 / 3.0; 
  if (result != 1.0) { 
    std::cout << ""Floating point issue detected. Result should be 1.0, but is: "" << result << std::endl;
  }
  return 0;
}",double result = 1.0 / 3.0 + 1.0 / 3.0 + 1.0 / 3.0;
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message[0] << std::endl; // Accessing the first character
    return 0;
}",std::cout << message[0] << std::endl;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size(); // Integer division truncates
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());
  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }
  return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string word_to_remove = ""world"";

    size_t pos = text.find(word_to_remove);
    if (pos != std::string::npos) {
        text.erase(pos, word_to_remove.length());
    }

    std::cout << text << std::endl;
    return 0;
}","text.erase(pos, word_to_remove.length());"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    ss >> number;

    if (ss.fail()) {
        std::cerr << ""Conversion failed!"" << std::endl;
        return 1;
    }

    int integer_part = (int)number; // Implicit conversion truncates the decimal part.
    std::cout << ""Integer part: "" << integer_part << std::endl;
    return 0;
}",int integer_part = (int)number;
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.45;
    int quantity = 3;
    double taxRate = 0.08;

    double subtotal = price * quantity;
    double taxAmount = subtotal * taxRate;
    double total = subtotal;

    std::cout << ""Subtotal: $"" << std::fixed << std::setprecision(2) << subtotal << std::endl;
    std::cout << ""Tax: $"" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    std::cout << ""Total: $"" << std::fixed << std::setprecision(2) << total << std::endl;

    return 0;
}",double total = subtotal;
"#include <random>
#include <chrono>
#include <vector>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= 10; ++i) { // Fault: i <= 10, should be i < 10
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= 10
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    
    // Calculate circumference
    double circumference = 2 * 3.14159 * radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;
    
    //Area of a square with same perimeter
    double side = circumference / 4.0;
    double squareArea = side * side;
    std::cout << ""Area of a square with the same perimeter: "" << squareArea << std::endl;

    return 0;
}",double side = circumference / 4.0;
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int length = text.length();
    
    for (int i = 0; i <= length; ++i) { // Fault: should be < length
        std::cout << text[i];
    }
    std::cout << std::endl;
    return 0;
}",i <= length
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Should be i < numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <cmath>

int main() {
  double radius = 5.0;
  double circumference = 2 * M_PI * radius;
  double area = M_PI * radius * radius;

  std::cout << ""Radius: "" << radius << std::endl;
  std::cout << ""Circumference: "" << circumference << std::endl;
  std::cout << ""Area: "" << area << std::endl;

  // Incorrectly calculating the diameter
  double diameter = circumference / M_PI;
  std::cout << ""Diameter: "" << diameter << std::endl;
  
  return 0;
}",double diameter = circumference / M_PI;
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (area == expected_area) {
    std::cout << ""Area is calculated correctly."" << std::endl;
  } else {
    std::cout << ""Area is calculated incorrectly. Expected: "" << expected_area << "", Actual: "" << area << std::endl;
  }

  return 0;
}",if (area == expected_area)
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""123.45abc"";
    std::stringstream ss(input);
    double number;
    if (ss >> number) {
        std::cout << ""Conversion successful: "" << number << std::endl;
    } else {
        std::cout << ""Conversion failed."" << std::endl;
    }
    std::cout << ""Input string after extraction: "" << input << std::endl;
    return 0;
}",if (ss >> number)
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; });
    
    for (int number : numbers) {
        std::cout << number << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return a > b;
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ofstream outfile(filename);
    if (outfile.is_open()) {
        for (int i = 0; i < 10; ++i) {
            outfile << i * 2 << std::endl; // Write even numbers
        }
        outfile.close();
    } else {
        std::cerr << ""Unable to open file!"" << std::endl;
        return 1;
    }

    std::ifstream infile(filename);
    if (infile.is_open()) {
        int num;
        while (infile >> num) {
            std::cout << num << std::endl;
        }
        infile.close();
    } else {
        std::cerr << ""Unable to open file for reading!"" << std::endl;
        return 1;
    }

    return 0;
}",outfile << i * 2 << std::endl;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int num : numbers) {
        if (num > target) {
            result.push_back(num);
        }
    }

    if (result.empty()) {
        std::cout << ""No numbers greater than "" << target << "" found.\n"";
    } else {
        std::cout << ""Numbers greater than "" << target << "": "";
        for (size_t i = 0; i < result.size(); ++i) {
            std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }

    return 0;
}",if (num > target) {
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    // Attempt to access a non-existent key
    std::cout << myMap[4] << std::endl; // Fault: Accessing a key that doesn't exist.

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    // Calculate the sum of even numbers using std::accumulate
    int sum_even = std::accumulate(numbers.begin(), numbers.end(), 0, [](int sum, int n) { return (n % 2 == 0) ? sum + n : sum; });

    // Incorrectly multiply the sum by 2 instead of adding even numbers correctly
    int final_result = sum_even * 2;

    std::cout << ""Sum of even numbers (incorrectly multiplied by 2): "" << final_result << std::endl;

    return 0;
}",int final_result = sum_even * 2;
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;

    std::cout << ""The area of the circle is: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;

    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::system_clock::time_point seed = std::chrono::system_clock::now();
    std::mt19937 generator(seed.time_since_epoch().count());
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distribution(generator);
        if (num % 2 == 0) {
            sum += num * 2;
        } else {
            sum += num / 2; // Fault: Integer division when odd number
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += num / 2;
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area: "" << area << std::endl;
  
  double circumference = 2 * M_PI * radius;
  std::cout << ""Circumference: "" << circumference << std::endl;

  // Incorrect calculation of diameter
  double diameter = radius / 2.0;
  std::cout << ""Diameter: "" << diameter << std::endl;
  
  return 0;
}",double diameter = radius / 2.0;
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::sort(str.begin(), str.end());
    std::cout << str << std::endl;
    return 0;
}","std::sort(str.begin(), str.end());"
"#include <deque>
#include <iostream>

int main() {
    std::deque<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: i <= numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 1;
    counts[""banana""] = 2;
    counts[""cherry""] = 3;

    int total = 0;
    for (const auto& pair : counts) {
        total += pair.first.length();
    }

    std::cout << ""Total length of keys: "" << total << std::endl;
    return 0;
}",total += pair.first.length();
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  std::for_each(data.begin(), data.end(), [&](int x) { sum += x; });
  
  std::array<int, 5> indices = {0, 1, 2, 3, 4};
  int product = 1;
  std::for_each(indices.begin(), indices.end(), [&](int i) { product *= data[i]; });
  
  if (sum == 15) {
    std::cout << ""Sum is 15\n"";
  } else {
    std::cout << ""Sum is not 15\n"";
  }
  
  std::cout << ""Product: "" << product << std::endl;
  return 0;
}","std::for_each(indices.begin(), indices.end(), [&](int i) { product *= data[i]; });"
"#include <algorithm>
#include <tuple>
#include <iostream>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int target = 3;

    auto it = std::find(data.begin(), data.end(), target);
    if (it != data.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl; // incorrect distance calculation
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    return 0;
}","std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;

    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <map>

int main() {
  std::map<std::string, int> ages; 
  ages[""Alice""] = 30;
  ages[""Bob""] = 25;
  ages[""Charlie""] = 40;

  std::string name = ""David"";
  int age = ages[name]; // Potential default initialization issue
  std::cout << ""David's age: "" << age << std::endl;
  
  return 0;
}",int age = ages[name];
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = std::accumulate(data.begin(), data.end(), 0);
  
  // Incorrectly subtract 1 from the sum instead of multiplying by 1.
  int result = sum - 1;
  
  return result; 
}",int result = sum - 1;
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string best_player = ""David"";
    int best_score = -1;

    for (const auto& pair : scores) {
        if (pair.second > best_score) {
            best_score = pair.second;
            best_player = pair.first;
        }
    }

    std::cout << ""Best player: "" << best_player << "" with score: "" << best_score << std::endl;
    return 0;
}","best_player = ""David"";"
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores; 
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    
    if (scores.find(name) != scores.end()) {
        std::cout << ""Score for "" << name << "": "" << scores[name] << std::endl;
    } else {
       std::cout << ""Score for "" << name << "": 0"" << std::endl;
    }

    return 0;
}","std::cout << ""Score for "" << name << "": 0"" << std::endl;"
"#include <string>
#include <sstream>
#include <vector>

int main() {
    std::string input = ""1,2,3,4,5"";
    std::stringstream ss(input);
    std::vector<int> numbers;
    int num;

    while (ss >> num) {
        numbers.push_back(num);
    }

    int sum = 0;
    for (size_t i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","std::cout << ""Sum: "" << sum << std::endl;"
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    std::seed_seq seed{seed_time.time_since_epoch().count()};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 10);

    int array_size = 5;
    int arr[array_size];

    for (int i = 0; i <= array_size; ++i) { // Fault: Loop goes one element too far
        arr[i] = distribution(generator);
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",i <= array_size
"#include <tuple>
#include <iostream>

int main() {
  std::tuple<int, double, std::string> my_tuple = std::make_tuple(10, 3.14, ""hello"");

  // Attempting to access the tuple elements with incorrect indices.
  std::cout << std::get<0>(my_tuple) << std::endl;  // Correctly accesses the first element (int)
  std::cout << std::get<1>(my_tuple) << std::endl;  // Correctly accesses the second element (double)
  std::cout << std::get<2>(my_tuple) << std::endl;  // Correctly accesses the third element (string)
  std::cout << std::get<3>(my_tuple) << std::endl; // Accessing a non-existent element, will cause a runtime error.

  return 0;
}",std::cout << std::get<3>(my_tuple) << std::endl;
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = 3.14159 * radius * radius; // Uses a fixed value for pi instead of M_PI
  std::cout << ""Area of the circle: "" << area << std::endl;
  return 0;
}",double area = 3.14159 * radius * radius;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    int max_val = arr[0];

    for (int i = 1; i <= n; ++i) { // Fault: Loop condition should be i < n
        if (arr[i] > max_val) {
            max_val = arr[i];
        }
    }

    std::cout << ""Maximum value: "" << max_val << std::endl;
    return 0;
}",i <= n
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>

int main() {
  std::string text = ""Hello, world!"";
  for (int i = 0; i <= text.length(); ++i) {
    std::cout << text[i] << "" "";
  }
  std::cout << std::endl;
  return 0;
}",i <= text.length()
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <iomanip>

int main() {
    double price = 100.0;
    int quantity = 3;
    double tax_rate = 0.08;

    double subtotal = price * quantity;
    double tax_amount = subtotal * tax_rate;
    double total = subtotal + tax_amount;

    std::cout << ""Subtotal: "" << std::fixed << std::setprecision(2) << subtotal << std::endl;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << tax_amount << std::endl;
    std::cout << ""Total: "" << std::fixed << std::setprecision(2) << total << std::endl;

    return 0;
}",double tax_amount = subtotal * tax_rate;
"#include <array>
#include <numeric>
#include <iostream>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = std::accumulate(data.begin(), data.end(), 0);
  std::cout << ""Sum: "" << sum << std::endl;

  // Incorrect calculation of average
  double average = sum / data.size(); // Integer division truncates the decimal
  std::cout << ""Average: "" << average << std::endl;

  return 0;
}",double average = sum / data.size();
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie""};
    std::string target = ""Bob"";

    auto it = std::find(names.begin(), names.end(), target);
    if (it != names.end()) {
        names.erase(it);
    }

    // Print the modified vector
    for (const std::string& name : names) {
        std::cout << name << std::endl;
    }

    return 0;
}",names.erase(it);
"#include <random>
#include <limits>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(0, std::numeric_limits<int>::max());

    int random_number = distrib(gen);
    int shifted_number = random_number << 31; // Left shift by 31 bits. Intentionally causing overflow.

    std::cout << ""Original number: "" << random_number << std::endl;
    std::cout << ""Shifted number: "" << shifted_number << std::endl;
    return 0;
}",int shifted_number = random_number << 31;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    // Incorrect iteration - missing increment
    for (auto it = myMap.begin(); it != myMap.end(); ) {
        std::cout << it->first << "": "" << it->second << std::endl;
        ++it;
    }

    return 0;
}",++it;
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  
  std::cout << ""Area of circle: "" << area << std::endl;
  
  double circumference = 2 * M_PI * radius;
  std::cout << ""Circumference of circle: "" << circumference << std::endl;
  
  double perimeter_square = 4 * radius;
  std::cout << ""Perimeter of square with side radius: "" << perimeter_square << std::endl;

  return 0;
}",double perimeter_square = 4 * radius;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    
    // Sort the vector in descending order
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());
    
    // Print the sorted vector
    for (int i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << (i == numbers.size() - 1 ? """" : "" "");
    }
    std::cout << std::endl;
    
    // Find the sum of even numbers
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0) {
            sum += numbers[i];
        }
    }
    
    // Incorrectly print sum of all elements
    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    
    return 0;
}","std::cout << ""Sum of even numbers: "" << sum << std::endl;"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return n > target;
"#include <ctime>
#include <iomanip>

int main() {
    std::srand(std::time(nullptr));
    int numbers[10];
    for (int i = 0; i < 10; ++i) {
        numbers[i] = std::rand() % 100;
    }
    
    int sum = 0;
    for (int i = 0; i <= 10; ++i) {  // Fault: Loop goes out of bounds
        sum += numbers[i];
    }
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= 10; ++i)
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    int sum = 0;
    for (int i = 0; i <= n; ++i) { // Fault: Loop condition should be i < n
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= n
"#include <set>
#include <iostream>

int main() {
    std::set<int> numbers = {1, 2, 3, 4, 5};
    
    for (int num : numbers) {
        numbers.insert(num * 2); // Incorrectly modifies the set during iteration
    }
    
    std::cout << ""Set size: "" << numbers.size() << std::endl;
    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",numbers.insert(num * 2);
"#include <iostream>
#include <tuple>

int main() {
  std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""hello"");
  int int_val = std::get<0>(data);
  double double_val = std::get<1>(data);
  std::string string_val = std::get<2>(data);

  std::cout << ""Integer: "" << int_val << std::endl;
  std::cout << ""Double: "" << double_val << std::endl;
  std::cout << ""String: "" << string_val << std::endl;

  //Incorrect use of std::get, accessing out of bounds
  std::cout << ""Out of bounds element: "" << std::get<3>(data) << std::endl;
  
  return 0;
}","std::cout << ""Out of bounds element: "" << std::get<3>(data) << std::endl;"
"#include <iomanip> 
#include <sstream> 
#include <string>

int main() {
  std::stringstream ss;
  int value = 12345;
  ss << std::hex << std::uppercase << value; // Convert to uppercase hexadecimal
  std::string hex_string = ss.str();

  // Correct expected output: 3039
  // Fault: Incorrect formatting character in output
  std::cout << std::setw(4) << std::setfill('0') << std::hex << value << std::endl; 
  return 0;
}",std::cout << std::setw(4) << std::setfill('0') << std::hex << value << std::endl;
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""12.34abc56.78"";
    std::stringstream ss(input);
    double num;
    std::string extra;
    if (ss >> num >> extra) {
        std::cout << ""Extracted number: "" << num << std::endl;
        std::cout << ""Extra characters: "" << extra << std::endl;
    } else {
        std::cout << ""Extraction failed."" << std::endl;
    }
    return 0;
}",if (ss >> num >> extra)
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    int sum = 0;
    while (!q.empty()) {
        int x = q.front();
        q.pop();
        sum += x;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int sum = 0;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int davidScore = scores[name]; // Accessing a non-existent key

    std::cout << ""David's score: "" << davidScore << std::endl;

    return 0;
}",int davidScore = scores[name];
"#include <array>
#include <numeric>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 1; i <= numbers.size(); ++i) {  // Faulty loop condition
        sum += numbers[i-1];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <algorithm>
#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;

    // Incorrectly truncate the circumference to an integer
    int truncatedCircumference = static_cast<int>(circumference);

    std::cout << ""Radius: "" << radius << std::endl;
    std::cout << ""Circumference: "" << circumference << std::endl;
    std::cout << ""Truncated Circumference: "" << truncatedCircumference << std::endl;

    return 0;
}",int truncatedCircumference = static_cast<int>(circumference);
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    double area = M_PI * radius * radius;

    std::cout << ""Radius: "" << radius << std::endl;
    std::cout << ""Circumference: "" << circumference << std::endl;
    std::cout << ""Area: "" << area << std::endl;

    // Subtle fault: Integer division when comparing areas.
    if (area > circumference) {
        std::cout << ""Area is greater than circumference."" << std::endl;
    } else {
        std::cout << ""Area is not greater than circumference."" << std::endl;
    }

    return 0;
}",if (area > circumference)
"#include <random>
#include <chrono>
#include <limits>

int main() {
    unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distribution(generator);
        if (num > 50) {
            sum += num * 2;
        } else {
            sum -= num; 
        }
    }
    
    if (sum > 1000) {
        std::cout << ""Sum is large: "" << sum << std::endl;
    } else {
        std::cout << ""Sum is small: "" << sum << std::endl;
    }
    return 0;
}",sum -= num;
"#include <iostream>
#include <limits>

int main() {
    long long sum = 0;
    for (int i = 0; i < 100000; ++i) {
        sum += i;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += i;
"#include <complex>
#include <iostream>

int main() {
    std::complex<double> z(1.0, 2.0);
    std::complex<double> w(3.0, 4.0);

    std::complex<double> result = z * w;

    std::cout << ""Result: "" << result << std::endl;
    
    //Incorrectly calculate magnitude by squaring real and imaginary parts separately.
    double magnitude = sqrt(result.real() * result.real() + result.imag() * result.imag());
    std::cout << ""Magnitude: "" << magnitude << std::endl;
    
    return 0;
}",double magnitude = sqrt(result.real() * result.real() + result.imag() * result.imag());
"#include <tuple>
#include <functional>
#include <type_traits>

int main() {
    auto add = std::plus<int>();
    auto multiply = std::multiplies<int>();

    std::tuple<int, int> numbers = std::make_tuple(5, 3);
    int sum = add(std::get<0>(numbers), std::get<1>(numbers));
    int product = multiply(std::get<0>(numbers), std::get<1>(numbers));

    if (sum > product) {
        return 1;
    } else {
        return 0;
    }
}",if (sum > product) {
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail() || !ss.eof()) {
        std::cout << ""Invalid input format.\n"";
        return 1;
    }
    std::cout << ""The number is: "" << num << std::endl;
    return 0;
}",if (ss.fail() || !ss.eof())
"#include <limits>
#include <iomanip>

int main() {
    double sum = 0.0;
    for (int i = 0; i < 1000; ++i) {
        sum += 1.0 / (i + 1);
    }
    std::cout << std::fixed << std::setprecision(10) << sum << std::endl;
    return 0;
}",sum += 1.0 / (i + 1);
"#include <iomanip>
#include <map>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    int total = 0;
    for (const auto& pair : counts) {
        total += pair.second;
    }

    std::cout << ""Total fruit count: "" << total << std::endl;

    std::cout << std::fixed << std::setprecision(2) << ""Average fruit count: "" << (double)total / counts.size() << std::endl;
    return 0;
}",counts.size()
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    std::cout << ""Value at key 4: "" << myMap[4] << std::endl; //Accessing non-existent key
    return 0;
}","std::cout << ""Value at key 4: "" << myMap[4] << std::endl;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4, 7, 3, 6};
  int target = 8;

  auto it = std::find(data.begin(), data.end(), target);
  if (it != data.end()) {
    std::cout << ""Found "" << target << "" at index: "" << std::distance(data.begin(), it) << std::endl;
  } else {
    std::cout << target << "" not found."" << std::endl;
  }

  // Incorrectly modifying the vector after using std::find
  data.erase(data.begin());

  auto it2 = std::find(data.begin(), data.end(), target);
  if (it2 != data.end()) {
      std::cout << ""Found "" << target << "" at index: "" << std::distance(data.begin(), it2) << std::endl;
  } else {
      std::cout << target << "" not found."" << std::endl;
  }
  return 0;
}",data.erase(data.begin());
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> indices = {0, 1, 2, 3, 4};
  std::sort(indices.begin(), indices.end(), [&](int i, int j) {
    return data[i] > data[j];
  });

  std::vector<int> sorted_data(data.size());
  for (size_t i = 0; i < data.size(); ++i) {
    sorted_data[i] = data[indices[i]];
  }

  for (int val : sorted_data) {
    std::cout << val << "" "";
  }
  std::cout << std::endl;
  return 0;
}",return data[i] > data[j];
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  
  std::cout << ""The area of a circle with radius "" << radius << "" is: "" << area << std::endl;

  // Incorrectly calculating circumference
  double circumference = 2 * M_PI * radius;
  std::cout << ""The circumference of a circle with radius "" << radius << "" is: "" << circumference << std::endl;

  return 0;
}",  double circumference = 2 * M_PI * radius;
"#include <iostream>
#include <fstream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line);
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << line << ""\n"";
        } catch (const std::out_of_range& e) {
            std::cerr << ""Out of range: "" << line << ""\n"";
        }
    }
    inputFile.close();

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int num = std::stoi(line);
"#include <random>
#include <chrono>
#include <thread>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int numbers[10];
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= 10; ++i) { // Fault: Loop goes out of bounds
        sum += numbers[i];
    }

    std::this_thread::sleep_for(std::chrono::seconds(1));
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= 10; ++i)
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();

    for (int i = 0; i <= len; ++i) {
        std::cout << text[i];
    }
    std::cout << std::endl;
    return 0;
}",i <= len
"#include <string>
#include <iostream>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl;  // Intended to print 'Hello'
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <limits>

int main() {
  long long sum = 0;
  for (int i = 0; i < 100; ++i) {
    sum += i;
  }

  if (sum > std::numeric_limits<int>::max()) {
    std::cout << ""Overflow detected!"" << std::endl;
  } else {
    std::cout << ""Sum: "" << sum << std::endl;
  }

  // Incorrect cast. Should cast *sum* to int, not i
  int result = static_cast<int>(i);
  std::cout << ""Result: "" << result << std::endl;
  return 0;
}",int result = static_cast<int>(i);
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    if (counts.find(fruit) != counts.end()) {
        std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;
    } else {
        std::cout << ""Count of "" << fruit << "": 0"" << std::endl; 
    }

    return 0;
}","std::cout << ""Count of "" << fruit << "": 0"" << std::endl;"
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    std::cout << myMap[4] << std::endl; // Accessing non-existent key

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // Calculate the sum of even numbers
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0) {
            sum += numbers[i];
        }
    }
    
    // Incorrectly modify sum before printing
    sum = sum + 100;
    
    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    
    return 0;
}",sum = sum + 100;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // Calculate the sum of elements at even indices
    int sum_even = 0;
    for (size_t i = 0; i < numbers.size(); ++i) {
        if (i % 2 == 0) {
            sum_even += numbers[i];
        }
    }
    
    // Incorrect calculation: should be numbers.size() - 1
    // Sum of all elements
    int sum_all = std::accumulate(numbers.begin(), numbers.begin() + 9, 0);

    
    std::cout << ""Sum of even indexed elements: "" << sum_even << std::endl;
    std::cout << ""Sum of all elements: "" << sum_all << std::endl;
    
    return 0;
}",numbers.begin() + 9
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, world! This is a test."";
  std::string substring = ""world"";

  size_t pos = text.find(substring);
  if (pos != std::string::npos) {
    text.erase(pos, 1); // Incorrect: Erases only one character
  }

  std::cout << text << std::endl;
  return 0;
}","text.erase(pos, 1);"
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    for (int num : numbers) {
        if (num % 2 == 0) {
            even_numbers.push_back(num);
        }
    }

    // Incorrect calculation of the sum of even numbers.
    int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);

    // Intentionally wrong sum: Should be 6, but we are multiplying by 2.
    std::cout << sum * 2 << std::endl; // Output incorrect sum.
    return 0;
}",std::cout << sum * 2 << std::endl;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""hello world"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area > expected_area + 0.001) {
        std::cout << ""Area is larger than expected."" << std::endl;
    } else if (area < expected_area - 0.001) {
        std::cout << ""Area is smaller than expected."" << std::endl;
    } else {
        std::cout << ""Area is as expected."" << std::endl;
    }

    return 0;
}",if (area > expected_area + 0.001)
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;

    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    std::seed_seq seed{seed_time.time_since_epoch().count()};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distribution(generator);
        if (randomNumber % 2 == 0) {
            sum = sum;
        } else {
            sum += randomNumber;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum = sum;
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    size_t pos = text.find(""world"", 7); // Starts searching from index 7, which is past the 'world' substring.
    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }
    return 0;
}","text.find(""world"", 7)"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1 instead of n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 10;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n >= target; });

    std::cout << ""Numbers greater than or equal to "" << target << "":"";
    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return n >= target; 
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target number using std::find
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        // Calculate the index by subtracting the beginning iterator from the found iterator
        int index = it - numbers.begin();
        std::cout << ""Target found at index: "" << index << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    return 0;
}",int index = it - numbers.begin();
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    
    // Sort the data in ascending order
    std::sort(data.begin(), data.end());

    // Find the element closest to 6
    int closest = data[0];
    int min_diff = std::abs(data[0] - 6);

    for (size_t i = 1; i < data.size(); ++i) {
        int diff = std::abs(data[i] - 6);
        if (diff < min_diff) {
            min_diff = diff;
            closest = data[i];
        }
    }

    std::cout << ""The closest element to 6 is: "" << closest << std::endl;
    return 0;
}",int closest = data[0];
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) { // Fault: Loop condition off by one
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <string>
#include <iostream>

int main() {
    std::string message = ""Hello, world!"";
    std::string greeting = message.substr(0, 5);
    std::cout << greeting << std::endl;
    return 0;
}","std::string greeting = message.substr(0, 5);"
"#include <iostream>
#include <cmath>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (std::abs(area - expected_area) > 0.001) {
    std::cout << ""Area calculation is incorrect!\n"";
  } else {
    std::cout << ""Area calculation is correct!\n"";
  }

  return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Incorrectly uses std::count instead of std::find
    if (std::count(numbers.begin(), numbers.end(), 6) > 0) {
        std::cout << ""6 is present in the vector."" << std::endl;
    } else {
        std::cout << ""6 is not present in the vector."" << std::endl;
    }
    
    return 0;
}","if (std::count(numbers.begin(), numbers.end(), 6) > 0)"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (const auto& pair : scores) {
        total_score += pair.second;
    }

    std::cout << ""Average score: "" << (double)total_score / scores.size() - 1 << std::endl; //Incorrect average calculation
    return 0;
}",((double)total_score / scores.size() - 1
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct."" << std::endl;
    } else {
        std::cout << ""Area is incorrect. Calculated: "" << area << "" Expected: "" << expected_area << std::endl;
    }
    return 0;
}",if (area == expected_area)
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "" is not found."" << std::endl;
    }

    return 0;
}",if (ages.find(name) != ages.end())
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string best_player;
    int highest_score = -1; 

    for (const auto& pair : scores) {
        if (pair.second > highest_score) {
            highest_score = pair.second;
            best_player = pair.first;
        }
    }

    std::cout << ""The player with the highest score is: "" << best_player << std::endl;
    std::cout << ""Their score is: "" << highest_score << std::endl;
    return 0;
}",int highest_score = -1;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
  std::vector<int> nums = {5, 2, 8, 1, 9, 4};
  int target = 7;
  std::vector<int> result;

  for (int num : nums) {
    if (num > target) {
      result.push_back(num);
    }
  }

  if (result.empty()) {
    std::cout << ""No elements greater than target found."" << std::endl;
  } else {
    std::cout << ""Elements greater than target: "";
    for (int i = 0; i < result.size(); ++i) {
      std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
  }

  return 0;
}",if (num > target) {
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string name = ""David"";
    if (scores.count(name) > 0) {
        std::cout << ""Score for "" << name << "": "" << scores[name] << std::endl;
    } else {
        std::cout << ""Score for "" << name << "": 0"" << std::endl;
    }

    return 0;
}","std::cout << ""Score for "" << name << "": "" << scores[name] << std::endl;"
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",0.0
"#include <fstream>
#include <string>
#include <algorithm>

int main() {
  std::string filename = ""data.txt"";
  std::ifstream inputFile(filename);
  std::string line;
  int sum = 0;

  if (inputFile.is_open()) {
    while (std::getline(inputFile, line)) {
      try {
        int number = std::stoi(line);
        sum += number;
      } catch (const std::invalid_argument& e) {
        // Handle non-integer input gracefully
        std::cerr << ""Invalid input: "" << line << std::endl;
      } catch (const std::out_of_range& e) {
        std::cerr << ""Out of range: "" << line << std::endl;
      }
    }
    inputFile.close();

    std::cout << ""Sum: "" << sum << std::endl;
  } else {
    std::cerr << ""Unable to open file: "" << filename << std::endl;
    return 1;
  }

  return 0;
}",int number = std::stoi(line);
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World! This is a test."";
  std::string pattern = ""world"";

  // Convert both strings to lowercase for case-insensitive search
  std::transform(text.begin(), text.end(), text.begin(), ::tolower);
  std::transform(pattern.begin(), pattern.end(), pattern.begin(), ::tolower);

  size_t pos = text.find(pattern, 0);

  if (pos != std::string::npos) {
    std::cout << ""Pattern found at position: "" << pos << std::endl;
  } else {
    std::cout << ""Pattern not found."" << std::endl;
  }
  return 0;
}","std::transform(text.begin(), text.end(), text.begin(), ::tolower);"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of squares, but use the wrong exponent
    int sum_of_squares = std::inner_product(numbers.begin(), numbers.end(), numbers.begin(), 0, [](int a, int b) { return a * b; });
    
    std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
    
    return 0;
}","[](int a, int b) { return a * b; }"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Potential out-of-range access
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.end(), 0);
    
    // Intentionally incorrect: should be data.size() - 1
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <map>
#include <iostream>

int main() {
  std::map<std::string, int> counts;
  counts[""apple""] = 5;
  counts[""banana""] = 3;
  counts[""orange""] = 2;

  std::string fruit = ""grape"";
  int count = counts[fruit]; // Fault: Accessing a non-existent key
  std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

  return 0;
}",counts[fruit];
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    // Incorrectly truncate the area to an integer.
    int integer_area = static_cast<int>(area);
    
    std::cout << ""Area of the circle: "" << integer_area << std::endl;
    return 0;
}",int integer_area = static_cast<int>(area);
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4};
  int target = 7;

  // Find the index of the target value
  auto it = std::find(data.begin(), data.end(), target);

  if (it != data.end()) {
    std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
  } else {
    std::cout << ""Target not found."" << std::endl;
  }

  //Sort the data
  std::sort(data.begin(), data.end());

  std::cout << ""Sorted data: "";
  for (int value : data) {
    std::cout << value << "" "";
  }
  std::cout << std::endl;

  return 0;
}","auto it = std::find(data.begin(), data.end(), target);"
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    size_t pos = message.find(""world!"");
    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }
    std::string str = ""hello world"";
    std::cout << str.substr(6) << std::endl;
    return 0;
}",std::cout << str.substr(6) << std::endl;
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
  int target = 10;

  std::vector<int> result;
  std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n < target - 1; });

  for (int num : result) {
    std::cout << num << "" "";
  }
  std::cout << std::endl;

  return 0;
}",return n < target - 1;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string with some words."";
  std::string wordToFind = ""test"";
  
  size_t pos = text.find(wordToFind, 0);
  if (pos != std::string::npos) {
    std::cout << ""Word found at position: "" << pos << std::endl;
  } else {
    std::cout << ""Word not found."" << std::endl;
  }
  
  //Incorrectly modifies text after the first search.
  text[0] = 'T'; //This is the fault - will not find the original word
  pos = text.find(wordToFind, 0);

  if (pos != std::string::npos) {
    std::cout << ""Word found at position: "" << pos << std::endl;
  } else {
    std::cout << ""Word not found."" << std::endl;
  }

  return 0;
}",text[0] = 'T';
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!\n"";
    std::string upper_text = text;
    std::transform(upper_text.begin(), upper_text.end(), upper_text.begin(), ::tolower);
    std::cout << upper_text << std::endl;
    return 0;
}",::tolower
"#include <iostream>
#include <random>
#include <chrono>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    std::seed_seq seed{
        seed_time.time_since_epoch().count(),
        (int)std::hash<int>{}(seed_time.time_since_epoch().count()),
        (int)std::hash<int>{}((long long)seed_time.time_since_epoch().count())
    };
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 5; ++i) {
        int num = distribution(generator);
        if (num % 2 == 0) {
            sum -= num; // Intended to subtract even numbers
        } else {
            sum += num;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= num;
"#include <random>
#include <chrono>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; }); // Intended: ascending order

    for (int number : numbers) {
        std::cout << number << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; });"
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    int sum = 0;
    for (int i = 0; i <= n; ++i) { // Fault: loop condition should be i < n
        sum += arr[i];
    }
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= n
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size(); // Integer division
    std::cout << ""Average score: "" << average_score << std::endl;

    return 0;
}",double average_score = total_score / scores.size();
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct!"" << std::endl;
    } else {
        std::cout << ""Area is incorrect! Expected: "" << expected_area << "", Calculated: "" << area << std::endl;
    }
    return 0;
}",if (area == expected_area)
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    // Sort the array in descending order
    std::sort(arr, arr + n, std::greater<int>());

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    // Find the smallest element in the sorted array
    int smallest = arr[0];

    //Incorrect logic - should check if smallest is actually the smallest
    for (int i = 1; i < n; ++i) {
        if (arr[i] < smallest) {
             smallest = arr[i];
        }
    }
    
    std::cout << ""Smallest element: "" << smallest << std::endl;
    
    return 0;
}",if (arr[i] < smallest) 
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    
    // Sort the numbers in descending order, but only compare elements at even indices
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; });

    // Print the sorted numbers
    for (int number : numbers) {
        std::cout << number << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}","[](int a, int b) { return a > b; }"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

    std::cout << ""Numbers greater than "" << target << "":"";
    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return n > target;
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseWords(const std::string& str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string sentence = ""This is a test sentence."";
    std::string reversed_sentence = reverseWords(sentence);
    std::cout << ""Original: "" << sentence << std::endl;
    std::cout << ""Reversed: "" << reversed_sentence << std::endl;
    return 0;
}","std::reverse(reversed_str.begin(), reversed_str.end());"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World! This is a test."";
    std::string substring = text.substr(10, 5);
    std::cout << substring << std::endl;
    return 0;
}","std::string substring = text.substr(10, 5);"
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << ""Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    double taxRate = 0.075;
    double taxAmount = price * taxRate;
    double totalCost = price + taxAmount;
    std::cout << ""Total Cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;

    // Incorrect calculation: integer division truncates the result
    int roundedTax = (int)(taxAmount * 100) / 100;
    std::cout << ""Rounded Tax: "" << roundedTax << std::endl;

    return 0;
}",int roundedTax = (int)(taxAmount * 100) / 100;
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->second << std::endl;
    }

    std::cout << myMap[4] << std::endl; // Accessing a non-existent key
    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    std::cout << ""Average score: "" << total_score / scores.size() << std::endl;
    return 0;
}",total_score / scores.size()
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    double perimeter = 2 * M_PI * radius;
    std::cout << ""Perimeter of the circle: "" << perimeter << std::endl;
    return 0;
}","std::cout << ""Perimeter of the circle: "" << perimeter << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is calculated correctly."" << std::endl;
    } else {
        std::cout << ""Area calculation error: Expected "" << expected_area << "", got "" << area << std::endl;
    }
    return 0;
}",if (area == expected_area)
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: i <= numbers.size() should be i < numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>

int main() {
  std::string message = ""Hello, world!"";
  int len = message.length();
  std::string reversed_message = """";

  for (int i = 0; i < len; ++i) {
    reversed_message += message[len - i - 1];
  }

  std::cout << ""Original: "" << message << std::endl;
  std::cout << ""Reversed: "" << reversed_message << std::endl;
  return 0;
}",reversed_message += message[len - i - 1];
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test sentence."";
    std::string vowels = ""aeiouAEIOU"";

    int vowel_count = 0;
    for (char c : text) {
        if (vowels.find(c) != std::string::npos)
            vowel_count++;
    }

    std::cout << ""Number of vowels: "" << vowel_count << std::endl;
    return 0;
}",if (vowels.find(c) != std::string::npos)
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Should use ages.at(name) for error handling
    std::cout << ""David's age is: "" << age << std::endl; 

    return 0;
}",int age = ages[name];
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly calculate the average. Should divide by numbers.size()
    double average = sum / 5.0;
    
    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = sum / 5.0;
"#include <iostream>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Accessing non-existent key
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = std::accumulate(data.begin(), data.begin() + 3, 0);
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",data.begin() + 3
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
            sum += num;
        } else {
            sum -= num; // Fault: Should be sum *= num;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= num;
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n) {
        return n < target - 1; // Fault: Incorrect comparison, should be n < target;
    });

    std::cout << ""Numbers less than "" << target << "": "";
    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",return n < target - 1;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int num : numbers) {
        if (num > target) {
            result.push_back(num);
        }
    }

    // Incorrectly assuming the result contains all numbers greater than target.
    // Should check if result.empty() before printing.
    std::cout << ""Numbers greater than "" << target << "": "";
    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",if (num > target) {
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::transform(str.begin(), str.end(), str.begin(), ::toupper);
    std::cout << str << std::endl;
    return 0;
}",::toupper
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;

    // Incorrectly calculating diameter
    double diameter = circumference / M_PI;
    std::cout << ""Diameter of the circle: "" << diameter << std::endl;

    return 0;
}",double diameter = circumference / M_PI;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    //Incorrect calculation for circumference
    double circumference = 2 * M_PI * radius - 1.0;

    std::cout << ""Circumference: "" << circumference << std::endl;
    return 0;
}",double circumference = 2 * M_PI * radius - 1.0;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {  // Faulty loop condition
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    if (radius > 0) {
        std::cout << ""Radius is positive."" << std::endl;
    } else {
        std::cout << ""Radius is not positive."" << std::endl;
    }

    return 0;
}","else {
        std::cout << ""Radius is not positive."" << std::endl;
    }"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    double perimeter = 2 * M_PI * radius;
    std::cout << ""Perimeter: "" << perimeter << std::endl;
    
    double circumference_error = M_PI + radius; // Incorrect calculation for circumference
    std::cout << ""Error Circumference: "" << circumference_error << std::endl;
    
    return 0;
}",double circumference_error = M_PI + radius;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::string sub = str.substr(1, 4);
    std::cout << sub << std::endl; // Should print ""ello"", but prints ""ello w""
    return 0;
}","std::string sub = str.substr(1, 4);"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size(); // Integer division
    std::cout << ""Average score: "" << average_score << std::endl;

    return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    // Incorrectly attempting to access a non-existent key after iteration completes.
    if (myMap.find(4) != myMap.end()) {
        std::cout << ""Key 4 exists: "" << myMap[4] << std::endl;
    } else {
        std::cout << ""Key 4 does not exist."" << std::endl;
    }
    
    return 0;
}","if (myMap.find(4) != myMap.end()) {
        std::cout << ""Key 4 exists: "" << myMap[4] << std::endl;
    }"
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    double sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
  std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
  int target = 7;

  // Find the index of the target value
  auto it = std::find(numbers.begin(), numbers.end(), target);

  if (it != numbers.end()) {
    std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
  } else {
    std::cout << ""Target not found."" << std::endl;
  }

  // Sort the vector in ascending order
  std::sort(numbers.begin(), numbers.end(), std::greater<int>()); // Intentionally using std::greater<int>()

  std::cout << ""Sorted vector: "";
  for (int num : numbers) {
    std::cout << num << "" "";
  }
  std::cout << std::endl;

  return 0;
}","std::sort(numbers.begin(), numbers.end(), std::greater<int>());"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string searchTerm = ""world"";

    size_t pos = text.find(searchTerm, 5); // Start searching from index 5

    if (pos != std::string::npos) {
        std::cout << ""Search term found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Search term not found."" << std::endl;
    }

    return 0;
}","text.find(searchTerm, 5)"
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }
  return 0;
}",if (text == reversed_text)
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    auto it = std::find(numbers.begin(), numbers.end(), 6); // Searching for 6

    if (it != numbers.end()) {
        std::cout << ""Found 6 at index: "" << std::distance(numbers.begin(), it) << std::endl; 
    } else {
        std::cout << ""6 not found."" << std::endl;
    }
    
    return 0;
}","auto it = std::find(numbers.begin(), numbers.end(), 6);"
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    size_t pos = text.find(""world"", 7); // Incorrect starting position
    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }
    return 0;
}","text.find(""world"", 7)"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int score = scores[name]; // Should check if 'name' exists first!
    std::cout << ""David's score: "" << score << std::endl;

    return 0;
}",int score = scores[name];
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct!"" << std::endl;
    } else {
        std::cout << ""Area is incorrect. Calculated: "" << area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    double area = M_PI * radius * radius;

    std::cout << ""Circumference: "" << circumference << std::endl;
    std::cout << ""Area: "" << area << std::endl;

    // Incorrectly calculating diameter
    double diameter = circumference / M_PI;
    std::cout << ""Diameter: "" << diameter << std::endl;

    return 0;
}",double diameter = circumference / M_PI;
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    //Incorrect loop condition.  Should be it != myMap.end()
    for (auto it = myMap.begin(); it < myMap.end(); ++it) {
        std::cout << ""looping incorrectly"" << std::endl;
    }

    return 0;
}",it < myMap.end()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct!"" << std::endl;
    } else {
        std::cout << ""Area is incorrect! Calculated: "" << area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        if (it->first == 2) {
            myMap.erase(it++); // Increment before erasing
        }
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    return 0;
}",myMap.erase(it++);
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int x : data) {
        if (x < target) {
            result.push_back(x);
        }
    }

    // Incorrectly print the size of the original vector instead of the result vector
    std::cout << ""Number of elements less than target: "" << data.size() << std::endl;
    return 0;
}","std::cout << ""Number of elements less than target: "" << data.size() << std::endl;"
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> words = {""apple"", ""banana"", ""cherry"", ""date""};

    // Sort the words alphabetically, but inadvertently modify the vector in place.
    std::sort(words.begin(), words.end(), [](const std::string& a, const std::string& b) {
        return a.length() < b.length(); // Sort by length
    });

    // Print the sorted words.
    for (const std::string& word : words) {
        std::cout << word << std::endl;
    }

    return 0;
}",return a.length() < b.length();
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <iomanip>

int main() {
    double price = 9.99;
    int quantity = 5;
    double tax_rate = 0.07;

    double subtotal = price * quantity;
    double tax = subtotal * tax_rate;
    double total = subtotal + tax;

    std::cout << ""Subtotal: "" << std::fixed << std::setprecision(2) << subtotal << std::endl;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << tax << std::endl;
    std::cout << ""Total: "" << std::fixed << std::setprecision(2) << total << std::endl;

    return 0;
}","std::cout << ""Total: "" << std::fixed << std::setprecision(2) << total << std::endl;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    int product = 1;
    for (int i = 0; i < numbers.size(); ++i) {
       product *= numbers[i];
    }

    if (sum > product) {
        std::cout << ""Sum is greater than product."" << std::endl;
    } else {
        std::cout << ""Product is greater than or equal to sum."" << std::endl;
    }

    return 0;
}","if (sum > product) {
        std::cout << ""Sum is greater than product."" << std::endl;
    } else {
        std::cout << ""Product is greater than or equal to sum."" << std::endl;
    }"
"#include <array>
#include <numeric>
#include <iostream>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl;
    double taxRate = 0.075;
    double taxAmount = price * taxRate;
    double totalCost = price + taxAmount;
    std::cout << ""Total cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;
    return 0;
}","std::cout << ""Total cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;"
"#include <random>
#include <numeric>
#include <algorithm>
#include <vector>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the sum of squares of even numbers
    int sum_of_squares = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0) {
            sum_of_squares += numbers[i]; // Fault: Should be numbers[i] * numbers[i]
        }
    }

    std::cout << ""Sum of squares of even numbers: "" << sum_of_squares << std::endl;

    return 0;
}",sum_of_squares += numbers[i];
"#include <iostream>
#include <tuple>

int calculate_average(int a, int b, int c) {
  return (a + b + c) / 3.0; // Integer division unexpectedly.
}

int main() {
  int x = 5;
  int y = 10;
  int z = 15;
  double average = calculate_average(x, y, z);
  std::cout << ""Average: "" << average << std::endl;
  return 0;
}",return (a + b + c) / 3.0;
"#include <tuple>
#include <iostream>

int main() {
  std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""hello"");
  int integer_value = std::get<0>(data);
  double double_value = std::get<1>(data);
  std::string string_value = std::get<2>(data);

  std::cout << integer_value << ""\n"";
  std::cout << double_value << ""\n"";
  std::cout << string_value << ""\n"";

  // Incorrectly attempting to access the 4th element of the tuple.
  // This will cause a compile-time error because the tuple only has 3 elements.
  int fourth_value = std::get<3>(data);
  std::cout << fourth_value << std::endl;

  return 0;
}",int fourth_value = std::get<3>(data);
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    for (const auto& pair : myMap) {
        std::cout << pair.first << "": "" << pair.second << std::endl;
    }

    myMap.erase(2);

    std::cout << ""After erasing element 2:\n"";
    for (const auto& pair : myMap) {
        std::cout << pair.first << "": "" << pair.second << std::endl;
    }

    std::cout << ""Accessing element with key 2: "" << myMap[2] << std::endl; // Fault
    return 0;
}","std::cout << ""Accessing element with key 2: "" << myMap[2] << std::endl;"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 7;
    
    std::vector<int> result;
    for (int num : nums) {
        if (num > target) {
            result.push_back(num);
        }
    }

    std::cout << ""Numbers greater than "" << target << "":"";
    for (int i = 0; i < result.size(); ++i) {
        std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
    
    return 0;
}",if (num > target)
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David""};
    std::string target = ""Bob"";

    auto it = std::find(names.begin(), names.end(), target);
    if (it != names.end()) {
        names.erase(it);
    }

    // Corrected: Iterate over the whole vector to find all occurrences. 
    // std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David"", ""Bob""};
    
    for (const auto& name : names) {
        std::cout << name << std::endl;
    }

    return 0;
}",names.erase(it);
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area: "" << area << std::endl;
  double perimeter = 2 * M_PI * radius;
  std::cout << ""Perimeter: "" << perimeter << std::endl;

  // Incorrect calculation of circumference (should be 2 * PI * r)
  double circumference = M_PI + radius;
  std::cout << ""Circumference: "" << circumference << std::endl;
  return 0;
}",double circumference = M_PI + radius;
"#include <set>
#include <iostream>

int main() {
  std::set<int> numbers = {1, 2, 3, 4, 5};
  
  for (int num : numbers) {
    if (num == 3) {
      break;
    }
    numbers.insert(num * 2); // Incorrect insertion within the loop
  }
  
  for (int num : numbers) {
    std::cout << num << "" "";
  }
  std::cout << std::endl;
  return 0;
}",numbers.insert(num * 2);
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    for (int num : numbers) {
        if (num % 2 == 1) {
            even_numbers.push_back(num);
        }
    }

    int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);
    
    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}",if (num % 2 == 1)
"#include <fstream>
#include <string>
#include <algorithm>

int main() {
  std::fstream file(""data.txt"", std::ios::out);
  if (file.is_open()) {
    std::string line = ""This is a line to write to the file"";
    file << line << std::endl;
    file.close();
  }
  else {
    std::cerr << ""Unable to open file"";
    return 1;
  }

  std::fstream infile(""data.txt"", std::ios::in);
  std::string content;
  if (infile.is_open()) {
    std::getline(infile, content);
    std::cout << ""File content: "" << content << std::endl;
    infile.close();
  } else {
    std::cerr << ""Unable to open file for reading"";
    return 1;
  }
  
  std::string expected = ""This is a line to write to the file"";
  if (content != expected) {
    std::cout << ""Match found!"" << std::endl;
  } else {
    std::cout << ""No match found!"" << std::endl;
  }

  return 0;
}","if (content != expected) {
    std::cout << ""Match found!"" << std::endl;
  } else {
    std::cout << ""No match found!"" << std::endl;
  }"
"#include <iostream>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {  // Fault: Off-by-one error
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <random> 
#include <chrono> 
#include <array>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::array<int, 5> arr = {1, 2, 3, 4, 5};

    for (int i = 0; i < 6; ++i) { // Fault: Loop iterates one too many times.
        std::uniform_int_distribution<> distrib{0, arr.size() - 1};
        int index = distrib(gen);
        std::cout << arr[index] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",for (int i = 0; i < 6; ++i)
"#include <iostream>
#include <queue>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int current = q.front();
        q.pop();

        if (current % 2 == 0) {
            // The fault is here: incorrect subtraction
            q.push(current - 2);
        } else {
            q.push(current + 1);
        }
    }

    std::cout << ""Queue size: "" << q.size() << std::endl;
    return 0;
}",q.push(current - 2);
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->first << "" : "" << it->second << std::endl;
    }

    std::cout << myMap[4] << std::endl; // Accessing a non-existent key

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <algorithm>
#include <array>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) { // Fault: Loop condition should be i < data.size()
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());

    if (str == reversed_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }

    std::string test_str = ""level"";
    std::string reversed_test_str = test_str;
    std::reverse(reversed_test_str.begin(), reversed_test_str.end());
    
    if (test_str == reversed_test_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }

    std::string another_str = ""rotor"";
    std::string reversed_another_str = another_str;
    std::reverse(reversed_another_str.begin(), reversed_another_str.end());

    if (another_str == reversed_another_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }

    return 0;
}",if (str == reversed_str)
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        if (current == 2) {
           //incorrectly setting q.size() to 0. Should have just continued or manipulated the queue
           q.size() = 0;
        }
        std::cout << current << "" "";
    }
    std::cout << std::endl;
    return 0;
}",q.size() = 0;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    double perimeter = circumference;
    std::cout << ""Perimeter: "" << perimeter << std::endl;
    return 0;
}",double perimeter = circumference;
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
  
  // Incorrectly attempts to double the sum using multiplication
  int doubled_sum = sum * 2.0;
  
  std::cout << ""Original sum: "" << sum << std::endl;
  std::cout << ""Doubled sum: "" << doubled_sum << std::endl;
  
  return 0;
}",int doubled_sum = sum * 2.0;
"#include <ctime>
#include <iomanip>

int main() {
    std::srand(std::time(nullptr));
    
    int numbers[5];
    for (int i = 0; i < 5; ++i) {
        numbers[i] = std::rand() % 10;
    }
    
    int sum = 0;
    for (int i = 0; i <= 5; ++i) {  //Fault here. Should be i < 5
        sum += numbers[i];
    }
    
    std::cout << ""Sum: "" << sum << std::endl;
    
    return 0;
}",i <= 5
"#include <iostream>
#include <set>

int main() {
    std::set<int> numbers = {1, 2, 3, 4, 5};
    
    for (int num : numbers) {
        if (num == 3) {
            break;
        }
        numbers.insert(num * 2);
    }
    
    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",numbers.insert(num * 2);
"#include <array>
#include <numeric>
#include <algorithm>
#include <iostream>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.end(), 0);

    // Incorrectly checking if the sum is equal to 15 using the wrong array size
    if (sum == 15) {
        std::cout << ""Sum is 15"" << std::endl;
    } else {
        std::cout << ""Sum is not 15"" << std::endl;
    }

    return 0;
}",if (sum == 15)
"#include <random> 
#include <iostream>
#include <numeric>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int arr[5];
    for (int i = 0; i < 5; ++i) {
        arr[i] = distrib(gen);
    }

    // Calculate the sum of elements using std::accumulate
    int sum = std::accumulate(arr, arr + 5, 0);

    // Incorrectly calculates the average by dividing by 6 instead of 5
    double average = static_cast<double>(sum) / 6;

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = static_cast<double>(sum) / 6;
"#include <numeric>
#include <functional>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::function<int(int)> accumulator = [](int acc, int x) { return acc - x; };
    int sum = 0; 
    for (int number : numbers) {
        sum = std::accumulate(numbers.begin(), numbers.end(), accumulator, sum);
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",return acc - x;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        if (it->first == 2) {
            it = myMap.erase(it);
        }
        std::cout << it->first << "": "" << it->second << std::endl;
    }
    return 0;
}",it = myMap.erase(it);
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    auto it = std::find(data.begin(), data.end(), target);

    if (it != data.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Find the index of the *next* element after the target
    auto next_it = std::find(it != data.end() ? it + 1 : data.begin(), data.end(), target);
    
    if (next_it != data.end()) {
        std::cout << ""Next target found at index: "" << std::distance(data.begin(), next_it) << std::endl;
    } else {
        std::cout << ""Next target not found."" << std::endl;
    }

    return 0;
}",it + 1
"#include <string>
#include <sstream>
#include <iomanip>

int main() {
  double value = 3.14159;
  std::stringstream ss;
  ss << std::fixed << std::setprecision(3) << value;
  std::string formatted_value = ss.str();

  if (formatted_value == ""3.142"") {
    std::cout << ""Value is approximately pi."" << std::endl;
  } else {
    std::cout << ""Value is not approximately pi."" << std::endl;
  }

  return 0;
}","if (formatted_value == ""3.142"")"
"#include <tuple>
#include <iostream>

int main() {
  std::tuple<int, double, std::string> my_tuple = std::make_tuple(10, 3.14, ""hello"");

  int int_val = std::get<0>(my_tuple) + 5;
  double double_val = std::get<1>(my_tuple) * 2;
  std::string string_val = std::get<2>(my_tuple) + "" world"";

  std::cout << ""Integer: "" << int_val << std::endl;
  std::cout << ""Double: "" << double_val << std::endl;
  std::cout << ""String: "" << string_val << std::endl;

  // Incorrect type conversion: trying to add a string to an integer.
  std::cout << ""Result: "" << int_val + string_val << std::endl; 
  return 0;
}","std::cout << ""Result: "" << int_val + string_val << std::endl;"
"#include <bitset>
#include <iostream>

int main() {
    std::bitset<8> bits(""10110011"");
    
    // Intended to invert all bits
    bits.flip();
    
    std::cout << ""Inverted bits: "" << bits << std::endl;
    
    // Calculate the decimal value after inversion
    unsigned long decimalValue = bits.to_ulong();
    
    std::cout << ""Decimal value: "" << decimalValue << std::endl;
    return 0;
}",bits.flip();
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return n > target;
"#include <unordered_map>
#include <functional>

int main() {
    std::unordered_map<int, std::function<int(int)>> function_map;

    function_map[1] = [](int x) { return x * 2; };
    function_map[2] = [](int x) { return x + 1; };

    int value = 5;
    int key = 3; // Intentionally using key 3, which isn't in the map
    
    int result = function_map[key](value); // Fault: Accessing a non-existent key

    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",int result = function_map[key](value);
"#include <chrono>
#include <thread>
#include <mutex>
#include <iostream>
#include <vector>

std::mutex mtx;

void worker(int id) {
    for (int i = 0; i < 10; ++i) {
        std::lock_guard<std::mutex> lock(mtx);
        std::cout << ""Worker "" << id << "": "" << i << std::endl;
        std::this_thread::sleep_for(std::chrono::milliseconds(50));
    }
}

int main() {
    std::vector<std::thread> threads;
    for (int i = 0; i < 5; ++i) {
        threads.push_back(std::thread(worker, i));
    }

    for (auto& thread : threads) {
        thread.join();
    }

    return 0;
}","std::cout << ""Worker "" << id << "": "" << i << std::endl;"
"#include <queue>
#include <iostream>

int main() {
    std::priority_queue<int, std::vector<int>, std::greater<int>> pq;
    pq.push(5);
    pq.push(2);
    pq.push(8);
    pq.push(1);

    std::cout << ""Top element: "" << pq.top() << std::endl;
    
    while (!pq.empty()) {
        std::cout << pq.top() << "" "";
        pq.pop();
    }
    std::cout << std::endl;
    return 0;
}",std::greater<int>
"#include <array>
#include <numeric>
#include <iostream>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""The area of the circle is: "" << area << std::endl;
    
    // Incorrectly calculate circumference
    double circumference = 2 * M_PI * radius / 2; 
    
    std::cout << ""The circumference of the circle is: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius / 2;
"#include <cmath>
#include <iomanip>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  std::cout << std::fixed << std::setprecision(4) << ""Area: "" << area << std::endl;
  if (area != expected_area) {
    std::cout << ""Error: Calculated area does not match expected area."" << std::endl;
  } else {
    std::cout << ""Area calculation is correct."" << std::endl;
  }
  return 0;
}",double area = M_PI * radius * radius;
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // Calculate the sum of even numbers using std::accumulate
    int even_sum = std::accumulate(numbers.begin(), numbers.end(), 0, [](int sum, int n) { return (n % 2 == 0) ? sum + n : sum; });

    // Incorrectly print the sum as a double. This introduces a subtle error because the accumulation is done as an integer.
    std::cout << static_cast<double>(even_sum) << std::endl; 
    
    return 0;
}",std::cout << static_cast<double>(even_sum) << std::endl;
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""123.45abc"";
    std::stringstream ss(input);
    double number;
    if (ss >> number) {
        std::cout << ""Successfully converted: "" << number << std::endl;
    } else {
        std::cout << ""Conversion failed."" << std::endl;
    }
    
    std::string remainder;
    if (ss >> remainder) {
        std::cout << ""Remainder: "" << remainder << std::endl;
    }
    
    return 0;
}",if (ss >> remainder)
"#include <iomanip> 
#include <numeric> 

int main() { 
  double values[] = {1.1, 2.2, 3.3, 4.4, 5.5}; 
  int size = sizeof(values) / sizeof(values[0]); 
  double sum = std::accumulate(values, values + size, 0.0); 
  double average = sum / size; 
  
  std::cout << ""Average: "" << std::fixed << std::setprecision(2) << average << std::endl; 
  return 0; 
}","double sum = std::accumulate(values, values + size, 0.0);"
"#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int x : data) {
        if (x + target > 15) {
            result.push_back(x);
        }
    }

    // Incorrectly assumes the result vector is always sorted, leading to a wrong count.
    std::sort(result.begin(), result.end());
    std::cout << ""Number of elements greater than 7 when added to target: "" << result.size() << std::endl;

    return 0;
}",if (x + target > 15)
"#include <fstream>
#include <sstream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    std::stringstream buffer;
    buffer << file.rdbuf();
    std::string content = buffer.str();

    // Parse lines from the content
    std::string line;
    int sum = 0;
    size_t pos = 0;
    while ((pos = content.find('
')) != std::string::npos) {
        line = content.substr(0, pos);
        try {
            int num = std::stoi(line);
            sum += num;
        } catch (const std::invalid_argument& e) {
            // Handle invalid input (non-numeric line)
            std::cerr << ""Invalid argument: "" << e.what() << std::endl;
        } catch (const std::out_of_range& e) {
            std::cerr << ""Out of range: "" << e.what() << std::endl;
        }
        content.erase(0, pos + 1); // Corrected: Removed the +1 to only remove the newline
    }

    // Process the last line (if any)
    if (!content.empty()) {
        try {
            int num = std::stoi(content);
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << e.what() << std::endl;
        } catch (const std::out_of_range& e) {
            std::cerr << ""Out of range: "" << e.what() << std::endl;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","content.erase(0, pos + 1);"
"#include <map>
#include <string>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;

    std::string name = ""Charlie"";
    int age = ages[name]; // Incorrect: Uses default constructor for int, which is 0
    std::cout << ""Charlie's age is: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <random>
#include <ctime>
#include <limits>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int numbers[10];
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= 10; ++i) {  // Fault: Loop goes one element beyond the array bounds
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= 10; ++i)
"#include <iostream>
#include <ctime>
#include <iomanip>

using namespace std;

int main() {
    srand(time(0));
    int arr[10];
    for (int i = 0; i <= 10; i++) { // Fault: Loop condition i <= 10
        arr[i] = rand() % 100;
        cout << arr[i] << "" "";
    }
    cout << endl;
    return 0;
}",i <= 10
"#include <ctime>
#include <limits>

int main() {
    long long seed = std::numeric_limits<long long>::max();
    unsigned int ull_seed = (unsigned int)seed;
    std::srand(ull_seed);

    int arr[5];
    for (int i = 0; i < 5; ++i) {
        arr[i] = std::rand() % 100; 
    }

    // Find the maximum value in the array
    int max_val = arr[0];
    for (int i = 1; i <= 5; ++i) { // Fault: Loop condition should be < 5
        if (arr[i] > max_val) {
            max_val = arr[i];
        }
    }

    std::cout << ""Maximum value: "" << max_val << std::endl;
    return 0;
}",i <= 5
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius; // Using a fixed value instead of M_PI
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <algorithm>
#include <array>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cerr << ""Conversion failed!"" << std::endl;
        return 1;
    }
    double result = num * 2;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",    double result = num * 2;
"#include <array>
#include <iomanip>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <numeric>
#include <vector>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: i <= numbers.size() should be i < numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <limits>
#include <algorithm>

int main() {
    int arr[5] = {1, 2, 3, 4, 5};
    int max_val = arr[0];
    for (int i = 1; i <= 5; ++i) {  // Fault: i should be < 5
        max_val = std::max(max_val, arr[i]);
    }
    std::cout << ""Maximum value: "" << max_val << std::endl;
    return 0;
}",i <= 5
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;
    
    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [&](int n){ return n > target; });
    
    std::cout << ""Numbers greater than "" << target << "":"";
    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return n > target;
"#include <random>
#include <tuple>
#include <iomanip>

std::tuple<int, int, int> generate_triplet() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int a = distrib(gen);
    int b = distrib(gen);
    int c = distrib(gen);

    return std::make_tuple(a, b, c);
}

int main() {
    int a, b, c;
    std::tie(a, b, c) = generate_triplet();

    if (a < b && b < c) {
        std::cout << ""Increasing order: "" << a << "" "" << b << "" "" << c << std::endl;
    } else if (a > b && b > c) {
        std::cout << ""Decreasing order: "" << a << "" "" << b << "" "" << c << std::endl;
    } else {
        std::cout << ""Not strictly increasing or decreasing: "" << a << "" "" << b << "" "" << c << std::endl;
    }

    return 0;
}","else {
        std::cout << ""Not strictly increasing or decreasing: "" << a << "" "" << b << "" "" << c << std::endl;
    }"
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->second << std::endl;
    }

    // Incorrectly try to access a key that doesn't exist.
    std::cout << myMap[4] << std::endl;

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> my_tuple = std::make_tuple(10, 3.14, ""hello"");
    int integer_value = std::get<0>(my_tuple);
    double double_value = std::get<1>(my_tuple);
    std::string string_value = std::get<2>(my_tuple);

    std::cout << ""Integer: "" << integer_value << std::endl;
    std::cout << ""Double: "" << double_value << std::endl;
    std::cout << ""String: "" << string_value << std::endl;

    // Incorrect type conversion. Attempting to assign a double to an int without explicit conversion.
    int converted_value = double_value;
    std::cout << ""Converted Value: "" << converted_value << std::endl;

    return 0;
}",int converted_value = double_value;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto const& [key, val] : myMap) {
        std::cout << key << "" : "" << val << std::endl;
    }

    myMap.erase(2);

    std::cout << ""After erasing key 2:\n"";
    for (auto const& [key, val] : myMap) {
        std::cout << key << "" : "" << val << std::endl;
    }

    std::cout << ""Accessing element with key 2: "";
    std::cout << myMap[2] << std::endl;  // Accessing deleted key
    return 0;
}",std::cout << myMap[2] << std::endl;
"#include <algorithm>
#include <cmath>

int main() {
    double arr[] = {1.0, 2.0, 3.0, 4.0, 5.0};
    int n = sizeof(arr) / sizeof(arr[0]);

    double sum = 0.0;
    for (int i = 0; i < n; ++i) {
        sum += sqrt(arr[i]);
    }

    if (sum > 10.0) {
        std::cout << ""Sum is greater than 10.0\n"";
    } else {
        std::cout << ""Sum is not greater than 10.0\n"";
    }

    return 0;
}",sum > 10.0
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!  "";
    std::string cleaned_text = text.substr(0, text.length() - 1); // Potential off-by-one error
    std::cout << cleaned_text << std::endl;
    return 0;
}","text.substr(0, text.length() - 1)"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    // Incorrect calculation of circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  std::for_each(data.begin(), data.end(), [&](int x) { sum += x; });
  
  std::array<int, 5> indices = {0, 1, 2, 3, 4};
  int product = 1;
  std::for_each(indices.begin(), indices.end(), [&](int i) { product *= data[i]; });
  
  int expected_product = 120; // 1 * 2 * 3 * 4 * 5
  if (product != expected_product) {
    std::cout << ""Error: Incorrect product calculated!"" << std::endl;
  } else {
    std::cout << ""Product calculation is correct."" << std::endl;
  }

  std::cout << ""Sum: "" << sum << std::endl;
  std::cout << ""Product: "" << product << std::endl;

  return 0;
}",int expected_product = 120; // 1 * 2 * 3 * 4 * 5
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {  // Fault: Out-of-bounds access
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <fstream>
#include <string>

int main() {
    std::ifstream file(""data.txt"");
    std::string line;
    int sum = 0;

    if (file.is_open()) {
        while (std::getline(file, line)) {
            try {
                int num = std::stoi(line); // Potential overflow if line represents a large number
                sum += num;
            } catch (const std::invalid_argument& e) {
                // Handle invalid input (non-numeric lines)
                std::cerr << ""Invalid input: "" << line << std::endl;
            } catch (const std::out_of_range& e) {
                std::cerr << ""Out of range: "" << line << std::endl;
            }
        }
        file.close();
        std::cout << ""Sum: "" << sum << std::endl;
    } else {
        std::cerr << ""Unable to open file\n"";
        return 1;
    }
    return 0;
}",int num = std::stoi(line);
"#include <random>
#include <chrono>
#include <limits>

int main() {
    unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distribution(generator);
        sum += randomNumber;
    }

    //Incorrectly divides by 10.0 instead of 10.
    double average = static_cast<double>(sum) / 10.0;

    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = static_cast<double>(sum) / 10.0;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <iostream>
#include <iomanip>

int main() {
    double price = 9.99;
    int quantity = 5;
    double total = price * quantity;

    // Incorrect formatting to truncate decimal places.
    std::cout << ""Total cost: "" << std::fixed << std::setprecision(0) << total << std::endl;

    return 0;
}","std::cout << ""Total cost: "" << std::fixed << std::setprecision(0) << total << std::endl;"
"#include <numeric>
#include <algorithm>
#include <vector>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  
  for (size_t i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <algorithm>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> counts;
    std::string text = ""This is a test string. This string is a test."";
    std::string words[] = {""This"", ""is"", ""a"", ""test"", ""string""};

    for (const auto& word : words) {
        counts[word] = 0;
    }

    std::string word;
    size_t start = 0;    
    while ((start = text.find(word, start)) != std::string::npos) { 
      counts[word]++;
      start += word.length();
    }

    for (const auto& pair : counts) {
        std::cout << pair.first << "": "" << pair.second << std::endl;
    }

    return 0;
}","while ((start = text.find(word, start)) != std::string::npos) { "
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    ss >> number;

    if (ss.fail()) {
        std::cerr << ""Conversion failed!\n"";
        return 1;
    }

    std::cout << ""Number: "" << number << std::endl;
    std::cout << ""Squared: "" << number * number << std::endl;
    return 0;
}","    std::cout << ""Squared: "" << number * number << std::endl;"
"#include <iostream>
#include <tuple>

int main() {
    auto [x, y, z] = std::make_tuple(1, 2, 3);
    
    if (x > y && y > z) {
        std::cout << ""Condition met!"" << std::endl;
    } else {
        std::cout << ""Condition not met."" << std::endl;
    }
    
    return 0;
}",if (x > y && y > z)
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    // Incorrectly using 'auto' to iterate through the map's keys. It gets the value, not the key.
    for (auto it = ages.begin(); it != ages.end(); ++it) {
        std::cout << it->first << "" is "" << it->second << "" years old."" << std::endl; 
    }

    std::cout << ""Average age: "" << (ages[""Alice""] + ages[""Bob""] + ages[""Charlie""] ) / 3 << std::endl;
    return 0;
}","std::cout << it->first << "" is "" << it->second << "" years old."" << std::endl;"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; });

    for (int i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return a > b;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!\n"";
    } else {
        std::cout << ""Area calculation is correct!\n"";
    }

    double perimeter = 2 * M_PI * radius;
    std::cout << ""Perimeter: "" << perimeter << std::endl;
    return 0;
}",if (std::abs(area - expected_area) > 0.0001)
"#include <fstream>
#include <iostream>
#include <string>

int main() {
  std::ofstream outfile(""output.txt"");
  if (outfile.is_open()) {
    std::string line = ""This is a test line."";
    outfile << line << std::endl;
    outfile << line << std::endl; // Writes the same line twice, intended to write a different one.
    outfile.close();
  } else {
    std::cerr << ""Unable to open file for writing."" << std::endl;
    return 1;
  }
  return 0;
}","outfile << line << std::endl; // Writes the same line twice, intended to write a different one."
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    // Incorrect truncation to integer before printing
    std::cout << (int)area << std::endl;
    
    return 0;
}",std::cout << (int)area << std::endl;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    auto it = std::find(data.begin(), data.end(), target);

    if (it == data.end()) {
        std::cout << ""Target not found.\n"";
    } else {
        std::cout << ""Target found at index: "" << it - data.begin() << ""\n"";
    }

    return 0;
}","std::cout << ""Target found at index: "" << it - data.begin() << ""\n"";"
"#include <random>
#include <iostream>
#include <chrono>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    std::seed_seq seed{seed_time.time_since_epoch().count()};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 10);

    int numbers[5];
    for (int i = 0; i <= 5; ++i) {
        numbers[i] = distribution(generator);
    }

    int sum = 0;
    for (int i = 0; i < 5; ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= 5
"#include <ctime>
#include <iomanip>

int main() {
    std::time_t timer;
    std::tm* tm_info;
    time(&timer);
    tm_info = std::localtime(&timer);

    int year = tm_info->tm_year; // Year is 1900 + year
    year -= 1900;

    std::cout << ""Current Year: "" << year << std::endl;

    // Calculate days since epoch (Jan 1, 1970)
    long long days = std::difftime(timer, 0);

    //Incorrectly assuming days from 1900. This is a subtle error.
    int calculated_year = (days / 365.25) + 1900;

    std::cout << ""Calculated Year: "" << calculated_year << std::endl;

    return 0;
}",int calculated_year = (days / 365.25) + 1900;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int x = q.front();
        q.pop();
        if (x == 2) {
            // Should break here to prevent infinite loop
        }
        std::cout << x << "" "";
    }
    std::cout << std::endl;
    return 0;
}",if (x == 2) {
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <unordered_map>
#include <vector>
#include <algorithm>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    std::vector<int> keys = {3, 1, 2};

    for (int key : keys) {
        if (myMap.count(key) > 0) {
            std::cout << ""Key "" << key << "": "" << myMap[key] << std::endl;
        }
    }

    // Intended to sort based on string length, but unintentionally modifies key order
    std::sort(keys.begin(), keys.end(), [&](int a, int b) { return myMap[a].length() < myMap[b].length(); });

    std::cout << ""Sorted Keys: "";
    for (int key : keys) {
        std::cout << key << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(keys.begin(), keys.end(), [&](int a, int b) { return myMap[a].length() < myMap[b].length(); });"
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    size_t pos = text.find(""world"", 7); // Starts search from index 7 instead of 0
    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }
    return 0;
}","size_t pos = text.find(""world"", 7);"
"#include <array>
#include <numeric>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <iostream>
#include <cmath>

int main() {
  double x = 10.0;
  double y = 2.0;
  double result = std::pow(x, y) / std::pow(y, 1.5);
  std::cout << ""Result: "" << result << std::endl;
  return 0;
}","double result = std::pow(x, y) / std::pow(y, 1.5);"
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    size_t n = sizeof(arr) / sizeof(arr[0]);

    // Calculate the sum of the array elements
    int sum = std::accumulate(arr, arr + n - 1, 0);

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",arr + n - 1
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    // Intent: Calculate the circumference of the circle
    double circumference = 2 * M_PI * radius;
    
    // Incorrect Calculation:  Using area instead of radius for diameter
    double diameter = area;

    std::cout << ""Radius: "" << radius << std::endl;
    std::cout << ""Area: "" << area << std::endl;
    std::cout << ""Circumference: "" << circumference << std::endl;
    std::cout << ""Diameter (incorrect): "" << diameter << std::endl;
    
    return 0;
}",double diameter = area;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Loop goes one element too far
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }

    int expected_sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    if (sum != expected_sum) {
        std::cout << ""Error: Sum calculated incorrectly!"" << std::endl;
    } else {
        std::cout << ""Sum calculated correctly!"" << std::endl;
    }

    return 0;
}","int expected_sum = std::accumulate(numbers.begin(), numbers.end(), 0);"
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123abc456"";
    std::stringstream ss(input);
    int number;
    char ch;
    ss >> number >> ch;
    std::cout << ""Extracted number: "" << number << std::endl;
    std::cout << ""Extracted character: "" << ch << std::endl;
    return 0;
}",ss >> number >> ch;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iomanip> 
#include <complex>

int main() {
    double pi = 3.14159265358979323846;
    std::complex<double> z(1.0, 0.0);
    
    for (int i = 0; i < 10; ++i) {
        z = z * z + 1.0;  // Iterative complex number calculation
    }

    std::cout << std::fixed << std::setprecision(10) << z << std::endl;
    return 0;
}",z = z * z + 1.0;
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
    }

    std::string invalid_name = ""Eve"";
    std::cout << ""Age of "" << invalid_name << "": "" << ages[invalid_name] << std::endl; // Accessing non-existent element

    return 0;
}","std::cout << ""Age of "" << invalid_name << "": "" << ages[invalid_name] << std::endl;"
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30; 
    ages[""Bob""] = 25; 
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Potential problem: accessing non-existent key
    
    std::cout << ""David's age is: "" << age << std::endl;
    
    return 0;
}",int age = ages[name];
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <limits>

int main() {
    long long a = std::numeric_limits<long long>::max();
    long long b = 2;
    long long result = a / b;
    std::cout << result << std::endl;
    return 0;
}",long long result = a / b;
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);

    if (!file.is_open()) {
        std::cerr << ""Error opening file: "" << filename << std::endl;
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(file, line)) {
        try {
            int number = std::stoi(line);
            sum += number;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << line << std::endl;
        } catch (const std::out_of_range& e) {
            std::cerr << ""Out of range: "" << line << std::endl;
        }
    }
    file.close();

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",    int number = std::stoi(line);
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    double expected_area = M_PI * radius * radius;

    if (area == expected_area) {
        std::cout << ""Area is calculated correctly."" << std::endl;
    } else {
        std::cout << ""Area calculation is incorrect. Expected: "" << expected_area << "", Calculated: "" << area << std::endl;
    }
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string pattern = ""test"";
    size_t pos = text.find(pattern, 1); // Starts searching from index 1
    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }
    return 0;
}","text.find(pattern, 1)"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int x : data) {
        if (x > target) {
            result.push_back(x);
        }
    }

    //Corrected output (should be {8, 9}); Current output is {8, 9}
    for (int x : result) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;
    return 0;
}",if (x > target) {
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <queue>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        if (current == 2) {
            break; // Early exit, skipping the last element
        }
        std::cout << current << "" "";
    }
    std::cout << std::endl;
    return 0;
}","if (current == 2) {
            break; // Early exit, skipping the last element
        }"
"#include <queue>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::priority_queue<int, std::vector<int>, std::greater<int>> min_heap;

    for (int num : numbers) {
        min_heap.push(num * 2); //Intent: Push double of the numbers to min-heap
    }

    std::vector<int> result;
    while (!min_heap.empty()) {
        result.push_back(min_heap.top());
        min_heap.pop();
    }

    std::reverse(result.begin(), result.end());

    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",min_heap.push(num * 2);
"#include <iostream>
#include <map>

int main() {
  std::map<std::string, int> scores;
  scores[""Alice""] = 85;
  scores[""Bob""] = 92;
  scores[""Charlie""] = 78;

  int total_score = 0;
  for (auto const& [name, score] : scores) {
    total_score += score;
  }

  double average_score = total_score / scores.size();
  std::cout << ""Average score: "" << average_score << std::endl;
  return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) == ages.end()) {
        ages[name] = 0;
    }
    std::cout << ""David's age: "" << ages[name] << std::endl;
    
    std::cout << ""Alice's age: "" << ages[""Alice""] << std::endl;

    return 0;
}",ages[name] = 0;
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << ""Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    double tax_rate = 0.075;
    double tax_amount = price * tax_rate;
    double total_cost = price + tax_amount;

    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << tax_amount << std::endl;
    std::cout << ""Total Cost: "" << std::fixed << std::setprecision(2) << total_cost << std::endl;
    return 0;
}","std::cout << ""Price: "" << std::fixed << std::setprecision(2) << price << std::endl;"
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->second << std::endl;
    }

    std::cout << myMap[4] << std::endl; // Accessing non-existent key

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
  
  // Incorrectly subtract 1 from the accumulated sum. This is a logical error
  // that will cause the program to produce an incorrect result.
  sum -= 1;
  
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",sum -= 1;
"#include <random>
#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::string message = ""The secret number is: "";
    int secret_number = distrib(gen);
    message += std::to_string(secret_number);

    std::cout << message << std::endl;

    // Attempt to compare secret_number with a string representation.
    if (secret_number == ""42"") {
        std::cout << ""You guessed it!"" << std::endl;
    } else {
        std::cout << ""Try again."" << std::endl;
    }
    return 0;
}","if (secret_number == ""42"")"
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string rev_str = str;
    std::reverse(rev_str.begin(), rev_str.end());

    if (str == rev_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == rev_str)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    int count = std::count(numbers.begin(), numbers.end(), target);
    
    if (count > 0) {
        std::cout << ""Target found!"" << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    return 0;
}",int target = 7;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect. Calculated: "" << area << "", Expected: "" << expected_area << std::endl;
    } else {
        std::cout << ""Area calculation is correct: "" << area << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }
    
    // Simulate a delayed update to a counter
    volatile int counter = 0;
    counter++; // Read-modify-write without proper synchronization
    std::cout << ""Counter: "" << counter << std::endl;
    
    return 0;
}",counter++;
"#include <iostream>
#include <iomanip>

int main() {
    double price = 100.50;
    int quantity = 3;
    double taxRate = 0.07;

    double subtotal = price * quantity;
    double taxAmount = subtotal * taxRate;
    double totalAmount = subtotal + taxAmount;

    std::cout << ""Subtotal: $"" << std::fixed << std::setprecision(2) << subtotal << std::endl;
    std::cout << ""Tax: $"" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    std::cout << ""Total: $"" << std::fixed << std::setprecision(2) << totalAmount << std::endl;

    // Incorrect Calculation
    double discount = totalAmount * 0.1;
    double finalAmount = totalAmount - discout;

    std::cout << ""Final Amount: $"" << std::fixed << std::setprecision(2) << finalAmount << std::endl;
    return 0;
}","double discount = totalAmount * 0.1;
    double finalAmount = totalAmount - discout;"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  std::for_each(numbers.begin(), numbers.end(), [&](int n) { sum += n; });
  
  // Incorrectly calculating the average.
  double average = sum / numbers.size();

  std::cout << ""Average: "" << average << std::endl;
  return 0;
}",double average = sum / numbers.size();
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <iomanip>

int main() {
    double value = 3.14159;
    std::cout << std::fixed << std::setprecision(3) << value << std::endl;
    
    double another_value = 10.0 / 3.0;
    std::cout << std::fixed << std::setprecision(3) << another_value << std::endl;
    
    //Incorrectly truncating the double value before setting precision.
    int truncated_value = static_cast<int>(value);
    std::cout << std::fixed << std::setprecision(3) << truncated_value << std::endl;
    
    return 0;
}",int truncated_value = static_cast<int>(value);
"#include <iostream>
#include <iomanip>

int main() {
    double price = 99.99;
    int quantity = 5;
    double tax_rate = 0.07;

    double subtotal = price * quantity;
    double tax_amount = subtotal * tax_rate;
    double total = subtotal;

    std::cout << ""Subtotal: $ << std::fixed << std::setprecision(2) << subtotal << std::endl;
    std::cout << ""Tax: $ << std::fixed << std::setprecision(2) << tax_amount << std::endl;
    std::cout << ""Total: $ << std::fixed << std::setprecision(2) << total << std::endl;

    return 0;
}",double total = subtotal;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (const auto& pair : scores) {
        total_score += pair.second;
    }

    double average_score = total_score / scores.size(); // Integer division
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <string>
#include <algorithm>

int main() {
  std::string str = ""hello world"";
  std::string reversed_str = str;
  std::reverse(reversed_str.begin(), reversed_str.end());
  if (str == reversed_str) {
    std::cout << ""Palindrome!"" << std::endl;
  } else {
    std::cout << ""Not a palindrome."" << std::endl;
  }
  return 0;
}",if (str == reversed_str)
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting only up to n-1, leading to an out-of-bounds access

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4};
  int target = 7;

  std::vector<int> result;
  std::copy_if(data.begin(), data.end(), std::back_inserter(result), [target](int x){ return x >= target; });

  for (int val : result) {
    std::cout << val << "" "";
  }
  std::cout << std::endl;
  return 0;
}",return x >= target;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1 instead of n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    
    std::cout << ""The area of a circle with radius "" << radius << "" is approximately: "" << area << std::endl;
    
    // Incorrect rounding to integer.
    int integer_area = (int)area; 
    
    std::cout << ""Integer area: "" << integer_area << std::endl;
    
    return 0;
}",int integer_area = (int)area;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::sort(data.begin(), data.end(), std::greater<int>());
    std::vector<int> result;
    for (int i = 0; i < data.size(); ++i) {
        result.push_back(data[i] * 2);
    }
    
    int sum = 0;
    for (int i = 0; i < result.size() - 1; ++i) {
        sum += result[i];
    }
    
    std::cout << sum << std::endl;
    return 0;
}",for (int i = 0; i < result.size() - 1; ++i)
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    for (auto const& [key, val] : myMap) {
        std::cout << ""Key: "" << key << "", Value: "" << val << std::endl;
    }

    std::cout << ""Key 4: "" << myMap[4] << std::endl; // Accessing non-existent key

    return 0;
}","std::cout << ""Key 4: "" << myMap[4] << std::endl;"
"#include <iostream>
#include <string>

int main() {
  std::string text = ""Hello, world!"";
  size_t pos = text.find(""world"", 1); // Starts search from index 1
  if (pos != std::string::npos) {
    std::cout << ""Substring found at position: "" << pos << std::endl;
  } else {
    std::cout << ""Substring not found."" << std::endl;
  }
  return 0;
}","text.find(""world"", 1)"
"#include <iostream>
#include <string>
#include <map>

int main() {
    std::map<std::string, int> ageMap;
    ageMap[""Alice""] = 30;
    ageMap[""Bob""] = 25;
    ageMap[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ageMap[name]; // Potential undefined behavior: David is not in the map
    std::cout << ""Age of "" << name << "": "" << age << std::endl;

    return 0;
}",ageMap[name]
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;

    std::string name = ""Charlie"";
    if (scores.count(name) > 0) {
        std::cout << ""Score for "" << name << "": "" << scores[name] << std::endl;
    } else {
        std::cout << ""No score found for "" << name << std::endl;
    }
    
    return 0;
}",if (scores.count(name) > 0)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <limits>

int main() {
  long long a = std::numeric_limits<long long>::max();
  long long b = 1;
  long long result = a - b;  // Potential overflow
  std::cout << result << std::endl;
  return 0;
}",long long result = a - b;
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    std::cout << ""Value for key 2: "" << myMap[2] << std::endl;

    // Attempting to access a non-existent key without checking first
    std::cout << ""Value for key 4: "" << myMap[4] << std::endl;

    return 0;
}","std::cout << ""Value for key 4: "" << myMap[4] << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""The area of the circle is: "" << area << std::endl;
    double circumference = 2 * M_PI * radius;
    std::cout << ""The circumference of the circle is: "" << circumference << std::endl;
    
    // Incorrect calculation of diameter
    double diameter = radius / 2.0;
    std::cout << ""The diameter of the circle is: "" << diameter << std::endl;
    
    return 0;
}",double diameter = radius / 2.0;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Faulty line: sorting only up to n-1

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int target = 3;
    auto it = std::find(data.begin(), data.end(), target);

    if (it != data.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl; 
    }
    else {
        std::cout << ""Target not found."" << std::endl;
    }

    //incorrect calculation of index in following code
    int index = std::distance(data.begin(), it) + 1;  // Faulty line: Adds 1 to the index
    std::cout << ""Incorrect index: "" << index << std::endl;
    return 0;
}","int index = std::distance(data.begin(), it) + 1;"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 4, 0); // Incorrect end iterator
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers.begin() + 4
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // This will default-initialize count to 0
    
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

    return 0;
}",int count = counts[fruit];
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> modified_data = data;

    // Attempt to square each element of the modified vector using a lambda.
    std::transform(modified_data.begin(), modified_data.end(), modified_data.begin(), [](int x) { return x * x; });

    // Calculate the sum of elements in the original data vector.
    int sum = std::accumulate(data.begin(), data.end(), 0);

    // Incorrectly access out-of-bounds element during comparison
    if (modified_data[5] > sum) {
        std::cout << ""Modified data has a larger element than the sum of original data."" << std::endl;
    } else {
        std::cout << ""Modified data does not have a larger element than the sum of original data."" << std::endl;
    }

    return 0;
}",if (modified_data[5] > sum)
"#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << ""The number is: "" << num << std::fixed << std::setprecision(2);
    return ss.str();
}

int main() {
    double value = 123.4567;
    std::string formatted_string = format_number(value);
    std::cout << formatted_string << std::endl;

    double another_value = 789.1;
    std::string another_formatted_string = format_number(another_value);
    std::cout << another_formatted_string << std::endl;

    // The issue is below.  It's designed to format a large number and cause truncation.
    double large_value = 123456789.987654;
    std::string large_formatted_string = format_number(large_value);
    std::cout << large_formatted_string << std::endl;
    return 0;
}",std::string large_formatted_string = format_number(large_value);
"#include <iostream>
#include <random>
#include <chrono>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    std::seed_seq seed{seed_time.time_since_epoch().count()};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 10);

    int numbers[5];
    for (int i = 0; i < 5; ++i) {
        numbers[i] = distribution(generator);
    }

    int sum = 0;
    for (int i = 0; i <= 5; ++i) { // Fault: i <= 5 should be i < 5
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= 5
"#include <queue>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::priority_queue<int> pq(numbers.begin(), numbers.end());

    std::vector<int> sortedNumbers;
    while (!pq.empty()) {
        sortedNumbers.push_back(pq.top());
        pq.pop();
    }

    std::reverse(sortedNumbers.begin(), sortedNumbers.end());

    //Incorrectly calculate the sum of even numbers
    int sumOfEvens = 0;
    for (size_t i = 0; i < sortedNumbers.size(); ++i) {
        if (sortedNumbers[i] % 2 == 0) {
             sumOfEvens = sortedNumbers[i]; //Only stores the last even number. 
        }
    }

    std::cout << ""Sum of even numbers: "" << sumOfEvens << std::endl;
    return 0;
}",sumOfEvens = sortedNumbers[i];
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        if (it->first == 2) {
            myMap.erase(it++); // Erasing while iterating can lead to unexpected behavior
        }
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    return 0;
}",myMap.erase(it++);
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    double new_radius = area / M_PI;
    double expected_radius = sqrt(new_radius);
    
    if (abs(new_radius - expected_radius * expected_radius) > 1e-6) {
        std::cout << ""Error: Radius calculation mismatch!"" << std::endl;
    }
    else {
        std::cout << ""Radius calculation correct."" << std::endl;
    }
    return 0;
}",double expected_radius = sqrt(new_radius);
"#include <fstream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    if (file.is_open()) {
        std::string line;
        int sum = 0;
        while (std::getline(file, line)) {
            try {
                int num = std::stoi(line);
                sum += num;
            } catch (const std::invalid_argument& e) {
                // Handle non-integer lines gracefully, but still add 0.
                // This is where the fault lies, it should not add zero.
                sum += 0;
            } catch (const std::out_of_range& e) {
                std::cerr << ""Out of range error: "" << e.what() << std::endl;
                return 1;
            }
        }
        std::cout << ""Sum: "" << sum << std::endl;
        file.close();
    } else {
        std::cerr << ""Unable to open file "" << filename << std::endl;
        return 1;
    }
    return 0;
}",sum += 0;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <random>
#include <ctime>

int main() {
    std::srand(std::time(nullptr));
    int secretNumber = std::rand() % 100 + 1;
    int guess = 0;
    int attempts = 0;

    std::cout << ""Welcome to the Number Guessing Game!\n"";
    std::cout << ""I've chosen a number between 1 and 100. Try to guess it.\n"";

    while (guess != secretNumber && attempts < 7) {
        std::cout << ""Enter your guess: "";
        std::cin >> guess;
        attempts++;

        if (guess < secretNumber) {
            std::cout << ""Too low!\n"";
        } else if (guess > secretNumber) {
            std::cout << ""Too high!\n"";
        } else {
            std::cout << ""Congratulations! You guessed the number in "" << attempts << "" attempts.\n"";
            return 0;
        }
    }

    if (guess != secretNumber) {
        std::cout << ""You ran out of attempts. The number was "" << secretNumber << "".\n"";
    }

    return 0;
}","if (guess < secretNumber) {
        std::cout << ""Too low!\n"";
    } else if (guess > secretNumber) {
        std::cout << ""Too high!\n"";
    } else"
"#include <random> 
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);
    
    std::vector<int> numbers(10);
    for (int i = 0; i < numbers.size(); ++i) {
        numbers[i] = distrib(gen);
    }

    // Find the minimum element
    int min_index = 0;
    for (int i = 1; i < numbers.size(); ++i) {
        if (numbers[i] <= numbers[min_index]){
            min_index = i;
        }
    }

    //Incorrectly print the index instead of the value
    std::cout << ""Minimum element index: "" << numbers[min_index] << std::endl;
    
    return 0;
}","std::cout << ""Minimum element index: "" << numbers[min_index] << std::endl;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 3, 0); // Incorrect range
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers.begin() + 3
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""hello world"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""Hello"");

    int integer_value = std::get<0>(data);
    double double_value = std::get<1>(data);
    std::string string_value = std::get<2>(data);

    std::cout << ""Integer: "" << integer_value << std::endl;
    std::cout << ""Double: "" << double_value << std::endl;
    std::cout << ""String: "" << string_value << std::endl;

    // Incorrect type conversion - attempting to assign the string value to an int.
    int converted_value = string_value;

    std::cout << ""Converted: "" << converted_value << std::endl;

    return 0;
}",int converted_value = string_value;
"#include <array>
#include <numeric>
#include <iostream>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl; // Fault: Should be message.substr(0, 13)
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;

    std::string fruit = ""orange"";
    std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;
    return 0;
}",counts[fruit]
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;

    // Calculate circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;

    // Incorrect calculation of diameter
    double diameter = circumference / M_PI;
    std::cout << ""Diameter of the circle: "" << diameter << std::endl;
    
    return 0;
}",double diameter = circumference / M_PI;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;
    
    // Find the index of the first element greater than or equal to target
    auto it = std::lower_bound(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""First element >= target is at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""No element >= target found."" << std::endl;
    }

    //incorrectly print target value
    std::cout << *it << std::endl;
    
    return 0;
}",std::cout << *it << std::endl;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    
    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation incorrect! Expected: "" << expected_area << "", Calculated: "" << area << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }
    
    //Incorrect assignment. Should be 'radius * radius' but uses 'radius^2' which is not defined
    double circumference = 2 * M_PI * radius^2;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius^2;
"#include <random> 
#include <iostream>
#include <vector>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: i <= numbers.size() should be i < numbers.size()
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::vector<int> even_numbers;
    for (int i = 0; i < data.size(); ++i) {
        if (data[i] % 2 == 0) {
            even_numbers.push_back(data[i]);
        }
    }

    // Calculate the sum of even numbers, but use the wrong iterator range
    int sum = std::accumulate(even_numbers.begin(), even_numbers.begin() + even_numbers.size() - 1, 0);

    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}",even_numbers.begin() + even_numbers.size() - 1
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cout << ""Conversion failed.\n"";
        return 1;
    }
    
    std::string extra;
    ss >> extra; // Reads extra characters after the number
    
    std::cout << ""Number: "" << num << "". Extra: "" << extra << std::endl;
    return 0;
}",ss >> extra;
"#include <numeric>
#include <functional>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  
  // Incorrect usage of std::transform to calculate the sum.
  int sum = std::transform(data.begin(), data.end(), data.begin(), std::plus<int>());

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}","int sum = std::transform(data.begin(), data.end(), data.begin(), std::plus<int>());"
"#include <fstream>
#include <string>

int main() {
    std::ofstream outfile(""data.txt"");
    if (outfile.is_open()) {
        std::string line = ""This is a test line"";
        outfile << line << std::endl;
        std::string another_line = ""Another line"";
        outfile << another_line << std::endl;
        outfile.close();
    }
    else {
        std::cerr << ""Unable to open file"";
        return 1;
    }

    std::ifstream infile(""data.txt"");
    std::string file_content;
    if (infile.is_open()) {
        while (std::getline(infile, file_content)) {
            std::cout << file_content << std::endl;
        }
        infile.close();
    } else {
        std::cerr << ""Unable to open input file"";
        return 1;
    }

    return 0;
}",std::string file_content;
"#include <iostream>
#include <string>

int main() {
  std::string message = ""Hello, world!\n"";
  std::cout << message.substr(0, 5) << std::endl; // Intended to print ""Hello""
  return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <map>
#include <string>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Fault: Accessing non-existent key

    std::cout << ""David's age is: "" << age << std::endl;
    return 0;
}",ages[name]
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::sort(data.begin(), data.end(), [](int a, int b) { return a > b; });

    for (int i = 0; i < data.size(); ++i) {
        std::cout << data[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return a > b;
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    size_t len = message.length();

    for (size_t i = 0; i <= len; ++i) {
        std::cout << message[i];
    }
    std::cout << std::endl;
    return 0;
}",i <= len
"#include <iomanip> 
#include <sstream> 
#include <stdexcept>

std::string format_number(double num, int precision) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(precision) << num;
    return ss.str();
}

int main() {
    try {
        double value = 1234.56789;
        int prec = 2;
        std::string formatted_value = format_number(value, prec);
        std::cout << ""Formatted value: "" << formatted_value << std::endl;
        
        double another_value = 9.87654321;
        int another_precision = 5; 
        std::string another_formatted_value = format_number(another_value, another_precision);
        std::cout << ""Another formatted value: "" << another_formatted_value << std::endl;
        
        double invalid_value = std::nan(""0"");
        std::string nan_formatted = format_number(invalid_value, 3); 
        std::cout << ""NaN formatted: "" << nan_formatted << std::endl; 
    } catch (const std::exception& e) {
        std::cerr << ""Exception: "" << e.what() << std::endl;
    }
    return 0;
}","std::string nan_formatted = format_number(invalid_value, 3);"
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = 3.14159 * radius * radius;
  
  std::cout << ""Area of the circle: "" << area << std::endl;
  return 0;
}",double area = 3.14159 * radius * radius;
"#include <random>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);
    
    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }
    
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a < b; });
    
    // Find the smallest number. Incorrect comparison.
    int smallest = numbers[0];
    for (int i = 1; i <= 10; ++i) { // Should be i < 10
        if (numbers[i] < smallest) {
            smallest = numbers[i];
        }
    }
    
    std::cout << ""Smallest number: "" << smallest << std::endl;
    
    return 0;
}",for (int i = 1; i <= 10; ++i)
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cout << ""Conversion failed!"" << std::endl;
        return 1;
    }
    
    double result = num * 2;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",if (ss.fail())
"#include <array>
#include <numeric>
#include <algorithm>
#include <iostream>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (size_t i = 0; i <= data.size(); ++i) {
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly attempting to modify the sum variable within the loop.
    for (int num : numbers) {
        sum = sum + num;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum = sum + num;
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> my_tuple = std::make_tuple(10, 3.14, ""hello"");
    int int_val = std::get<0>(my_tuple);
    double double_val = std::get<1>(my_tuple);
    std::string string_val = std::get<2>(my_tuple);

    std::cout << ""Integer: "" << int_val << std::endl;
    std::cout << ""Double: "" << double_val << std::endl;
    std::cout << ""String: "" << string_val << std::endl;

    // Incorrect index access - accessing out of bounds
    int out_of_bounds = std::get<3>(my_tuple); 
    std::cout << ""Out of bounds: "" << out_of_bounds << std::endl;

    return 0;
}",int out_of_bounds = std::get<3>(my_tuple);
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <limits>

int main() {
    long long max_val = std::numeric_limits<long long>::max();
    long long sum = 0;
    for (long long i = 0; i <= max_val; ++i) {
        sum += i;
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (long long i = 0; i <= max_val; ++i)
"#include <algorithm>
#include <numeric>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4, 7, 3, 6};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    int sum = 0;
    for (int i = 0; i < n; ++i) {
        sum += arr[i];
    }
    
    int average = sum / n;
    
    std::vector<int> above_average;
    for (int i = 0; i < n; ++i) {
        if (arr[i] > average) {
            above_average.push_back(arr[i]);
        }
    }

    std::cout << ""Average: "" << average << std::endl;
    std::cout << ""Numbers above average: "";
    for (int i = 0; i < above_average.size(); ++i) {
        std::cout << above_average[i] << (i == above_average.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
    
    return 0;
}",int average = sum / n;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Potential issue: accessing a non-existent key
    std::cout << ""David's age is: "" << age << std::endl;
    return 0;
}",int age = ages[name];
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area of the circle: "" << area << std::endl;

  double circumference = 2 * M_PI * radius;
  std::cout << ""Circumference of the circle: "" << circumference << std::endl;

  double diameter = circumference / M_PI;
  std::cout << ""Diameter of the circle: "" << diameter << std::endl;

  return 0;
}",double diameter = circumference / M_PI;
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 10;
    counts[""cherry""] = 15;

    std::string fruit = ""grape"";
    int count = counts[fruit];
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;
    
    return 0;
}",int count = counts[fruit];
"#include <random> 
#include <chrono> 

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd()); 
    std::uniform_int_distribution<> distrib(1, 100); 

    int numbers[5];
    for (int i = 0; i < 5; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= 5; ++i) { // Fault: Accessing out of bounds
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= 5; ++i)
"#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 12.5;
    double tax_rate = 0.07;
    double tax_amount = price * tax_rate;
    std::string formatted_tax = format_number(tax_amount);
    std::cout << ""Tax amount: "" << formatted_tax << std::endl;
    return 0;
}","std::cout << ""Tax amount: "" << formatted_tax << std::endl;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    int sum = 0;
    for (int i = 0; i <= n; ++i) {  // Fault: Loop goes one element too far
        sum += arr[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= n
"#include <iomanip> 
#include <sstream> 
#include <stdexcept>

std::string formatNumber(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 123.4567;
    double taxRate = 0.075;
    double taxAmount = price * taxRate;
    std::string formattedPrice = formatNumber(price);
    std::string formattedTaxAmount = formatNumber(taxAmount);

    // Incorrect concatenation: missing a space
    std::string finalPrice = formattedPrice + formattedTaxAmount;

    std::cout << ""Price: "" << formattedPrice << ""\n"";
    std::cout << ""Tax: "" << formattedTaxAmount << ""\n"";
    std::cout << ""Final Price: "" << finalPrice << std::endl;
    return 0;
}",std::string finalPrice = formattedPrice + formattedTaxAmount;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target element
    auto it = std::find(nums.begin(), nums.end(), target);

    if (it != nums.end()) {
        std::cout << ""Target found at index: "" << std::distance(nums.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrectly modify the vector after searching.
    nums.push_back(target);

    std::cout << ""Modified vector: "";
    for (int num : nums) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",nums.push_back(target);
"#include <iostream>
#include <limits>

int main() {
    long long sum = 0;
    for (int i = 0; i < 100000; ++i) {
        sum += i;
    }
    
    if (sum > std::numeric_limits<int>::max()) {
        std::cout << ""Overflow detected!"" << std::endl;
    } else {
        std::cout << ""Sum: "" << sum << std::endl;
    }
    
    return 0;
}",sum += i;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""The area of the circle is: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""The circumference is: "" << circumference << std::endl;
    
    // Incorrect calculation of diameter - uses radius twice
    double diameter = radius * radius;
    std::cout << ""The diameter is: "" << diameter << std::endl;
    
    return 0;
}",double diameter = radius * radius;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string."";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }

  return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30; 
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    int total_age = 0;
    for (const auto& pair : ages) {
        total_age += pair.first; // Fault: Adding the name (string) instead of the age (int)
    }

    std::cout << ""Total age: "" << total_age << std::endl;
    return 0;
}",total_age += pair.first;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (reversed_text == text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (reversed_text == text)
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> transformed_data(data.size());

  std::transform(data.begin(), data.end(), transformed_data.begin(), [](int x){ return x * 2; });

  // Intentionally introduce an off-by-one error
  for (size_t i = 0; i <= data.size(); ++i) {
    std::cout << transformed_data[i] << "" "";
  }
  std::cout << std::endl;
  return 0;
}",for (size_t i = 0; i <= data.size(); ++i)
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string best_student;
    int best_score = -1; // Initialize with a value lower than any possible score

    for (auto const& [student, score] : scores) {
        if (score > best_score) {
            best_score = score;
            best_student = student;
        }
    }

    std::cout << ""Best student: "" << best_student << "" with score: "" << best_score << std::endl;
    return 0;
}",int best_score = -1;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    for (int number : numbers) {
        if (number % 2 == 0)
            even_numbers.push_back(number);
    }

    int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);

    // Corrected: Check if even_numbers is empty before calculating the average
    if (even_numbers.size() > 0) {
        double average = static_cast<double>(sum) / even_numbers.size();
        std::cout << ""Average of even numbers: "" << average << std::endl;
    } else {
        std::cout << ""No even numbers found."" << std::endl;
    }
    
    return 0;
}","    int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);"
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::fstream file(""data.txt"", std::ios::out);
    if (file.is_open()) {
        std::string line = ""This is a test line"";
        file << line << std::endl;
        file.close();
    } else {
        std::cerr << ""Unable to open file!"" << std::endl;
        return 1;
    }

    std::fstream infile(""data.txt"");
    std::string readLine;
    if (infile.is_open()) {
        while (std::getline(infile, readLine)) {
            std::cout << readLine << std::endl;
        }
        infile.close();
    } else {
        std::cerr << ""Unable to open input file!"" << std::endl;
        return 1;
    }
    
    return 0;
}",std::string readLine;
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  std::vector<int> even_numbers;

  std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(even_numbers), [](int n){ return n % 2 == 1; });

  int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);
  
  // Output the sum
  std::cout << ""Sum of odd numbers: "" << sum << std::endl;
  return 0;
}",[](int n){ return n % 2 == 1; }
"#include <iostream>
#include <string>

int main() {
  std::string message = ""Hello, world!"";
  std::string upperMessage = message;

  for (char &c : upperMessage) {
    if (c >= 'a' && c <= 'z') {
      c = c - 1;  // Incorrect offset for uppercase conversion
    }
  }

  std::cout << upperMessage << std::endl;
  return 0;
}",c = c - 1;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    // Incorrectly calculate circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <queue>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<int> nums = {5, 2, 8, 1, 9, 4};
    sort(nums.begin(), nums.end());
    
    int sum = 0;
    for (int i = 0; i <= nums.size(); ++i) {  // Fault: loop includes nums.size()
        sum += nums[i];
    }
    
    cout << ""Sum: "" << sum << endl;
    
    return 0;
}",i <= nums.size()
"#include <string>
#include <sstream>
#include <vector>

std::string format_vector(const std::vector<int>& data) {
    std::stringstream ss;
    ss << ""["";
    for (size_t i = 0; i < data.size(); ++i) {
        ss << data[i];
        if (i < data.size() - 1) {
            ss << "", "";
        }
    }
    ss << ""]"";
    return ss.str();
}

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::string formatted_string = format_vector(numbers);
    std::cout << ""Formatted vector: "" << formatted_string << std::endl;
    
    std::vector<int> empty_vector;
    std::string formatted_empty = format_vector(empty_vector);
    std::cout << ""Formatted empty vector: "" << formatted_empty << std::endl;
    return 0;
}",if (i < data.size() - 1) {
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""The area of a circle with radius "" << radius << "" is approximately: "" << area << std::endl;
    
    // Incorrectly calculates circumference
    double circumference = 2 * M_PI * radius;
    
    std::cout << ""The circumference of a circle with radius "" << radius << "" is approximately: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <random>
#include <iostream>
#include <tuple>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int total = 0;
    int count = 0;

    while (count < 10) {
        int randomNumber = distrib(gen);
        total += randomNumber;
        count++;
    }

    double average = total / count; // Potential integer division
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = total / count;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""cherry""] = 7;

    int total = 0;
    for (auto const& [key, val] : counts) {
        total += val;
    }

    std::cout << ""Total fruit count: "" << total << std::endl;
    
    if (counts.find(""grape"") != counts.end()) {
        std::cout << ""Grape count: "" << counts[""grape""] << std::endl;
    } else {
        std::cout << ""Grape count: 0"" << std::endl;
    }

    return 0;
}","if (counts.find(""grape"") != counts.end())"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <fstream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    std::string line;
    int sum = 0;

    if (inputFile.is_open()) {
        while (std::getline(inputFile, line)) {
            int num = std::stoi(line); // Potential exception if line is not a valid integer
            sum += num;
        }
        inputFile.close();
    } else {
        std::cerr << ""Unable to open file\n"";
        return 1;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int num = std::stoi(line);
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target value
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    //incorrectly increment the iterator after checking if the target is found
    it++;
    if (it != numbers.end()) {
        std::cout << ""Next element is: "" << *it << std::endl;
    } else {
        std::cout << ""No next element."" << std::endl;
    }
    return 0;
}",it++;
"#include <iomanip> 
#include <complex> 

int main() {
    std::complex<double> z(1.0, 1.0); 
    double angle = atan2(z.imag(), z.real());
    std::cout << std::fixed << std::setprecision(10) << angle << std::endl; 
    return 0;
}","double angle = atan2(z.imag(), z.real());"
"#include <ctime>
#include <numeric>

int main() {
    std::srand(std::time(nullptr));
    int arr[5] = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= 5; ++i) {
        sum += arr[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= 5; ++i)
"#include <iostream>
#include <limits>

int main() {
    long long max_val = std::numeric_limits<long long>::max();
    long long num1 = max_val - 5;
    long long num2 = 10;
    long long product = num1 * num2;
    std::cout << ""Product: "" << product << std::endl;
    return 0;
}",long long product = num1 * num2;
"#include <array>
#include <numeric>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <string>
#include <sstream>

int main() {
    std::string input = ""12.34"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cout << ""Conversion failed!"" << std::endl;
        return 1;
    }
    std::cout << ""Number: "" << num << std::endl;
    std::cout << ""Squared: "" << num * num << std::endl; // Potential issue - using a double directly in an integer context implicitly
    return 0;
}","std::cout << ""Squared: "" << num * num << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""The area of the circle is: "" << area << std::endl;
    double circumference = 2 * 3.14159 * radius;
    std::cout << ""The circumference of the circle is: "" << circumference << std::endl;
    double perimeter = 2 * radius + 2 * radius;
    std::cout << ""The perimeter of the circle is: "" << perimeter << std::endl;
    return 0;
}",double perimeter = 2 * radius + 2 * radius;
"#include <queue>
#include <iostream>

int main() {
    std::priority_queue<int> pq;
    pq.push(5);
    pq.push(2);
    pq.push(8);
    pq.push(1);

    std::cout << ""Top element: "" << pq.top() << std::endl;

    while (!pq.empty()) {
        std::cout << pq.top() << "" "";
        pq.pop();
    }
    std::cout << std::endl;
    return 0;
}","std::cout << ""Top element: "" << pq.top() << std::endl;"
"#include <random>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average of the first five numbers only.
    double sum = 0.0;
    for (int i = 0; i < 5; ++i) {
        sum += numbers[i];
    }

    double average = sum / 5.0;
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = sum / 5.0;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <map>
#include <string>
#include <iostream>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 1;
    counts[""banana""] = 2;
    counts[""cherry""] = 3;

    std::string fruit = ""grape"";
    if (counts.find(fruit) == counts.end()) {
        std::cout << ""Fruit not found: "" << fruit << std::endl;
    }
    std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl; // Accessing non-existent key
    return 0;
}","std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::vector<int> sorted_numbers = numbers;
    std::sort(sorted_numbers.begin(), sorted_numbers.end());

    int sum = 0;
    for (size_t i = 0; i < numbers.size(); ++i) {
        sum += sorted_numbers[i];
    }

    std::cout << ""Sum of sorted numbers: "" << sum << std::endl;
    return 0;
}",sum += sorted_numbers[i];
"#include <fstream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ofstream outfile(filename);

    if (!outfile.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    for (int i = 0; i < 10; ++i) {
        outfile << i * 2 << std::endl; 
    }

    outfile.close();

    std::ifstream infile(filename);
    if (!infile.is_open()) {
        std::cerr << ""Error opening file for reading!"" << std::endl;
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(infile, line)) {
        sum += std::stoi(line);
    }

    infile.close();

    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}",int sum = 0;
"#include <numeric>
#include <functional>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);  // Initial complex number
    std::function<std::complex<double>(std::complex<double>)> f = [&](std::complex<double> c) { return c * c + 1.0; };

    std::complex<double> result = z;  // Initialize result
    for (int i = 0; i < 5; ++i) {
        result = f(result);  // Iterate the function
    }

    // Incorrectly printing the real part only. Should print both real and imaginary parts
    std::cout << ""Result (real part only): "" << result.real() << std::endl; 

    return 0;
}","std::cout << ""Result (real part only): "" << result.real() << std::endl;"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <ctime>
#include <iomanip>

int main() {
    std::time_t now = std::time(nullptr);
    std::tm* ltm = std::localtime(&now);

    int year = 1900 + ltm->tm_year; // Incorrect offset for tm_year
    int month = 1 + ltm->tm_mon;
    int day = ltm->tm_mday;

    std::cout << ""Current date: "" << year << ""-"" << std::setw(2) << std::setfill('0') << month << ""-"" << std::setw(2) << std::setfill('0') << day << std::endl;

    return 0;
}",int year = 1900 + ltm->tm_year;
"#include <string>
#include <sstream>
#include <iostream>

int main() {
  std::string input = ""123.45"";
  std::stringstream ss(input);
  double number;
  ss >> number;
  if (ss.fail()) {
    std::cout << ""Conversion failed!"" << std::endl;
    return 1;
  }
  std::cout << ""Number: "" << number << std::endl;

  // Convert the double back to a string, truncating the decimal part.
  std::stringstream output;
  output << (int)number;  // Explicit cast to int truncates
  std::string truncated_string = output.str();
  std::cout << ""Truncated string: "" << truncated_string << std::endl;

  return 0;
}",output << (int)number;
"#include <complex>
#include <iostream>

int main() {
    std::complex<double> z(1.0, 1.0); 
    std::complex<double> w = z * z; 
    
    if (w.real() == 2.0 && w.imag() == 0.0) {
        std::cout << ""Assertion passed!"" << std::endl;
    } else {
        std::cout << ""Assertion failed!"" << std::endl;
    }
    
    return 0;
}",if (w.real() == 2.0 && w.imag() == 0.0)
"#include <unordered_map>
#include <string>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 2;

    std::string fruit = ""grape"";
    if (counts.find(fruit) != counts.end()) {
        std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;
    } else {
        std::cout << ""Count of "" << fruit << "": 0"" << std::endl;
    }
    return 0;
}","std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;"
"#include <queue>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::priority_queue<int> pq(data.begin(), data.end());
    std::vector<int> sorted_data;

    while (!pq.empty()) {
        sorted_data.push_back(pq.top());
        pq.pop();
    }
    
    std::reverse(sorted_data.begin(), sorted_data.end());

    // Incorrect loop condition - should iterate up to sorted_data.size() - 1
    for (int i = 0; i < sorted_data.size(); ++i) {
      std::cout << sorted_data[i] << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}",for (int i = 0; i < sorted_data.size(); ++i)
"#include <vector>
#include <cmath>

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    double sum = 0.0;
    for (double x : data) {
        sum += sqrt(x);
    }
    double mean = sum / data.size();
    std::vector<double> squared_diffs;
    for (double x : data) {
        squared_diffs.push_back(pow(x - mean, 2.0));
    }
    double variance = 0.0;
    for (double diff : squared_diffs) {
        variance += diff;
    }
    double std_dev = sqrt(variance / (data.size() - 1));
    return 0;
}",double std_dev = sqrt(variance / (data.size() - 1));
"#include <cmath>
#include <iomanip>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;

    std::cout << std::fixed << std::setprecision(2) << ""The circumference of the circle is: "" << circumference << std::endl;

    double area = M_PI * radius * radius;
    std::cout << std::fixed << std::setprecision(2) << ""The area of the circle is: "" << area << std::endl;

    // Incorrectly calculating diameter
    double diameter = radius + radius;
    std::cout << std::fixed << std::setprecision(2) << ""The diameter of the circle is: "" << diameter << std::endl;

    return 0;
}",double diameter = radius + radius;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> sorted_data = data;

    std::sort(sorted_data.begin(), sorted_data.begin() + data.size() - 1); // Fault: Sorting only up to the second-to-last element

    for (int i = 0; i < sorted_data.size(); ++i) {
        std::cout << sorted_data[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(sorted_data.begin(), sorted_data.begin() + data.size() - 1);"
"#include <fstream>
#include <sstream>
#include <iomanip>

int main() {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << 3.14159;
    std::string formatted_value = ss.str();

    std::ofstream outfile(""output.txt"");
    if (outfile.is_open()) {
        outfile << formatted_value << std::endl;
        outfile.close();
    } else {
        std::cerr << ""Unable to open file for writing."" << std::endl;
        return 1;
    }

    // Read the value from the file and parse it as an integer.
    std::ifstream infile(""output.txt"");
    std::string line;
    if (infile.is_open()) {
        std::getline(infile, line);
        int parsed_value = std::stoi(line); // Fault: trying to convert a string representation of float to integer
        std::cout << ""Parsed integer value: "" << parsed_value << std::endl;
        infile.close();
    } else {
        std::cerr << ""Unable to open file for reading."" << std::endl;
        return 1;
    }

    return 0;
}",int parsed_value = std::stoi(line);
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;

  for (size_t i = 0; i <= data.size(); ++i) { // Fault: Loop iterates one element too far
    sum += data[i];
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <random>
#include <iostream>
#include <limits>

int main() {
  std::random_device rd;
  std::mt19937 gen(rd());
  std::uniform_int_distribution<> distrib(0, std::numeric_limits<int>::max());

  int random_num = distrib(gen);
  int shifted_num = random_num >> 1; // Intended to divide by 2, but potential overflow.
  std::cout << ""Random Number: "" << random_num << std::endl;
  std::cout << ""Shifted Number: "" << shifted_num << std::endl;

  if (shifted_num > random_num) {
    std::cout << ""Error: Shifted number is greater than the original!"" << std::endl;
  } else {
    std::cout << ""Shifted number is correctly smaller."" << std::endl;
  }

  return 0;
}",int shifted_num = random_num >> 1;
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message; // missing flush
    std::cout << ""This may not appear immediately.\n"";
    return 0;
}",std::cout << message;
"#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << ""Formatted: "" << num << ""\n"";
    return ss.str();
}

int main() {
    double pi = 3.14159;
    std::string formatted_pi = format_number(pi);
    std::cout << formatted_pi << std::endl;

    double e = 2.71828;
    std::string formatted_e = format_number(e);
    std::cout << formatted_e << std::endl;

    double large_number = 1e12;
    std::string formatted_large = format_number(large_number);
    std::cout << formatted_large << std::endl;

    return 0;
}","ss << ""Formatted: "" << num << ""\n"";"
"#include <iomanip> 
#include <sstream>

int main() {
    double pi = 3.14159;
    int radius = 5;
    double area = pi * radius * radius;
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << area; 
    double formattedArea = std::stod(ss.str());
    if (formattedArea > 78.00) {
        std::cout << ""Area is large: "" << formattedArea << std::endl; 
    } else {
        std::cout << ""Area is small: "" << formattedArea << std::endl; 
    }
    return 0;
}",if (formattedArea > 78.00) {
"#include <map>
#include <string>
#include <iostream>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""cherry""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // Fault: Accessing an element that doesn't exist inserts it with default value 0
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

    std::cout << ""Total count: "" << counts.size() << std::endl;
    return 0;
}",int count = counts[fruit];
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> values = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= values.size(); ++i) {
        sum += values[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= values.size(); ++i) {
"#include <ctime>
#include <iomanip>

int main() {
    std::time_t t = std::time(0);
    std::tm* now = std::localtime(&t);
    int year = now->tm_year;
    int month = now->tm_mon;
    int day = now->tm_mday;

    // Incorrectly assuming year is always positive to avoid potential overflow
    int days_in_year = 365 * year;

    std::cout << ""Date: "" << std::setw(4) << std::setfill('0') << year << std::setw(2) << std::setfill('0') << month << std::setw(2) << std::setfill('0') << day << std::endl;
    std::cout << ""Days in year: "" << days_in_year << std::endl;
    return 0;
}",int days_in_year = 365 * year;
"#include <complex>
#include <cmath>

int main() {
    double angle = 3.14159 / 2.0; // Close to pi/2, but not exactly.
    std::complex<double> z(1.0, 0.0);
    std::complex<double> result = z * std::exp(std::complex<double>(0.0, angle));
    
    double realPart = result.real();
    double imaginaryPart = result.imag();
    
    if (std::abs(imaginaryPart) < 1e-6) {
        std::cout << ""Result is real: "" << realPart << std::endl;
    } else {
        std::cout << ""Result is complex: "" << realPart << "" + "" << imaginaryPart << ""i"" << std::endl;
    }
    
    return 0;
}",double angle = 3.14159 / 2.0;
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    // Calculate the sum of elements from index 2 to index 8 (inclusive).
    int sum = std::accumulate(data.begin() + 2, data.begin() + 7, 0);

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",data.begin() + 7
"#include <fstream>
#include <string>
#include <sstream>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    std::string line;
    double sum = 0.0;
    int count = 0;

    if (file.is_open()) {
        while (std::getline(file, line)) {
            std::stringstream ss(line);
            double num;
            if (ss >> num) {
                sum += num;
                count++;
            }
        }
        file.close();
        double average = sum / count;
        std::cout << ""Average: "" << average << std::endl;
    } else {
        std::cout << ""Unable to open file.""
    }
    return 0;
}",double average = sum / count;
"#include <array>
#include <numeric>
#include <iostream>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {  //Fault: Loop goes out of bounds
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <random> 
#include <iostream>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
            sum -= num; // Incorrectly subtract even numbers
        } else {
            sum += num;
        }
    }

    std::cout << ""The sum is: "" << sum << std::endl;
    return 0;
}",sum -= num;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    
    double circumference = 2 * 3.14159 * radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;

    double perimeter = 4 * radius; // Incorrect calculation of perimeter for a circle
    std::cout << ""Perimeter of the circle: "" << perimeter << std::endl;

    return 0;
}",double perimeter = 4 * radius;
"#include <string>
#include <tuple>

std::tuple<int, int, int> calculate_sum_product_range(int start, int end) {
    int sum = 0;
    int product = 1;
    for (int i = start; i <= end; ++i) {
        sum += i;
        product *= i;
    }
    return std::make_tuple(sum, product, sum - product);
}

int main() {
    int a = 5;
    int b = 10;
    int sum, product, diff;
    std::tie(sum, product, diff) = calculate_sum_product_range(a, b);
    std::cout << ""Sum: "" << sum << "", Product: "" << product << "", Difference: "" << diff << std::endl;
    return 0;
}",product *= i;
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    int sum = 0;
    while (!q.empty()) {
        int val = q.front();
        q.pop();
        sum += val * 2; //Fault: Should be val
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += val * 2;
"#include <unordered_map>
#include <vector>
#include <iostream>

int main() {
    std::unordered_map<int, std::vector<int>> myMap;
    myMap[1] = {10, 20, 30};
    myMap[2] = {40, 50};

    std::vector<int> allValues;
    for (auto const& [key, val] : myMap) {
        allValues.push_back(key);
        allValues.push_back(val[0]);
    }

    std::cout << ""All values: "";
    for (int value : allValues) {
        std::cout << value << "" "";
    }
    std::cout << std::endl;
    return 0;
}",allValues.push_back(val[0]);
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) { // Fault: should be i < data.size()
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <iostream>
#include <ctime>

int main() {
    std::srand(std::time(nullptr));
    int numbers[5];
    for (int i = 0; i < 5; ++i) {
        numbers[i] = std::rand() % 100;
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;

    int sum = 0;
    for (int i = 1; i <= 5; ++i) { // Fault: Should start from 0
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 1; i <= 5; ++i)
"#include <cmath>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;

    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",#include <cmath>
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return n > target;
"#include <fstream>
#include <sstream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    std::stringstream buffer;
    buffer << file.rdbuf();
    std::string file_content = buffer.str();

    int sum = 0;
    std::stringstream line_stream(file_content);
    std::string line;

    while (std::getline(line_stream, line)) {
        try {
            int num = std::stoi(line);
            sum += num;
        } catch (const std::invalid_argument& e) {
            // Ignore lines that aren't integers
        }
    }

    std::cout << ""Sum of integers in "" << filename << "": "" << sum << std::endl;
    return 0;
}","std::cout << ""Sum of integers in "" << filename << \"" : "" << sum << std::endl;"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    for (int x : data) {
        if (x % 2 == 0) {
            even_numbers.push_back(x);
        }
    }

    // Incorrectly calculating the sum of all elements (including odd numbers)
    int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);

    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}","int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <random>
#include <ctime>
#include <iostream>

int main() {
    std::srand(std::time(nullptr));
    int limit = 100;
    int count = 0;

    while (count < limit) {
        int randomNumber = std::rand() % 2; // Generates either 0 or 1
        if (randomNumber == 1) {
            count++;
        }
    }
    std::cout << ""Final count: "" << count << std::endl;
    return 0;
}","if (randomNumber == 1) {
            count++;
        }"
"#include <string>
#include <sstream>

std::string formatString(int num) {
    std::stringstream ss;
    ss << num;
    std::string str = ss.str();
    return str;
}

int main() {
    int number = 5;
    std::string formatted = formatString(number);
    
    if (formatted > ""10"") {
        std::cout << ""Number is greater than 10"" << std::endl;
    } else {
        std::cout << ""Number is not greater than 10"" << std::endl;
    }
    
    return 0;
}","if (formatted > ""10"")"
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl;
    double tax_rate = 0.075;
    double tax_amount = price * tax_rate;
    double total_cost = price + tax_amount;
    std::cout << ""Total cost: "" << std::fixed << std::setprecision(2) << total_cost << std::endl;
    return 0;
}",    double total_cost = price + tax_amount;
"#include <numeric>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    int key = 4;
    if (myMap.count(key) > 0) {
        std::cout << myMap[key] << std::endl;
    } else {
        std::cout << ""Key not found"" << std::endl;
    }
    
    std::cout << myMap[4] << std::endl; // Accessing a non-existent key without checking
    
    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <map>
#include <string>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = -5; // Negative age, illogical but compiles
    
    int total_age = 0;
    for (const auto& pair : ages) {
        total_age += pair.second;
    }
    
    std::cout << ""Total age: "" << total_age << std::endl;
    return 0;
}","ages[""Charlie""] = -5; // Negative age, illogical but compiles"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""Area of the circle: "" << area << std::endl;
    
    //Incorrectly calculating circumference using area formula.
    double circumference = sqrt(area) * 2.0;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;
    
    return 0;
}",double circumference = sqrt(area) * 2.0;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(data.begin(), data.end(), std::back_inserter(result), [target](int x){ return x > target; });

    for (int val : result) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return x > target;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; });

    std::cout << ""Sorted in descending order: "";
    for (int i = 0; i <= numbers.size(); ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  
  // Intended to calculate the sum of squares
  int sum = 0;
  for (int i = 0; i < numbers.size(); ++i) {
      sum += numbers[i] * numbers[i];
  }
  
  // Incorrectly print the number of elements in the vector instead of the sum of squares
  std::cout << numbers.size() << std::endl;
  
  return 0;
}",std::cout << numbers.size() << std::endl;
"#include <random> #include <chrono> #include <iostream>

int main() {
    std::chrono::system_clock::time_point seed = std::chrono::system_clock::now();
    std::mt19937 generator(seed.time_since_epoch().count());
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int number = distribution(generator);
        if (number % 2 == 0) {
            sum -= number; // Incorrect: should be += number for even numbers
        } else {
            sum += number;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= number;
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""12.34"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cerr << ""Conversion failed!\n"";
        return 1;
    }

    double result = num * 2.0;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",if (ss.fail())
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of circle with radius "" << radius << "" is: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <string>

int main() {
  std::string text = ""Hello, world!"";
  size_t len = text.length();
  std::string reversed_text = """";

  for (size_t i = 0; i < len; ++i) {
    reversed_text += text[len - i - 1]; // Incorrect index access
  }

  std::cout << ""Original: "" << text << std::endl;
  std::cout << ""Reversed: "" << reversed_text << std::endl;
  return 0;
}",reversed_text += text[len - i - 1];
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << ""Price: "" << std::fixed << std::setprecision(1) << price << std::endl;
    double tax_rate = 0.08;
    double tax_amount = price * tax_rate;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << tax_amount << std::endl;
    double total_cost = price + tax_amount;
    std::cout << ""Total: "" << std::fixed << std::setprecision(2) << total_cost << std::endl;
    return 0;
}","std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << tax_amount << std::endl;"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int davidScore = scores[name]; // Intializes to 0 because David isn't in the map
    std::cout << ""David's score: "" << davidScore << std::endl;

    return 0;
}",int davidScore = scores[name];
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area != expected_area) {
        std::cout << ""Area calculated: "" << area << std::endl;
        std::cout << ""Expected area: "" << expected_area << std::endl;
        std::cout << ""Test failed!"" << std::endl;
    } else {
        std::cout << ""Area calculated: "" << area << std::endl;
        std::cout << ""Test passed!"" << std::endl;
    }
    return 0;
}","if (area != expected_area) {
        std::cout << ""Area calculated: "" << area << std::endl;
        std::cout << ""Expected area: "" << expected_area << std::endl;
        std::cout << ""Test failed!"" << std::endl;
    } else {
        std::cout << ""Area calculated: "" << area << std::endl;
        std::cout << ""Test passed!"" << std::endl;
    }"
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

    std::cout << ""Numbers greater than "" << target << "":"";
    for (int i = 0; i < result.size(); ++i) {
        std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
    return 0;
}",n > target
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting only up to n-1, leaving the last element unsorted.

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: sorts only up to n-1, leaving last element unsorted

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the average of the numbers
    double sum = 0;
    for (int number : numbers) {
        sum += number;
    }
    double average = sum / numbers.size();
    
    // Find the largest number that is smaller than the average
    int largestSmaller = -1;
    for (int number : numbers) {
        if (number < average) {
            largestSmaller = std::max(largestSmaller, number);
        }
    }

    std::cout << ""Largest number smaller than the average: "" << largestSmaller << std::endl;
    
    return 0;
}","largestSmaller = std::max(largestSmaller, number);"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: i <= numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""hello world"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the first element greater than the target
    auto it = std::upper_bound(numbers.begin(), numbers.end(), target);

    if (it != numbers.begin()) {
        // The element just before 'it' is the largest element less than or equal to the target
        auto prev_it = std::prev(it);
        std::cout << ""Element closest to "" << target << "" is: "" << *prev_it << std::endl;
    } else {
        std::cout << ""No element found less than or equal to "" << target << std::endl;
    }
    return 0;
}","auto it = std::upper_bound(numbers.begin(), numbers.end(), target);"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    // Intent: Calculate circumference using 2 * pi * radius
    double circumference = 2 * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * radius;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;

    // Incorrectly calculate circumference
    double circumference = 2 * M_PI * radius - 1.0;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;

    return 0;
}",double circumference = 2 * M_PI * radius - 1.0;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    // Incorrect calculation of diameter.  Should be 2 * radius
    double diameter = radius;
    std::cout << ""Diameter: "" << diameter << std::endl;

    return 0;
}",double diameter = radius;
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Incorrectly calculate the sum of squares
    int sum_of_squares = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum_of_squares += numbers[i] * numbers[i];
    }
    
    // Calculate the expected sum of squares
    long long expected_sum = 0; 
    for(int num : numbers) {
        expected_sum += (long long)num * num;
    }

    if (sum_of_squares != expected_sum) {
        std::cout << ""Error: Sum of squares mismatch!"" << std::endl;
        std::cout << ""Calculated: "" << sum_of_squares << std::endl;
        std::cout << ""Expected: "" << expected_sum << std::endl;
    } else {
        std::cout << ""Sum of squares calculated correctly."" << std::endl;
    }

    return 0;
}",sum_of_squares += numbers[i] * numbers[i];
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int score = scores[name]; // Should initialize score to 0 instead of accessing non-existent key
    std::cout << ""David's score: "" << score << std::endl;

    return 0;
}",int score = scores[name];
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (std::abs(area - expected_area) > 0.0001) {
    std::cout << ""Area calculation is incorrect!\n"";
  } else {
    std::cout << ""Area calculation is correct!\n"";
  }

  // Introduce a subtle error: using 'radius * 2' instead of 'radius * radius'
  double incorrect_area = M_PI * radius * 2;

  if (std::abs(incorrect_area - expected_area) > 0.0001) {
    std::cout << ""Incorrect area calculation is incorrect!\n"";
  } else {
    std::cout << ""Incorrect area calculation is correct!\n"";
  }

  return 0;
}",double incorrect_area = M_PI * radius * 2;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <iomanip> 
#include <sstream> 
#include <string> 

std::string format_float(double num, int precision) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(precision) << num;
    return ss.str();
}

int main() {
    double pi = 3.14159265358979323846;
    int prec = 2;
    std::string formatted_pi = format_float(pi, prec);
    std::cout << ""Formatted PI: "" << formatted_pi << std::endl;
    
    double value = 12345.6789; 
    std::string formatted_value = format_float(value, 1);  //intended to have only one decimal place
    std::cout << ""Formatted Value: "" << formatted_value << std::endl;
    return 0;
}","std::string formatted_value = format_float(value, 1);"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Loop iterates one element too far.
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int score = scores[name]; // Default constructed integer
    std::cout << ""David's score: "" << score << std::endl;

    return 0;
}",int score = scores[name];
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int score = scores[name]; // Accessing a non-existent key
    std::cout << ""Score for "" << name << "": "" << score << std::endl;
    
    return 0;
}",int score = scores[name];
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
  std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
  int target = 10;

  // Find the sum of all even numbers in the vector
  int sum = 0;
  for (int number : numbers) {
    if (number % 2 == 0) {
      sum = sum;
    }
  }

  std::cout << ""The sum of even numbers is: "" << sum << std::endl;
  return 0;
}",sum = sum;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <fstream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            sum += std::stoi(line);
        } catch (const std::invalid_argument& e) {
            // Handle non-numeric lines
            std::cerr << ""Invalid input: "" << line << std::endl;
        }
    }
    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","std::ifstream inputFile(""data.txt"");"
"#include <chrono>
#include <thread>
#include <mutex>
#include <iostream>

std::mutex mtx;

void print_message(const std::string& message) {
    std::lock_guard<std::mutex> lock(mtx);
    std::cout << message << std::endl;
}

int main() {
    std::thread t1([&]() {
        for (int i = 0; i < 5; ++i) {
            print_message(""Thread 1: "" + std::to_string(i));
            std::this_thread::sleep_for(std::chrono::milliseconds(100));
        }
    });

    std::thread t2([&]() {
        for (int i = 0; i < 5; ++i) {
            print_message(""Thread 2: "" + std::to_string(i));
            std::this_thread::sleep_for(std::chrono::milliseconds(50));
        }
    });

    t1.join();
    t2.join();

    // Simulate some work that relies on the threads finishing before proceeding.
    std::this_thread::sleep_for(std::chrono::seconds(1));

    print_message(""All threads completed."");
    return 0;
}",std::this_thread::sleep_for(std::chrono::seconds(1));
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};

  // Calculate the sum of the elements.
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

  // Incorrectly subtract 1 from the sum.
  int result = sum - 1;

  std::cout << ""The result is: "" << result << std::endl;

  return 0;
}",int result = sum - 1;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double perimeter = 2 * M_PI * radius;

    std::cout << ""Radius: "" << radius << std::endl;
    std::cout << ""Area: "" << area << std::endl;
    std::cout << ""Perimeter: "" << perimeter * 0.5 << std::endl; // Fault: Multiplying perimeter by 0.5

    return 0;
}","std::cout << ""Perimeter: "" << perimeter * 0.5 << std::endl;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.begin() + 3, 0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",data.begin() + 3
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target value
    auto it = std::find(data.begin(), data.end(), target);

    if (it != data.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrectly assume target is present after not finding it.
    data[0] = target; //Faulty line

    std::cout << ""First element is now: "" << data[0] << std::endl;
    return 0;
}",data[0] = target;
"#include <random>
#include <iostream>
#include <limits>

int main() {
    std::random_device rd;  
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100); 

    int secretNumber = distrib(gen);
    int guess = 50; 

    int attempts = 0;

    while (attempts < 7) { 
        attempts++;
        if (guess > secretNumber) { 
            std::cout << ""Too high!\n"";
            guess = secretNumber / 2; //Fault: Integer division when a floating-point calculation is needed
        } else if (guess < secretNumber) { 
            std::cout << ""Too low!\n"";
            guess = secretNumber * 2; 
        } else { 
            std::cout << ""You guessed it in "" << attempts << "" attempts!\n"";
            return 0; 
        } 
    }

    std::cout << ""You ran out of attempts. The number was "" << secretNumber << ""\n"";
    return 0;
}",guess = secretNumber / 2;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World! This is a test."";
    std::string pattern = ""test"";

    size_t pos = text.find(pattern, 10); // Start searching from index 10

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting only up to n-1, resulting in an out-of-bounds read

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl; //intended to print 'Hello' but will print up to newline.
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, world!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());
  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }
  return 0;
}",if (text == reversed_text)
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        if (it->first == 2) {
            it = myMap.erase(it);
        }
    }

    for (auto const& [key, val] : myMap) {
        std::cout << key << "": "" << val << std::endl;
    }

    return 0;
}",it = myMap.erase(it);
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""Area of circle with radius "" << radius << "" is: "" << area << std::endl;
    
    double expected_area = 78.53981633974483;
    
    if (area == expected_area) {
        std::cout << ""Area calculation is correct!"" << std::endl;
    } else {
        std::cout << ""Area calculation is incorrect."" << std::endl;
    }
    return 0;
}",if (area == expected_area)
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());

    if (str == reversed_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == reversed_str)
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    // Incorrect Calculation: Circumference should be 2 * PI * radius
    circumference = M_PI + radius;
    std::cout << ""Incorrect Circumference: "" << circumference << std::endl;

    return 0;
}",circumference = M_PI + radius;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int target = 11;

    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    return 0;
}",int target = 11;
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    int sum = 0;
    for (int i = 0; i < 5; ++i) {
        int num = distrib(gen);
        sum += num;
    }

    // Incorrectly averages by 'i' instead of 5.
    double average = static_cast<double>(sum) / i;

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = static_cast<double>(sum) / i;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string substring = ""world"";

    size_t pos = text.find(substring, 5); // Start searching from position 5

    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }

    return 0;
}","text.find(substring, 5)"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) { // Fault: loop condition
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line); //potential fault here
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << line << std::endl;
        } catch (const std::out_of_range& e) {
            std::cerr << ""Out of range: "" << line << std::endl;
        }
    }

    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int num = std::stoi(line);
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
    }

    return 0;
}","std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;"
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (const auto& pair : myMap) {
        std::cout << pair.first << "": "" << pair.second << std::endl;
    }

    std::cout << myMap[4] << std::endl; // Accessing a non-existent key

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size(); // Integer division
    std::cout << ""Average score: "" << average_score << std::endl;

    return 0;
}",double average_score = total_score / scores.size();
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string pattern = ""world!"";

    size_t pos = text.find(pattern, 10); // Start searching from index 10

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;

  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    std::sort(nums.begin(), nums.end(), std::greater<int>());
    
    if (nums[0] > nums[1]) {
        std::cout << ""Largest is: "" << nums[0] << std::endl;
    } else {
        std::cout << ""Largest is: "" << nums[1] << std::endl;
    }

    return 0;
}","else {
        std::cout << ""Largest is: "" << nums[1] << std::endl;
    }"
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, World!\n"";
    text.erase(text.size() - 1);
    std::cout << text << std::endl;
    return 0;
}",text.erase(text.size() - 1);
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: i <= numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    double expected_area = M_PI * radius * radius; // Uses M_PI from cmath
    
    if (area == expected_area) {
        std::cout << ""Area calculation is correct."" << std::endl;
    } else {
        std::cout << ""Area calculation is incorrect. Expected: "" << expected_area << "" , Calculated: "" << area << std::endl;
    }
    
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (int i = 1; i <= 3; ++i) {
        std::cout << myMap[i] << std::endl;
    }
    
    std::cout << myMap[4] << std::endl; // Accessing non-existent key
    
    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    size_t pos = text.find(""world"", 7); // Start searching from index 7
    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }
    return 0;
}","text.find(""world"", 7)"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <random> 
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    std::sort(numbers.begin(), numbers.end(), std::greater<int>());

    std::cout << ""Sorted numbers: "";
    for (int i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << (i == numbers.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: loop goes out of bounds
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;

    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    size_t len = message.length();
    std::string reversed_message = """";

    for (size_t i = 0; i < len; ++i) {
        reversed_message = message[i] + reversed_message;
    }

    std::cout << ""Original: "" << message << std::endl;
    std::cout << ""Reversed: "" << reversed_message << std::endl;
    return 0;
}",reversed_message = message[i] + reversed_message;
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double value;
    ss >> value;
    if (ss.fail()) {
        std::cerr << ""Invalid input format.\n"";
        return 1;
    }
    
    double result = value * 2;
    std::cout << ""Result: "" << result << std::endl; // Should print 246.9
    return 0;
}","std::cout << ""Result: "" << result << std::endl;"
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: i <= numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());
    std::cout << ""Sorted in descending order: "";
    for (size_t i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << (i == numbers.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
    
    int sum = 0;
    for (int num : numbers) {
        sum += num;
    }
    
    std::cout << ""Sum of elements: "" << sum << std::endl;
    
    // Incorrect: Using 'numbers.size()' instead of 'numbers.length()' -- undefined behavior
    // int length = numbers.length();
    
    return 0;
}",int length = numbers.length();
"#include <fstream>
#include <string>

int main() {
    std::ofstream outfile(""data.txt"");
    if (outfile.is_open()) {
        std::string line = ""This is a test line."";
        outfile << line << std::endl;
        std::string newline = ""\n""; //intended to add a newline
        outfile << newline;
        outfile.close();
    } else {
        std::cerr << ""Unable to open file for writing.\n"";
        return 1;
    }
    return 0;
}","std::string newline = ""\n"";\n        outfile << newline;"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> squared_numbers;

    for (int num : numbers) {
        squared_numbers.push_back(num * num);
    }

    // Calculate the sum of squared numbers.  Bug: uses i instead of squared_numbers.size()
    int sum = std::accumulate(squared_numbers.begin(), squared_numbers.begin() + i, 0);

    std::cout << ""Sum of squared numbers: "" << sum << std::endl;
    return 0;
}",squared_numbers.begin() + i
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int target = 11;

    std::vector<int> results;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(results), [target](int n){ return n > target; });

    std::cout << ""Numbers greater than "" << target << "":"";
    for (int result : results) {
        std::cout << result << "" "";
    }
    std::cout << std::endl;

    return 0;
}",return n > target;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""The area of the circle is: "" << area << std::endl;
    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    return 0;
}",double expected_area = 78.5398;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    // Incorrect calculation of diameter
    double diameter = circumference / M_PI;
    std::cout << ""Diameter: "" << diameter << std::endl;
    
    return 0;
}",double diameter = circumference / M_PI;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    double expected_circumference = 31.4159;
    if (circumference != expected_circumference) {
      std::cout << ""Circumference is incorrect."" << std::endl;
    }

    return 0;
}",if (circumference != expected_circumference)
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!\n"";
  std::string upperText = text;
  std::transform(upperText.begin(), upperText.end(), upperText.begin(), ::toupper);
  std::cout << upperText << std::endl;
  return 0;
}","std::transform(upperText.begin(), upperText.end(), upperText.begin(), ::toupper);"
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4};
  int target = 7;

  std::vector<int> result;
  for (int x : data) {
    if (x < target) {
      result.push_back(x);
    }
  }

  if (result.empty()) {
    std::cout << ""No values less than target found."" << std::endl;
  } else {
    std::cout << ""Values less than target: "";
    for (size_t i = 0; i < result.size(); ++i) {
      std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
  }

  return 0;
}",if (x < target) {
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();
    for (int i = 0; i <= len; ++i) {
        std::cout << text[i];
    }
    std::cout << std::endl;
    return 0;
}",i <= len
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    // Iterate through the map and print the values
    for (const auto& pair : myMap) {
        std::cout << pair.first << "": "" << pair.second << std::endl;
    }

    // Attempt to access a non-existent key
    std::cout << ""Key 4: "" << myMap[4] << std::endl; //Potential issue, default value may not be what's intended

    return 0;
}","std::cout << ""Key 4: "" << myMap[4] << std::endl;"
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; }); // Incorrect sorting order
    
    std::cout << ""Sorted numbers: "";
    for (int number : numbers) {
        std::cout << number << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}","[](int a, int b) { return a > b; }"
"#include <fstream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    if (file.is_open()) {
        std::string line;
        int sum = 0;
        while (std::getline(file, line)) {
            sum += std::stoi(line);
        }
        file.close();
        std::cout << ""Sum: "" << sum << std::endl;
    } else {
        std::cerr << ""Unable to open file!"" << std::endl;
        return 1;
    }
    return 0;
}",sum += std::stoi(line);
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;
    
    for (int number : numbers) {
        if (number % 2 == 1) {
            even_numbers.push_back(number);
        }
    }

    int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);
    
    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}",if (number % 2 == 1)
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl; // Intent: Display with 2 decimal places
    std::cout << std::fixed << std::setprecision(3) << price << std::endl; // Intent: Display with 3 decimal places
    std::cout << std::fixed << std::setprecision(1) << price << std::endl; // Intent: Display with 1 decimal place
    std::cout << std::fixed << std::setprecision(0) << price << std::endl; // Intent: Display no decimal places

    // Incorrect formatting manipulation after the prior uses. This won't change the prior displayed values.
    std::cout << std::fixed << std::setprecision(4) << price << std::endl; 

    return 0;
}",std::cout << std::fixed << std::setprecision(4) << price << std::endl;
"#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    // Calculate circumference
    double circumference = 2 * M_PI * radius;

    // Incorrect: Integer division truncates the result
    int integer_circumference = (int)circumference;
    std::cout << ""Integer Circumference: "" << integer_circumference << std::endl;

    return 0;
}",int integer_circumference = (int)circumference;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string pattern = ""test"";

    size_t pos = text.find(pattern, 10); //Starts search at index 10
    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n >= target; });

    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",return n >= target; 
"#include <deque>
#include <iostream>
#include <algorithm>

int main() {
    std::deque<int> numbers = {1, 2, 3, 4, 5};
    
    // Find the index of the element '3' in the deque
    auto it = std::find(numbers.begin(), numbers.end(), 3);
    size_t index = std::distance(numbers.begin(), it) - 1;

    std::cout << ""Index of 3: "" << index << std::endl;

    // Attempting to access an out-of-bounds element
    std::cout << ""Element at index: "" << numbers[index + 1] << std::endl; 

    return 0;
}",numbers[index + 1]
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int score = scores[name]; //Potential error: accessing a non-existent key
    std::cout << ""David's score: "" << score << std::endl;

    return 0;
}",int score = scores[name];
"#include <random> 
#include <iostream>
#include <vector>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Accessing out-of-bounds index
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <chrono>
#include <thread>
#include <iostream>

int main() {
    std::cout << ""Starting..."";
    std::this_thread::sleep_for(std::chrono::seconds(2));
    std::cout << std::endl;

    long long sum = 0;
    for (int i = 0; i < 10; ++i) {
        sum += i;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    std::this_thread::sleep_for(std::chrono::seconds(1));
    std::cout << ""Done!\n"";
    return 0;
}","std::cout << ""Done!\n"";"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::sort(data.begin(), data.end(), std::greater<int>());
    std::vector<int> result;
    for (int i = 0; i < data.size(); ++i) {
        if (i % 2 == 0) {
            result.push_back(data[i]);
        }
    }
    std::vector<int> odd_indices;
    for (int i = 0; i < data.size(); ++i) {
        if (i % 2 != 0) {
            odd_indices.push_back(data[i]);
        }
    }
    result.insert(result.end(), odd_indices.begin(), odd_indices.end());

    for (int val : result) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;
    return 0;
}","result.insert(result.end(), odd_indices.begin(), odd_indices.end());"
"#include <fstream>
#include <iomanip>

int main() {
    std::ofstream outputFile(""data.txt"");
    if (outputFile.is_open()) {
        double value = 3.14159;
        outputFile << std::fixed << std::setprecision(2) << value << std::endl; // Incorrect precision specification
        outputFile.close();
    } else {
        std::cerr << ""Unable to open file!"" << std::endl;
        return 1;
    }
    return 0;
}",outputFile << std::fixed << std::setprecision(2) << value << std::endl;
"#include <iostream>
#include <tuple>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""hello"");

    int integer_value = std::get<0>(data);
    double double_value = std::get<1>(data);
    std::string string_value = std::get<2>(data);

    std::cout << ""Integer: "" << integer_value << std::endl;
    std::cout << ""Double: "" << double_value << std::endl;
    std::cout << ""String: "" << string_value << std::endl;

    //Incorrect use of std::get with incorrect index
    std::cout << ""Incorrect value: "" << std::get<5>(data) << std::endl; 
    return 0;
}","std::cout << ""Incorrect value: "" << std::get<5>(data) << std::endl;"
"#include <numeric>
#include <tuple>

int main() {
  std::tuple<int, int, int> myTuple = std::make_tuple(1, 2, 3);
  int sum = std::accumulate(std::get<std::tuple_element<0, std::tuple_info<decltype(myTuple)>>>(&myTuple), 
                           std::get<std::tuple_element<2, std::tuple_info<decltype(myTuple)>>>(&myTuple), 0);
  
  //The correct index is 1, not 0
  
  return 0;
}","std::get<std::tuple_element<0, std::tuple_info<decltype(myTuple)>>>(&myTuple)"
"#include <cmath>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    // Calculate circumference
    double circumference = 2 * M_PI * radius;
    
    // Introduce an integer division error
    circumference = circumference / 2; 
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;
    
    return 0;
}",circumference = circumference / 2;
"#include <string>
#include <sstream>
#include <iomanip>

int main() {
    std::string input = ""12.34"";
    std::stringstream ss(input);
    double value;
    ss >> value;
    if (ss.fail()) {
        std::cerr << ""Conversion failed!"" << std::endl;
        return 1;
    }

    double multiplier = 1.5;
    double result = value * multiplier;
    std::cout << std::fixed << std::setprecision(2) << result << std::endl;
    return 0;
}",    double multiplier = 1.5;
"#include <algorithm>
#include <array>

int main() {
    std::array<int, 5> arr = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= arr.size(); ++i) {
        sum += arr[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= arr.size()
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << ""Price: "" << std::fixed << std::setprecision(2) << price << std::endl;

    double taxRate = 0.085;
    double taxAmount = price * taxRate;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;

    double totalCost = price + taxAmount;
    std::cout << ""Total: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;

    // Incorrectly rounding totalCost to integer before printing.
    std::cout << ""Total (Rounded): "" << (int)totalCost << std::endl;
    return 0;
}","std::cout << ""Total (Rounded): "" << (int)totalCost << std::endl;"
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (const auto& pair : scores) {
        total_score += pair.first; // Incorrect: Summing the keys (strings) instead of values (integers)
    }

    std::cout << ""Total Score: "" << total_score << std::endl;
    return 0;
}",total_score += pair.first;
"#include <random>
#include <iostream>
#include <vector>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Loop goes one element too far
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> nums = {5, 2, 8, 1, 9, 4};
  int target = 10;

  // Find the sum of pairs that equal the target
  int count = 0;
  for (size_t i = 0; i < nums.size(); ++i) {
    for (size_t j = i + 1; j < nums.size(); ++j) {
      if (nums[i] + nums[j] == target) {
        count++;
      }
    }
  }

  std::cout << ""Number of pairs summing to "" << target << "": "" << count << std::endl;
  return 0;
}",if (nums[i] + nums[j] == target) {
"#include <ctime>
#include <iomanip>

int main() {
    std::time_t timer;
    std::tm* tm_info;

    time(&timer);
    tm_info = std::localtime(&timer);

    // Incorrect format specifier. Should be '%Y-%m-%d'.
    std::cout << ""Current date: "" << std::put_time(tm_info, ""%x"") << std::endl;

    return 0;
}","std::cout << ""Current date: "" << std::put_time(tm_info, ""%x"") << std::endl;"
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string best_student = ""David"";
    int best_score = 0;

    for (const auto& pair : scores) {
        if (pair.second > best_score) {
            best_score = pair.second;
            best_student = pair.first;
        }
    }

    std::cout << ""Best student: "" << best_student << "" with score "" << best_score << std::endl;
    return 0;
}","std::string best_student = ""David"";"
"#include <array>
#include <numeric>
#include <algorithm>
#include <iostream>

int main() {
    std::array<int, 5> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    std::for_each(numbers.begin(), numbers.end(), [&](int n) { sum += n; });
    std::cout << ""Sum: "" << sum << std::endl;
    
    std::array<int, 5> indices = {0, 1, 2, 3, 4};
    int product = 1;
    std::for_each(indices.begin(), indices.end(), [&](int i) { product *= numbers[i]; });
    std::cout << ""Product: "" << product << std::endl;
    
    std::array<int, 5> reversed_numbers = numbers;
    std::reverse(reversed_numbers.begin(), reversed_numbers.end());
    std::cout << ""Reversed: "";
    for (int num : reversed_numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}","std::array<int, 5> indices = {0, 1, 2, 3, 4};"
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    // Iterate and print the map
    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->second << std::endl;
    }

    //Incorrectly trying to access a nonexistent key.
    std::cout << myMap[4] << std::endl; 

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    for (int i = 0; i <= text.length(); ++i) {
        std::cout << text[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",i <= text.length()
"#include <string>
#include <vector>

int main() {
  std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie""};
  std::string longest_name;
  for (const std::string& name : names) {
    if (longest_name.length() < name.length()) {
      longest_name = name;
    }
  }
  
  if (longest_name == ""Alice"") {
    std::cout << ""Alice is the longest."" << std::endl;
  } else {
    std::cout << ""Alice is not the longest."" << std::endl;
  }

  return 0;
}","if (longest_name == ""Alice"")"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1 instead of n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    std::sort(arr, arr + n - 1); // Fault: sorts up to n-2 elements instead of n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4};
  int target = 7;

  auto it = std::find(data.begin(), data.end(), target);

  if (it == data.end()) {
    std::cout << ""Target not found."" << std::endl;
  } else {
    std::cout << ""Target found at index: "" << it - data.begin() << std::endl; //Potential off-by-one error
  }

  return 0;
}","std::cout << ""Target found at index: "" << it - data.begin() << std::endl;"
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> ages;
    ages[25] = ""Alice"";
    ages[30] = ""Bob"";
    ages[25] = ""Charlie""; // Overwrites Alice's entry

    std::cout << ages[25] << std::endl;
    return 0;
}","ages[25] = ""Charlie"";"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> values = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 1; i <= values.size(); ++i) {  // Fault: Loop condition should be i < values.size()
        sum += values[i - 1];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= values.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""The area of the circle is: "" << area << std::endl;
    
    // Incorrect calculation of circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""The circumference of the circle is: "" << circumference * 1.1 << std::endl; //Fault here: Multiplying by 1.1
    
    return 0;
}",circumference * 1.1
"#include <random>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < numbers.size(); ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average of the numbers
    double sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    double average = sum / numbers.size();

    // Find the maximum number
    int max_num = numbers[0];
    for (int i = 1; i <= numbers.size(); ++i) { // Fault: Off-by-one error
        if (numbers[i] > max_num) {
            max_num = numbers[i];
        }
    }

    std::cout << ""Average: "" << average << std::endl;
    std::cout << ""Maximum: "" << max_num << std::endl;

    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrect calculation of average: Integer division truncates.
    int average = sum / numbers.size();

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;
    
    return 0;
}",int average = sum / numbers.size();
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string."";
  std::string substring = text.substr(100); // Out of bounds access
  std::cout << substring << std::endl;
  return 0;
}",text.substr(100)
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    int sum = 0;
    for (int i = 0; i <= n; ++i) { // Fault: Loop goes one element too far
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= n
"#include <array>
#include <numeric>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    int product = 1;
    for (int num : numbers) {
        product *= num;
    }
    if (sum > product) {
        std::cout << ""Sum is greater than product"" << std::endl;
    } else {
        std::cout << ""Product is greater than or equal to sum"" << std::endl;
    }
    return 0;
}","if (sum > product) {
        std::cout << ""Sum is greater than product"" << std::endl;
    } else {
        std::cout << ""Product is greater than or equal to sum"" << std::endl;
    }"
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseWords(std::string s) {
    std::string word;
    std::string result;
    std::stringstream ss(s);

    while (ss >> word) {
        std::reverse(word.begin(), word.end());
        result += word + "" "";
    }
    if (!result.empty()) {
        result.pop_back(); // Remove trailing space
    }
    return result;
}

int main() {
    std::string input = ""the sky is blue"";
    std::string reversed = reverseWords(input);
    std::cout << reversed << std::endl;
    return 0;
}",result.pop_back();
"#include <iostream>
#include <limits>

int main() {
    long long max_val = std::numeric_limits<long long>::max();
    long long val1 = max_val - 5;
    long long val2 = max_val - 10;

    if (val1 < val2) {
        std::cout << ""val1 is smaller than val2"" << std::endl;
    } else {
        std::cout << ""val1 is not smaller than val2"" << std::endl;
    }

    return 0;
}",if (val1 < val2)
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area of the circle: "" << area << std::endl;
  double perimeter = 2 * M_PI * radius;
  std::cout << ""Perimeter of the circle: "" << perimeter << std::endl;
  double circumference = perimeter / 2.0; // Incorrect calculation
  std::cout << ""Half perimeter: "" << circumference << std::endl;
  return 0;
}",double circumference = perimeter / 2.0;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <fstream>
#include <string>
#include <algorithm>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    std::string line;
    int sum = 0;

    if (file.is_open()) {
        while (std::getline(file, line)) {
            try {
                int num = std::stoi(line);  // Potential stoi exception
                sum += num;
            } catch (const std::invalid_argument& e) {
                // Ignore lines that can't be converted to integers
                continue;
            } catch (const std::out_of_range& e) {
                // Ignore lines that are out of range
                continue;
            }
        }
        file.close();
    } else {
        std::cerr << ""Unable to open file!"" << std::endl;
        return 1;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int num = std::stoi(line);
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());

    std::string result = """";
    for (int i = 0; i < numbers.size(); ++i) {
        result += std::to_string(numbers[i]);
        if (i < numbers.size() - 1) {
            result += ' '; // Added an extra space at the end
        }
    }
    std::cout << result << std::endl;
    return 0;
}",result += ' '; // Added an extra space at the end
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Default constructor called for int: returns 0
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) == ages.end()) {
        ages[name] = 0;
    }
    std::cout << ""David's age: "" << ages[name] << std::endl;

    ages[""Alice""] = 31; //This change is not reflected in the cout
    std::cout << ""Alice's age: "" << ages[""Alice""] << std::endl;

    return 0;
}","ages[""Alice""] = 31; //This change is not reflected in the cout"
"#include <random>
#include <ctime>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distrib(gen);
        if (randomNumber % 2 == 0) {
            sum += randomNumber;
        }
    }

    std::cout << ""The sum of even numbers is: "" << sum << std::endl;
    return 0;
}","if (randomNumber % 2 == 0) {
            sum += randomNumber;
        }"
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    if (str == reversed_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == reversed_str)
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of squares of even numbers
    int sum = 0;
    for (int number : numbers) {
        if (number % 2 == 0) {
            sum += number * number;
        }
    }
    
    // Incorrectly multiplies sum by 2 instead of printing it
    std::cout << sum * 2 << std::endl;
    
    return 0;
}",std::cout << sum * 2 << std::endl;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(data.begin(), data.end(), std::back_inserter(result), [target](int x){ return x > target; });

    std::cout << ""Numbers greater than "" << target << "": "";
    for (int val : result) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::copy_if(data.begin(), data.end(), std::back_inserter(result), [target](int x){ return x > target; })"
"#include <ctime>
#include <iomanip>

int main() {
    std::time_t t = std::time(0);
    std::tm* now = std::localtime(&t);

    int year = 1900 + now->tm_year;
    int month = now->tm_mon;
    int day = now->tm_mday;

    // Incorrectly creating a date string.
    std::cout << std::setw(4) << std::setfill('0') << year << std::setw(2) << std::setfill('0') << month << std::setw(2) << std::setfill('0') << day << std::endl;
    
    return 0;
}",std::cout << std::setw(4) << std::setfill('0') << year << std::setw(2) << std::setfill('0') << month << std::setw(2) << std::setfill('0') << day << std::endl;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    if (sum > 10) {
        std::cout << ""Sum is greater than 10"" << std::endl;
    } else {
        std::cout << ""Sum is not greater than 10"" << std::endl;
    }
    
    return 0;
}",0
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    
    std::cout << ""The area of the circle is: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    
    if (circumference > 30.0) {
        std::cout << ""Circumference is large: "" << circumference << std::endl;
    } else {
        std::cout << ""Circumference is small: "" << circumference << std::endl;
    }

    return 0;
}","else {
        std::cout << ""Circumference is small: "" << circumference << std::endl;
    }"
"#include <iostream>
#include <cmath>

int main() {
    double x = 2.0;
    double y = 3.0;
    double result = std::pow(x, y);
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}","double result = std::pow(x, y);"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation correct!"" << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <map>
#include <iostream>

int main() {
  std::map<std::string, int> ages;
  ages[""Alice""] = 30;
  ages[""Bob""] = 25;
  ages[""Charlie""] = 40;

  // Incorrectly accessing age using index instead of key
  std::cout << ages[0] << std::endl; 

  return 0;
}",ages[0]
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David""};
    std::string target = ""Bob"";

    auto it = std::find(names.begin(), names.end(), target);

    if (it == names.end()) {
        std::cout << ""Target not found!\n"";
    } else {
        std::cout << ""Target found at index: "" << it - names.begin() << ""\n"";
    }

    return 0;
}","std::cout << ""Target found at index: "" << it - names.begin() << ""\n"";"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct!"" << std::endl;
    } else {
        std::cout << ""Area is incorrect. Calculated: "" << area << "", Expected: "" << expected_area << std::endl;
    }
    
    return 0;
}",if (area == expected_area)
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    int num_iterations = 5;
    int sum = 0;

    for (int i = 0; i < num_iterations; ++i) {
        int random_num = distrib(gen);
        // Incorrect comparison: should be >= to include 100
        if (random_num > 100) {
            sum += random_num;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",if (random_num > 100)
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    int product = 1;
    for (int i = 0; i < numbers.size(); ++i) {
        product *= numbers[i];
    }
    
    if (sum > product) {
        std::cout << ""Sum is greater than product."" << std::endl;
    } else {
        std::cout << ""Product is greater or equal to sum."" << std::endl;
    }
    
    return 0;
}",product *= numbers[i];
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream file(""data.txt"");
    if (file.is_open()) {
        std::string line;
        int sum = 0;
        while (std::getline(file, line)) {
            try {
                int num = std::stoi(line);
                sum += num;
            } catch (const std::invalid_argument& e) {
                std::cerr << ""Invalid input: "" << line << std::endl;
            } catch (const std::out_of_range& e) {
                std::cerr << ""Out of range: "" << line << std::endl;
            }
        }
        std::cout << ""Sum: "" << sum << std::endl;
        file.close();
    } else {
        std::cerr << ""Unable to open file""
    }
    return 0;
}","std::cerr << ""Unable to open file""
"
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) { // Fault: Loop condition
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    std::string fruit = myMap[4]; // Accessing a non-existent key
    std::cout << fruit << std::endl;

    return 0;
}",std::string fruit = myMap[4];
"#include <string>
#include <sstream>

std::string formatNumber(int num) {
    std::stringstream ss;
    ss << num;
    return ss.str();
}

int main() {
    int number = 123;
    std::string formattedNumber = formatNumber(number);
    std::string result = ""The number is: "" + formattedNumber;
    result.erase(result.begin()); // Erase the first character ('T')
    std::cout << result << std::endl;
    return 0;
}",result.erase(result.begin());
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""The area of the circle is: "" << area << std::endl;
    
    // Incorrectly calculate circumference
    double circumference = 2 * M_PI * radius - 1.0;
    
    std::cout << ""The circumference of the circle is: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius - 1.0;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;

  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 1;
    counts[""banana""] = 2;

    auto it = counts.find(""orange"");
    if (it != counts.end()) {
        std::cout << it->second << std::endl;
    } else {
        std::cout << 0 << std::endl; // Incorrect default value
    }

    return 0;
}",std::cout << 0 << std::endl;
"#include <random>
#include <chrono>
#include <limits>

int main() {
    auto seed = std::chrono::system_clock::now().time_since_epoch().count();
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distribution(generator);
        sum += randomNumber;
    }

    // Incorrectly compute average - integer division truncates
    double average = sum / 10.0;

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = sum / 10.0;
"#include <iostream>
#include <tuple>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""Hello"");
    int integer_value = std::get<0>(data);
    double double_value = std::get<1>(data);
    std::string string_value = std::get<2>(data);

    std::cout << ""Integer: "" << integer_value << std::endl;
    std::cout << ""Double: "" << double_value << std::endl;
    std::cout << ""String: "" << string_value << std::endl;

    // Attempt to multiply the string with the integer value.  This is incorrect but compiles.
    std::cout << ""String * Integer: "" << integer_value * string_value << std::endl;

    return 0;
}","std::cout << ""String * Integer: "" << integer_value * string_value << std::endl;"
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> myTuple = std::make_tuple(10, 3.14, ""Hello"");
    int intValue = std::get<0>(myTuple);
    double doubleValue = std::get<1>(myTuple);
    std::string stringValue = std::get<2>(myTuple);

    std::cout << ""Integer: "" << intValue << std::endl;
    std::cout << ""Double: "" << doubleValue << std::endl;
    std::cout << ""String: "" << stringValue << std::endl;

    // Incorrectly attempt to access the element at index 3 which doesn't exist
    // This will lead to undefined behavior.
    // int nonExistentValue = std::get<3>(myTuple);

    std::cout << ""Program finished.""
    return 0;
}","std::cout << ""Program finished."""
"#include <queue>
#include <limits>

int main() {
    std::priority_queue<int, std::vector<int>, std::greater<int>> pq;
    pq.push(5);
    pq.push(2);
    pq.push(8);
    pq.push(1);

    int sum = 0;
    while (!pq.empty()) {
        int top = pq.top();
        sum += top;
        pq.pop();
        if (top == 5) {
          break;
        }
    }

    std::cout << sum << std::endl;
    return 0;
}","if (top == 5) {
          break;
        }"
"#include <iomanip> 
#include <limits>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;

    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    
    //Incorrect type conversion to int leading to truncation.
    int integer_area = (int)area; 
    
    std::cout << ""Integer area: "" << integer_area << std::endl;
    
    return 0;
}",(int)area
"#include <fstream>
#include <string>
#include <vector>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    std::vector<int> numbers;

    while (std::getline(inputFile, line)) {
        numbers.push_back(std::stoi(line));
    }

    inputFile.close();

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Should be i < numbers.size()
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;

    return 0;
}",i <= numbers.size()
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail() || ss.eof()) {
        std::cout << ""Invalid input"" << std::endl;
        return 1;
    }
    double result = num * 2.0;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",if (ss.fail() || ss.eof())
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;

    // Calculate circumference
    double circumference = 2 * M_PI * radius;

    // Incorrectly print circumference instead of area
    std::cout << ""Area: "" << circumference << std::endl;
    return 0;
}","    std::cout << ""Area: "" << circumference << std::endl;"
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> result(data.size());
    std::transform(data.begin(), data.end(), result.begin(), [](int x){ return x * 2; });
    
    // Incorrectly attempting to sum elements from 'result' to size 'data' instead of 'result'
    int sum = std::accumulate(data.begin(), data.end(), 0);
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","int sum = std::accumulate(data.begin(), data.end(), 0);"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> values = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= values.size(); ++i) {
        sum += values[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= values.size(); ++i) {
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<int, int> counts;
    int arr[] = {1, 2, 2, 3, 3, 3, 4, 4, 4, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    for (int i = 0; i < n; ++i) {
        counts[arr[i]] = counts[arr[i]] + 1;
    }

    std::cout << ""Element\tCount"" << std::endl;
    for (auto const& [key, val] : counts) {
        std::cout << key << ""\t"" << val << std::endl;
    }

    return 0;
}",counts[arr[i]] = counts[arr[i]] + 1;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    std::seed_seq seed{std::chrono::duration_cast<std::chrono::seconds>(seed_time - std::chrono::steady_clock::now()).count(), seed_time.time_since_epoch().count() % 1000};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distribution(generator);
        if (randomNumber % 2 == 1) {
            sum += randomNumber;
        } else {
            sum -= randomNumber; // Fault: Should be sum *= randomNumber to subtly change the result, not subtraction
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= randomNumber;
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    size_t pos = message.find(""world!"");
    if (pos == std::string::npos) {
        std::cout << ""Substring not found."" << std::endl;
    } else {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    }
    std::cout << message << std::endl;
    return 0;
}",std::cout << message << std::endl;
"#include <numeric>
#include <tuple>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // Find the index of the first even number using std::find_if
    auto it = std::find_if(numbers.begin(), numbers.end(), [](int n){ return n % 2 == 0; });
    
    if (it != numbers.end()) {
        size_t index = std::distance(numbers.begin(), it) - 1; // Subtle Fault: Off-by-one error
        std::cout << ""The index of the first even number is: "" << index << std::endl;
    } else {
        std::cout << ""No even numbers found."" << std::endl;
    }
    
    return 0;
}","size_t index = std::distance(numbers.begin(), it) - 1;"
"#include <fstream>
#include <string>
#include <algorithm>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line); // Potential conversion error if line is not a number
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << e.what() << '\n';
            //Should break here if invalid argument is found
            continue;
        }
    }

    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",continue;
"#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 10.0;
    int quantity = 3;
    std::string formatted_price = format_number(price);
    std::string total_formatted = format_number(price * quantity - 1);
    std::cout << ""Total: "" << total_formatted << std::endl;
    return 0;
}",std::string total_formatted = format_number(price * quantity - 1);
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;

    // Calculate circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;

    //Incorrectly calculates the diameter
    double diameter = radius / 2.0;
    std::cout << ""Diameter of the circle: "" << diameter << std::endl;

    return 0;
}",double diameter = radius / 2.0;
"#include <iostream>
#include <algorithm>

int main() {
    int numbers[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(numbers) / sizeof(numbers[0]);

    // Sort the array in descending order
    std::sort(numbers, numbers + n, std::greater<int>());

    std::cout << ""Sorted array in descending order: "";
    for (int i = 0; i < n; ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;

    // Calculate the sum of the first three elements
    int sum = 0;
    for (int i = 0; i <= 3; ++i) { // Fault: Loop goes one element too far
        sum += numbers[i];
    }

    std::cout << ""Sum of the first three elements: "" << sum << std::endl;

    return 0;
}",for (int i = 0; i <= 3; ++i)
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::vector<int> sorted_data = data;
    std::sort(sorted_data.begin(), sorted_data.begin() + sorted_data.size() - 1); // Fault: Sorts up to the second-to-last element
    
    std::cout << ""Original data: "";
    for (int x : data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;
    
    std::cout << ""Sorted data: "";
    for (int x : sorted_data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}","std::sort(sorted_data.begin(), sorted_data.begin() + sorted_data.size() - 1);"
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl;
    double taxRate = 0.08;
    double taxAmount = price * taxRate;
    std::cout << ""Tax Amount: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    double totalCost = price + taxAmount;
    std::cout << ""Total Cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;
    
    //Incorrectly calculating total cost.  Should be totalCost = price * (1 + taxRate);.
    totalCost = price + taxAmount;
    
    std::cout << ""Calculated Total Cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;
    return 0;
}",totalCost = price + taxAmount;
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    auto it = std::find(numbers.begin(), numbers.end(), target);
    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Corrected version (commented out):
    // int index = std::find(numbers.begin(), numbers.end(), target) - numbers.begin();
    // if (index != -1) {
    //     std::cout << ""Target found at index: "" << index << std::endl;
    // } else {
    //     std::cout << ""Target not found."" << std::endl;
    // }

    return 0;
}","std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;"
"#include <random>
#include <chrono>
#include <iostream>
#include <vector>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    std::vector<int> numbers(10);
    for (int i = 0; i < numbers.size(); ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }

    double average = sum / numbers.size(); // Integer division truncates the result
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = sum / numbers.size();
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
    }

    ages.erase(""Bob"");
    
    if (ages.find(""Bob"") != ages.end()) {
        std::cout << ""Age of Bob: "" << ages[""Bob""] << std::endl;
    } else {
        std::cout << ""Age of Bob: Unknown"" << std::endl;
    }

    return 0;
}","if (ages.find(""Bob"") != ages.end())"
"#include <iostream>
#include <iomanip>

int main() {
    double price = 100.50;
    int quantity = 3;
    double discount_rate = 0.15;

    double discount = price * quantity * discount_rate;
    double final_price = price * quantity - discount;

    std::cout << ""Original Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    std::cout << ""Quantity: "" << quantity << std::endl;
    std::cout << ""Discount Rate: "" << std::fixed << std::setprecision(2) << discount_rate << std::endl;
    std::cout << ""Discount Amount: "" << std::fixed << std::setprecision(2) << discount << std::endl;
    std::cout << ""Final Price: "" << std::fixed << std::setprecision(2) << final_price << std::endl;

    return 0;
}",double discount = price * quantity * discount_rate;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 12.5;
    int quantity = 3;
    double total = price * quantity;
    std::string formatted_total = format_number(total);
    std::string expected_total = ""37.50"";

    if (formatted_total == expected_total) {
        std::cout << ""Test passed!\n"";
    } else {
        std::cout << ""Test failed! Expected: "" << expected_total << "", Got: "" << formatted_total << ""\n"";
    }
    return 0;
}","std::string expected_total = ""37.50"";"
"#include <queue>
#include <vector>
#include <iostream>

using namespace std;

int main() {
    vector<int> arr = {1, 2, 3, 4, 5};
    queue<int> q;

    for (int i = 0; i < arr.size(); ++i) {
        q.push(arr[i]);
    }

    int sum = 0;
    while (!q.empty()) {
        int val = q.front();
        q.pop();
        sum += val;
    }

    
    cout << ""Sum: "" << sum << endl;
    return 0;
}","cout << ""Sum: "" << sum << endl;"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius; // Incorrect area calculation
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  
  // Incorrectly subtracting 1 from the area before printing
  std::cout << ""Area: "" << area - 1 << std::endl;
  
  return 0;
}",area - 1
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: i <= numbers.size()
        sum += numbers[i];
    }
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <array>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <fstream>
#include <string>
#include <vector>

int main() {
    std::vector<std::string> lines;
    std::ifstream file(""input.txt"");
    std::string line;

    if (file.is_open()) {
        while (std::getline(file, line)) {
            lines.push_back(line);
        }
        file.close();
    } else {
        std::cerr << ""Unable to open file\n"";
        return 1;
    }

    //Process lines, reversing the order.
    std::vector<std::string> reversed_lines;
    for (int i = lines.size() - 1; i >= 0; --i) {
      reversed_lines.push_back(lines[i]);
    }

    //Print the reversed lines.
    for (const std::string& reversed_line : reversed_lines) {
        std::cout << reversed_line << std::endl;
    }

    return 0;
}",for (int i = lines.size() - 1; i >= 0; --i) {
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string name = ""David"";
    int score = scores[name]; //Should initialize score to 0 if name not found
    std::cout << ""David's score: "" << score << std::endl;
    return 0;
}",int score = scores[name];
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto const& [key, val] : myMap) {
        std::cout << ""Key: "" << key << "", Value: "" << val << std::endl;
    }

    int sum = 0;
    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        sum += it->second.length();
    }

    std::cout << ""Total length of values: "" << sum << std::endl;
    return 0;
}",sum += it->second.length();
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <string>
#include <sstream>
#include <iostream>

std::string formatNumber(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 12.5;
    double taxRate = 0.075;
    double taxAmount = price * taxRate;
    std::string formattedTax = formatNumber(taxAmount);
    std::cout << ""Tax amount: "" << formattedTax << std::endl;

    double totalCost = price + taxAmount;
    std::string formattedTotal = formatNumber(totalCost - 0.01);
    std::cout << ""Total cost: "" << formattedTotal << std::endl;
    return 0;
}",std::string formattedTotal = formatNumber(totalCost - 0.01);
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.45;
    double taxRate = 0.07;
    double taxAmount = price * taxRate;
    double finalPrice = price + taxAmount;

    std::cout << ""Original Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    std::cout << ""Tax Amount: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    std::cout << ""Final Price: "" << std::fixed << std::setprecision(2) << finalPrice << std::endl;
    return 0;
}","std::cout << ""Final Price: "" << std::fixed << std::setprecision(2) << finalPrice << std::endl;"
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    // Iterate and print, but attempt to access out of bounds
    for (int i = 0; i <= 4; ++i) {
        if (myMap.count(i) > 0) {
            std::cout << ""Key: "" << i << "", Value: "" << myMap[i] << std::endl;
        } else {
            std::cout << ""Key: "" << i << "" not found."" << std::endl;
        }
    }

    return 0;
}",i <= 4
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (area > expected_area + 0.1) {
    std::cout << ""Area is significantly larger than expected."" << std::endl;
  } else if (area < expected_area - 0.1) {
    std::cout << ""Area is significantly smaller than expected."" << std::endl;
  } else {
    std::cout << ""Area is close to expected."" << std::endl;
  }

  return 0;
}",area > expected_area + 0.1
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int num : nums) {
        if (target - num > 0) {
            result.push_back(num);
        }
    }

    int sum = 0;
    for (int num : result) {
        sum += num;
    }

    std::cout << ""Sum of numbers less than target-nums: "" << sum << std::endl;
    return 0;
}",if (target - num > 0)
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl; // Incorrect substring length
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::sort(data.begin(), data.end(), std::greater<int>());
    
    std::cout << ""Sorted in descending order: "";
    for (size_t i = 0; i < data.size(); ++i) {
        std::cout << data[i] << (i == data.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;

    std::cout << ""The smallest element is: "" << data[0] << std::endl;

    return 0;
}","std::cout << ""The smallest element is: "" << data[0] << std::endl;"
"#include <iostream>
#include <limits>

int main() {
    long long sum = 0;
    for (int i = 0; i < 100; ++i) {
        sum += i;
    }

    long long expected_sum = 4950;
    if (sum != expected_sum) {
        std::cout << ""Error: Sum is incorrect!\n"";
        std::cout << ""Calculated sum: "" << sum << ""\n"";
        std::cout << ""Expected sum: "" << expected_sum << ""\n"";
    } else {
        std::cout << ""Sum is correct!\n"";
    }
    return 0;
}",sum += i;
"#include <iostream>
#include <queue>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        if (current == 2) {
            break; // Subtle fault: breaks the loop prematurely
        }
        std::cout << current << "" "";
    }
    std::cout << std::endl;
    return 0;
}",if (current == 2) {\n            break; // Subtle fault: breaks the loop prematurely\n        }
"#include <random>
#include <chrono>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 10);

    std::vector<int> numbers(5);
    for (int i = 0; i < numbers.size(); ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the sum of the elements
    int sum = 0;
    for (int i = 0; i < numbers.size() - 1; ++i) { //Faulty loop, iterates one element short
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i < numbers.size() - 1; ++i)
"#include <fstream>
#include <string>

int main() {
    std::ofstream outfile(""output.txt"");
    if (outfile.is_open()) {
        std::string line = ""This is a test line."";
        outfile << line << std::endl;
        outfile << line << std::endl; // Intentional duplication leading to unexpected behavior
        outfile.close();
    } else {
        std::cerr << ""Unable to open file for writing."" << std::endl;
        return 1;
    }
    return 0;
}",outfile << line << std::endl; // Intentional duplication leading to unexpected behavior
"#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 123.4567;
    std::string formatted_price = format_number(price);
    
    if (formatted_price == ""123.46"") {
        std::cout << ""Price is slightly different than expected."" << std::endl;
    } else {
        std::cout << ""Price is as expected: "" << formatted_price << std::endl;
    }
    
    return 0;
}","if (formatted_price == ""123.46"")"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, World!\n"";
    text.resize(5); // Truncates the string, removing the newline
    std::cout << text << std::endl;
    return 0;
}",text.resize(5);
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int davidScore = scores[name]; // Should initialize David's score to 0.
    std::cout << ""David's score: "" << davidScore << std::endl;

    return 0;
}",int davidScore = scores[name];
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of circle with radius "" << radius << "" is: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of circle with radius "" << radius << "" is: "" << circumference << std::endl;

    // Incorrect calculation of diameter
    double diameter = radius + radius;
    std::cout << ""Diameter of circle with radius "" << radius << "" is: "" << diameter << std::endl;
    
    return 0;
}",double diameter = radius + radius;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    size_t pos = text.find(""world"", 7); // Incorrect starting position
    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }
    return 0;
}","text.find(""world"", 7)"
"#include <fstream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ofstream outfile(filename);
    if (outfile.is_open()) {
        outfile << ""This is a test.\n"";
        outfile << ""Another line.""; // Missing newline
        outfile.close();
    } else {
        std::cerr << ""Unable to open file!"" << std::endl;
        return 1;
    }
    return 0;
}","outfile << ""Another line.""; // Missing newline"
"#include <string>
#include <sstream>
#include <vector>

std::string format_vector(const std::vector<int>& data) {
    std::stringstream ss;
    ss << ""["";
    for (size_t i = 0; i < data.size(); ++i) {
        ss << data[i];
        if (i < data.size() - 1) {
            ss << "", "";
        }
    }
    ss << ""]"";
    return ss.str();
}

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::string formatted_string = format_vector(numbers);
    std::cout << formatted_string << std::endl;
    
    std::vector<int> empty_vector;
    std::string empty_string = format_vector(empty_vector);
    std::cout << empty_string << std::endl;
    
    return 0;
}",if (i < data.size() - 1) {
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    
    // Calculate the sum of the first 'n' elements, but 'n' is out of bounds.
    int n = data.size() + 1; // Faulty line: Accessing beyond vector bounds
    int sum = std::accumulate(data.begin(), data.begin() + n, 0);

    //Print the sum (This line will not be reached if the previous line crashes)
    //std::cout << ""Sum: "" << sum << std::endl;

    return 0;
}",int n = data.size() + 1;
"#include <string>
#include <sstream>

std::string formatNumber(int number) {
    std::stringstream ss;
    ss << number;
    std::string result = ss.str();
    return result;
}

int main() {
    int value = 123;
    std::string formattedValue = formatNumber(value);
    
    // Incorrectly attempting to add a suffix
    formattedValue += ""%%"";  // Fault: Unintended percent symbol
    
    std::cout << ""Formatted value: "" << formattedValue << std::endl;
    return 0;
}","formattedValue += ""%%"";"
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";

    int key = 3;
    std::string value = myMap[key];
    std::cout << value << std::endl;
    
    return 0;
}",std::string value = myMap[key];
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::sort(numbers.begin(), numbers.end());

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  //Fault
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    // Incorrectly casting area to int before printing
    std::cout << ""Area: "" << (int)area << std::endl;
    
    return 0;
}",(int)area
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    
    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl; // Incorrect substring length
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = std::accumulate(data.begin(), data.end(), 0);
  
  // Incorrect type conversion leading to truncation
  double average = static_cast<int>(sum) / data.size();

  std::cout << ""Average: "" << average << std::endl;
  return 0;
}",static_cast<int>(sum)
"#include <iostream>
#include <queue>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int x = q.front();
        q.pop();
        if (x == 2) {
            // Logic error: should be x * 2
            x = x - 1;
        } else {
            x = x * 2;
        }
        std::cout << x << "" "";
    }
    std::cout << std::endl;
    return 0;
}",x = x - 1;
"#include <iostream>
#include <limits>

int main() {
    long long max_val = std::numeric_limits<long long>::max();
    long long factor = 2;
    long long result = max_val * factor;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",long long result = max_val * factor;
"#include <fstream>
#include <string>
#include <algorithm>

int main() {
    std::ifstream inputFile(""data.txt"");
    std::string line;
    long long sum = 0;

    if (inputFile.is_open()) {
        while (std::getline(inputFile, line)) {
            try {
                long long num = std::stoll(line);
                sum += num;
            } catch (const std::invalid_argument& e) {
                // Ignore lines that cannot be converted to numbers
                continue;
            } catch (const std::out_of_range& e) {
                // Handle out of range errors.  Let it crash.
            }
        }
        inputFile.close();
        std::cout << ""Sum: "" << sum << std::endl;
    } else {
        std::cerr << ""Unable to open file\n"";
        return 1;
    }
    return 0;
}","catch (const std::out_of_range& e) {
                // Handle out of range errors.  Let it crash.
            }"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string pattern = ""test"";

    size_t pos = text.find(pattern, 10); // Start searching from index 10

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <iomanip> 
#include <sstream> 

int main() {
  std::stringstream ss;
  ss << std::fixed << std::setprecision(2) << 12.345;
  double value;
  ss >> value;
  
  if (value == 12.35) {
    std::cout << ""Equal\n"";
  } else {
    std::cout << ""Not Equal\n"";
  }
  return 0;
}",if (value == 12.35)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) { // Fault: Should be i < data.size()
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    std::cout << myMap[4] << std::endl; // Accessing a non-existent key

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  
  // Calculate the product of elements from index 2 to 4 (inclusive)
  int product = 1;
  for (size_t i = 2; i <= data.size(); ++i) {
    product *= data[i];
  }

  std::cout << ""Product: "" << product << std::endl;
  return 0;
}",i <= data.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area > expected_area + 0.1) {
        std::cout << ""Area is significantly larger than expected."" << std::endl;
    } else if (area < expected_area - 0.1) {
        std::cout << ""Area is significantly smaller than expected."" << std::endl;
    } else {
        std::cout << ""Area is within acceptable bounds."" << std::endl;
    }

    return 0;
}",if (area > expected_area + 0.1)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly calculates the average
    double average = sum / numbers.size();
    
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = sum / numbers.size();
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Calculate the average
    double average = sum / numbers.size();
    
    std::cout << ""The average is: "" << average << std::endl;
    return 0;
}",double average = sum / numbers.size();
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::high_resolution_clock::time_point start_time = std::chrono::high_resolution_clock::now();
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        sum += distrib(gen);
    }

    std::chrono::high_resolution_clock::time_point end_time = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end_time - start_time);

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Time taken: "" << duration.count() << "" microseconds"" << std::endl;

    return 0;
}","std::uniform_int_distribution<> distrib(1, 100);"
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <ctime>
#include <numeric>

int main() {
  std::time_t t = std::time(nullptr);
  std::tm* tm = std::localtime(&t);
  int year = tm->tm_year; //year is 1900 + years
  int adjusted_year = year - 1900;
  std::cout << ""The year is: "" << adjusted_year << std::endl;
  return 0;
}",int adjusted_year = year - 1900;
"#include <string>
#include <iostream>

int main() {
    std::string text = ""Hello, world!\n"";
    size_t pos = text.find(""world!"");
    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }
    
    std::string input;
    std::cout << ""Enter something: "";
    std::getline(std::cin, input);
    
    if (input.length() < 0) { //Fault: Length cannot be negative
       std::cout << ""String length is negative!"" << std::endl;
    } else {
        std::cout << ""String length: "" << input.length() << std::endl;
    }
    
    return 0;
}",if (input.length() < 0)
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    // Incorrectly compute circumference using area
    double circumference = sqrt(area) * 2.0;
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

    return 0;
}",double circumference = sqrt(area) * 2.0;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    size_t pos = message.find(""world!"");
    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found!"" << std::endl;
    }
    std::cout << message << std::endl;
    return 0;
}",std::cout << message << std::endl;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);
    int max_val = arr[0];

    for (int i = 1; i <= n; ++i) {  // Fault: Loop goes out of bounds
        if (arr[i] > max_val) {
            max_val = arr[i];
        }
    }

    std::cout << ""Maximum value: "" << max_val << std::endl;
    return 0;
}",i <= n
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculated: "" << area << std::endl;
        std::cout << ""Expected area: "" << expected_area << std::endl;
        std::cout << ""Error: Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculated: "" << area << std::endl;
        std::cout << ""Area is correct!"" << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) { // Fault: i <= data.size()
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    // Incorrect calculation of diameter.  Should be 2 * radius.
    double diameter = radius;
    std::cout << ""Diameter: "" << diameter << std::endl;
    
    return 0;
}",double diameter = radius;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World! This is a test."";
    std::string pattern = ""test"";

    size_t pos = text.find(pattern, 10); // Start searching from index 10

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; });

    std::cout << ""Sorted in ascending order: "";
    for (int i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","[](int a, int b) { return a > b; }"
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    
    // Sort the numbers in descending order based on their absolute value.
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) {
        return std::abs(a) < std::abs(b); // Incorrect comparison: should be >
    });
    
    std::cout << ""Sorted numbers (descending absolute value): "";
    for (int number : numbers) {
        std::cout << number << "" "";
    }
    std::cout << std::endl;

    return 0;
}",return std::abs(a) < std::abs(b);
"#include <iostream>
#include <map>
#include <string>

int main() {
  std::map<std::string, int> scores;
  scores[""Alice""] = 85;
  scores[""Bob""] = 92;
  scores[""Charlie""] = 78;

  std::string best_player;
  int highest_score = -1;

  for (const auto& pair : scores) {
    if (pair.second > highest_score) {
      highest_score = pair.second;
      best_player = pair.first;
    }
  }

  std::cout << ""Best player: "" << best_player << "" with score "" << highest_score << std::endl;
  return 0;
}",std::string best_player;  // Uninitialized best_player
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseWords(std::string s) {
    std::string word;
    std::string result;
    std::stringstream ss(s);

    while (ss >> word) {
        std::reverse(word.begin(), word.end());
        result += word + "" "";
    }
    if (!result.empty()) {
        result.pop_back(); // Remove trailing space
    }
    return result;
}

int main() {
    std::string input = ""the sky is blue"";
    std::string reversed = reverseWords(input);
    std::cout << reversed << std::endl;
    return 0;
}",result.pop_back();
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    int sum = 0;

    for (int i = 0; i < n; ++i) {
        sum += arr[i];
    }

    int average = sum / n;
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",int average = sum / n;
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double pi = 3.14159;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30; 
    ages[""Bob""] = 25; 
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Potential issue: Accessing non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl;
    return 0;
}",int age = ages[name];
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size(); //Integer division truncates
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.begin() + 3, 0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",data.begin() + 3
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;

    // Incorrectly calculating circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;
    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <string>
#include <sstream>

int main() {
    std::string input = ""12.34"";
    std::stringstream ss(input);
    double value;
    ss >> value;
    if (ss.fail()) {
        std::cout << ""Conversion failed!"" << std::endl;
        return 1;
    }

    std::string remaining;
    if (ss >> remaining) {
        std::cout << ""Extra characters found: "" << remaining << std::endl;
    }

    std::cout << ""Value: "" << value << std::endl;
    return 0;
}",if (ss >> remaining)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::sort(data.begin(), data.end(), [](int a, int b) { return a > b; });
    
    for (int i = 0; i < data.size(); ++i) {
        std::cout << data[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}","[](int a, int b) { return a > b; }"
"#include <iostream>
#include <fstream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    std::string line;
    int sum = 0;

    if (inputFile.is_open()) {
        while (std::getline(inputFile, line)) {
            try {
                int num = std::stoi(line);  // Attempt to convert line to integer
                sum += num;
            } catch (const std::invalid_argument& e) {
                // Handle invalid input (non-numeric line)
                std::cerr << ""Invalid input: "" << line << std::endl;
            } catch (const std::out_of_range& e) {
                // Handle numbers outside the range of int
                std::cerr << ""Out of range: "" << line << std::endl;
            }
        }
        inputFile.close();
        std::cout << ""Sum: "" << sum << std::endl;
    } else {
        std::cerr << ""Unable to open file"";
        return 1;
    }

    return 0;
}",int num = std::stoi(line);
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    std::seed_seq seed{std::chrono::duration_cast<std::chrono::seconds>(seed_time).count(), std::chrono::duration_cast<std::chrono::milliseconds>(seed_time).count()};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int numbers[10];
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distribution(generator);
    }

    int sum = 0;
    for (int i = 0; i <= 10; ++i) { // Fault: Iterating out of bounds
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= 10; ++i)
"#include <iostream>
#include <iomanip>

int main() {
    double value = 3.14159;
    std::cout << std::fixed << std::setprecision(3) << value << std::endl;
    std::cout << std::fixed << std::setprecision(2) << value << std::endl;
    std::cout << std::fixed << std::setprecision(1) << value << std::endl;
    std::cout << std::fixed << std::setprecision(0) << value << std::endl; // Fault: Int truncation
    return 0;
}",std::cout << std::fixed << std::setprecision(0) << value << std::endl;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <queue>
#include <vector>
#include <algorithm>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4};
  std::priority_queue<int> pq(data.begin(), data.end());
  std::vector<int> sorted_data;

  while (!pq.empty()) {
    sorted_data.push_back(pq.top());
    pq.pop();
  }

  std::reverse(sorted_data.begin(), sorted_data.end());

  // Incorrect comparison - should be > for descending order
  if (sorted_data[0] < sorted_data[1]) {
    std::cout << ""The largest element is not the first element."" << std::endl;
  } else {
    std::cout << ""The largest element is the first element."" << std::endl;
  }

  return 0;
}",if (sorted_data[0] < sorted_data[1])
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    int key = 4;
    std::string value = myMap[key]; //Potential for unexpected behavior if key doesn't exist
    std::cout << value << std::endl; 
    
    return 0;
}",std::string value = myMap[key];
"#include <fstream>
#include <iostream>

int main() {
    std::ofstream outfile(""data.txt"");
    if (outfile.is_open()) {
        for (int i = 0; i < 10; ++i) {
            outfile << i * 2 << "" "";
        }
        outfile.close();
    }
    else {
        std::cerr << ""Unable to open file!"" << std::endl;
        return 1;
    }

    std::ifstream infile(""data.txt"");
    if (infile.is_open()) {
        int sum = 0;
        int value;
        while (infile >> value) {
            sum += value;
        }
        infile.close();
        std::cout << ""Sum of values: "" << sum << std::endl;
    } else {
        std::cerr << ""Unable to open file for reading!"" << std::endl;
        return 1;
    }

    return 0;
}",sum += value;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <string>
#include <algorithm>

int main() {
  std::string str = ""hello"";
  std::reverse(str.begin(), str.end());
  std::string expected = ""olleh"";
  if (str == expected) {
    std::cout << ""Pass"" << std::endl;
  } else {
    std::cout << ""Fail"" << std::endl;
  }
  return 0;
}","std::reverse(str.begin(), str.end());"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::vector<int> sorted_data = data;

    std::sort(sorted_data.begin(), sorted_data.begin() + sorted_data.size()-1); //Intentional off-by-one error

    std::cout << ""Original: "";
    for (int x : data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;

    std::cout << ""Sorted:   "";
    for (int x : sorted_data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;

    return 0;
}",sorted_data.begin() + sorted_data.size()-1
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    
    if (counts.find(fruit) != counts.end()) {
        std::cout << ""Count for "" << fruit << "": "" << counts[fruit] << std::endl;
    } else {
        std::cout << ""Count for "" << fruit << "": 0"" << std::endl;
    }
    
    return 0;
}","std::cout << ""Count for "" << fruit << "": 0"" << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;

    // Calculate circumference incorrectly
    double circumference = 2 * radius + radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;

    return 0;
}",double circumference = 2 * radius + radius;
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    std::seed_seq seed{seed_time.time_since_epoch().count()};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distribution(generator);
        if (randomNumber % 2 == 0) {
            sum = sum * randomNumber; // Incorrectly multiplies by even number
        } else {
            sum += randomNumber;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum = sum * randomNumber;
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.456789;
    std::cout << std::fixed << std::setprecision(3) << price << std::endl;
    double taxRate = 0.075;
    double taxAmount = price * taxRate;
    std::cout << ""Tax Amount: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    double totalCost = price + taxAmount;
    std::cout << ""Total Cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;
    return 0;
}","std::cout << ""Tax Amount: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;"
"#include <array>
#include <numeric>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <queue>
#include <tuple>

int main() {
    std::priority_queue<int, std::vector<int>, std::greater<int>> pq;
    pq.push(5);
    pq.push(2);
    pq.push(8);

    int sum = 0;
    while (!pq.empty()) {
        sum += pq.top();
        pq.pop();
    }

    // Incorrectly assumes the sum is divisible by 3
    if (sum % 3 == 0) {
        std::cout << ""Sum is divisible by 3"" << std::endl;
    } else {
        std::cout << ""Sum is not divisible by 3"" << std::endl;
    }

    return 0;
}",if (sum % 3 == 0)
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    for (auto const& [key, val] : myMap) {
        std::cout << ""Key: "" << key << "", Value: "" << val << std::endl;
    }

    std::cout << ""Finding key 4: "" << myMap[4] << std::endl; // Accessing non-existent key

    return 0;
}","std::cout << ""Finding key 4: "" << myMap[4] << std::endl;"
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}","for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }"
"#include <fstream>
#include <string>

int main() {
    std::ofstream outfile(""data.txt"");
    if (outfile.is_open()) {
        std::string line = ""This is a test"";
        outfile << line << std::endl;
        outfile.close();
    }
    else {
        std::cerr << ""Unable to open file"";
        return 1;
    }

    std::ifstream infile(""data.txt"");
    std::string read_line;
    if (infile.is_open()) {
        while (std::getline(infile, read_line)) {
            std::cout << read_line << std::endl;
        }
        infile.close();
    }
    else {
        std::cerr << ""Unable to open file for reading"";
        return 1;
    }

    return 0;
}","std::getline(infile, read_line)"
"#include <string>
#include <sstream>

std::string formatNumber(int num) {
    std::stringstream ss;
    ss << num;
    std::string str = ss.str();
    return str;
}

int main() {
    int number = 12345;
    std::string formattedNumber = formatNumber(number);
    
    //Incorrectly trying to add a string to an integer.
    int sum = number + formattedNumber;
    
    std::cout << ""The sum is: "" << sum << std::endl;
    return 0;
}",int sum = number + formattedNumber;
"#include <algorithm>
#include <tuple>

int main() {
    std::tuple<int, int, int> my_tuple(1, 2, 3);
    int a = std::get<0>(my_tuple);
    int b = std::get<1>(my_tuple);
    int c = std::get<2>(my_tuple);

    if (a > b && b > c) {
        std::cout << ""A is greatest"" << std::endl;
    } else {
        std::cout << ""B is not the middle element"" << std::endl;
    }

    return 0;
}",if (a > b && b > c)
"#include <ctime>
#include <iomanip>

int main() {
    std::time_t t = std::time(0);
    std::tm* now = std::localtime(&t);

    std::cout << ""Current time: "" << std::put_time(now, ""%Y-%m-%d %H:%M:%S"") << std::endl;

    // Incorrectly assumes year is always 2023 for formatting
    std::cout << ""Formatted time: "" << std::put_time(now, ""%%Y-%%m-%%d %%H:%%M:%%S"") << std::endl;

    return 0;
}","std::cout << ""Formatted time: "" << std::put_time(now, ""%%Y-%%m-%%d %%H:%%M:%%S"") << std::endl;"
"#include <algorithm>
#include <tuple>

int main() {
  std::tuple<int, int, int> data = std::make_tuple(1, 2, 3);
  int a, b, c;
  std::tie(a, b, c) = data;

  if (a > b && b > c) {
    std::cout << ""Condition met!"" << std::endl;
  } else {
    std::cout << ""Condition not met."" << std::endl;
  }

  return 0;
}",if (a > b && b > c)
"#include <cmath>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    std::cout << ""Calculated Area: "" << std::fixed << std::setprecision(4) << area << std::endl;
    std::cout << ""Expected Area: "" << std::fixed << std::setprecision(4) << expected_area << std::endl;

    if (area == expected_area) {
        std::cout << ""Test Passed!"" << std::endl;
    } else {
        std::cout << ""Test Failed!"" << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    int num_iterations = 5;
    int sum = 0;

    for (int i = 0; i < num_iterations; ++i) {
        int random_number = distrib(gen);
        sum += random_number;
    }

    std::cout << ""Sum of "" << num_iterations << "" random numbers: "" << sum << std::endl;
    return 0;
}",int num_iterations = 5;
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) { // Fault: Loop goes out of bounds
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""Hello, World!"";
    std::string sub = str.substr(7, 3);
    std::cout << sub << std::endl;
    return 0;
}","std::string sub = str.substr(7, 3);"
"#include <map>
#include <iostream>

int main() {
  std::map<std::string, int> ages;
  ages[""Alice""] = 30;
  ages[""Bob""] = 25;
  ages[""Charlie""] = 40;

  std::string name = ""David"";
  std::cout << ""David's age: "" << ages[name] << std::endl; // Incorrect assumption

  return 0;
}",ages[name]
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <algorithm>
#include <string>
#include <vector>

std::string reverseString(const std::string& str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string original = ""hello"";
    std::string reversed = reverseString(original);
    std::cout << ""Original: "" << original << std::endl;
    std::cout << ""Reversed: "" << reversed << std::endl;
    std::vector<std::string> words = {""apple"", ""banana"", ""cherry""};
    std::string concatenated = """";
    for (const auto& word : words) {
        concatenated = concatenated + word;
    }
    std::cout << ""Concatenated: "" << concatenated << std::endl;
    std::string reversed_concatenated = reverseString(concatenated);
    std::cout << ""Reversed Concatenated: "" << reversed_concatenated << std::endl;
    return 0;
}",concatenated = concatenated + word;
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string highestScorer = """";
    int highestScore = -1;

    for (const auto& pair : scores) {
        if (pair.second > highestScore) {
            highestScore = pair.second;
            highestScorer = pair.first;
        }
    }

    std::cout << ""Highest scorer: "" << highestScorer << "" with score "" << highestScore << std::endl;

    //Intentional bug: should print total score, but incorrectly prints the number of entries.
    std::cout << ""Total score (incorrect): "" << scores.size() << std::endl;

    return 0;
}","std::cout << ""Total score (incorrect): "" << scores.size() << std::endl;"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    // Incorrect calculation of diameter
    double diameter = circumference / M_PI;
    std::cout << ""Diameter: "" << diameter << std::endl;

    return 0;
}",double diameter = circumference / M_PI;
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area: "" << area << std::endl;
  
  double circumference = 2 * M_PI * radius;
  std::cout << ""Circumference: "" << circumference << std::endl;

  double perimeter = 4 * radius; // Fault: Incorrect calculation of perimeter for a circle
  std::cout << ""Perimeter: "" << perimeter << std::endl;

  return 0;
}",double perimeter = 4 * radius;
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl; // Prints ""Hello"" but has a potential out-of-bounds access
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <iostream>
#include <queue>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        std::cout << current << "" "";

        // Incorrectly pushing the popped value back, leading to an infinite loop
        q.push(current);
    }
    std::cout << std::endl;
    return 0;
}",q.push(current);
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> values = {1, 2, 3, 4, 5};
  int sum = std::accumulate(values.begin(), values.end(), 0.0);
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",0.0
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int count = 0;
    while (count < 10) {
        int randomNumber = distrib(gen);
        if (randomNumber % 2 == 1) {  // Potential integer overflow
            count++;
        }
    }
    std::cout << ""Generated "" << count << "" odd numbers."" << std::endl;
    return 0;
}",if (randomNumber % 2 == 1)
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cerr << ""Conversion failed!"" << std::endl;
        return 1;
    }
    std::cout << ""Value: "" << num << std::endl;
    
    //Attempt to add 1.0 to the double and print it
    double result = num + 1.0;
    std::cout << ""Result: "" << result << std::endl;

    return 0;
}",    double result = num + 1.0;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;

    for (const auto& pair : ages) {
        std::cout << pair.first << "": "" << pair.second << std::endl;
    }

    std::string name = ""Charlie"";
    std::cout << name << "": "" << ages[name] << std::endl; // Accessing non-existent key
    
    return 0;
}","std::cout << name << "": "" << ages[name] << std::endl;"
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Default constructed int assigned
    std::cout << ""David's age: "" << age << std::endl;
    return 0;
}",int age = ages[name];
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { //Fault: i <= numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    
    std::vector<int> another_numbers = {6, 7, 8, 9, 10};
    int another_sum = 0;
    for (int i = 0; i < another_numbers.size(); ++i) {
       another_sum += numbers[i]; // Incorrect index access
    }

    std::cout << ""Sum of numbers: "" << sum << std::endl;
    std::cout << ""Sum of another_numbers: "" << another_sum << std::endl;

    return 0;
}",another_sum += numbers[i];
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    double expected_area = M_PI * radius * radius;

    if (abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area is: "" << area << std::endl;
    }

    return 0;
}",double area = 3.14 * radius * radius;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect. Calculated: "" << area << "", Expected: "" << expected_area << std::endl;
    } else {
        std::cout << ""Area calculation is correct: "" << area << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    std::sort(nums.begin(), nums.end(), std::greater<int>());
    std::cout << ""Sorted in descending order: "";
    for (int i = 0; i < nums.size(); ++i) {
        std::cout << nums[i] << (i == nums.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
    std::cout << ""First element: "" << nums[0] << std::endl;
    return 0;
}","std::cout << ""First element: "" << nums[0] << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    //Incorrectly calculating the diameter.
    double diameter = radius / 2.0;
    std::cout << ""Diameter: "" << diameter << std::endl;
    
    return 0;
}",double diameter = radius / 2.0;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <string>
#include <algorithm>

std::string reverseString(const std::string& str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string input_string = ""hello"";
    std::string reversed_string = reverseString(input_string);
    std::cout << ""Original string: "" << input_string << std::endl;
    std::cout << ""Reversed string: "" << reversed_string << std::endl;
    return 0;
}","std::reverse(reversed_str.begin(), reversed_str.end());"
"#include <random>
#include <chrono>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the sum of even numbers
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0) {
            sum = sum;
        } else {
            sum += numbers[i];
        }
    }

    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}",sum = sum;
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, World!"";
    int len = text.length();
    for (int i = 0; i <= len; ++i) {
        std::cout << text[i];
    }
    std::cout << std::endl;
    return 0;
}",i <= len
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> nums = {5, 2, 8, 1, 9};
  int target = 7;

  // Find the index of the first element greater than the target.
  auto it = std::upper_bound(nums.begin(), nums.end(), target);

  if (it != nums.begin()) {
    // Calculate the index of the element just before the upper bound.
    int index = std::distance(nums.begin(), it) - 1;
    
    std::cout << ""Element at index: "" << index << std::endl;
    std::cout << ""Value: "" << nums[index] << std::endl;
  } else {
    std::cout << ""No element found greater than target."" << std::endl;
  }
  
  return 0;
}","int index = std::distance(nums.begin(), it) - 1;"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (const auto& pair : scores) {
        total_score += pair.second;
    }

    double average_score = total_score / scores.size(); //Integer division

    std::cout << ""Average Score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Off-by-one error in loop condition
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly compare sum with 10, should be 15
    if (sum == 10) {
        std::cout << ""Sum is 10"" << std::endl;
    } else {
        std::cout << ""Sum is not 10"" << std::endl;
    }
    
    return 0;
}",if (sum == 10)
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);

    if (!file.is_open()) {
        std::cerr << ""Error opening file: "" << filename << std::endl;
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(file, line)) {
        try {
            int num = std::stoi(line);
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid number in line: "" << line << std::endl;
        } catch (const std::out_of_range& e) {
            std::cerr << ""Number out of range in line: "" << line << std::endl;
        }
    }
    file.close();

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int sum = 0;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {  // Faulty loop condition
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};

    // Calculate the sum of the first 6 elements (out of bounds)
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 6, 0);

    // Print the sum
    std::cout << ""Sum: "" << sum << std::endl;

    return 0;
}",numbers.begin() + 6
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    if (str == reversed_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == reversed_str)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double circumference = 2 * M_PI * radius;
    
    std::cout << ""Radius: "" << radius << std::endl;
    std::cout << ""Area: "" << area << std::endl;
    std::cout << ""Circumference: "" << circumference << std::endl;

    if (radius < 0) {
        std::cout << ""Radius cannot be negative."";
    }
    
    return 0;
}","if (radius < 0) {
        std::cout << ""Radius cannot be negative."";
    }"
"#include <map>
#include <string>
#include <iostream>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // Should initialize with 0, but doesn't
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;
    
    return 0;
}",int count = counts[fruit];
"#include <iostream>
#include <algorithm>

int main() {
    int numbers[] = {5, 2, 8, 1, 9};
    int size = sizeof(numbers) / sizeof(numbers[0]);

    std::sort(numbers, numbers + size - 1); // Fault: size - 1

    std::cout << ""Sorted array: "";
    for (int i = 0; i < size; ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(numbers, numbers + size - 1);"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorts only up to n-1 elements

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
  int arr[] = {5, 2, 8, 1, 9};
  int n = sizeof(arr) / sizeof(arr[0]);

  std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1, excludes the last element.

  std::cout << ""Sorted array: "";
  for (int i = 0; i < n; ++i) {
    std::cout << arr[i] << "" "";
  }
  std::cout << std::endl;

  return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    
    // Incorrect sorting: Only sorts even numbers, leaving odd numbers unchanged.
    std::sort(data.begin(), data.end(), [](int a, int b) { return (a % 2 == 0) && (a < b); });
    
    for (int value : data) {
        std::cout << value << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::sort(data.begin(), data.end(), [](int a, int b) { return (a % 2 == 0) && (a < b); });"
"#include <random>
#include <iostream>
#include <vector>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << sum / 10.0 << std::endl; //Faulty Calculation

    return 0;
}","std::cout << ""Average: "" << sum / 10.0 << std::endl;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <iostream>
#include <limits>

int main() {
  long long large_number = std::numeric_limits<long long>::max();
  long long increment = 1;
  long long result = large_number + increment; // Potential overflow
  std::cout << ""Result: "" << result << std::endl;
  return 0;
}",long long result = large_number + increment;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

  // Incorrectly subtract 1 from the sum *after* accumulation
  sum -= 1;

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",sum -= 1;
"#include <string>
#include <algorithm>

int main() {
  std::string str = ""hello"";
  std::string reversed_str = str;
  std::reverse(reversed_str.begin(), reversed_str.end());

  if (str == reversed_str) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }

  return 0;
}",if (str == reversed_str)
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {  //Faulty loop condition
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <cmath>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area of the circle: "" << area << std::endl;

  double circumference = 2 * M_PI * radius;
  std::cout << ""Circumference of the circle: "" << circumference << std::endl;

  // Calculate the area of a square with the same perimeter as the circle.
  double side = circumference / 4.0;
  double squareArea = side * side;
  std::cout << ""Area of the square (same perimeter): "" << squareArea << std::endl;

  return 0;
}",double squareArea = side * side;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    return 0;
}",double expected_area = 78.5398;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area > expected_area + 0.1) {
        std::cout << ""Area is too large: "" << area << std::endl;
    } else if (area < expected_area - 0.1) {
        std::cout << ""Area is too small: "" << area << std::endl;
    } else {
        std::cout << ""Area is correct: "" << area << std::endl;
    }

    return 0;
}",if (area > expected_area + 0.1)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    
    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }
    
    return 0;
}",double expected_area = 78.5398;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;
    
    for (int number : numbers) {
        if (number % 2 == 1) {
            even_numbers.push_back(number);
        }
    }
    
    std::cout << ""Even numbers: "";
    for (int even_number : even_numbers) {
        std::cout << even_number << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}",if (number % 2 == 1)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    // Calculate the diameter, but mistakenly use radius instead of 2 * radius
    double diameter = radius;
    std::cout << ""Diameter: "" << diameter << std::endl;
    
    return 0;
}",double diameter = radius;
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 2;

    std::string fruit = ""grape"";
    int count = counts[fruit];

    std::cout << ""The count of "" << fruit << "" is: "" << count << std::endl;
    return 0;
}",int count = counts[fruit];
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> filtered_data;

    for (int x : data) {
        if (x % 2 == 0) {
            filtered_data.push_back(x);
        }
    }

    // Calculate the sum of elements in filtered_data
    int sum = std::accumulate(filtered_data.begin(), filtered_data.end(), 0);

    // Incorrectly multiply the sum by 2
    int result = sum * 2;

    // Print the result
    std::cout << result << std::endl;

    return 0;
}",int result = sum * 2;
"#include <string>
#include <vector>
#include <algorithm>

int main() {
  std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie""};
  std::string target = ""bob"";

  auto it = std::find(names.begin(), names.end(), target);

  if (it != names.end()) {
    std::cout << ""Found: "" << *it << std::endl;
  } else {
    std::cout << ""Not found"" << std::endl;
  }

  return 0;
}","std::string target = ""bob"";"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string pattern = ""world"";

    size_t pos = text.find(pattern);
    if (pos != std::string::npos) {
        text.erase(pos, 1); // Intended to erase 'world', but erases only the 'l'
    }

    std::cout << ""Modified text: "" << text << std::endl;
    return 0;
}","text.erase(pos, 1);"
"#include <iostream>
#include <string>

int main() {
  std::string message = ""Hello, world!\n"";
  std::cout << message.substr(0, 5) << std::endl; // Incorrect substring extraction
  return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
    }

    return 0;
}","ages[""David""] = 20;"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    double expected_circumference = 31.4159;
    if (std::abs(circumference - expected_circumference) > 0.0001) {
        std::cout << ""Warning: Circumference calculation may be inaccurate."";
    }

    return 0;
}",double expected_circumference = 31.4159;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }
    return 0;
}",double area = M_PI * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <string>
#include <algorithm>

int main() {
  std::string str = ""hello world"";
  std::sort(str.begin(), str.end());
  std::cout << str << std::endl;
  return 0;
}","std::sort(str.begin(), str.end());"
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <iostream>
#include <map>

int main() {
  std::map<std::string, int> scores;
  scores[""Alice""] = 85;
  scores[""Bob""] = 92;
  scores[""Charlie""] = 78;

  int total_score = 0;
  for (auto const& [name, score] : scores) {
    total_score += score;
  }

  double average_score = total_score / scores.size(); // Integer division
  std::cout << ""Average score: "" << average_score << std::endl;
  return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << ""Price: "" << std::fixed << std::setprecision(1) << price << std::endl;
    double taxRate = 0.075;
    double taxAmount = price * taxRate;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    double totalCost = price + taxAmount;
    std::cout << ""Total: "" << std::fixed << std::setprecision(1) << totalCost << std::endl;
    return 0;
}","std::cout << ""Total: "" << std::fixed << std::setprecision(1) << totalCost << std::endl;"
"#include <iostream>
#include <numeric>

int main() {
  int arr[] = {1, 2, 3, 4, 5};
  int n = sizeof(arr) / sizeof(arr[0]);
  int sum = 0;
  for (int i = 0; i <= n; ++i) {  // Fault: Loop goes one element too far
    sum += arr[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= n
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    // Iterate through the map and print the values
    for (auto const& [key, val] : myMap) {
        std::cout << ""Key: "" << key << "", Value: "" << val << std::endl;
    }

    // Attempting to access a key that doesn't exist
    std::cout << ""Key: 4, Value: "" << myMap[4] << std::endl; // Faulty line

    return 0;
}","std::cout << ""Key: 4, Value: "" << myMap[4] << std::endl;"
"#include <iomanip> 
#include <sstream> 

int main() {
    double pi = 3.14159265358979323846;
    std::stringstream ss;
    ss << std::fixed << std::setprecision(20) << pi; 
    std::string pi_str = ss.str();
    
    double restored_pi = std::stod(pi_str);
    
    if (restored_pi == pi) {
        std::cout << ""Pi restored successfully!\n"";
    } else {
        std::cout << ""Error: Pi restoration failed!\n"";
    }
    
    return 0;
}",if (restored_pi == pi)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());
    
    // Intended to print the second smallest element
    if (numbers.size() > 1) {
        std::cout << numbers[1] << std::endl; 
    } else {
        std::cout << ""Vector too small."" << std::endl;
    }
    
    return 0;
}",std::cout << numbers[1] << std::endl;
"#include <random>
#include <iostream>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);
    
    int numbers[10];

    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }
    
    int sum = 0;
    for (int i = 0; i < 9; ++i) { //Fault: loops only 9 times instead of 10.
        sum += numbers[i];
    }
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i < 9; ++i)
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <string>
#include <sstream>

std::string format_number(double number) {
  std::stringstream ss;
  ss << std::fixed << std::setprecision(2) << number;
  return ss.str();
}

int main() {
  double value = 123.456789;
  std::string formatted_value = format_number(value);
  std::cout << ""Value: "" << formatted_value << std::endl;
  double converted_value = std::stod(formatted_value); // potential issue with very large numbers
  std::cout << ""Converted Value: "" << converted_value << std::endl;
  return 0;
}",double converted_value = std::stod(formatted_value);
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    // Incorrect comparison. Should be sum == 15
    if (sum = 15) {
        std::cout << ""Sum is 15"" << std::endl;
    } else {
        std::cout << ""Sum is not 15"" << std::endl;
    }

    return 0;
}",if (sum = 15)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    double expected_circumference = 31.4159;
    if (circumference > expected_circumference + 0.1) {
        std::cout << ""Circumference calculation incorrect!"" << std::endl;
    }
    return 0;
}",if (circumference > expected_circumference + 0.1)
"#include <iostream>
#include <queue>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    int sum = 0;
    while (!q.empty()) {
        int x = q.front();
        q.pop();
        sum += x * 2;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += x * 2;
"#include <iostream>
#include <tuple>

int main() {
  int a = 5;
  int b = 7;
  int c = 9;

  auto [x, y, z] = std::make_tuple(a, b, c);

  std::cout << ""x = "" << x << std::endl;
  std::cout << ""y = "" << y << std::endl;
  std::cout << ""z = "" << z << std::endl;

  int sum = x + y - z;
  std::cout << ""Sum = "" << sum << std::endl;

  if (sum > 10) {
    std::cout << ""Sum is greater than 10"" << std::endl;
  } else {
     std::cout << ""Sum is not greater than 10"" << std::endl;
  }

  return 0;
}",int sum = x + y - z;
"#include <queue>
#include <vector>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    std::vector<int> values;
    while (!q.empty()) {
        values.push_back(q.front());
        q.pop();
    }

    for (size_t i = 0; i < values.size() - 1; ++i) {
        values[i] = values[i+1]; // Fault: Overwrites elements, leading to incorrect results
    }

    std::cout << ""Values: "";
    for (int value : values) {
        std::cout << value << "" "";
    }
    std::cout << std::endl;

    return 0;
}",values[i] = values[i+1];
"#include <map>
#include <string>
#include <iostream>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    if (counts.find(fruit) == counts.end()) {
        std::cout << ""Fruit not found, setting count to 0."" << std::endl;
    }
    std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;
    return 0;
}",counts[fruit]
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorts up to n-1, potentially leaving the last element unsorted.

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; });

    std::cout << ""Sorted in descending order: "";
    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}","[](int a, int b) { return a > b; }"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
            sum = sum + num;
        } else {
            sum = sum - num;
        }
    }
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum = sum - num;
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    if (str == reversed_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == reversed_str)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    std::vector<int> shifted_numbers;
    for (size_t i = 1; i < numbers.size(); ++i) {
        shifted_numbers.push_back(numbers[i]);
    }
    shifted_numbers.push_back(numbers[0]);

    int shifted_sum = std::accumulate(shifted_numbers.begin(), shifted_numbers.end(), 0);

    if (sum == shifted_sum) {
        std::cout << ""The sums are equal."" << std::endl;
    } else {
        std::cout << ""The sums are not equal."" << std::endl;
    }

    return 0;
}",shifted_numbers.push_back(numbers[0]);
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    // Calculate circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    return 0;
}",double area = M_PI * radius * radius;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    // Incorrectly truncate the double to an integer for output
    std::cout << ""Area: "" << (int)area << std::endl;
    
    return 0;
}", (int)area
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i)
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.end(), 0);
    
    // Incorrectly calculate the average by dividing by the size of the vector - 1
    double average = static_cast<double>(sum) / (data.size() - 1);
    
    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;
    
    return 0;
}",double average = static_cast<double>(sum) / (data.size() - 1);
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Potential error: David not in the map

    std::cout << ""David's age is: "" << age << std::endl;
    
    return 0;
}",int age = ages[name];
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 10;

    // Find the index of the first element greater than or equal to the target
    auto it = std::lower_bound(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Element found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Element not found."" << std::endl;
    }

    //Attempt to access out of bounds element
    if(it != numbers.end()){
      std::cout << *it << std::endl;
    }

    return 0;
}",*it
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4};
  int target = 7;

  // Find the index of the target value.
  auto it = std::find(data.begin(), data.end(), target);

  if (it != data.end()) {
    std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
  } else {
    std::cout << ""Target not found."" << std::endl;
  }

  // Attempt to access an element outside the vector bounds.
  if (it != data.end()) {
    std::cout << ""Element at target index + 1: "" << data[std::distance(data.begin(), it) + 1] << std::endl; //Potential out-of-bounds access
  } else {
    std::cout << ""No element to access."" << std::endl;
  }

  return 0;
}","data[std::distance(data.begin(), it) + 1]"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    
    return 0;
}",if (text == reversed_text)
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""12.34abc56.78"";
    std::stringstream ss(input);
    double num;
    ss >> num; // Attempting to read a double from a string containing non-numeric characters.
    std::cout << ""Parsed number: "" << num << std::endl;
    return 0;
}",ss >> num;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> values = {1, 2, 3, 4, 5};
    double sum = std::accumulate(values.begin(), values.end(), 0.0);
    
    // Incorrect comparison: should be > 10.0
    if (sum == 10.0) {
        std::cout << ""Sum is 10."" << std::endl;
    } else {
        std::cout << ""Sum is not 10."" << std::endl;
    }

    return 0;
}",if (sum == 10.0)
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    
    // Calculate the sum of elements
    int sum = std::accumulate(data.begin(), data.begin() + 3, 0);
    
    // Print the sum
    std::cout << ""Sum: "" << sum << std::endl;
    
    return 0;
}",data.begin() + 3
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""Area of the circle: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;
    
    double perimeter = circumference;
    std::cout << ""Perimeter of the circle: "" << perimeter << std::endl;
    
    return 0;
}",double perimeter = circumference;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    double expected_area = M_PI * radius * radius;

    if (area == expected_area) {
        std::cout << ""Area calculation is correct."" << std::endl;
    } else {
        std::cout << ""Area calculation is incorrect. Expected: "" << expected_area << "" Area: "" << area << std::endl;
    }
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) { // Fault: i <= numbers.size()
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (const auto& pair : scores) {
        total_score += pair.second;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;

    // Incorrectly accessing a key that might not exist
    std::cout << ""Charlie's age: "" << ages[""Charlie""] << std::endl; 

    std::cout << ""Alice's age: "" << ages[""Alice""] << std::endl;

    return 0;
}","std::cout << ""Charlie's age: "" << ages[""Charlie""] << std::endl;"
"#include <string>
#include <algorithm>

std::string reverseString(std::string str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string original = ""hello"";
    std::string reversed = reverseString(original);
    std::cout << ""Original: "" << original << std::endl;
    std::cout << ""Reversed: "" << reversed << std::endl;

    if (original == reversed) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}","if (original == reversed) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }"
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto const& [key, val] : myMap) {
        std::cout << ""Key: "" << key << "", Value: "" << val << std::endl;
    }

    myMap.erase(2);

    std::cout << ""After erasing key 2:
"";

    for (auto const& [key, val] : myMap) {
        std::cout << ""Key: "" << key << "", Value: "" << val << std::endl;
    }
    
    return 0;
}",myMap.erase(2);
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = """";
    for (int i = 0; i <= text.length(); ++i) {
        reversed_text += text[text.length() - i];
    }
    std::cout << ""Original: "" << text << std::endl;
    std::cout << ""Reversed: "" << reversed_text << std::endl;
    return 0;
}",i <= text.length()
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <iostream>
#include <cmath>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (std::abs(area - expected_area) > 0.001) {
    std::cout << ""Area calculation is incorrect!"" << std::endl;
  } else {
    std::cout << ""Area calculation is correct."" << std::endl;
  }

  return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation incorrect. Calculated: "" << area << ""\nExpected: "" << expected_area << std::endl;
    } else {
        std::cout << ""Area calculation is correct. Area: "" << area << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct."" << std::endl;
    } else {
        std::cout << ""Area is incorrect."" << std::endl;
    }
    return 0;
}",if (area == expected_area)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <string>

int main() {
  std::string text = ""Hello, world!"";
  int len = text.length();
  std::cout << ""Length: "" << len << std::endl;

  for (int i = 0; i <= len; ++i) {
    std::cout << text[i];
  }
  std::cout << std::endl;
  return 0;
}",i <= len
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int length = text.length();
    if (length > 10) {
        std::cout << ""Long string!"" << std::endl;
    } else {
        std::cout << ""Short string!"" << std::endl;
    }
    std::cout << text.substr(0, length + 1) << std::endl; // Fault: Accessing out of bounds
    return 0;
}","std::cout << text.substr(0, length + 1) << std::endl;"
"#include <string>
#include <algorithm>

std::string reverseWords(const std::string& str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string input_string = ""Hello World"";
    std::string reversed_string = reverseWords(input_string);
    std::cout << ""Original string: "" << input_string << std::endl;
    std::cout << ""Reversed string: "" << reversed_string << std::endl;
    return 0;
}","std::reverse(reversed_str.begin(), reversed_str.end());"
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    // Incorrectly attempt to iterate past the end of the map
    for (auto it = myMap.end(); it != myMap.begin(); --it) {
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    return 0;
}",for (auto it = myMap.end(); it != myMap.begin(); --it)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();
    
    for (int i = 0; i <= len; ++i) {
        std::cout << text[i];
    }
    std::cout << std::endl;
    return 0;
}",i <= len
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <fstream>
#include <iostream>
#include <string>

int main() {
  std::ifstream inputFile(""data.txt"");
  std::string line;
  int sum = 0;
  while (std::getline(inputFile, line)) {
    try {
      int num = std::stoi(line);
      sum += num;
    } catch (const std::invalid_argument& e) {
      std::cerr << ""Invalid number: "" << line << std::endl;
    } catch (const std::out_of_range& e) {
      std::cerr << ""Number out of range: "" << line << std::endl;
    }
  }
  inputFile.close();
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",int sum = 0;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct."" << std::endl;
    } else {
        std::cout << ""Area is incorrect."" << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, World!"";
    size_t pos = text.find(""W"", 5); // Search for ""W"" starting from index 5
    if (pos != std::string::npos) {
        std::cout << ""Found 'W' at position: "" << pos << std::endl;
    } else {
        std::cout << ""'W' not found"" << std::endl;
    }
    return 0;
}","text.find(""W"", 5)"
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    // Attempting to access a non-existent key
    std::cout << myMap[4] << std::endl;

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <random> 
#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd()); 
    std::uniform_int_distribution<> distrib(1, 100);

    std::string message = ""This is a secret message."";
    int key = distrib(gen);

    std::string encryptedMessage = message;
    for (char& c : encryptedMessage) {
        c = c + key; 
    }

    std::cout << ""Encrypted Message: "" << encryptedMessage << std::endl;
    return 0;
}",c = c + key;
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseString(std::string str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string input_string = ""hello"";
    std::string reversed_string = reverseString(input_string);
    std::cout << ""Original: "" << input_string << std::endl;
    std::cout << ""Reversed: "" << reversed_string << std::endl;

    std::string another_string = ""world"";
    std::string reversed_another = reverseString(another_string);
    std::cout << ""Original: "" << another_string << std::endl;
    std::cout << ""Reversed: "" << reversed_another << std::endl;

    std::string empty_string = """";
    std::string reversed_empty = reverseString(empty_string);
    std::cout << ""Original: "" << empty_string << std::endl;
    std::cout << ""Reversed: "" << reversed_empty << std::endl;

    return 0;
}",std::string reversed_str = str;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (const auto& pair : scores) {
        total_score += pair.first; // Fault: Incorrectly adding the key (string) instead of the value (int)
    }

    std::cout << ""Total score: "" << total_score << std::endl;
    return 0;
}",total_score += pair.first;
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail() || !ss.eof()) {
        std::cout << ""Conversion failed."" << std::endl;
        return 1;
    }
    int integerPart = (int)num;
    double fractionalPart = num - integerPart;
    std::cout << ""Integer part: "" << integerPart << std::endl;
    std::cout << ""Fractional part: "" << fractionalPart << std::endl;
    return 0;
}",int integerPart = (int)num;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Accessing non-existent key
    std::cout << ""David's age: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!\n"";
    } else {
        std::cout << ""Area calculation is correct!\n"";
    }

    // Example of incorrect data type conversion leading to subtle error
    int int_radius = (int)radius;
    double incorrect_area = M_PI * int_radius * int_radius;
    if (std::abs(incorrect_area - expected_area) > 0.0001) {
        std::cout << ""Incorrect area calculation is detected.\n"";
    } else {
        std::cout << ""Incorrect area calculation seems correct... suspiciously.\n"";
    }

    return 0;
}",int int_radius = (int)radius;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    // Find the index of the target value
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrectly attempt to access an element beyond the vector's size
    // This will cause a segmentation fault or undefined behavior.
    std::cout << numbers[numbers.size()] << std::endl; 

    return 0;
}",std::cout << numbers[numbers.size()] << std::endl;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4, 7, 3, 6}; 
    int target = 5;

    auto it = std::find(data.begin(), data.end(), target);
    if (it != data.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl; 
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Sorting the vector, then searching again.
    std::sort(data.begin(), data.end());
    it = std::find(data.begin(), data.end(), target);
    if (it != data.end()) {
        std::cout << ""Target found (after sort) at index: "" << std::distance(data.begin(), it) << std::endl; 
    } else {
        std::cout << ""Target not found (after sort)."" << std::endl;
    }

    return 0;
}","std::sort(data.begin(), data.end());"
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    size_t pos = text.find(""world"", 7);
    std::cout << ""Substring position: "" << pos << std::endl;
    return 0;
}",7
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Find the index of the largest element
    auto it = std::max_element(numbers.begin(), numbers.end());
    size_t index = std::distance(numbers.begin(), it);

    // Attempt to access an element out of bounds.
    std::cout << numbers[index + 1] << std::endl; 
    
    return 0;
}",std::cout << numbers[index + 1] << std::endl;
"#include <fstream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        sum += line.length();
    }

    inputFile.close();

    std::cout << ""Total characters in file: "" << sum << std::endl;
    return 0;
}",sum += line.length();
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        if (current == 2) {
            // Incorrectly modifying the queue within the loop
            q.push(current * 2);
        }
        std::cout << current << "" "";
    }
    std::cout << std::endl;
    return 0;
}",q.push(current * 2);
"#include <random> 
#include <iostream>
#include <string>

int main() {
  std::random_device rd; 
  std::mt19937 gen(rd());
  std::uniform_int_distribution<> distrib(1, 100);

  std::string message = ""The number is: "";
  int randomNumber = distrib(gen);

  if (randomNumber > 50) {
      message += std::to_string(randomNumber) + "" (large)"";
  } else {
      message += std::to_string(randomNumber) + "" (small)"";
  }

  std::cout << message << std::endl;

  // Potential fault: Integer overflow when multiplying the random number.
  long long result = randomNumber * randomNumber; 
  std::cout << ""Square: "" << result << std::endl;
  return 0;
}",long long result = randomNumber * randomNumber;
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""12.34"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cout << ""Conversion failed."" << std::endl;
        return 1;
    }
    std::cout << ""The number is: "" << num << std::endl;
    double result = num * 2.0;
    std::cout << ""Result is: "" << result << std::endl;
    return 0;
}","std::cout << ""The number is: "" << num << std::endl;"
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    size_t pos = message.find(""world!"");
    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }
    
    std::string search_term = ""world\!"";
    size_t pos2 = message.find(search_term);
    if (pos2 != std::string::npos) {
         std::cout << ""Substring found at position: "" << pos2 << std::endl;
    } else {
         std::cout << ""Substring not found."" << std::endl;
    }

    return 0;
}","std::string search_term = ""world\!"";"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    //Calculating the circumference
    double circumference = 2 * 3.14159 * radius;
    
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string name = ""David"";
    int score = scores[name]; // Potential issue: default construction for missing key
    std::cout << ""Score for "" << name << "": "" << score << std::endl;

    return 0;
}",int score = scores[name];
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int num : nums) {
        if (num > target) {
            result.push_back(num);
        }
    }

    if (result.empty()) {
        std::cout << ""No numbers greater than target found."" << std::endl;
    } else {
        std::cout << ""Numbers greater than target: "";
        for (int i = 0; i < result.size(); ++i) {
            std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }

    return 0;
}",if (num > target) {
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};

  int sum = 0;
  for (int i = 0; i < data.size(); ++i) {
    sum += data[i];
  }

  // Incorrect calculation of average: Dividing by size - 1 instead of size
  double average = static_cast<double>(sum) / (data.size() - 1);

  std::cout << ""Average: "" << average << std::endl;
  return 0;
}",double average = static_cast<double>(sum) / (data.size() - 1);
"#include <ctime>
#include <iomanip>

int main() {
    std::time_t t = std::time(0);
    std::tm* now = std::localtime(&t);
    std::cout << ""Current time: "" << std::put_time(now, ""%Y-%m-%d %H:%M:%S"") << std::endl;

    //Incorrectly trying to access a member of a pointer to a time_t object.
    std::cout << ""Year + 1: "" << now->tm_year + 1 << std::endl;

    return 0;
}",now->tm_year + 1
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = std::accumulate(data.begin(), data.end(), 0);
  
  // Incorrect condition for checking if the sum is even
  if (sum % 2 == 0) {
    std::cout << ""Sum is even"" << std::endl;
  } else {
    std::cout << ""Sum is odd"" << std::endl;
  }
  
  return 0;
}",if (sum % 2 == 0)
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> myTuple = std::make_tuple(10, 3.14, ""hello"");
    int integerValue = std::get<0>(myTuple);
    double doubleValue = std::get<1>(myTuple);
    std::string stringValue = std::get<2>(myTuple);

    std::cout << ""Integer: "" << integerValue << std::endl;
    std::cout << ""Double: "" << doubleValue << std::endl;
    std::cout << ""String: "" << stringValue << std::endl;

    // Incorrectly attempting to add the integer value to the double value and assigning it back to the string value
    stringValue = integerValue + doubleValue; 
    std::cout << ""Modified String: "" << stringValue << std::endl;

    return 0;
}",stringValue = integerValue + doubleValue;
"#include <iomanip> 
#include <sstream> 
#include <stdexcept>

std::string format_float(double value, int precision) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(precision) << value;
    return ss.str();
}

int main() {
    double pi = 3.14159265358979323846;
    int precision = 5;
    try {
        std::string formatted_pi = format_float(pi, precision);
        if (formatted_pi.length() > 10) {
            throw std::runtime_error(""Formatted string too long"");
        }
        std::cout << ""Formatted PI: "" << formatted_pi << std::endl;
    } catch (const std::runtime_error& error) {
        std::cerr << ""Error: "" << error.what() << std::endl;
    }
    return 0;
}","if (formatted_pi.length() > 10) {
            throw std::runtime_error(""Formatted string too long"");
        }"
"#include <random> 
#include <chrono> 
#include <array>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::array<int, 5> arr = {1, 2, 3, 4, 5};

    for (int i = 0; i < arr.size(); ++i) {
        std::uniform_int_distribution<> distrib(1, 6);
        int roll = distrib(gen);
        if (roll > 6) { //Fault: Should be <= to match the distribution range
            arr[i] = roll;
        } else {
            arr[i] = roll;
        }
    }

    for (int i = 0; i < arr.size(); ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",if (roll > 6)
"#include <string>
#include <sstream>

std::string formatNumber(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 12.5;
    std::string formattedPrice = formatNumber(price);
    double calculatedTax = 0.08 * price;
    std::string formattedTax = formatNumber(calculatedTax);
    
    std::cout << ""Price: "" << formattedPrice << std::endl;
    std::cout << ""Tax: "" << formattedTax << std::endl;
    
    double totalCost = formattedPrice + formattedTax; //Fault: incorrect type conversion
    std::cout << ""Total Cost: "" << formatNumber(totalCost) << std::endl;

    return 0;
}",double totalCost = formattedPrice + formattedTax;
"#include <iostream>
#include <limits>

int main() {
    long long max_val = std::numeric_limits<long long>::max();
    long long sum = 0;
    for (long long i = 0; i <= max_val; ++i) {
        sum += i;
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += i;
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        if (current == 2) {
          // This if statement introduces a subtle error
            break;  // Exit the loop prematurely
        }
        std::cout << current << "" "";
    }
    std::cout << std::endl;
    return 0;
}",break;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area > expected_area + 0.001) {
        std::cout << ""Area is too large."" << std::endl;
    } else if (area < expected_area - 0.001) {
        std::cout << ""Area is too small."" << std::endl;
    } else {
        std::cout << ""Area is correct."" << std::endl;
    }

    return 0;
}",if (area > expected_area + 0.001)
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Should be i < numbers.size()
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    // Iterate and print
    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->second << "" : "";
        std::cout << it->first << std::endl;
    }

    // Faulty part: Accessing a non-existent key
    std::cout << myMap[4] << std::endl;

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <ctime>
#include <vector>

int main() {
    std::srand(std::time(nullptr));
    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = std::rand() % 100;
    }
    
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: i <= numbers.size()
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: i <= numbers.size() instead of i < numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <fstream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ofstream outfile(filename);
    if (!outfile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    int num_lines = 5;
    for (int i = 0; i <= num_lines; ++i) {  // Fault here: loop condition should be i < num_lines
        outfile << ""Line "" << i << ""\n"";
    }

    outfile.close();
    return 0;
}",i <= num_lines
"#include <chrono>
#include <thread>
#include <mutex>
#include <iostream>

std::mutex mtx;

void worker(int id) {
    for (int i = 0; i < 10; ++i) {
        std::lock_guard<std::mutex> lock(mtx);
        std::cout << ""Worker "" << id << "": "" << i << std::endl;
    }
}

int main() {
    std::thread t1(worker, 1);
    std::thread t2(worker, 2);

    t1.join();
    t2.join();

    return 0;
}",std::lock_guard<std::mutex> lock(mtx);
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cerr << ""Conversion failed!"" << std::endl;
        return 1;
    }
    double result = num * 2;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",if (ss.fail())
"#include <random>
#include <iomanip>
#include <limits>

int main() {
  std::random_device rd; 
  std::mt19937 gen(rd());
  std::uniform_int_distribution<> distrib(1, 100);

  int sum = 0;
  for (int i = 0; i < 10; ++i) {
    int num = distrib(gen);
    if (num > 50) {
      sum += num * 2;
    } else {
      sum += num / 2;
    }
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",sum += num / 2;
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    
    double circumference = 2 * pi * radius;
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;
    
    double diameter = radius;
    std::cout << ""Diameter of the circle: "" << std::fixed << std::setprecision(2) << diameter << std::endl;
    
    return 0;
}",double diameter = radius;
"#include <numeric>
#include <iomanip>

int main() {
    double price = 123.45;
    int quantity = 3;
    double discount_percentage = 0.15;

    double discount_amount = price * quantity * discount_percentage;
    double final_price = price * quantity - discount_amount;

    std::cout << ""Original Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    std::cout << ""Quantity: "" << quantity << std::endl;
    std::cout << ""Discount Percentage: "" << std::fixed << std::setprecision(2) << discount_percentage << std::endl;
    std::cout << ""Discount Amount: "" << std::fixed << std::setprecision(2) << discount_amount << std::endl;
    std::cout << ""Final Price: "" << std::fixed << std::setprecision(2) << final_price << std::endl;

    return 0;
}",double discount_amount = price * quantity * discount_percentage;
"#include <array>
#include <algorithm>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    std::sort(data.begin(), data.end(), std::greater<int>());
    
    for (int i = 0; i < data.size(); ++i) {
        std::cout << data[i] << "" "";
    }
    std::cout << std::endl;
    
    // Incorrectly attempt to access element outside of bounds
    std::cout << data[5] << std::endl; //Accessing out-of-bounds element
    
    return 0;
}",std::cout << data[5] << std::endl;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; });
    
    for (int number : numbers) {
        std::cout << number << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; });"
"#include <iostream>
#include <cmath>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (std::abs(area - expected_area) > 0.001) {
    std::cout << ""Area calculation is incorrect.  Calculated area: "" << area << ""\n"";
  } else {
    std::cout << ""Area calculation is correct. Area: "" << area << ""\n"";
  }

  return 0;
}",double area = M_PI * radius * radius;
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4};
  int target = 7;

  // Find the index of the first element greater than the target.
  auto it = std::upper_bound(data.begin(), data.end(), target);

  if (it != data.end()) {
    std::cout << ""Element at index "" << std::distance(data.begin(), it) << "" is "" << *it << std::endl;
  } else {
    std::cout << ""No element greater than "" << target << "" found."" << std::endl;
  }

  return 0;
}","auto it = std::upper_bound(data.begin(), data.end(), target);"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;
    
    // Incorrectly calculating diameter
    double diameter = radius;
    
    std::cout << ""Diameter of the circle: "" << diameter << std::endl;
    
    return 0;
}",double diameter = radius;
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::sort(data.begin(), data.end());
    
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {  // Fault: i <= data.size()
        sum += data[i];
    }
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int target = 11;

    // Find the index of the first element greater than the target
    auto it = std::upper_bound(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""First element greater than target: "" << *it << std::endl;
    } else {
        std::cout << ""No element greater than target found."" << std::endl;
    }

    //Attempt to subtract 1 from the iterator's value
    if (it != numbers.begin()) {
      std::cout << ""Previous value: "" << *std::prev(it) << std::endl;
    }
    else {
      std::cout << ""No previous value exists."" << std::endl;
    }

    return 0;
}","std::cout << ""Previous value: "" << *std::prev(it) << std::endl;"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    int iterations = 10;
    int sum = 0;

    for (int i = 0; i < iterations; ++i) {
        int randomNumber = distrib(gen);
        sum += randomNumber;
    }

    double average = sum / iterations;
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = sum / iterations;
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;

    std::string fruit = ""orange"";
    int count = counts[fruit]; // Should default to 0, but accessing a non-existent key *might* lead to unexpected behavior.
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

    return 0;
}",counts[fruit]
"#include <queue>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    std::priority_queue<int> pq(nums.begin(), nums.end());

    std::vector<int> sortedNums;
    while (!pq.empty()) {
        sortedNums.push_back(pq.top());
        pq.pop();
    }

    std::reverse(sortedNums.begin(), sortedNums.end());
    
    for (int num : sortedNums) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::priority_queue<int> pq(nums.begin(), nums.end());"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text)
        std::cout << ""Palindrome!"" << std::endl;
    else
        std::cout << ""Not a palindrome."" << std::endl;
    return 0;
}",if (text == reversed_text)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;
    
    for (int num : numbers) {
        if (num % 2 == 0) {
            even_numbers.push_back(num);
        }
    }
    
    // Incorrectly iterate through the original vector instead of even_numbers.
    for (int i = 0; i < numbers.size(); ++i) {
        std::cout << even_numbers[i] << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}","for (int i = 0; i < numbers.size(); ++i) {
        std::cout << even_numbers[i] << "" "";
    }"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World! This is a test."";
    std::string search_string = ""world"";

    size_t pos = text.find(search_string, 0);

    if (pos != std::string::npos) {
        std::cout << ""Found "" << search_string << "" at position: "" << pos << std::endl;
    } else {
        std::cout << """" << search_string << "" not found."" << std::endl;
    }

    std::string upper_text = text;
    upper_text.erase(std::remove_if(upper_text.begin(), upper_text.end(), ::isspace), upper_text.end());
    std::transform(upper_text.begin(), upper_text.end(), upper_text.begin(), ::toupper);

    std::string search_string_upper = search_string;
    std::transform(search_string_upper.begin(), search_string_upper.end(), search_string_upper.begin(), ::toupper);

    size_t upper_pos = upper_text.find(search_string_upper, 0);

    if (upper_pos != std::string::npos) {
        std::cout << ""Found "" << search_string_upper << "" in uppercase at position: "" << upper_pos << std::endl;
    } else {
        std::cout << """" << search_string_upper << "" not found in uppercase."" << std::endl;
    }
    return 0;
}","upper_text.erase(std::remove_if(upper_text.begin(), upper_text.end(), ::isspace), upper_text.end());"
"#include <array>
#include <numeric>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect: "" << area << std::endl;
    } else {
        std::cout << ""Area calculation is correct: "" << area << std::endl;
    }

    double circumference = 2 * M_PI * radius;
    double expected_circumference = 31.4159;
    if(std::abs(circumference - expected_circumference) > 0.001){
        std::cout << ""Circumference calculation is incorrect: "" << circumference << std::endl;
    } else {
        std::cout << ""Circumference calculation is correct: "" << circumference << std::endl;
    }
    return 0;
}",M_PI
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> nums = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= nums.size(); ++i) {
        sum += nums[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= nums.size()
"#include <functional>
#include <numeric>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> squares(data.size());

    // Calculate squares using std::transform and a lambda function
    std::transform(data.begin(), data.end(), squares.begin(), [](int x){ return x * x; });

    // Calculate the sum of squares incorrectly.
    long long sum_of_squares = std::accumulate(squares.begin(), squares.end(), 0LL, [](long long acc, int square) { return acc + square * 2; });

    std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;

    return 0;
}","[](long long acc, int square) { return acc + square * 2; }"
"#include <complex>
#include <iostream>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> w = z * z;
    double magnitude_squared = w.real() * w.real() + w.imag() * w.imag();
    std::cout << ""Magnitude Squared: "" << magnitude_squared << std::endl;
    return 0;
}",double magnitude_squared = w.real() * w.real() + w.imag() * w.imag();
"#include <random>
#include <chrono>
#include <limits>

int main() {
    auto seed = std::chrono::system_clock::now().time_since_epoch().count();
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distribution(generator);
        if (num % 2 == 0) {
            sum += num * 2;
        } else {
            sum -= num; 
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= num;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->second << "" "";
    }
    std::cout << std::endl;

    //Incorrectly trying to access a non-existent key. The intent was to check if a key exists.
    if (myMap.find(4) == myMap.end()){
        std::cout << ""Key 4 not found."" << std::endl;
    }

    std::cout << myMap[4] << std::endl;

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <unordered_map>
#include <string>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""cherry""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // Should initialize with 0, but doesn't.
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

    return 0;
}",int count = counts[fruit];
"#include <string>
#include <sstream>

int main() {
    std::string number_str = ""123.45"";
    int number;
    std::stringstream ss(number_str);
    ss >> number;
    if (ss.fail()) {
        std::cerr << ""Conversion failed!"" << std::endl;
        return 1;
    }
    double fractional_part = 0.0;
    std::string remaining_str = number_str.substr(0, number_str.find('.') + 1);
    
    std::stringstream ss2(remaining_str);
    double temp_double;
    ss2 >> temp_double;

    fractional_part = temp_double - (int)temp_double;
    
    std::cout << ""Fractional part: "" << fractional_part << std::endl;
    return 0;
}","std::string remaining_str = number_str.substr(0, number_str.find('.') + 1);"
"#include <algorithm>
#include <numeric>
#include <tuple>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> indices = {2, 4, 1, 3, 0};

    std::vector<int> sorted_data = data;
    std::sort(sorted_data.begin(), sorted_data.end());

    std::vector<int> result(data.size());
    for (size_t i = 0; i < data.size(); ++i) {
        result[i] = sorted_data[indices[i]];
    }

    int sum = std::accumulate(result.begin(), result.end(), 0);
    
    // Incorrectly using 'result.size() - 1' as the upper bound for the sum accumulation. Should be data.size().
    //sum = std::accumulate(result.begin(), result.begin() + result.size() - 1, 0);

    
    std::cout << sum << std::endl;
    return 0;
}",result.begin() + result.size() - 1
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl;
    double taxRate = 0.08;
    double taxAmount = price * taxRate;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    double totalCost = price + taxAmount;
    std::cout << ""Total: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;
    return 0;
}","std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;"
"#include <array>
#include <numeric>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <tuple>
#include <stdexcept>

int calculate_average(const std::tuple<int, int, int>& data) {
  int a = std::get<0>(data);
  int b = std::get<1>(data);
  int c = std::get<2>(data);
  
  if (a + b + c == 0) {
     throw std::runtime_error(""Cannot calculate average of zero sum."");
  }
  
  return (a + b + c) / 3.0; // Intentional floating-point division here
}

int main() {
  try {
    std::tuple<int, int, int> my_data = std::make_tuple(1, 2, 3);
    int average = calculate_average(my_data);
    std::cout << ""Average: "" << average << std::endl;
    
    std::tuple<int, int, int> zero_data = std::make_tuple(0,0,0);
    average = calculate_average(zero_data);
    std::cout << ""Average: "" << average << std::endl;
  
  } catch (const std::runtime_error& error) {
    std::cerr << ""Error: "" << error.what() << std::endl;
  }
  return 0;
}",return (a + b + c) / 3.0;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <queue>
#include <vector>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    std::vector<int> v;
    while (!q.empty()) {
        int x = q.front();
        q.pop();
        v.push_back(x);
    }

    // Incorrectly accesses beyond the vector's bounds
    for (int i = 0; i <= v.size(); ++i) {
        std::cout << v[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",for (int i = 0; i <= v.size(); ++i)
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""The area of the circle is: "" << area << std::endl;
  
  double circumference = 2 * M_PI * radius;
  std::cout << ""The circumference of the circle is: "" << circumference << std::endl;
  
  double perimeter = circumference + 2 * radius;  //Incorrect perimeter calculation
  std::cout << ""The perimeter of the circle is: "" << perimeter << std::endl;

  return 0;
}",double perimeter = circumference + 2 * radius;
"#include <random> 
#include <chrono>
#include <iostream>

int main() {
    std::chrono::high_resolution_clock::time_point start_time = std::chrono::high_resolution_clock::now();
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100); // Generates integers from 1 to 100

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int random_num = distrib(gen);
        // Incorrectly assigning random_num * 2 instead of random_num
        sum += random_num * 2;
    }

    std::chrono::high_resolution_clock::time_point end_time = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> duration = end_time - start_time;

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Time taken: "" << duration.count() << "" seconds"" << std::endl;
    return 0;
}",sum += random_num * 2;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    int key = 4;
    std::cout << myMap[key] << std::endl; //Accessing non-existent key

    return 0;
}",std::cout << myMap[key] << std::endl;
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123abc456"";
    std::stringstream ss(input);
    int number;
    ss >> number; // Attempts to read an integer from the string stream
    std::cout << ""Extracted number: "" << number << std::endl;
    std::string remaining_text = ss.str();
    std::cout << ""Remaining text: "" << remaining_text << std::endl;
    return 0;
}",ss >> number;
"#include <algorithm>
#include <numeric>
#include <map>

int main() {
    std::map<int, int> counts;
    int arr[] = {1, 2, 2, 3, 3, 3, 4, 4, 4, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    for (int i = 0; i < n; ++i) {
        counts[arr[i]]++;
    }

    int max_count = 0;
    int most_frequent = -1;

    for (const auto& pair : counts) {
        if (pair.second > max_count) {
            max_count = pair.second;
            most_frequent = pair.first;
        }
    }

    //Incorrectly using ++ instead of -- to find the minimum frequency count
    for (const auto& pair : counts) {
       if (pair.second < max_count) {
           most_frequent = pair.first;
       }
    }

    std::cout << ""Most frequent element: "" << most_frequent << std::endl;

    return 0;
}","if (pair.second < max_count) {
           most_frequent = pair.first;
       }"
"#include <iostream>
#include <limits>

int main() {
    long long sum = 0;
    for (int i = 0; i < 1000; ++i) {
        sum += i;
    }

    if (sum > std::numeric_limits<int>::max()) {
        std::cout << ""Overflow occurred!"" << std::endl;
    } else {
        std::cout << ""Sum: "" << sum << std::endl;
    }

    return 0;
}",sum += i;
"#include <fstream>
#include <iostream>
#include <string>

int main() {
  std::ifstream inputFile(""data.txt"");
  if (!inputFile.is_open()) {
    std::cerr << ""Error opening file!\n"";
    return 1;
  }

  std::string line;
  int sum = 0;
  while (std::getline(inputFile, line)) {
    try {
      int num = std::stoi(line);  //Potential error if line is not a number
      sum += num;
    } catch (const std::invalid_argument& e) {
      std::cerr << ""Invalid argument: "" << e.what() << '\n';
      //Instead of exiting, it continues to the next line, potentially leading to incorrect sum
    }
  }
  inputFile.close();
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}","    //Instead of exiting, it continues to the next line, potentially leading to incorrect sum"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <iomanip>

int main() {
    double price = 100.0;
    int quantity = 3;
    double discountPercentage = 0.15;

    double discountAmount = price * quantity * discountPercentage;
    double finalPrice = price * quantity - discountAmount;

    std::cout << ""Original Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    std::cout << ""Quantity: "" << quantity << std::endl;
    std::cout << ""Discount Percentage: "" << std::fixed << std::setprecision(2) << discountPercentage << std::endl;
    std::cout << ""Discount Amount: "" << std::fixed << std::setprecision(2) << discountAmount << std::endl;
    std::cout << ""Final Price: "" << std::fixed << std::setprecision(2) << finalPrice << std::endl;

    return 0;
}",double discountAmount = price * quantity * discountPercentage;
"#include <iomanip> 
#include <sstream> 
#include <limits> 

int main() {
  double pi = 3.14159265358979323846;
  std::stringstream ss;
  ss << std::fixed << std::setprecision(20) << pi;
  std::string pi_str = ss.str();

  double pi_recovered = std::stod(pi_str);

  if (pi_recovered != pi) {
    std::cout << ""Conversion failed!"" << std::endl;
  } else {
    std::cout << ""Conversion successful! Pi: "" << pi_recovered << std::endl;
  }

  long long max_int = std::numeric_limits<long long>::max();
  long long max_int_plus_one = max_int + 1;  // Potential overflow

  if (max_int_plus_one < max_int) {
    std::cout << ""Integer overflow detected!"" << std::endl;
  } else {
    std::cout << ""No integer overflow."" << std::endl;
  }

  return 0;
}",long long max_int_plus_one = max_int + 1;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct: "" << area << std::endl;
    } else {
        std::cout << ""Area is incorrect: Expected "" << expected_area << "", got "" << area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <queue>
#include <vector>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    std::vector<int> v;
    while (!q.empty()) {
        int x = q.front();
        q.pop();
        v.push_back(x);
    }

    // Incorrect loop condition: should be v.size() - 1
    for (int i = 0; i <= v.size(); ++i) {
        std::cout << v[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}",for (int i = 0; i <= v.size(); ++i)
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> filtered_data;

    for (int x : data) {
        if (x > 2) {
            filtered_data.push_back(x);
        }
    }

    // Incorrectly calculate the sum of the filtered data
    int sum = std::accumulate(filtered_data.begin(), filtered_data.end(), 0);

    // The faulty logic is that we are not using filtered_data correctly
    std::cout << ""Sum of filtered data: "" << sum << std::endl;

    return 0;
}","int sum = std::accumulate(filtered_data.begin(), filtered_data.end(), 0);"
"#include <ctime>
#include <random>
#include <iostream>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int numbers[10];
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= 10; ++i) {  // Fault: Loop iterates one element beyond the array bounds
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= 10; ++i)
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test sentence."";
    std::string word = ""test"";

    size_t pos = text.find(word);

    if (pos != std::string::npos) {
        text.erase(pos, 3); // Intended to remove ""test"" but removes only 3 chars
    }

    std::cout << text << std::endl;
    return 0;
}","text.erase(pos, 3);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",return n > target;
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";

    if (counts.find(fruit) != counts.end()) {
        std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;
    } else {
        std::cout << ""Count of "" << fruit << "": 0"" << std::endl;
    }
    
    return 0;
}","std::cout << ""Count of "" << fruit << "": 0"" << std::endl;"
"#include <iostream>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> w = z * z;
    std::cout << ""z = "" << z << std::endl;
    std::cout << ""z*z = "" << w << std::endl;

    double real_part = w.real();
    double imaginary_part = w.imag();

    if (real_part > 2.0) {
        std::cout << ""Real part is greater than 2.0"" << std::endl;
    } else {
        std::cout << ""Real part is not greater than 2.0"" << std::endl;
    }

    return 0;
}",if (real_part > 2.0)
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int number = std::stoi(line);
            sum += number;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << line << std::endl;
        }
        catch (const std::out_of_range& e){
            std::cerr << ""Out of range: "" << line << std::endl;
        }
    }

    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int number = std::stoi(line);
"#include <array>
#include <numeric>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {  // Faulty loop condition
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> ages;
    ages[25] = ""Alice"";
    ages[30] = ""Bob"";
    ages[25] = ""Charlie""; // Overwrites Alice's name
    std::cout << ages[25] << std::endl;
    return 0;
}","ages[25] = ""Charlie"";"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    // Incorrectly truncating the area to an integer before printing
    int truncatedArea = (int)area;
    
    std::cout << ""Area: "" << truncatedArea << std::endl;
    
    return 0;
}",int truncatedArea = (int)area;
"#include <tuple>
#include <numeric>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) { // Fault: Should be i < numbers.size()
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    double sum = std::accumulate(data.begin(), data.end(), 0.0);
    
    // Incorrectly multiplying the sum by 2.0, intended to be dividing.
    double result = sum * 2.0;

    
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",double result = sum * 2.0;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    
    return 0;
}",if (text == reversed_text)
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  
  // Incorrectly uses std::accumulate with a start value of 1, which affects the result.
  sum = std::accumulate(data.begin(), data.end(), 1);
  
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}","std::accumulate(data.begin(), data.end(), 1);"
"#include <random>
#include <chrono>
#include <limits>

int main() {
    auto seed = std::chrono::system_clock::now().time_since_epoch().count();
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int random_number = distribution(generator);
        sum += random_number;
    }

    // Incorrectly calculate average
    double average = sum / 10.0;
    
    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = sum / 10.0;
"#include <chrono>
#include <thread>
#include <iostream>

int main() {
    std::cout << ""Starting..."" << std::endl;
    std::this_thread::sleep_for(std::chrono::seconds(2));

    int num_iterations = 5;
    for (int i = 0; i <= num_iterations; ++i) {
        std::cout << ""Iteration: "" << i << std::endl;
        std::this_thread::sleep_for(std::chrono::milliseconds(500));
    }

    std::cout << ""Finished."" << std::endl;
    return 0;
}",i <= num_iterations
"#include <set>
#include <iostream>

int main() {
  std::set<int> numbers = {1, 2, 3, 4, 5};
  
  for (int i = 0; i < numbers.size(); ++i) {
    std::cout << numbers[i] << "" "";
  }
  std::cout << std::endl;
  return 0;
}","std::cout << numbers[i] << "" "";"
"#include <iostream>
#include <iomanip>

int main() {
  double pi = 3.14159;
  double radius = 5.0;
  double area = pi * radius * radius;

  std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
  return 0;
}",double area = pi * radius * radius;
"#include <map>
#include <string>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Potential issue: Default constructed value
    
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area > expected_area + 0.1) {
        std::cout << ""Area is too large: "" << area << std::endl;
    } else if (area < expected_area - 0.1) {
        std::cout << ""Area is too small: "" << area << std::endl;
    } else {
        std::cout << ""Area is correct: "" << area << std::endl;
    }

    return 0;
}",if (area > expected_area + 0.1)
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
  // Intended to calculate the product of the numbers
  int product = 1;
  for (int i = 0; i < numbers.size(); ++i) {
    product *= numbers[i];
  }

  // Incorrectly print the sum instead of the product
  std::cout << ""Product: "" << sum << std::endl;
  return 0;
}","std::cout << ""Product: "" << sum << std::endl;"
"#include <fstream>
#include <string>
#include <algorithm>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    std::string allLines;
    while (std::getline(inputFile, line)) {
        allLines = allLines + line;
    }

    inputFile.close();

    std::string sortedLines = allLines;
    std::sort(sortedLines.begin(), sortedLines.end());

    std::ofstream outputFile(""sorted_data.txt"");
    if (!outputFile.is_open()) {
        std::cerr << ""Error opening output file!\n"";
        return 1;
    }
    outputFile << sortedLines << std::endl;
    outputFile.close();

    return 0;
}","std::sort(sortedLines.begin(), sortedLines.end());"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string pattern = ""test"";

    size_t pos = text.find(pattern, 10); //Starts searching from index 10

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::sort(data.begin(), data.begin() + data.size() - 1); // Fault: Incorrect sorting range

    for (int x : data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;
    return 0;
}",data.begin() + data.size() - 1
"#include <random>
#include <iostream>
#include <string>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::string message = ""The secret number is: "";
    int secret_number = distrib(gen);
    message += std::to_string(secret_number);
    std::cout << message << std::endl;

    int guess;
    std::cout << ""Enter your guess: "";
    std::cin >> guess;

    if (guess <= secret_number) { // Incorrect comparison operator. Should be >=
        std::cout << ""Too low!\n"";
    } else {
        std::cout << ""Too high!\n"";
    }

    return 0;
}",if (guess <= secret_number)
"#include <queue>
#include <vector>
#include <algorithm>

int main() {
  std::queue<int> q;
  std::vector<int> values = {1, 2, 3, 4, 5};

  for (int val : values) {
    q.push(val);
  }

  std::vector<int> result;
  while (!q.empty()) {
    result.push_back(q.front());
    q.pop();
  }

  std::sort(result.begin(), result.end(), std::greater<int>());

  for (int val : result) {
    std::cout << val << "" "";
  }
  std::cout << std::endl;

  return 0;
}","std::sort(result.begin(), result.end(), std::greater<int>());"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  std::for_each(data.begin(), data.begin() + 4, [&](int x){ sum += x; });
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",data.begin() + 4
"#include <map>
#include <iostream>

int main() {
  std::map<std::string, int> counts;
  counts[""apple""] = 5;
  counts[""banana""] = 10;

  int total = 0;
  for (const auto& pair : counts) {
    total += pair.second;
  }
  
  std::cout << ""Total: "" << total << std::endl;

  counts.erase(""banana""); // Remove banana after total calculation
  
  std::cout << ""Banana count after erase: "" << counts[""banana""] << std::endl;
  return 0;
}","counts.erase(""banana""); // Remove banana after total calculation"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    
    // Incorrect calculation: should be floor, not ceil
    int num_segments = ceil(circumference);
    
    std::cout << ""Number of segments: "" << num_segments << std::endl;
    return 0;
}",int num_segments = ceil(circumference);
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",0.0
"#include <ctime>
#include <iomanip>

int main() {
    std::time_t timer;
    std::time(&timer);

    int year = std::localtime(&timer)->tm_year; // Potentially incorrect year

    // Calculate the next leap year.
    int next_leap_year = (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) ? year + 4 - (year % 4) : year + (4 - (year % 4)) ;  

    std::cout << ""Current year: "" << year << std::endl;
    std::cout << ""Next leap year: "" << next_leap_year << std::endl;
    return 0;
}",int next_leap_year = (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) ? year + 4 - (year % 4) : year + (4 - (year % 4)) ;
"#include <complex> 
#include <iostream>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> w = z * z;
    std::cout << ""w.real() = "" << w.real() << std::endl;
    std::cout << ""w.imag() = "" << w.imag() << std::endl;

    double real_part = w.real();
    double imag_part = w.imag();

    if (real_part > 2.0) {
        std::cout << ""Real part is greater than 2.0"" << std::endl;
    } else {
        std::cout << ""Real part is not greater than 2.0"" << std::endl;
    }

    return 0;
}",if (real_part > 2.0)
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::sort(str.begin(), str.end());
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());

    if (str == reversed_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == reversed_str)
"#include <algorithm>
#include <numeric>
#include <functional>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  
  // Calculate the sum of squares of even numbers
  int sum_of_squares = 0;
  for (int x : data) {
    if (x % 2 == 0) {
      sum_of_squares += x * x;
    }
  }
  
  // Incorrectly calculate the average. Should divide by the number of even elements.
  double average = (double)sum_of_squares / data.size();
  
  std::cout << ""Sum of squares of even numbers: "" << sum_of_squares << std::endl;
  std::cout << ""Average: "" << average << std::endl;
  
  return 0;
}",double average = (double)sum_of_squares / data.size();
"#include <fstream>
#include <sstream>
#include <iostream>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    std::stringstream buffer;
    buffer << file.rdbuf();
    std::string file_content = buffer.str();

    size_t pos = file_content.find(""Error"");
    if (pos != std::string::npos) {
        std::cout << ""Error found in file: "" << pos << std::endl;
    } else {
        std::cout << ""Error not found in file."" << std::endl;
    }

    return 0;
}",if (pos != std::string::npos) {
"#include <queue>
#include <tuple>

int main() {
    std::priority_queue<int, std::vector<int>, std::greater<int>> pq;
    pq.push(5);
    pq.push(10);
    pq.push(2);
    pq.push(8);

    int sum = 0;
    while (!pq.empty()) {
        sum += pq.top();
        pq.pop();
    }

    if (sum == 25) {
        return 0;
    } else {
        return 1; //Incorrect return value
    }
}",return 1; //Incorrect return value
"#include <limits>
#include <random>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 1000);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int number = distrib(gen);
        sum += number;
    }

    if (sum > 10000) {
        std::cout << ""Sum is greater than 10000!\n"";
    } else {
        std::cout << ""Sum is not greater than 10000.\n"";
    }

    return 0;
}",if (sum > 10000)
"#include <random>
#include <iostream>
#include <iomanip>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
            sum += num * 1.1; // subtle error: should be num / 2
        } else {
            sum += num;
        }
    }

    std::cout << std::fixed << std::setprecision(2) << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += num * 1.1;
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double circumference = 2 * 3.14 * radius;
    std::cout << ""Circumference: "" << std::fixed << std::setprecision(2) << circumference << std::endl;
    
    double area = 3.14 * radius * radius; 
    std::cout << ""Area: "" << std::fixed << std::setprecision(2) << area << std::endl;
    
    //Intent: Calculate the area of a circle using M_PI from cmath.
    //Actual: Uses a hardcoded value of 3.14, resulting in a slightly inaccurate area.
    
    return 0;
}",double area = 3.14 * radius * radius;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    // Attempting to access a non-existent key safely
    auto it = myMap.find(4);
    if (it != myMap.end()) {
        std::cout << it->second << std::endl; //Potential error
    } else {
        std::cout << ""Key not found"" << std::endl;
    }

    return 0;
}",std::cout << it->second << std::endl;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrect calculation - should be numbers.size() - 1
    int average = sum / numbers.size();

    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",int average = sum / numbers.size();
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    //Incorrectly truncating the area to an integer
    int integerArea = static_cast<int>(area);
    
    std::cout << ""The area is: "" << integerArea << std::endl;
    return 0;
}",int integerArea = static_cast<int>(area);
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    if (str == reversed_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == reversed_str)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result = data;
    std::sort(result.begin(), result.end());

    auto it = std::find(result.begin(), result.end(), target);

    if (it != result.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    return 0;
}","std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;"
"#include <array>
#include <numeric>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) { // Faulty loop condition
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World! This is a test."";
  std::string word_to_find = ""test"";

  size_t pos = text.find(word_to_find);

  if (pos != std::string::npos) {
    std::cout << ""Word found at position: "" << pos << std::endl;
  } else {
    std::cout << ""Word not found."" << std::endl;
  }

  // Subtle error:  Incorrectly modifying text after find, leading to unexpected results in subsequent uses of text.
  text[0] = 'J';

  pos = text.find(word_to_find);

  if (pos != std::string::npos) {
    std::cout << ""Word found at position (after modification): "" << pos << std::endl;
  } else {
    std::cout << ""Word not found (after modification)."" << std::endl;
  }

  return 0;
}",text[0] = 'J';
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl;
    double taxRate = 0.075;
    double taxAmount = price * taxRate;
    double totalCost = price + taxAmount;
    std::cout << ""Total cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;
    return 0;
}","std::cout << ""Total cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;"
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::system_clock::time_point seed = std::chrono::system_clock::now();
    std::mt19937 generator(seed.time_since_epoch().count());
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 5; ++i) {
        int number = distribution(generator);
        sum += number;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int number = distribution(generator);
"#include <iostream>
#include <tuple>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""Hello"");
    int integer_value = std::get<0>(data);
    double double_value = std::get<1>(data);
    std::string string_value = std::get<2>(data);

    std::cout << ""Integer: "" << integer_value << std::endl;
    std::cout << ""Double: "" << double_value << std::endl;
    std::cout << ""String: "" << string_value << std::endl;

    // Incorrect use of std::get to access element
    int wrong_value = std::get<3>(data); // Attempting to access index 3, which does not exist.
    std::cout << ""Wrong Value: "" << wrong_value << std::endl;
    return 0;
}",int wrong_value = std::get<3>(data);
"#include <iostream>
#include <map>
#include <string>

int main() {
  std::map<std::string, int> ages;
  ages[""Alice""] = 30;
  ages[""Bob""] = 25;
  ages[""Charlie""] = 40;

  std::string name = ""David"";
  int age = ages[name]; // This accesses the default value (0) since David isn't in the map.
  std::cout << ""David's age is: "" << age << std::endl;

  return 0;
}",ages[name]
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    // Faulty code: Attempting to access a key that might not exist
    auto it2 = myMap.find(4);
    if (it2 != myMap.end()) {
        std::cout << ""Key 4: "" << it2->second << std::endl;
    }
    else {
        std::cout << ""Key 4 not found."" << std::endl;
    }

    return 0;
}",auto it2 = myMap.find(4);
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());
  if (text == reversed_text)
    std::cout << ""Palindrome!"" << std::endl;
  else
    std::cout << ""Not a palindrome."" << std::endl;
  return 0;
}",if (text == reversed_text)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n < target; });

    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return n < target;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (abs(area - expected_area) > 0.001) {
        std::cout << ""Area is: "" << area << std::endl;
        std::cout << ""The calculated area is incorrect."" << std::endl;
    } else {
        std::cout << ""Area is: "" << area << std::endl;
        std::cout << ""The calculated area is correct."" << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, World!\n"";
    size_t pos = text.find(""W"", 5); // Starts search at index 5
    if (pos != std::string::npos) {
        std::cout << ""Found 'W' at position: "" << pos << std::endl;
    } else {
        std::cout << ""'W' not found after index 5."" << std::endl;
    }
    return 0;
}","text.find(""W"", 5)"
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    size_t pos = text.find(""world"", 7); // Start searching from index 7, but 'world' starts at index 7
    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }
    return 0;
}","text.find(""world"", 7)"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect."" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect."" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct."" << std::endl;
    } else {
        std::cout << ""Area is incorrect. Calculated: "" << area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // Should initialize to 0 if not found, but doesn't.
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

    return 0;
}",int count = counts[fruit];
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    std::string upperText = text;

    for (char &c : upperText) {
        if (c >= 'a' && c <= 'z') {
            c = c - 32; // Incorrect offset for ASCII conversion
        }
    }

    std::cout << ""Original: "" << text << std::endl;
    std::cout << ""Uppercase (incorrect): "" << upperText << std::endl;
    return 0;
}",c = c - 32;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string upperCaseText = text;
    std::transform(upperCaseText.begin(), upperCaseText.end(), upperCaseText.begin(), ::tolower);
    std::cout << upperCaseText << std::endl;
    return 0;
}",::tolower
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1 instead of n.

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 7;

    auto it = std::find(nums.begin(), nums.end(), target);
    if (it != nums.end()) {
        std::cout << ""Target found at index: "" << std::distance(nums.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrectly assuming target exists and accessing out of bounds
    std::cout << ""Value at the next index: "" << nums[std::distance(nums.begin(), it) + 1] << std::endl; 
    return 0;
}","std::cout << ""Value at the next index: "" << nums[std::distance(nums.begin(), it) + 1] << std::endl;"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;

    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores; 
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string highestScorer = """";
    int highestScore = -1; 

    for (auto const& [name, score] : scores) {
        if (score > highestScore)
        {
           highestScore = score;
           highestScorer = name;
        }
    }

    std::cout << ""Highest scorer: "" << highestScorer << "" with score: "" << highestScore << std::endl;
    return 0;
}",if (score > highestScore)
"#include <iostream>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int davidScore = scores[name]; // Default construction.  Will not actually find a score.
    
    std::cout << ""David's score: "" << davidScore << std::endl;
    
    return 0;
}",int davidScore = scores[name];
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius; // Incorrect PI value
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <vector>
#include <cmath>

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    double sum = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += std::sqrt(data[i]);
    }

    double average = sum / data.size();
    
    if (average > 4.0) {
        std::cout << ""Average is greater than 4.0: "" << average << std::endl;
    } else {
        std::cout << ""Average is not greater than 4.0: "" << average << std::endl;
    }
    
    return 0;
}",if (average > 4.0)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    // Incorrectly calculate diameter
    double diameter = circumference / M_PI;
    std::cout << ""Diameter: "" << diameter << std::endl;
    
    return 0;
}",double diameter = circumference / M_PI;
"#include <iostream>
#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45abc"";
    std::stringstream ss(input);
    double number;
    if (ss >> number) {
        std::cout << ""Number: "" << number << std::endl;
    } else {
        std::cout << ""Invalid input.
"";
    }
    std::cout << ""End of program.\n"";
    return 0;
}",if (ss >> number)
"#include <string>
#include <sstream>

int main() {
  std::string input = ""12.34"";
  std::stringstream ss(input);
  double num;
  ss >> num;
  if (ss.fail()) {
    std::cerr << ""Conversion failed!\n"";
    return 1;
  }

  std::string extra;
  ss >> extra;
  if (!extra.empty()) {
    std::cerr << ""Extra characters found after number!\n"";
    return 1;
  }

  std::cout << ""Number: "" << num << std::endl;
  return 0;
}","  std::string extra;
  ss >> extra;"
"#include <random>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd;  
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < numbers.size(); ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average of the numbers
    double sum = 0.0;
    for (int number : numbers) {
        sum += number;
    }
    double average = sum / numbers.size();

    // Find the numbers greater than the average
    std::vector<int> greater_than_average;
    for (int number : numbers) {
        if (number > average) {
            greater_than_average.push_back(number);
        }
    }

    // Print the numbers greater than the average
    std::cout << ""Numbers greater than the average: "";
    for (int number : greater_than_average) {
        std::cout << number << "" "";
    }
    std::cout << std::endl;

    return 0;
}",if (number > average)
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4, 7, 3, 6};
    int target = 5;

    std::vector<int> result;
    std::copy_if(data.begin(), data.end(), std::back_inserter(result), [target](int x){ return x < target; });

    std::cout << ""Numbers less than "" << target << "": "";
    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::copy_if(data.begin(), data.end(), std::back_inserter(result), [target](int x){ return x < target; })"
"#include <iostream>
#include <tuple>

int main() {
  int a = 5;
  int b = 10;
  int c = 15;

  auto [x, y, z] = std::make_tuple(a, b, c);

  if (x > y && y > z) {
    std::cout << ""x is the largest: "" << x << std::endl;
  } else if (y > x && x > z) {
    std::cout << ""y is the largest: "" << y << std::endl;
  } else {
    std::cout << ""z is the largest: "" << z << std::endl;
  }

  return 0;
}",if (x > y && y > z)
"#include <iostream>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}","for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }"
"#include <iostream>
#include <map>
#include <string>

int main() {
  std::map<std::string, int> scores;
  scores[""Alice""] = 85;
  scores[""Bob""] = 92;
  scores[""Charlie""] = 78;

  std::string best_student;
  int highest_score = -1;

  for (auto const& [student, score] : scores) {
    if (score > highest_score) {
      highest_score = score;
      best_student = student;
    }
  }

  std::cout << ""Best student: "" << best_student << "" with score: "" << highest_score << std::endl;
  return 0;
}",int highest_score = -1;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World! This is a test."";
  std::string pattern = ""test"";
  size_t pos = text.find(pattern, 10); // Starts searching from index 10, which is past ""Hello, World!""
  if (pos != std::string::npos) {
    std::cout << ""Pattern found at position: "" << pos << std::endl;
  } else {
    std::cout << ""Pattern not found."" << std::endl;
  }
  return 0;
}","text.find(pattern, 10)"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""The area of the circle is: "" << area << std::endl;
    
    // Intent: Calculate the circumference.
    double circumference = 2 * M_PI * radius; 
    circumference = circumference / 3.0; // Fault: Incorrect calculation
    
    std::cout << ""The circumference of the circle is: "" << circumference << std::endl;
    
    return 0;
}",circumference = circumference / 3.0;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 10;

    // Find the index of the target value using binary search
    auto it = std::binary_search(nums.begin(), nums.end(), target);

    if (it) {
        std::cout << ""Target found at index: "" << std::distance(nums.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    return 0;
}","auto it = std::binary_search(nums.begin(), nums.end(), target);"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string pattern = ""world!"";
    
    size_t pos = text.find(pattern, 10); // Starts searching from index 10
    
    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }
    
    return 0;
}","text.find(pattern, 10)"
"#include <random> 
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd()); 
    std::uniform_int_distribution<> distrib(1, 100); 

    std::vector<int> numbers(10); 
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average
    double sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }

    double average = sum / numbers.size();

    // Find the largest number that is less than the average
    int largest_less_than_average = -1;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] < average) { // < changed to <=
            if (largest_less_than_average == -1 || numbers[i] > largest_less_than_average) {
                largest_less_than_average = numbers[i];
            }
        }
    }

    std::cout << ""Largest number less than average: "" << largest_less_than_average << std::endl; 
    
    return 0;
}",if (numbers[i] < average)
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());
    
    std::cout << ""Sorted in descending order: "";
    for (size_t i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << (i == numbers.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
    
    std::vector<int> empty_vector;
    empty_vector.push_back(10);
    std::sort(empty_vector.begin(), empty_vector.end(), std::greater<int>());

    std::cout << ""Empty vector sorted: "" << empty_vector[0] << std::endl;
    
    return 0;
}","std::cout << ""Empty vector sorted: "" << empty_vector[0] << std::endl;"
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, World!\n"";
    size_t pos = text.find(""o"");
    if (pos != std::string::npos) {
        text.erase(pos, 1); // Intended to erase the first 'o'
    }
    std::cout << text << std::endl;
    return 0;
}","text.erase(pos, 1);"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  std::vector<int> even_numbers;
  
  for (int num : numbers) {
    if (num % 2 == 0) {
      even_numbers.push_back(num);
    }
  }

  // Incorrectly using std::accumulate to sum the even numbers.
  // Should be std::accumulate(even_numbers.begin(), even_numbers.end(), 0);
  int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), numbers.begin());

  std::cout << ""Sum of even numbers: "" << sum << std::endl;
  return 0;
}","std::accumulate(even_numbers.begin(), even_numbers.end(), numbers.begin());"
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    int sum = 0;
    for (int i = 0; i <= n; ++i) { // Fault: Loop goes one element too far.
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= n
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30; 
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    std::cout << ""David's age: "" << ages[name] << std::endl; // Accessing a non-existent key

    return 0;
}",ages[name]
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""hello"";
    myMap[2] = ""world"";

    for (int i = 0; i < 3; ++i) {
        if (myMap.find(i) != myMap.end()) {
            std::cout << myMap[i] << std::endl;
        } else {
            std::cout << ""Not found"" << std::endl;
        }
    }

    return 0;
}",i < 3
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;

    if (counts.find(""orange"") != counts.end()) {
        std::cout << ""Orange count: "" << counts[""orange""] << std::endl;
    } else {
        std::cout << ""Orange not found."" << std::endl;
    }

    return 0;
}","counts[""orange""]"
"#include <cmath>
#include <vector>

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    double sum = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += std::sqrt(data[i]);
    }
    double mean = sum / data.size();
    double variance = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        variance += std::pow(data[i] - mean, 2);
    }
    double std_dev = std::sqrt(variance / (data.size() - 1)); // Should be data.size() for population std dev.
    std::cout << ""Standard Deviation: "" << std_dev << std::endl;
    return 0;
}",double std_dev = std::sqrt(variance / (data.size() - 1));
"#include <iostream>
#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cout << ""Invalid input format"" << std::endl;
        return 1;
    }
    
    double result = num * 2.0;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",if (ss.fail())
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David""};
    std::string target = ""Bob"";

    auto it = std::find(names.begin(), names.end(), target);

    if (it != names.end()) {
        names.erase(it);
    }

    // The bug: erasing while iterating can invalidate the iterator, leading to unexpected behavior
    // This could potentially skip elements if the erase causes a shift and the iterator isn't updated correctly.

    for (const std::string& name : names) {
        std::cout << name << std::endl;
    }

    return 0;
}",names.erase(it);
"#include <array>
#include <numeric>
#include <algorithm>
#include <iostream>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0)
            even_numbers.push_back(numbers[i]);
    }

    //Incorrectly attempts to sort the even numbers using std::sort but doesn't actually sort the vector.
    std::sort(even_numbers.begin(), even_numbers.end()); 

    std::cout << ""Even numbers: "";
    for (int num : even_numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(even_numbers.begin(), even_numbers.end());"
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    // Incorrectly subtract 1 from the sum. This introduces an error.
    int result = sum - 1;

    std::cout << ""Sum: "" << sum << ""\n"";
    std::cout << ""Result: "" << result << std::endl;

    return 0;
}",int result = sum - 1;
"#include <random> 
#include <iostream>
#include <limits>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 1000);

    int num_iterations = 500;
    long long sum = 0;

    for (int i = 0; i < num_iterations; ++i) {
        int random_number = distrib(gen);
        sum += random_number;
    }

    double average = static_cast<double>(sum) / num_iterations; 
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",static_cast<double>(sum) / num_iterations
"#include <iostream>
#include <limits>

int main() {
    long long max_val = std::numeric_limits<long long>::max();
    long long val1 = max_val - 5;
    long long val2 = max_val - 10;
    long long sum = val1 + val2;
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",long long sum = val1 + val2;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    // Incorrectly calculate the average
    double average = sum / numbers.size();

    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = sum / numbers.size();
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    // Attempting to access an element that doesn't exist by key.
    std::cout << myMap[4] << std::endl; // This will create a new element with a default string value

    std::cout << myMap[4] << std::endl; // Accessing again after insertion

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    // Calculate the diameter and then compute area again
    double diameter = radius * 2;
    double area_from_diameter = M_PI * (diameter / 2) * (diameter / 2); // Incorrect Calculation
    std::cout << ""Area (from diameter): "" << area_from_diameter << std::endl;
    
    return 0;
}",double area_from_diameter = M_PI * (diameter / 2) * (diameter / 2);
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cout << ""Invalid input"" << std::endl;
        return 1;
    }

    int integerPart = (int)num;
    double fractionalPart = num - integerPart;
    std::cout << ""Integer part: "" << integerPart << std::endl;
    std::cout << ""Fractional part: "" << fractionalPart << std::endl;

    double roundedNum = (double)integerPart + (fractionalPart >= 0.5 ? 1.0 : 0.0);
    std::cout << ""Rounded number: "" << roundedNum << std::endl;
    return 0;
}",double roundedNum = (double)integerPart + (fractionalPart >= 0.5 ? 1.0 : 0.0);
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;

    std::string fruit = ""orange"";
    int count = counts[fruit]; // Fault: Accessing a non-existent key without checking
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;
    return 0;
}",counts[fruit];
"#include <iostream>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    std::vector<int> sorted_nums = nums;
    std::sort(sorted_nums.begin(), sorted_nums.end(), std::greater<int>());
    
    // The bug is here.  The original `nums` vector is modified instead of `sorted_nums`
    std::sort(nums.begin(), nums.end(), std::greater<int>());
    
    std::cout << ""Original: "";
    for (int num : nums) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    std::cout << ""Sorted: "";
    for (int num : sorted_nums) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(nums.begin(), nums.end(), std::greater<int>());"
"#include <iostream>
#include <tuple>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(1, 2.5, ""hello"");
    int integer_val = std::get<1>(data); // Incorrect index
    std::cout << integer_val << std::endl;
    return 0;
}",std::get<1>(data)
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl; // Prints 123.46
    double tax_rate = 0.085;
    double tax_amount = price * tax_rate;
    std::cout << std::fixed << std::setprecision(2) << tax_amount << std::endl; // Correctly calculates tax
    double total_cost = price + tax_amount;
    std::cout << std::fixed << std::setprecision(2) << total_cost << std::endl; // Calculates the total cost correctly.
    std::cout << std::fixed << std::setprecision(3) << total_cost << std::endl; //Prints total cost with 3 decimal places
    return 0;
}",std::cout << std::fixed << std::setprecision(3) << total_cost << std::endl;
"#include <random>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);
    
    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    std::sort(numbers.begin(), numbers.end(), [](int a, int b) {
        return a < b; // Intent: Ascending order
    });

    // Find the index of the largest element (incorrect logic)
    int largest_index = 0;
    for (int i = 1; i < numbers.size(); ++i) {
        if (numbers[i] <= numbers[largest_index]) {
            largest_index = i;
        }
    }
    
    std::cout << ""Largest element index: "" << largest_index << std::endl;
    
    return 0;
}",if (numbers[i] <= numbers[largest_index])
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i)
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {  // Fault: Should be i < data.size()
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrect calculation: attempting to divide by the size of the vector instead of the sum
    float average = sum / numbers.size();
    
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",float average = sum / numbers.size();
"#include <cmath>
#include <vector>

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    double sum = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += data[i];
    }
    double average = sum / (data.size() - 1); // Fault: Incorrect divisor
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = sum / (data.size() - 1);
"#include <string>
#include <sstream>
#include <vector>

std::vector<int> stringToInts(const std::string& str) {
    std::vector<int> result;
    std::stringstream ss(str);
    int num;
    while (ss >> num) {
        result.push_back(num);
    }
    return result;
}

int main() {
    std::string input = ""1 2 3 4 5"";
    std::vector<int> nums = stringToInts(input);

    int sum = 0;
    for (size_t i = 0; i < nums.size(); ++i) {
        sum += nums[i];
    }

    // The bug is here: using nums.size() - 1 as the loop condition
    // which can cause an out-of-bounds access when nums is empty
    // size_t i = 0; i <= nums.size() - 1; ++i

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= nums.size() - 1
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: i <= numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> scores; 
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (const auto& pair : scores) {
        total_score += pair.first; // Incorrect: Adding the key (string) instead of the value (int)
    }

    std::cout << ""Total Score: "" << total_score << std::endl;
    return 0;
}",total_score += pair.first;
"#include <iostream>
#include <limits>
#include <algorithm>

int main() {
    int arr[5] = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= 5; ++i) {  // Fault: i <= 5 instead of i < 5
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= 5
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> my_tuple = std::make_tuple(10, 3.14, ""hello"");
    
    auto& [a, b, c] = my_tuple;

    std::cout << ""Original values: a = "" << a << "", b = "" << b << "", c = "" << c << std::endl;
    
    //Incorrectly modifying a through b
    b = a + 5;

    std::cout << ""Modified values: a = "" << a << "", b = "" << b << "", c = "" << c << std::endl;
    
    return 0;
}",b = a + 5;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) == ages.end()) {
        ages[name] = 0;
    }
    std::cout << ""David's age: "" << ages[name] << std::endl;

    std::cout << ""Alice's age: "" << ages[""Alice""] << std::endl;

    return 0;
}",ages[name] = 0;
"#include <list>
#include <iostream>

int main() {
  std::list<int> numbers = {1, 2, 3, 4, 5};

  // Iterate and modify the list.  Fault lies here.
  for (auto it = numbers.begin(); it != numbers.end(); ++it) {
    *it = *it * 2;
    numbers.push_back(*it); // adding duplicates which affect the original loop.
  }

  std::cout << ""Modified list: "";
  for (int num : numbers) {
    std::cout << num << "" "";
  }
  std::cout << std::endl;

  return 0;
}",numbers.push_back(*it);
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iomanip> 
#include <sstream> 
#include <stdexcept> 

std::string formatNumber(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double value = 1234.5678;
    std::string formattedValue = formatNumber(value);
    
    try {
        double parsedValue = std::stod(formattedValue);
        if (parsedValue != value) {
            throw std::runtime_error(""Conversion mismatch"");
        }
        std::cout << ""Parsed value: "" << parsedValue << std::endl;
    } catch (const std::exception& e) {
        std::cerr << ""Error: "" << e.what() << std::endl;
    }
    
    double largeValue = 1e+15;
    std::string formattedLargeValue = formatNumber(largeValue);
    double parsedLargeValue = std::stod(formattedLargeValue);
    std::cout << ""Large Parsed Value: "" << parsedLargeValue << std::endl;

    return 0;
}",double parsedLargeValue = std::stod(formattedLargeValue);
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;

    // Calculate circumference (incorrectly)
    double circumference = 2 * M_PI * radius - 1.0; // Fault: subtracting 1.0
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;

    return 0;
}",double circumference = 2 * M_PI * radius - 1.0;
"#include <string>
#include <sstream>
#include <vector>
#include <algorithm>

int main() {
    std::string input = ""1,2,3,4,5"";
    std::stringstream ss(input);
    std::vector<int> numbers;
    int num;

    while (ss >> num) {
        numbers.push_back(num);
    }

    // Incorrectly using numbers.size() - 1 when calculating the average, leading to off-by-one error
    double sum = 0.0;
    for (size_t i = 0; i < numbers.size() - 1; ++i) {
        sum += numbers[i];
    }
    double average = sum / numbers.size();

    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",for (size_t i = 0; i < numbers.size() - 1; ++i)
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> nums = {5, 2, 8, 1, 9, 4};
  int target = 12;
  std::vector<int> result;

  for (int i = 0; i < nums.size(); ++i) {
    for (int j = i + 1; j < nums.size(); ++j) {
      if (nums[i] + nums[j] == target) {
        result.push_back(nums[i]);
        result.push_back(nums[j]);
        break;
      }
    }
    if (!result.empty()) {
      break;
    }
  }

  if (result.empty()) {
    std::cout << ""No two numbers sum up to the target."" << std::endl;
  } else {
    std::cout << ""Numbers that sum up to the target: "" << result[0] << "" and "" << result[1] << std::endl;
  }

  return 0;
}","if (nums[i] + nums[j] == target) {
        result.push_back(nums[i]);
        result.push_back(nums[j]);
        break;
      }
"
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <fstream>
#include <string>

int main() {
  std::ifstream inputFile(""data.txt"");
  std::string line;
  int sum = 0;

  while (std::getline(inputFile, line)) {
    try {
      int number = std::stoi(line);
      sum += number;
    } catch (const std::invalid_argument& e) {
      // Handle non-numeric lines gracefully
    }
  }

  inputFile.close();
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",int number = std::stoi(line);
"#include <array>
#include <numeric>
#include <algorithm>
#include <iostream>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <tuple>
#include <functional>

int main() {
    auto my_func = std::bind([](int x, int y) { return x * y; }, std::placeholders::_1, std::placeholders::_2);
    std::tuple<int, int, int> data = std::make_tuple(2, 3, 5);

    int result = my_func(std::get<0>(data), std::get<2>(data)); // Should use std::get<1>(data) instead
    
    return result;
}",std::get<2>(data)
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
    }

    ages.erase(""Bob"");

    if (ages.find(""Bob"") != ages.end()) {
        std::cout << ""Age of Bob: "" << ages[""Bob""] << std::endl;
    } else {
        std::cout << ""Age of Bob: Unknown"" << std::endl;
    }

    return 0;
}","if (ages.find(""Bob"") != ages.end())"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    // Incorrectly subtract 1 from sum
    int result = sum - 1;

    return result;
}",int result = sum - 1;
"#include <iostream>
#include <limits>

int main() {
    long long sum = 0;
    for (int i = 0; i < 100000; ++i) {
        sum += i;
    }
    
    if (sum == std::numeric_limits<long long>::max()) {
        std::cout << ""Maximum value reached!"" << std::endl;
    } else {
        std::cout << ""Sum: "" << sum << std::endl;
    }
    
    return 0;
}",sum += i;
"#include <random> 
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int secretNumber = distrib(gen);
    int guess = 50;  // Initial guess
    int attempts = 0;

    while (guess != secretNumber && attempts < 10) {
        attempts++;
        if (guess < secretNumber) {
            guess = secretNumber - 1; //Subtle error: Should be secretNumber + 1
        } else {
            guess = secretNumber - 1;
        }
        std::cout << ""Guess: "" << guess << std::endl;
    }

    if (guess == secretNumber) {
        std::cout << ""You guessed it in "" << attempts << "" attempts!\n"";
    } else {
        std::cout << ""No luck! The secret number was "" << secretNumber << ""\n"";
    }

    return 0;
}",guess = secretNumber - 1;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <string>
#include <sstream>
#include <iomanip>

std::string formatNumber(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double value = 123.456789;
    std::string formattedValue = formatNumber(value);
    std::cout << ""Formatted value: "" << formattedValue << std::endl;
    double parsedValue = 0.0;
    std::stringstream ss(formattedValue);
    ss >> parsedValue; // Potential issue: implicit conversion to double
    if (ss.fail()) {
        std::cerr << ""Error parsing the value!"" << std::endl;
        return 1;
    }
    std::cout << ""Parsed value: "" << parsedValue << std::endl;
    return 0;
}",ss >> parsedValue; // Potential issue: implicit conversion to double
"#include <queue>
#include <iostream>

int main() {
    std::priority_queue<int> pq;
    pq.push(5);
    pq.push(10);
    pq.push(2);
    pq.push(8);

    std::cout << ""Top element: "" << pq.top() << std::endl;
    pq.pop();
    std::cout << ""Top element after pop: "" << pq.top() << std::endl;

    while (!pq.empty()) {
        std::cout << pq.top() << "" "";
        pq.pop();
    }
    std::cout << std::endl;
    return 0;
}","    std::cout << ""Top element after pop: "" << pq.top() << std::endl;"
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  
  // Calculate the sum of elements in the vector
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i]; // Fault: Accessing out-of-bounds element
  }

  // Print the sum
  std::cout << ""Sum: "" << sum << std::endl;

  return 0;
}",sum += data[i];
"#include <limits>
#include <iomanip>

int main() {
    double sum = 0.0;
    for (int i = 0; i < 1000; ++i) {
        sum += 1.0 / (i + 1.0);
    }
    
    std::cout << std::fixed << std::setprecision(10) << sum << std::endl;
    
    if (sum > 10.0) {
        std::cout << ""Sum is greater than 10.\n"";
    } else {
        std::cout << ""Sum is not greater than 10.\n"";
    }
    
    return 0;
}",if (sum > 10.0)
"#include <set>
#include <iostream>

int main() {
    std::set<int> numbers = {1, 2, 3, 4, 5};
    
    for (int number : numbers) {
        if (number == 3) {
            continue;
        } else {
            std::cout << number << "" "";
        }
    }
    std::cout << std::endl;
    
    return 0;
}","if (number == 3) {
            continue;
        } else {
            std::cout << number << "" "";
        }"
"#include <fstream>
#include <string>
#include <sstream>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream inputFile(filename);
    std::string line;
    std::stringstream ss;
    double sum = 0.0;
    int count = 0;

    if (inputFile.is_open()) {
        while (std::getline(inputFile, line)) {
            ss << line;
            double num;
            if (ss >> num) {
                sum += num;
                count++;
                ss.clear();
                ss.str("""");
            }
            else {
               // Handle non-numeric lines, e.g., by skipping them
            }
        }
        inputFile.close();
        if (count > 0) {
            double average = sum / count;
            std::cout << ""Average: "" << average << std::endl;
        } else {
            std::cout << ""No numeric data found in the file."" << std::endl;
        }
    } else {
        std::cout << ""Unable to open file: "" << filename << std::endl;
        return 1;
    }
    return 0;
}",if (ss >> num) {
"#include <unordered_map>
#include <vector>

int main() {
    std::unordered_map<int, std::vector<int>> graph;
    graph[1] = {2, 3};
    graph[2] = {4};
    graph[3] = {5};
    graph[4] = {};
    graph[5] = {};

    std::vector<int> visited;
    std::vector<int> queue = {1};
    visited.push_back(1);

    while (!queue.empty()) {
        int u = queue.front();
        queue.erase(queue.begin());

        for (int v : graph[u]) {
            if (std::find(visited.begin(), visited.end(), v) == visited.end()) {
                visited.push_back(v);
                queue.push_back(v);
            }
        }
    }

    std::cout << ""Visited nodes: "";
    for (int node : visited) {
        std::cout << node << "" "";
    }
    std::cout << std::endl;

    return 0;
}",queue.erase(queue.begin());
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    double circumference = 2 * 3.14159 * radius;
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

    // Calculate the diameter
    double diameter = radius / 2.0;
    std::cout << ""Diameter of the circle: "" << std::fixed << std::setprecision(2) << diameter << std::endl;

    return 0;
}",double diameter = radius / 2.0;
"#include <random>
#include <ctime>

int main() {
    std::srand(std::time(nullptr));
    int arr[5] = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= 5; ++i) { // Fault: i <= 5 instead of i < 5
        sum += arr[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= 5
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cerr << ""Conversion failed!"" << std::endl;
        return 1;
    }

    // The fault is here: Integer division truncates the decimal part.
    int truncatedNum = num / 1.0;

    std::cout << ""Original number: "" << num << std::endl;
    std::cout << ""Truncated number: "" << truncatedNum << std::endl;
    return 0;
}",int truncatedNum = num / 1.0;
"#include <queue>
#include <vector>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    std::vector<int> nums;
    while (!q.empty()) {
        nums.push_back(q.front());
        q.pop();
        q.push(q.front()); // Incorrect: moves the first element to the back twice
        q.pop();
    }

    for (int num : nums) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}","q.push(q.front());
        q.pop();"
"#include <algorithm>
#include <array>

int main() {
    std::array<int, 5> arr = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= arr.size(); ++i) {  // Fault: Loop condition should be i < arr.size()
        sum += arr[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= arr.size()
"#include <array>
#include <numeric>
#include <tuple>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (size_t i = 0; i <= data.size(); ++i) {
"#include <map>
#include <vector>
#include <algorithm>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    std::vector<std::string> values;
    for (auto const& [key, val] : myMap) {
        values.push_back(val.substr(0, 2)); // Extract the first 2 characters
    }

    std::sort(values.begin(), values.end(), std::greater<std::string>());

    for (const auto& value : values) {
        std::cout << value << std::endl;
    }

    return 0;
}","values.push_back(val.substr(0, 2));"
"#include <fstream>
#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::ofstream outputFile(""output.txt"");
    if (outputFile.is_open()) {
        for (size_t i = 0; i <= numbers.size(); ++i) {  // Fault: i <= numbers.size()
            outputFile << numbers[i] << std::endl; // Accessing out of bounds
        }
        outputFile.close();
    } else {
        std::cerr << ""Unable to open file for writing."" << std::endl;
        return 1;
    }
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> transformed_data(data.size());

    std::transform(data.begin(), data.end(), transformed_data.begin(), [](int x) { return x * x; });

    // Incorrectly calculating the sum.  Should be std::accumulate
    int sum = 0;
    for (size_t i = 0; i < transformed_data.size(); ++i) {
        sum += transformed_data[i];
    }

    std::cout << ""Sum of squares: "" << sum << std::endl;
    return 0;
}","for (size_t i = 0; i < transformed_data.size(); ++i) {
        sum += transformed_data[i];
    }"
"#include <ctime>
#include <iomanip>

int main() {
    std::srand(std::time(nullptr));

    int arr[5] = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= 5; ++i) {  // Potential out-of-bounds access
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;

    return 0;
}",i <= 5
"#include <iostream>
#include <limits>

int main() {
    long long a = std::numeric_limits<long long>::max();
    long long b = 1;
    long long c = a - b;
    std::cout << c << std::endl;
    return 0;
}",long long c = a - b;
"#include <random>
#include <chrono>
#include <thread>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
            sum += num;
        } else {
            sum -= num; // Fault: Subtracting odd numbers instead of adding
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= num;
"#include <tuple>
#include <stdexcept>

int calculate_average(const std::tuple<int, int, int>& data) {
    int a = std::get<0>(data);
    int b = std::get<1>(data);
    int c = std::get<2>(data);
    return (a + b + c) / 3.0; // Subtle: integer division even though we intend an average
}

int main() {
    std::tuple<int, int, int> my_data = {1, 2, 3};
    try {
        int average = calculate_average(my_data);
        std::cout << ""Average: "" << average << std::endl;
    } catch (const std::exception& e) {
        std::cerr << ""Exception: "" << e.what() << std::endl;
    }
    return 0;
}",return (a + b + c) / 3.0;
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    ss >> number;

    if (ss.fail()) {
        std::cerr << ""Invalid input format.\n"";
        return 1;
    }

    if (number > 100.0) {
        std::cout << ""Number is greater than 100.\n"";
    } else {
        std::cout << ""Number is not greater than 100.\n"";
    }

    return 0;
}",if (number > 100.0)
"#include <queue>
#include <unordered_set>

int main() {
    std::queue<int> q;
    std::unordered_set<int> visited;

    q.push(1);
    visited.insert(1);

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        
        if (current == 5) {
            break; // Exit the loop when current is 5
        }

        // Add the next number in the sequence
        if (current + 1 <= 10) {
            if (visited.find(current + 1) == visited.end()) {
                q.push(current + 1);
                visited.insert(current + 1);
            }
        }
    }

    std::cout << ""Final value: "" << current << std::endl;
    return 0;
}","if (current == 5) {
            break; // Exit the loop when current is 5
        }"
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  std::vector<int> even_numbers;
  
  for (int i = 0; i < data.size(); ++i) {
    if (data[i] % 2 == 0) {
      even_numbers.push_back(data[i]);
    }
  }

  std::vector<int> odd_numbers;
  for (int i = 0; i < data.size(); ++i) {
    if (data[i] % 2 != 0) {
      odd_numbers.push_back(data[i]);
    }
  }

  // Incorrect sum calculation: should be odd_numbers.size()
  int odd_count = even_numbers.size();
  
  std::cout << ""Number of odd numbers: "" << odd_count << std::endl;
  return 0;
}",int odd_count = even_numbers.size();
"#include <array>
#include <numeric>
#include <iostream>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct: "" << area << std::endl;
    } else {
        std::cout << ""Area is incorrect: Calculated "" << area << "", Expected "" << expected_area << std::endl;
    }
    return 0;
}",if (area == expected_area)
"#include <map>
#include <string>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""cherry""] = 7;

    std::string fruit = ""grape"";
    if (counts.find(fruit) == counts.end()) {
        counts[fruit] = 1; // Intialize to one if it doesn't exist.
    }
    std::cout << ""Grape count: "" << counts[fruit] << std::endl;
    std::cout << ""Apple count: "" << counts[""apple""] << std::endl;
    
    return 0;
}",counts[fruit] = 1;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> sums(data.size());

    for (size_t i = 0; i < data.size(); ++i) {
        sums[i] = std::accumulate(data.begin(), data.begin() + i, 0);
    }

    for (int sum : sums) {
        std::cout << sum << "" "";
    }
    std::cout << std::endl;

    return 0;
}","sums[i] = std::accumulate(data.begin(), data.begin() + i, 0);"
"#include <fstream>
#include <sstream>
#include <iostream>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    std::stringstream buffer;
    buffer << file.rdbuf();
    std::string content = buffer.str();

    int sum = 0;
    std::stringstream ss(content);
    int number;
    while (ss >> number) {
        sum += number;
    }

    std::cout << ""Sum of numbers in file: "" << sum << std::endl;
    return 0;
}","std::string filename = ""data.txt"";"
"#include <iostream>
#include <numeric>
#include <limits>

int main() {
    long long sum = 0;
    for (long long i = 1; i <= 100000; ++i) {
        sum += i;
    }
    
    if (sum > std::numeric_limits<int>::max()) {
        std::cout << ""Overflow detected!"" << std::endl;
    } else {
        std::cout << ""Sum: "" << sum << std::endl;
    }
    return 0;
}",if (sum > std::numeric_limits<int>::max())
"#include <random>
#include <iomanip>
#include <limits>

int main() {
  std::random_device rd;
  std::mt19937 gen(rd());
  std::uniform_int_distribution<> distrib(1, 100);

  int sum = 0;
  for (int i = 0; i < 10; ++i) {
    int num = distrib(gen);
    if (num == 0) {  // Fault: Should be num <= 0
        sum += num;
    } else {
      sum += num;
    }
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",if (num == 0)
"#include <limits>
#include <iomanip>

int main() {
    long long sum = 0;
    for (int i = 0; i < 1000000; ++i) {
        sum += i;
    }
    std::cout << std::fixed << std::setprecision(2) << sum << std::endl;
    return 0;
}",sum += i;
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double value;
    ss >> value;
    if (ss.fail()) {
        std::cout << ""Conversion failed."" << std::endl;
        return 1;
    }

    //Intentionally skipping the check if the string stream is empty after extraction.
    
    std::cout << ""Value: "" << value << std::endl;
    return 0;
}",if (ss.fail())
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <tuple>
#include <iostream>

int main() {
  std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""hello"");
  int int_val = std::get<0>(data);
  double double_val = std::get<1>(data);
  std::string string_val = std::get<2>(data);

  std::cout << ""Integer: "" << int_val << std::endl;
  std::cout << ""Double: "" << double_val << std::endl;
  std::cout << ""String: "" << string_val << std::endl;

  // Incorrectly trying to use the integer value as an index to access the tuple
  std::cout << ""Tuple element at index "" << int_val << "": "" << std::get<int_val>(data) << std::endl;

  return 0;
}","std::cout << ""Tuple element at index "" << int_val << "": "" << std::get<int_val>(data) << std::endl;"
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.45;
    int quantity = 3;
    double discountPercentage = 0.15;

    double discountAmount = price * quantity * discountPercentage;
    double finalPrice = price * quantity - discountAmount;

    std::cout << ""Original Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    std::cout << ""Quantity: "" << quantity << std::endl;
    std::cout << ""Discount Percentage: "" << std::fixed << std::setprecision(2) << discountPercentage << std::endl;
    std::cout << ""Discount Amount: "" << std::fixed << std::setprecision(2) << discountAmount << std::endl;
    std::cout << ""Final Price: "" << std::fixed << std::setprecision(2) << finalPrice << std::endl;

    return 0;
}",double discountAmount = price * quantity * discountPercentage;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;

    // Calculate circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;

    // Incorrectly calculate diameter
    double diameter = circumference / M_PI;
    std::cout << ""Diameter of the circle: "" << diameter << std::endl;

    return 0;
}",double diameter = circumference / M_PI;
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  
  // Find the index of the largest element
  auto it = std::max_element(numbers.begin(), numbers.end());
  
  //Incorrectly accessing element before the iterator
  int largest_element = *(it - 1); 
  
  std::cout << ""Largest element: "" << largest_element << std::endl;
  
  return 0;
}",int largest_element = *(it - 1);
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Intended: find the closest number to the target
    auto closest_it = std::min_element(numbers.begin(), numbers.end(), [target](int a, int b) {
        return std::abs(a - target) < std::abs(b - target); 
    });

    std::cout << ""Closest number: "" << *closest_it << std::endl;

    return 0;
}",return std::abs(a - target) < std::abs(b - target);
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string best_player;
    int highest_score = -1;

    for (auto const& [player, score] : scores) {
        if (score > highest_score) {
            highest_score = score;
            best_player = player;
        }
    }

    std::cout << ""Best player: "" << best_player << "" with score: "" << highest_score << std::endl;

    // Incorrectly uses highest_score again, leading to an incorrect result
    std::cout << ""Highest score squared: "" << highest_score * highest_score << std::endl;
    return 0;
}","std::cout << ""Highest score squared: "" << highest_score * highest_score << std::endl;"
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;
    
    std::vector<int> result;
    for (int num : numbers) {
        if (num > target) {
            result.push_back(num);
        }
    }
    
    if (result.empty()) {
        std::cout << ""No numbers greater than "" << target << "" found."" << std::endl;
    } else {
        std::cout << ""Numbers greater than "" << target << "":"";
        for (size_t i = 0; i < result.size(); ++i) {
            std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }
    
    return 0;
}",if (num > target) {
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    // Incorrectly subtract 1 from the result
    int result = sum - 1;

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",int result = sum - 1;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int score = scores[name]; // Should default to 0 if not found, but doesn't.
    std::cout << ""David's score: "" << score << std::endl;

    return 0;
}",int score = scores[name];
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    
    // Sort in descending order using a lambda
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a < b; });

    for (int number : numbers) {
        std::cout << number << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}",return a < b;
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseString(const std::string& str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string input_string = ""hello"";
    std::string reversed_string = reverseString(input_string);
    std::cout << ""Original string: "" << input_string << std::endl;
    std::cout << ""Reversed string: "" << reversed_string << std::endl;
    
    // Incorrect check for palindrome
    if (input_string == reversed_string) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    
    return 0;
}",if (input_string == reversed_string)
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl; // Truncates the string unexpectedly
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    //Incorrect Calculation for circumference
    double circumference = 2 * M_PI * radius;
    
    std::cout << ""Circumference: "" << circumference << std::endl;
    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <queue>
#include <vector>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    std::vector<int> result;
    while (!q.empty()) {
        int current = q.front();
        q.pop();
        result.push_back(current);
    }

    // Incorrectly iterating from 1 to result.size() *exclusive*.
    for (int i = 1; i <= result.size(); ++i) {
        std::cout << result[i-1] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","for (int i = 1; i <= result.size(); ++i) {
        std::cout << result[i-1] << "" "";
    }"
"#include <fstream>
#include <string>

int main() {
    std::ofstream outfile(""data.txt"");
    if (outfile.is_open()) {
        std::string line = ""This is a test line"";
        outfile << line << std::endl;
        std::string another_line = ""Another line for the file"";
        outfile << anothr_line << std::endl; //Typo here
        outfile.close();
    } else {
        std::cerr << ""Unable to open file"";
        return 1;
    }
    return 0;
}",outfile << anothr_line << std::endl;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <random> 
#include <chrono> 
#include <iostream>

int main() {
    std::chrono::system_clock::time_point seed_time = std::chrono::system_clock::now();
    std::mt19937 generator(seed_time.time_since_epoch().count());
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distribution(generator);
        if (randomNumber % 2 == 0) {
            sum += randomNumber;
        } else {
            sum -= randomNumber; //Fault: Should subtract a different value.
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= randomNumber;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <unordered_map>
#include <iostream>

int main() {
  std::unordered_map<std::string, int> counts;
  counts[""apple""] = 5;
  counts[""banana""] = 3;
  counts[""orange""] = 7;

  std::string fruit = ""grape"";
  if (counts.find(fruit) == counts.end()) {
    std::cout << ""Fruit not found: "" << fruit << std::endl;
    std::cout << ""Default count: "" << 0 << std::endl; //intended default
  } else {
     std::cout << ""Fruit count: "" << fruit << "" : "" << counts[fruit] << std::endl;
  }

  return 0;
}","std::cout << ""Fruit count: "" << fruit << "" : "" << counts[fruit] << std::endl;"
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string rev_str = str;
    std::reverse(rev_str.begin(), rev_str.end());
    if (str == rev_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == rev_str)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    auto it = std::find(data.begin(), data.end(), target);

    if (it != data.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found.""
    }
    
    //Attempting to perform operation on the vector beyond its size 
    //This demonstrates an out-of-bounds access.
    if(it != data.end()){
      data[data.size()] = 100;  //Faulty line
    }
    
    return 0;
}",data[data.size()] = 100;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->second << std::endl;
    }

    std::cout << myMap[4] << std::endl;
    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl;

    double tax_rate = 0.07;
    double tax_amount = price * tax_rate;
    double total_cost = price + tax_amount;

    std::cout << ""Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << tax_amount << std::endl;
    std::cout << ""Total: "" << std::fixed << std::setprecision(2) << total_cost << std::endl;
    return 0;
}","std::cout << ""Total: "" << std::fixed << std::setprecision(2) << total_cost << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;

    double incorrect_diameter = circumference / M_PI;
    std::cout << ""Incorrect diameter: "" << incorrect_diameter << std::endl;

    return 0;
}",double incorrect_diameter = circumference / M_PI;
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    // Incorrectly assigning the sum to the first element.
    numbers[0] = sum; 

    // Print the modified vector.
    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",numbers[0] = sum;
"#include <functional>
#include <iostream>

int main() {
    std::function<int(int)> factorial = [&](int n) {
        if (n <= 1) {
            return 1;
        } else {
            return n * factorial(n - 1);
        }
    };

    int result = factorial(5);
    std::cout << ""Factorial of 5: "" << result << std::endl;
    
    // Simulate an error by overflowing the factorial function
    int large_num = 1000;  // Intentionally setting a large number
    int overflow_result = factorial(large_num);  // Recursively calls factorial with a large number
    std::cout << ""Overflowed Factorial: "" << overflow_result << std::endl; // prints garbage because of overflow
    
    return 0;
}",int overflow_result = factorial(large_num);
"#include <queue>
#include <vector>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    std::vector<int> result;
    while (!q.empty()) {
        result.push_back(q.front());
        q.pop();
        q.push(q.front());
        q.pop();
    }

    for (int i = 0; i < result.size(); ++i) {
        std::cout << result[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",q.push(q.front());
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <random> 
#include <iostream>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int numbers[] = {1, 2, 3, 4, 5};
    int size = 5;

    std::sort(numbers, numbers + size, [](int a, int b) { return a > b; });

    for (int i = 0; i < size; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i < size; ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers[i] = distrib(gen);
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::sort(str.begin(), str.end());
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    if (str == reversed_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    std::cout << str << std::endl;
    return 0;
}",if (str == reversed_str)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size(); //Integer division instead of floating-point division
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <unordered_map>
#include <vector>
#include <algorithm>

int main() {
    std::unordered_map<int, std::string> ages;
    ages[20] = ""Alice"";
    ages[30] = ""Bob"";
    ages[40] = ""Charlie"";

    std::vector<int> age_list = {20, 30, 45, 50};

    std::vector<std::string> names;
    for (int age : age_list) {
        if (ages.count(age) > 0) {
            names.push_back(ages[age]);
        }
    }

    // Incorrectly assume that all entries in age_list exist in ages.
    // If an entry doesn't exist, the behavior is undefined - but here, it will add a default constructed string.
    
    for (int age : age_list) {
        names.push_back(ages[age]);
    }
    
    for (const std::string& name : names) {
        std::cout << name << std::endl;
    }

    return 0;
}",names.push_back(ages[age]);
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!\n"";
    } else {
        std::cout << ""Area calculation is correct!\n"";
    }

    double circumference = 2 * M_PI * radius;
    
    std::cout << ""Calculated Area: "" << area << ""\n"";
    std::cout << ""Calculated Circumference: "" << circumference << ""\n"";
    
    return 0;
}",2 * M_PI * radius
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {  // Fault: i <= data.size()
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (const auto& pair : myMap) {
        std::cout << pair.first << "": "" << pair.second << std::endl;
    }

    std::cout << myMap[4] << std::endl; // Accessing non-existent key

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> values = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= values.size(); ++i) {
        sum += values[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= values.size(); ++i) {
        sum += values[i];
    }"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <random> 
#include <chrono> 
#include <iostream>

int main() {
    std::chrono::high_resolution_clock::time_point start_time = std::chrono::high_resolution_clock::now();
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 1000000); 
    
    long long sum = 0;
    for (int i = 0; i < 100000; ++i) {
        sum += distrib(gen);
    }
    
    std::chrono::high_resolution_clock::time_point end_time = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end_time - start_time);

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Time taken: "" << duration.count() << "" microseconds"" << std::endl;
    
    return 0;
}",    long long sum = 0; 
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target value using std::find
    auto it = std::find(data.begin(), data.end(), target);

    if (it != data.end()) {
        int index = it - data.begin();
        //Incorrect calculation.  Should be it - data.begin()
        int incorrect_index = it + data.begin(); 
        std::cout << ""Target found at index: "" << incorrect_index << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    return 0;
}",int incorrect_index = it + data.begin();
"#include <fstream>
#include <sstream>
#include <string>

int main() {
    std::string line;
    std::stringstream ss;
    ss << ""10\n20\n30"";
    int sum = 0;
    while (std::getline(ss, line)) {
        sum += std::stoi(line) - 10;  //Off by 10 error
    }
    std::cout << sum << std::endl;
    return 0;
}",sum += std::stoi(line) - 10;
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> myTuple = std::make_tuple(10, 3.14, ""hello"");
    int integerValue = std::get<0>(myTuple);
    double doubleValue = std::get<1>(myTuple);
    std::string stringValue = std::get<2>(myTuple);

    std::cout << ""Integer: "" << integerValue << std::endl;
    std::cout << ""Double: "" << doubleValue << std::endl;
    std::cout << ""String: "" << stringValue << std::endl;

    // Attempting to access an element beyond the tuple's size.
    int extraValue = std::get<3>(myTuple); // Fault: Accessing out-of-bounds tuple element.

    std::cout << ""Extra: "" << extraValue << std::endl;
    return 0;
}",int extraValue = std::get<3>(myTuple);
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;

    // Incorrectly calculating circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;

    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <set>
#include <iostream>

int main() {
    std::set<int> mySet;
    mySet.insert(5);
    mySet.insert(10);
    mySet.insert(5); // Duplicate insertion

    std::cout << ""Set size: "" << mySet.size() << std::endl;
    return 0;
}",mySet.insert(5); // Duplicate insertion
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};

    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {  // Fault: Loop iterates one element too far
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""cherry""] = 2;

    std::string fruit = ""grape"";
    int count = counts[fruit];
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl; // Should print 0, but potentially garbage

    return 0;
}",int count = counts[fruit];
"#include <iostream>
#include <limits>

int main() {
    int num_elements = 5;
    double arr[num_elements];
    for (int i = 0; i < num_elements; ++i) {
        arr[i] = i * 2.5;
    }

    double sum = 0.0;
    for (int i = 0; i <= num_elements; ++i) { // Fault: Loop goes one element too far
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= num_elements
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <random>
#include <chrono>

int main() {
    std::chrono::system_clock::time_point now = std::chrono::system_clock::now();
    std::seed_seq seed{std::chrono::duration_cast<std::chrono::seconds>(now - std::chrono::system_clock::from_time_t(0)).count(), now.time_since_epoch().count()};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<> distribution(1, 10);

    int sum = 0;
    for (int i = 0; i < 5; ++i) {
        sum += distribution(generator);
    }

    // Incorrect calculation: should be sum * 2
    int result = sum / 2;

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",int result = sum / 2;
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cout << ""Conversion failed!"" << std::endl;
        return 1;
    }
    std::cout << ""Converted number: "" << num << std::endl;
    
    double result = num * 2.0;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",if (ss.fail())
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.begin() + 3, 0); // Incorrect range
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",data.begin() + 3
"#include <queue>
#include <vector>

int main() {
    std::queue<int> q;
    std::vector<int> data = {1, 2, 3, 4, 5};

    for (int i = 0; i < data.size(); ++i) {
        q.push(data[i]);
    }

    while (!q.empty()) {
        int val = q.front();
        q.pop();
        if (val % 2 != 0) { 
           q.push(val * 2); 
        }
    }

    std::cout << ""Queue size: "" << q.size() << std::endl;
    return 0;
}","if (val % 2 != 0) { 
           q.push(val * 2); 
        }"
"#include <fstream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    std::string line;
    int sum = 0;

    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line);
            sum += num;
        } catch (const std::invalid_argument& e) {
            // Handle non-numeric input.  Important!
            std::cerr << ""Invalid input: "" << line << std::endl;
            return 1;  // Exit with an error code.
        }
    }
    
    inputFile.close();

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",return 1;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""The area of the circle is: "" << area << std::endl;
    double perimeter = 2 * M_PI * radius;
    std::cout << ""The perimeter of the circle is: "" << perimeter << std::endl;
    // Fault: Incorrect variable assignment
    double diameter = radius;
    
    std::cout << ""The diameter of the circle is: "" << diameter << std::endl;
    return 0;
}",double diameter = radius;
"#include <list>
#include <numeric>
#include <algorithm>
#include <iostream>

int main() {
    std::list<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int& num : numbers) {
        sum += num;
    }

    std::list<int> even_numbers;
    for (int& num : numbers) {
        if (num % 2 == 0) {
            even_numbers.push_back(num);
        }
    }

    int even_sum = 0;
    //This is the fault, should use even_numbers.begin() and even_numbers.end()
    even_sum = std::accumulate(even_numbers.begin(), numbers.end(), 0);

    std::cout << ""Sum of all numbers: "" << sum << std::endl;
    std::cout << ""Sum of even numbers: "" << even_sum << std::endl;

    return 0;
}","std::accumulate(even_numbers.begin(), numbers.end(), 0);"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    // Incorrectly subtract 10 from the sum instead of adding it.
    int result = sum - 10;
    
    // Corrected version would be result = sum + 10;
    
    std::cout << ""The result is: "" << result << std::endl;
    return 0;
}",int result = sum - 10;
"#include <map>
#include <string>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Accessing non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl;
    
    return 0;
}",int age = ages[name];
"#include <iostream>
#include <iomanip>

int main() {
  double radius = 5.0;
  double area = 3.14159 * radius * radius;
  std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
  return 0;
}",double area = 3.14159 * radius * radius;
"#include <set>
#include <iostream>

int main() {
    std::set<int> numbers = {1, 2, 3, 4, 5};
    
    for (int num : numbers) {
        numbers.insert(num + 1); // Incorrectly inserting new elements into the set within the loop
    }
    
    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}",numbers.insert(num + 1);
"#include <random> 
#include <chrono>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    std::mt19937 generator(seed_time.time_since_epoch().count());
    std::uniform_int_distribution<> distribution(1, 100);

    int count = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distribution(generator);
        if (randomNumber % 2 == 1) {
            count++;
        }
    }
    //incorrectly incrementing count
    count++;

    std::cout << ""Number of odd numbers: "" << count << std::endl;
    return 0;
}",count++;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!\nThis is a test."";
    std::string pattern = ""World"";

    size_t pos = text.find(pattern, 1); // Incorrect starting position
    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 1)"
"#include <algorithm>
#include <array>

int main() {
    std::array<int, 5> arr = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= arr.size(); ++i) {  // Fault: Accessing out of bounds
        sum += arr[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= arr.size()
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> myTuple = std::make_tuple(10, 3.14, ""Hello"");
    int integerValue = std::get<0>(myTuple);
    double doubleValue = std::get<1>(myTuple);
    std::string stringValue = std::get<2>(myTuple);

    std::cout << ""Integer: "" << integerValue << std::endl;
    std::cout << ""Double: "" << doubleValue << std::endl;

    // Incorrectly attempting to access element at index 3 (out of bounds)
    try {
        int invalidValue = std::get<3>(myTuple); 
        std::cout << ""Invalid Value: "" << invalidValue << std::endl; // This line will not be reached
    } catch (const std::bad_variant_access& e) {
        std::cerr << ""Exception: "" << e.what() << std::endl;
    }

    return 0;
}",int invalidValue = std::get<3>(myTuple);
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) { // Fault: i <= data.size()
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    int sum = 0;
    while (!q.empty()) {
        int x = q.front();
        q.pop();
        sum += x * 2; // Fault: Multiplying by 2 instead of adding
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += x * 2;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""The area of the circle is: "" << area << std::endl;
    
    // Incorrect calculation of circumference
    double circumference = 2 * M_PI * radius / 2;
    
    std::cout << ""The circumference of the circle is: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius / 2;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly shift the vector by one position to the right
    std::vector<int> shifted_numbers(numbers.size());
    shifted_numbers[0] = numbers.back();
    for (size_t i = 1; i < numbers.size(); ++i) {
        shifted_numbers[i] = numbers[i - 1];
    }

    //Calculate the sum of the shifted numbers
    int shifted_sum = std::accumulate(shifted_numbers.begin(), shifted_numbers.end(), 0);

    std::cout << ""Original sum: "" << sum << std::endl;
    std::cout << ""Shifted sum: "" << shifted_sum << std::endl;
    
    return 0;
}",shifted_numbers[0] = numbers.back();
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    
    if (counts.find(fruit) == counts.end()) {
        std::cout << ""Fruit not found."" << std::endl;
    } else {
        std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;
    }

    return 0;
}","std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;"
"#include <iostream>
#include <limits>

int main() {
    long long sum = 0;
    for (int i = 0; i < 100; ++i) {
        sum += i;
    }
    
    long long expected_sum = (99 * 100LL) / 2;
    
    if (sum == expected_sum) {
        std::cout << ""Sum is correct!"" << std::endl;
    } else {
        std::cout << ""Sum is incorrect! Expected: "" << expected_sum << "", Actual: "" << sum << std::endl;
    }
    
    
    long long large_value = std::numeric_limits<long long>::max();
    long long increment = 1;
    long long overflowed_value = large_value + increment;
    
    if (overflowed_value < large_value) {
       std::cout << ""Overflow detected!"" << std::endl;
    } else {
        std::cout << ""No overflow detected."" << std::endl;
    }
    
    return 0;
}",if (overflowed_value < large_value)
"#include <limits>
#include <functional>
#include <numeric>

int main() {
    std::function<int(int)> factorial = [&](int n) {
        if (n <= 1) {
            return 1;
        } else {
            return n * factorial(n - 1);
        }
    };

    int x = 12;
    long long result = factorial(x);
    std::cout << result << std::endl;
    return 0;
}",long long result = factorial(x);
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (const auto& pair : scores) {
        total_score += pair.first; // Incorrect: Adding the key (string) instead of the value (int)
    }

    std::cout << ""Total score: "" << total_score << std::endl;
    return 0;
}",total_score += pair.first;
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());
  if (text == reversed_text) {
    std::cout << ""Palindrome!"" << std::endl;
  } else {
    std::cout << ""Not a palindrome."" << std::endl;
  }
  return 0;
}",if (text == reversed_text)
"#include <algorithm>
#include <numeric>

int main() {
  int arr[] = {1, 2, 3, 4, 5};
  int n = sizeof(arr) / sizeof(arr[0]);

  int sum = std::accumulate(arr, arr + n - 1, 0); // Fault: Iterates up to n-1, missing the last element

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",arr + n - 1
"#include <fstream>
#include <sstream>
#include <iostream>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    std::stringstream buffer;
    buffer << file.rdbuf();
    std::string content = buffer.str();

    int sum = 0;
    std::stringstream ss(content);
    int number;
    while (ss >> number) {
        if (number > 100) {
            sum += number * 0.5; //Fault: Incorrect calculation
        } else {
            sum += number;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += number * 0.5;
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  std::for_each(data.begin(), data.end(), [&](int x){ sum += x; });
  
  std::array<int, 5> expected_sum = {1, 2, 3, 4, 5};
  
  if (sum == std::accumulate(expected_sum.begin(), expected_sum.end(), 0)) {
    std::cout << ""Test passed!"" << std::endl;
  } else {
    std::cout << ""Test failed!"" << std::endl;
  }
  return 0;
}","if (sum == std::accumulate(expected_sum.begin(), expected_sum.end(), 0))"
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    unsigned seed = std::chrono::system_clock::now().time_since_epoch().count() + std::hash<std::chrono::steady_clock::time_point>{}(seed_time);
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distribution(generator);
        if (num % 2 == 0) {
          sum += num * 2;
        } else {
          sum -= num;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= num;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    //Incorrectly calculating circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
"
"#include <unordered_map>
#include <iostream>

int main() {
  std::unordered_map<std::string, int> ages = {{""Alice"", 30}, {""Bob"", 25}, {""Charlie"", 35}}; 

  std::string name = ""David"";
  int age = ages[name]; // Potential issue: accessing non-existent key
  std::cout << ""Age of "" << name << "": "" << age << std::endl;

  return 0;
}",int age = ages[name];
"#include <iostream>
#include <tuple>

int main() {
    int a = 5;
    int b = 10;
    int c = 15;

    auto [x, y, z] = std::make_tuple(a, b, c);

    if (x > y && y > z) {
        std::cout << ""x is the largest"" << std::endl;
    } else if (x < y && y < z) {
        std::cout << ""z is the largest"" << std::endl;
    } else {
        std::cout << ""Something else"" << std::endl;
    }

    return 0;
}","if (x > y && y > z) {
        std::cout << ""x is the largest"" << std::endl;
    } else if (x < y && y < z) {
        std::cout << ""z is the largest"" << std::endl;
    }"
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> my_tuple(10, 3.14, ""hello"");
    int int_val = std::get<0>(my_tuple);
    double double_val = std::get<1>(my_tuple);
    std::string string_val = std::get<2>(my_tuple);

    std::cout << ""Integer: "" << int_val << std::endl;
    std::cout << ""Double: "" << double_val << std::endl;
    std::cout << ""String: "" << string_val << std::endl;

    // Incorrectly try to get the first element from the tuple again using a different index
    int_val = std::get<0>(my_tuple); 
    std::cout << ""Integer again: "" << int_val << std::endl;

    return 0;
}",int_val = std::get<0>(my_tuple);
"#include <limits>
#include <numeric>

int main() {
    long long sum = 0;
    for (long long i = 1; i <= 100000; ++i) {
        sum += i;
    }
    
    if (sum == std::numeric_limits<long long>::max()) {
        std::cout << ""Overflow detected!"" << std::endl;
    } else {
        std::cout << ""Sum: "" << sum << std::endl;
    }
    return 0;
}",sum += i;
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cout << ""Conversion failed!"" << std::endl;
        return 1;
    }

    std::string remaining;
    if (ss >> remaining) {
      std::cout << ""Remaining string: "" << remaining << std::endl;
    }

    std::cout << ""Number: "" << num << std::endl;
    return 0;
}",if (ss >> remaining)
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <chrono>
#include <thread>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) { // Fault: i <= data.size()
        sum += data[i];
    }
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl; //Intent: Print first 5 characters
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    std::string line;
    long long sum = 0;

    if (inputFile.is_open()) {
        while (std::getline(inputFile, line)) {
            try {
                long long num = std::stoll(line); // Convert line to long long
                sum += num;
            } catch (const std::invalid_argument& e) {
                std::cerr << ""Invalid input: "" << line << std::endl;
                return 1; // Exit if an invalid argument is found
            } catch (const std::out_of_range& e) {
                std::cerr << ""Out of range: "" << line << std::endl;
                return 1; // Exit if out of range
            }
        }
        std::cout << ""Sum: "" << sum << std::endl;
    } else {
        std::cerr << ""Unable to open file\n"";
        return 1;
    }
    return 0;
}",long long num = std::stoll(line);
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> squares(data.size());

    std::transform(data.begin(), data.end(), squares.begin(), [](int x){ return x * x; });

    // Incorrectly calculates the sum of squares
    int sum = std::accumulate(squares.begin(), squares.begin() + data.size() - 1, 0);

    std::cout << ""Sum of squares: "" << sum << std::endl;
    return 0;
}",squares.begin() + data.size() - 1
"#include <cmath>
#include <iostream>

int main() {
    double x = 2.0;
    double y = 3.0;
    double result = std::pow(x, y);
    std::cout << ""Result: "" << result << std::endl;
    
    // Subtle error: Incorrect calculation of square root
    double sqrt_result = sqrt(result - 1.0);
    std::cout << ""Square Root Result: "" << sqrt_result << std::endl;
    
    return 0;
}",double sqrt_result = sqrt(result - 1.0);
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.end(), 0);

    // Incorrectly multiplying sum by 2. Should be adding 10
    int result = sum * 2;

    return result;
}",int result = sum * 2;
"#include <random>
#include <ctime>
#include <iostream>

int main() {
    std::srand(std::time(nullptr));
    int size = 10;
    int arr[size];
    for (int i = 0; i <= size; ++i) {
        arr[i] = std::rand() % 100;
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",int i = 0; i <= size; ++i
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());

    if (str == reversed_str) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    std::string empty_str = """";
    std::reverse(empty_str.begin(), empty_str.end());
    std::cout << ""Empty string reversed: "" << empty_str << std::endl;
    return 0;
}","std::cout << ""The string is a palindrome."" << std::endl;"
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""hello world"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (text == reversed_text)
    std::cout << ""Palindrome!"" << std::endl;
  else
    std::cout << ""Not a palindrome."" << std::endl;

  return 0;
}",if (text == reversed_text)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n) { return n >= target; });

    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",return n >= target;
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string name = ""David"";
    int score = scores[name]; // Default construction of int, not an error but incorrect.
    std::cout << ""David's score: "" << score << std::endl;

    return 0;
}",int score = scores[name];
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string search_term = ""world"";

    size_t pos = text.find(search_term);
    if (pos != std::string::npos) {
        std::cout << ""Found "" << search_term << "" at position: "" << pos << std::endl;
        text.erase(pos, 1); // Intended to remove 'w' but it removes 1 char only
    } else {
        std::cout << ""Not found.""
    }

    std::cout << ""Modified text: "" << text << std::endl;

    return 0;
}","text.erase(pos, 1);"
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();
    
    for (int i = 0; i <= len; ++i) {
        std::cout << text[i];
    }
    std::cout << std::endl;
    return 0;
}",i <= len
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseString(std::string str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string input_string = ""hello"";
    std::string reversed_string = reverseString(input_string);
    std::cout << ""Original: "" << input_string << std::endl;
    std::cout << ""Reversed: "" << reversed_string << std::endl;
    return 0;
}","std::reverse(reversed_str.begin(), reversed_str.end());"
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 4, 0); // Incorrect end iterator
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers.begin() + 4
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (std::abs(area - expected_area) > 0.0001) {
    std::cout << ""Area calculation is incorrect!"" << std::endl;
  } else {
    std::cout << ""Area calculation is correct."" << std::endl;
  }
  return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    
    std::vector<int> empty;
    int product = 1;
    for (int val : empty) {
        product *= val;
    }
    std::cout << ""Product: "" << product << std::endl;
    
    return 0;
}","for (int val : empty) {
        product *= val;
    }"
"#include <string>
#include <algorithm>

int main() {
  std::string str = ""hello"";
  std::sort(str.begin(), str.begin() + str.length() - 1); //sort until the second to last element
  std::cout << str << std::endl;
  return 0;
}","std::sort(str.begin(), str.begin() + str.length() - 1);"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; });

    for (int i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}","[](int a, int b) { return a > b; }"
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> transformed_data(data.size());

    std::transform(data.begin(), data.end(), transformed_data.begin(), [](int x){ return x * 2; });

    int sum = std::accumulate(transformed_data.begin(), transformed_data.end(), 0);

    // Incorrectly prints the original vector's sum instead of the transformed data's sum
    std::cout << ""Sum of transformed data: "" << std::accumulate(data.begin(), data.end(), 0) << std::endl;
    return 0;
}","std::cout << ""Sum of transformed data: "" << std::accumulate(data.begin(), data.end(), 0) << std::endl;"
"#include <iostream>
#include <map>

int main() {
  std::map<std::string, int> ages;
  ages[""Alice""] = 30;
  ages[""Bob""] = 25;
  ages[""Charlie""] = 40;

  std::string name = ""David"";
  int age = ages[name]; // Key doesn't exist, default constructor used
  std::cout << ""David's age is: "" << age << std::endl;
  return 0;
}",int age = ages[name];
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int score = scores[name]; // Potential issue: Default construction if 'name' isn't in the map.
    std::cout << ""David's score: "" << score << std::endl;
    return 0;
}",int score = scores[name];
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Loop goes out of bounds
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area > expected_area + 0.1) {
        std::cout << ""Area is larger than expected."" << std::endl;
    } else if (area < expected_area - 0.1) {
        std::cout << ""Area is smaller than expected."" << std::endl;
    } else {
        std::cout << ""Area is within the expected range."" << std::endl;
    }

    return 0;
}",if (area > expected_area + 0.1)
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // accessing non-existent key

    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <string>
#include <sstream>
#include <iostream>

int main() {
  std::string input = ""123.45"";
  std::stringstream ss(input);
  double number;
  ss >> number;
  if (ss.fail()) {
    std::cout << ""Invalid input!"" << std::endl;
    return 1;
  }

  double result = number * 2;
  std::cout << ""Result: "" << result << std::endl;
  return 0;
}",  double result = number * 2;
"#include <iomanip> 
#include <sstream> 

int main() {
    double pi = 3.14159265358979323846;
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << pi;
    std::string pi_str = ss.str();
    double pi_back = std::stod(pi_str);
    
    if (pi_back == pi) {
        std::cout << ""Pi is equal to itself!\n"";
    } else {
        std::cout << ""Pi is NOT equal to itself!\n"";
    }
    return 0;
}",if (pi_back == pi)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target element in the vector
    auto it = std::find(nums.begin(), nums.end(), target);

    if (it != nums.end()) {
        std::cout << ""Target found at index: "" << std::distance(nums.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    //Incorrect Calculation of average
    double sum = 0;
    for (int num : nums) {
      sum += num;
    }
    double average = sum / (nums.size()-1); // Fault: dividing by nums.size()-1 instead of nums.size()
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = sum / (nums.size()-1);
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 1; i <= numbers.size(); ++i) {  // Faulty loop condition
        sum += numbers[i - 1];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, world!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }

  return 0;
}",if (text == reversed_text)
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    std::seed_seq seed{std::chrono::duration_cast<std::chrono::seconds>(seed_time - std::chrono::steady_clock::now()).count(), std::random_device{}()};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<> distribution(1, 10);

    int sum = 0;
    for (int i = 0; i < 5; ++i) {
        int number = distribution(generator);
        if (number % 2 == 0) {
            sum = sum + number;
        } else {
          sum = sum - number;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum = sum - number;
"#include <iostream>
#include <limits>

int main() {
    long long max_int = std::numeric_limits<long long>::max();
    long long large_value = max_int - 5;
    long long result = large_value * 2;
    std::cout << result << std::endl;
    return 0;
}",long long result = large_value * 2;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> odd_numbers;
    for (int x : data) {
        if (x % 2 == 0) {
            odd_numbers.push_back(x);
        }
    }
    int sum = std::accumulate(odd_numbers.begin(), odd_numbers.end(), 0);
    std::cout << ""Sum of odd numbers: "" << sum << std::endl;
    return 0;
}",if (x % 2 == 0)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Should handle missing key gracefully
    
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cout << ""Conversion failed!"" << std::endl;
        return 1;
    }
    double result = num * 2.0;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",if (ss.fail())
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl;

    double taxRate = 0.085;
    double taxAmount = price * taxRate;
    std::cout << std::fixed << std::setprecision(2) << taxAmount << std::endl;

    double totalCost = price + taxAmount;
    std::cout << std::fixed << std::setprecision(2) << totalCost << std::endl;
    return 0;
}",    double taxAmount = price * taxRate;
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 10;

    // Find the index of the first element greater than or equal to the target
    auto it = std::lower_bound(numbers.begin(), numbers.end(), target);

    if (it == numbers.end()) {
        std::cout << ""No element found greater than or equal to "" << target << std::endl;
    } else {
        std::cout << ""First element >= "" << target << "" is at index: "" << std::distance(numbers.begin(), it) << std::endl;
    }

    //Attempt to access an element out of bounds.  The logic mistakenly uses the number of elements *after* the found element.
    if (it != numbers.end()) {
        std::cout << ""Value at that index: "" << numbers[std::distance(numbers.begin(), it) + 1] << std::endl; //Fault: Index out of bounds
    }

    return 0;
}","numbers[std::distance(numbers.begin(), it) + 1]"
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i]; // Fault: Accessing out-of-bounds element
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += data[i];
"#include <iostream>
#include <queue>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int x = q.front();
        q.pop();
        if (x == 2) {
            // Intentionally skipping processing when x is 2.
        } else {
            std::cout << x << std::endl;
        }
    }
    return 0;
}","if (x == 2) {
            // Intentionally skipping processing when x is 2.
        }"
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(file, line)) {
        try {
            int num = std::stoi(line);
            sum += num;  // Potential overflow here
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << e.what() << '\n';
        } catch (const std::out_of_range& e) {
            std::cerr << ""Out of range: "" << e.what() << '\n';
        }
    }

    file.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += num;
"#include <iostream>
#include <queue>
#include <vector>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    std::vector<int> result;
    while (!q.empty()) {
        int current = q.front();
        q.pop();
        result.push_back(current);

        if (current % 2 == 0) {
            // Should push two values in the queue if it is even
            q.push(current * 2);
        } else {
           // Incorrect logic here, pushes only 1 element
           q.push(current * 2);
        }
    }

    std::cout << ""Result: "";
    for (int i = 0; i < result.size(); ++i) {
        std::cout << result[i] << (i == result.size() - 1 ? """" : "" "");
    }
    std::cout << std::endl;
    return 0;
}",q.push(current * 2);
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = std::accumulate(data.begin(), data.end(), 0.0);
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",0.0
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    double area = M_PI * radius * radius;
    
    std::cout << ""Circumference: "" << circumference << std::endl;
    std::cout << ""Area: "" << area << std::endl;
    
    //Intent: Calculate the diameter
    double diameter = circumference / 3.14;
    
    std::cout << ""Diameter: "" << diameter << std::endl;
    
    return 0;
}",double diameter = circumference / 3.14;
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    if (str == reversed_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == reversed_str)
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";

    // Iterate through the map and print key-value pairs
    for (const auto& pair : myMap) {
        std::cout << pair.first << "": "" << pair.second << std::endl;
    }

    // Attempt to access a non-existent key
    std::cout << myMap[5] << std::endl; // Potential issue: Default constructed string

    return 0;
}",std::cout << myMap[5] << std::endl;
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    std::vector<int> sorted_nums = nums; 
    std::sort(sorted_nums.begin(), sorted_nums.end());

    // Find the second largest element
    if (sorted_nums.size() < 2) {
        std::cout << ""Not enough elements to find the second largest."" << std::endl;
        return 0;
    }
    int second_largest = sorted_nums[1];
    std::cout << ""Second largest element: "" << second_largest << std::endl;
    return 0;
}",int second_largest = sorted_nums[1];
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    std::vector<int> squares(numbers.size());
    for (size_t i = 0; i < numbers.size(); ++i) {
        squares[i] = numbers[i] * numbers[i];
    }
    int sum_of_squares = std::accumulate(squares.begin(), squares.end(), 0);
    
    if (sum_of_squares == 55) {
      std::cout << ""Correct!"" << std::endl;
    } else {
      std::cout << ""Incorrect!"" << std::endl;
    }

    return 0;
}",if (sum_of_squares == 55)
"#include <iostream>
#include <numeric>

int main() {
  double sum = 0.0;
  std::vector<double> values = {1.0, 2.0, 3.0, 4.0, 5.0};

  for (double val : values) {
    sum += val;
  }

  double average = sum / values.size();
  std::cout << ""Average: "" << average << std::endl;

  // Incorrectly calculating the square of the average.
  double square_of_average = average * average;
  std::cout << ""Square of average (incorrect): "" << square_of_average << std::endl;
  
  return 0;
}",double square_of_average = average * average;
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl;
    double taxRate = 0.075;
    double taxAmount = price * taxRate;
    double totalPrice = price + taxAmount;
    std::cout << ""Total price: "" << std::fixed << std::setprecision(2) << totalPrice << std::endl;
    return 0;
}","std::cout << ""Total price: "" << std::fixed << std::setprecision(2) << totalPrice << std::endl;"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;  // Incorrect area calculation
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <limits>

int main() {
    long long sum = 0;
    for (int i = 0; i < 1000; ++i) {
        sum += i;
    }
    
    if (sum > std::numeric_limits<int>::max()) {
        std::cout << ""Overflow detected! Sum is: "" << sum << std::endl;
    } else {
        std::cout << ""Sum: "" << (int)sum << std::endl;
    }

    return 0;
}","std::cout << ""Sum: "" << (int)sum << std::endl;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of numbers from index 1 to 4 (inclusive)
    int sum = 0;
    for (size_t i = 1; i <= numbers.size(); ++i) {
        sum += numbers[i]; // Fault: Accessing out-of-bounds element
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += numbers[i];
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie""};
    std::sort(names.begin(), names.end(), [](const std::string& a, const std::string& b) {
        return a.length() < b.length();
    });

    for (const std::string& name : names) {
        std::cout << name << std::endl;
    }

    return 0;
}",return a.length() < b.length();
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->second << std::endl;
    }

    return 0;
}",it != myMap.end()
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;
    std::vector<int> result;

    for (int x : data) {
        if (x < target) {
            result.push_back(x);
        }
    }

    if (result.empty()) {
        std::cout << ""No values less than target found."" << std::endl;
    } else {
        std::cout << ""Values less than target: "";
        for (size_t i = 0; i < result.size(); ++i) {
            std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }

    return 0;
}",if (x < target) {
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrect calculation of average
    double average = sum / numbers.size();
    
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = sum / numbers.size();
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
  std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
  int sum = 0;

  // Calculate the sum of elements in the vector
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    // Iterate through the map and print elements
    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    // Incorrectly accessing an element that doesn't exist
    if (myMap.find(4) != myMap.end()) {
        std::cout << ""Key 4 exists: "" << myMap[4] << std::endl;
    } else {
        std::cout << ""Key 4 does not exist."" << std::endl;
    }

    return 0;
}","if (myMap.find(4) != myMap.end()) {
        std::cout << ""Key 4 exists: "" << myMap[4] << std::endl;
    }"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) == ages.end()) {
        ages[name] = 0; // Initialize to 0 instead of a sensible default age
    }

    std::cout << ""David's age: "" << ages[name] << std::endl;
    return 0;
}",ages[name] = 0;
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>
#include <sstream>

std::string concatenateStrings(std::string str1, std::string str2) {
  std::stringstream ss;
  ss << str1 << str2;
  return ss.str();
}

int main() {
  std::string input1 = ""Hello"";
  std::string input2 = "" World"";
  std::string result = concatenateStrings(input1, input2);
  std::cout << result << std::endl;

  std::string numStr = ""123"";
  int num = std::stoi(numStr);
  std::cout << num << std::endl;

  std::string invalidNumStr = ""abc"";
  int invalidNum = std::stoi(invalidNumStr); //Potential stoi exception
  std::cout << invalidNum << std::endl;
  return 0;
}",int invalidNum = std::stoi(invalidNumStr);
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area != expected_area) {
        std::cout << ""Area calculated: "" << area << std::endl;
        std::cout << ""Expected area: "" << expected_area << std::endl;
        std::cout << ""Test Failed!"" << std::endl;
    } else {
        std::cout << ""Area is correct!"" << std::endl;
    }
    return 0;
}",if (area != expected_area)
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message;
    return 0;
}",std::cout << message;
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::string sub = str.substr(0, 5);
    std::cout << sub << std::endl;
    return 0;
}","std::string sub = str.substr(0, 5);"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target value in the vector
    auto it = std::find(nums.begin(), nums.end(), target);

    if (it != nums.end()) {
        std::cout << ""Target found at index: "" << std::distance(nums.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrectly try to access element before begin
    if (it == nums.begin() - 1) {
         std::cout << ""Accessed before begin!"" << std::endl;
    }

    return 0;
}",if (it == nums.begin() - 1)
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    int key = 4;
    std::string value = myMap[key]; // Accessing a non-existent key
    std::cout << ""Value for key "" << key << "": "" << value << std::endl;

    return 0;
}",std::string value = myMap[key];
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    double sum = std::accumulate(data.begin(), data.end(), 0.0);
    
    // Incorrect type conversion - truncates the decimal part.
    int rounded_sum = (int)sum;
    
    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Rounded Sum: "" << rounded_sum << std::endl;
    return 0;
}",(int)sum
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
  std::map<std::string, int> ages; 
  ages[""Alice""] = 30;
  ages[""Bob""] = 25;
  ages[""Charlie""] = 40;

  std::string name = ""David"";
  int age = ages[name]; // Accessing a non-existent key
  std::cout << ""Age of "" << name << "": "" << age << std::endl; 
  return 0;
}",int age = ages[name];
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    std::cout << ""Total Score: "" << total_score << std::endl;
    return 0;
}","std::cout << ""Total Score: "" << total_score << std::endl;"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto const& [key, val] : myMap) {
        std::cout << key << "": "" << val << std::endl;
    }

    // Incorrectly tries to access a key that doesn't exist
    if (myMap.count(4) > 0) {
        std::cout << ""Key 4 exists: "" << myMap[4] << std::endl;
    } else {
        std::cout << ""Key 4 does not exist."" << std::endl;
    }
    
    return 0;
}","if (myMap.count(4) > 0) {
        std::cout << ""Key 4 exists: "" << myMap[4] << std::endl;
    }"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    double expected_area = M_PI * radius * radius;

    if (area == expected_area) {
        std::cout << ""Area calculation is correct."" << std::endl;
    } else {
        std::cout << ""Area calculation is incorrect. Expected: "" << expected_area << "", Calculated: "" << area << std::endl;
    }

    return 0;
}",double area = 3.14159 * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 3, 0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers.begin() + 3
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::reverse(str.begin(), str.end());
    if (str == ""dlrow olleh"") {
        std::cout << ""Reversed successfully!"" << std::endl;
    } else {
        std::cout << ""Reversal failed."" << std::endl;
    }
    return 0;
}","if (str == ""dlrow olleh"")"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int sum = 0;

    // Attempting to calculate the sum of all elements
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <random> 
#include <iostream>
#include <vector>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd()); 
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault here: i <= numbers.size() should be i < numbers.size()
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << ""Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    double tax_rate = 0.08;
    double tax_amount = price * tax_rate;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << tax_amount << std::endl;
    double total_cost = price + tax_amount;
    std::cout << ""Total Cost: "" << std::fixed << std::setprecision(2) << total_cost << std::endl;
    return 0;
}","std::cout << ""Total Cost: "" << std::fixed << std::setprecision(2) << total_cost << std::endl;"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    std::for_each(numbers.begin(), numbers.end(), [&](int n) { sum += n; });
    
    std::vector<int> odd_numbers;
    for (int number : numbers) {
        if (number % 2 == 0) {
            odd_numbers.push_back(number);
        }
    }

    int odd_sum = std::accumulate(odd_numbers.begin(), odd_numbers.end(), 0);
    
    std::cout << ""Sum of all numbers: "" << sum << std::endl;
    std::cout << ""Sum of even numbers: "" << odd_sum << std::endl;
    return 0;
}",if (number % 2 == 0)
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius; // Incorrect formula
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line);  //Potential fault here
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << e.what() << '\n';
        } catch (const std::out_of_range& e) {
            std::cerr << ""Out of range: "" << e.what() << '\n';
        }
    }

    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int num = std::stoi(line);
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string name = ""David"";
    int score = scores[name]; // Potential issue: default construction

    std::cout << ""David's score: "" << score << std::endl;
    return 0;
}",int score = scores[name];
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    // Incorrectly calculating diameter
    double diameter = circumference / M_PI;
    std::cout << ""Diameter: "" << diameter << std::endl;
    
    return 0;
}",double diameter = circumference / M_PI;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect. Calculated: "" << area << std::endl;
    }
    else {
        std::cout << ""Area calculation is correct. Calculated: "" << area << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <string>

int main() {
  std::string message = ""Hello, world!\n"";
  std::cout << message;
  return 0;
}","std::string message = ""Hello, world!\n"";"
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();

    for (int i = 0; i <= len; ++i) {
        std::cout << text[i];
    }
    std::cout << std::endl;
    return 0;
}",i <= len
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::string sub = ""world"";
    size_t pos = str.find(sub);

    if (pos != std::string::npos) {
        str.erase(pos, 5);
    }

    std::cout << str << std::endl;
    return 0;
}","str.erase(pos, 5);"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area > expected_area + 0.0001) {
        std::cout << ""Area is too large: "" << area << std::endl;
    } else if (area < expected_area - 0.0001) {
        std::cout << ""Area is too small: "" << area << std::endl;
    } else {
        std::cout << ""Area is correct: "" << area << std::endl;
    }

    return 0;
}",if (area > expected_area + 0.0001)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result = data;
    std::sort(result.begin(), result.end());

    auto it = std::find(result.begin(), result.end(), target);

    if (it != result.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl; 
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    return 0;
}","std::distance(data.begin(), it)"
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = std::accumulate(data.begin(), data.end(), 0);

  // Calculate the average
  double average = static_cast<double>(sum) / data.size();

  // Incorrectly prints sum instead of average
  std::cout << ""Sum: "" << sum << std::endl;
  std::cout << ""Average: "" << average << std::endl;

  return 0;
}","  std::cout << ""Sum: "" << sum << std::endl;"
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::system_clock::time_point now = std::chrono::system_clock::now();
    std::mt19937 generator(now.time_since_epoch().count());
    std::uniform_int_distribution<int> distribution(1, 100);

    int numbers[10];
    for (int i = 0; i <= 10; ++i) { // Fault: Loop condition should be i < 10
        numbers[i] = distribution(generator);
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}",i <= 10
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl; // Only prints ""Hello"" instead of the newline.
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();
    std::string reversed_text = """";

    for (int i = 0; i <= len; ++i) {  // Fault: Should be i < len
        reversed_text += text[len - i];
    }

    std::cout << ""Original: "" << text << std::endl;
    std::cout << ""Reversed: "" << reversed_text << std::endl;

    return 0;
}",i <= len
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();

    for (int i = 0; i < len; ++i) {
        if (text[i] == 'l') {
            text.erase(i, 1); // Erasing 'l' changes the string length
            --i; // This is the subtle fault - decrementing 'i' after erasing
        }
    }

    std::cout << text << std::endl;
    return 0;
}",--i;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <iomanip>

int main() {
    double price = 100.0;
    int quantity = 5;
    double discount_percentage = 0.15;

    double discount_amount = price * quantity * discount_percentage;
    double final_price = price * quantity - discount_amount;

    std::cout << ""Original Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    std::cout << ""Quantity: "" << quantity << std::endl;
    std::cout << ""Discount Percentage: "" << std::fixed << std::setprecision(2) << discount_percentage << std::endl;
    std::cout << ""Discount Amount: "" << std::fixed << std::setprecision(2) << discount_amount << std::endl;
    std::cout << ""Final Price: "" << std::fixed << std::setprecision(2) << final_price << std::endl;

    return 0;
}",double discount_amount = price * quantity * discount_percentage;
"#include <iostream>
#include <string>

int main() {
  std::string message = ""Hello, world!\n"";
  std::cout << message.substr(0, 5) << std::endl; // Intended to print ""Hello""
  return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!\n"";
    std::string upperText = text;
    std::transform(upperText.begin(), upperText.end(), upperText.begin(), ::toupper);
    std::cout << upperText << std::endl;
    return 0;
}",::toupper
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""The area of the circle is: "" << area << std::endl;
    
    //Incorrect calculation of circumference
    double circumference = 2 * M_PI * radius;
    circumference = circumference / 2.0;
    std::cout << ""The circumference of the circle is: "" << circumference << std::endl;
    
    return 0;
}",circumference = circumference / 2.0;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Find the index of the largest number
    auto it = std::max_element(numbers.begin(), numbers.end());
    size_t index = std::distance(numbers.begin(), it);

    // Access the element at the calculated index
    std::cout << numbers[index] << std::endl; //Potential out-of-bounds access

    return 0;
}",std::cout << numbers[index] << std::endl;
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }

  return 0;
}",if (text == reversed_text)
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> nums = {5, 2, 8, 1, 9, 4};
  int target = 7;

  std::vector<int> result;
  for (int num : nums) {
    if (num > target) {
      result.push_back(num);
    }
  }

  if (result.empty()) {
    std::cout << ""No numbers greater than target found."" << std::endl;
  } else {
    std::sort(result.begin(), result.end(), std::greater<int>());
    std::cout << ""Numbers greater than target: "";
    for (int i = 0; i < result.size(); ++i) {
      std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
  }

  return 0;
}",if (num > target) {
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;  // Incorrect formula
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    int len = message.length();
    if (len > 10) {
        std::cout << message.substr(0, 5) << std::endl;
    } else {
        std::cout << message << std::endl;
    }
    return 0;
}","if (len > 10) {
        std::cout << message.substr(0, 5) << std::endl;
    } else {
        std::cout << message << std::endl;
    }"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double pi = 3.14159;
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};

    // Incorrectly calculating the sum using a range-based for loop
    int sum = 0;
    for (int number : numbers) {
        sum += number * 2;
    }

    std::cout << ""The sum of the numbers multiplied by 2 is: "" << sum << std::endl;
    return 0;
}",sum += number * 2;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i)
"#include <iostream>
#include <limits>

int main() {
    int max_int = std::numeric_limits<int>::max();
    int sum = 0;
    for (int i = 0; i <= max_int; ++i) {
        sum += i;
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= max_int; ++i)
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) == ages.end()) {
        ages[name] = 0;
    }
    std::cout << ""David's age: "" << ages[name] << std::endl;
    
    std::cout << ""Alice's age: "" << ages[""Alice""] << std::endl;

    return 0;
}",ages[name] = 0;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    
    // Incorrectly truncating circumference to an integer before printing
    std::cout << ""Circumference: "" << (int)circumference << std::endl;
    
    return 0;
}","std::cout << ""Circumference: "" << (int)circumference << std::endl;"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::sort(data.begin(), data.begin() + 4); // Intentionally sort only the first 4 elements
    
    for (int val : data) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;
    return 0;
}",data.begin() + 4
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string pattern = ""test"";

    size_t pos = text.find(pattern, 0);

    if (pos != std::string::npos) {
        text.replace(pos, pattern.length(), ""replacement"");
    }

    std::cout << text << std::endl;
    return 0;
}","text.replace(pos, pattern.length(), ""replacement"");"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    auto it = std::find(data.begin(), data.end(), target);

    if (it != data.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }
    
    // Incorrectly attempting to modify the vector based on find result
    if (it != data.end()) {
        data[std::distance(data.begin(), it)] = target * 2; // Fault: Accessing out-of-bounds vector
    }

    return 0;
}","data[std::distance(data.begin(), it)] = target * 2;"
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;

    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line);  // Potential fault:  No size check before stoi
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid number in file: "" << line << std::endl;
        } catch (const std::out_of_range& e) {
            std::cerr << ""Number out of range: "" << line << std::endl;
        }
    }

    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int num = std::stoi(line);
"#include <iostream>
#include <iomanip>

int main() {
    double price = 99.99;
    int quantity = 3;
    double discount_rate = 0.15;

    double total_price = price * quantity;
    double discount_amount = total_price * discount_rate;
    double final_price = total_price - discount_amount;

    std::cout << ""Original Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    std::cout << ""Quantity: "" << quantity << std::endl;
    std::cout << ""Discount Rate: "" << std::fixed << std::setprecision(2) << discount_rate << std::endl;
    std::cout << ""Total Price: "" << std::fixed << std::setprecision(2) << total_price << std::endl;
    std::cout << ""Discount Amount: "" << std::fixed << std::setprecision(2) << discount_amount << std::endl;
    std::cout << ""Final Price: "" << std::fixed << std::setprecision(2) << final_price << std::endl;

    return 0;
}",double discount_amount = total_price * discount_rate;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.456789;
    std::cout << ""Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    double taxRate = 0.075;
    double taxAmount = price * taxRate;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    double total = price + taxAmount;
    std::cout << ""Total: "" << std::fixed << std::setprecision(2) << total << std::endl;
    return 0;
}","std::cout << ""Total: "" << std::fixed << std::setprecision(2) << total << std::endl;"
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // This will default to 0 because David isn't in the map
    std::cout << ""David's age is: "" << age << std::endl;
    
    return 0;
}",int age = ages[name];
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Loop condition is off by one
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    radius = -5.0; // Negative radius
    double area2 = M_PI * radius * radius;
    std::cout << ""Area with negative radius: "" << area2 << std::endl;
    return 0;
}",radius = -5.0; // Negative radius
"#include <string>
#include <vector>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie""};
    
    for (size_t i = 0; i <= names.size(); ++i) {
        std::cout << names[i] << std::endl;
    }
    
    return 0;
}",i <= names.size()
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Find the index of the first occurrence of 4
    auto it = std::find(numbers.begin(), numbers.end(), 4);

    if (it != numbers.end()) {
        // Access the element *after* the found element (potential out-of-bounds access)
        std::cout << *it + 1 << std::endl; 
    }
    else {
        std::cout << ""Not found"" << std::endl;
    }
    
    return 0;
}",std::cout << *it + 1 << std::endl;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::system_clock::time_point now = std::chrono::system_clock::now();
    std::seed_seq seed = {std::chrono::duration_cast<std::chrono::seconds>(now - std::chrono::system_clock::from_time_t(0)).count(), now.time_since_epoch().count() % 1000 };
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int numbers[5];
    for (int i = 0; i < 5; ++i) {
        numbers[i] = distribution(generator);
    }

    int sum = 0;
    for (int i = 0; i <= 5; ++i) { // Fault: i <= 5 instead of i < 5
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= 5
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    std::sort(arr, arr + n - 1); // Fault: Sorting only up to n-1, leaving the last element unsorted
    
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    double circumference = 2 * 3.14159 * radius;
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

    // Incorrectly calculating the diameter
    double diameter = radius / 2.0;
    std::cout << ""Diameter of the circle: "" << std::fixed << std::setprecision(2) << diameter << std::endl;

    return 0;
}",double diameter = radius / 2.0;
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int x = q.front();
        q.pop();
        if (x == 2) {
            // Incorrectly incrementing x instead of modifying the queue
            x++;
        }
        std::cout << x << "" "";
    }
    std::cout << std::endl;
    return 0;
}",x++;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    std::string value = myMap[4]; // Accessing a non-existent key
    std::cout << value << std::endl;
    return 0;
}",std::string value = myMap[4];
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    //Potential overflow: large numbers are multiplied, potentially exceeding the representable range
    long long int very_large_number = 9223372036854775807LL;
    long long int another_large_number = 2;
    long long int product = very_large_number * another_large_number;
    std::cout << ""Product: "" << product << std::endl;
    
    return 0;
}",long long int very_large_number = 9223372036854775807LL;
"#include <string>
#include <sstream>

std::string formatString(int number) {
    std::stringstream ss;
    ss << number;
    return ss.str();
}

int main() {
    int age = 25;
    std::string ageString = formatString(age);
    std::string message = ""You are "" + ageString + "" years old."";
    std::cout << message << std::endl;

    int quantity = 3;
    std::string quantityString = formatString(quantity);
    std::string message2 = ""There are "" + quantityString + "" items."";
    std::cout << message2 << std::endl;

    std::string combined = message + "" and "" + message2;
    std::cout << combined << std::endl;

    std::string invalid_string = ""123"" + 456; //Implicit conversion is causing an issue.
    std::cout << invalid_string << std::endl;
    return 0;
}","std::string invalid_string = ""123"" + 456;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int target = 3;

    auto it = std::find(data.begin(), data.end(), target);
    if (it != data.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Intentionally incorrect: shifting the iterator after finding
    if (it != data.end()) {
        it++; // This could lead to unexpected behavior in subsequent operations
    }

    return 0;
}",it++;
"#include <iostream>
#include <complex>

int main() {
    double real_part = 2.0;
    double imag_part = 3.0;
    std::complex<double> c(real_part, imag_part);

    std::cout << ""Complex number: "" << c << std::endl;

    // Incorrectly attempting to extract real part as integer
    int real_int = c.real();

    std::cout << ""Real part (as integer): "" << real_int << std::endl;

    return 0;
}",int real_int = c.real();
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of the first n-1 elements
    int sum = std::accumulate(numbers.begin(), numbers.begin() + numbers.size() - 1, 0);
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers.begin() + numbers.size() - 1
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl;
    double tax_rate = 0.085;
    double tax_amount = price * tax_rate;
    std::cout << ""Tax amount: "" << std::fixed << std::setprecision(2) << tax_amount << std::endl;
    double total_cost = price + tax_amount;
    std::cout << ""Total cost: "" << std::fixed << std::setprecision(2) << total_cost << std::endl;
    return 0;
}","std::cout << ""Total cost: "" << std::fixed << std::setprecision(2) << total_cost << std::endl;"
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);

    if (file.is_open()) {
        std::string line;
        int sum = 0;
        while (std::getline(file, line)) {
            try {
                int num = std::stoi(line);
                sum += num;
            } catch (const std::invalid_argument& e) {
                std::cerr << ""Invalid input: "" << line << std::endl;
            } catch (const std::out_of_range& e) {
                std::cerr << ""Number out of range: "" << line << std::endl;
            }
        }
        file.close();
        std::cout << ""Sum: "" << sum << std::endl;
    } else {
        std::cerr << ""Unable to open file: "" << filename << std::endl;
        return 1;
    }
    return 0;
}",int num = std::stoi(line);
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.end(), 0);
    
    // Incorrectly calculating the average
    double average = sum / data.size(); // Integer division truncates the result
    
    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;
    
    return 0;
}",double average = sum / data.size();
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();

    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores; 
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int davidScore = scores[name]; // Should insert 0 if David doesn't exist
    std::cout << ""David's score: "" << davidScore << std::endl;
    
    return 0;
}",int davidScore = scores[name];
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> words = {""apple"", ""banana"", ""cherry"", ""date""};
    std::string target = ""grape"";

    auto it = std::find(words.begin(), words.end(), target);

    if (it != words.end()) {
        std::cout << ""Found: "" << *it << std::endl;
    } else {
        std::cout << ""Not found: "" << target << std::endl;
    }
    return 0;
}","std::string target = ""grape"";"
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double circumference = 2 * M_PI * radius;
  
  std::cout << ""Circumference: "" << circumference << std::endl;
  
  // Incorrect calculation of area - uses circumference instead of radius
  double area = circumference * radius;
  std::cout << ""Area: "" << area << std::endl;
  
  return 0;
}",double area = circumference * radius;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    
    // Sort the numbers in descending order
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());

    // Calculate the sum of the first five elements
    int sum = 0;
    for (size_t i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    
    std::cout << ""Sum of the first five elements: "" << sum << std::endl;
    return 0;
}","for (size_t i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting only up to n-1

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
  int target = 7;

  std::vector<int> results;
  std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(results), [target](int n){ return n < target; });

  //The faulty logic here is that the condition is reversed. Should be n > target.
  std::cout << ""Numbers greater than "" << target << "": "";
  for (int num : results) {
    std::cout << num << "" "";
  }
  std::cout << std::endl;

  return 0;
}",return n < target;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // This line will default-construct a value
    std::cout << ""David's age is: "" << age << std::endl;
    
    return 0;
}",int age = ages[name];
"#include <iostream>
#include <fstream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ofstream outfile(filename);
    if (outfile.is_open()) {
        outfile << ""This is a test.\n"";
        outfile << ""Another line.\n"";
        outfile.close();
    }
    else {
        std::cerr << ""Unable to open file!\n"";
        return 1;
    }

    std::ifstream infile(filename);
    std::string line;
    if (infile.is_open()) {
        int lineNumber = 1;
        while (std::getline(infile, line)) {
            std::cout << ""Line "" << lineNumber << "": "" << line << std::endl;
            lineNumber++;
        }
        infile.close();
    }
    else {
        std::cerr << ""Unable to open file for reading!\n"";
        return 1;
    }

    return 0;
}","std::cout << ""Line "" << lineNumber << "": "" << line << std::endl;"
"#include <random> 
#include <vector>
#include <iostream>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd()); 
    std::uniform_int_distribution<> distrib(1, 100); 

    std::vector<int> numbers(10); 

    for (int i = 0; i < numbers.size(); ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the sum of the first 'n' elements, where n = numbers.size() - 1
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum of elements: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string."";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());
  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }
  return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <limits>

int main() {
    long long large_num = std::numeric_limits<long long>::max();
    long long increment = 1;
    long long result = large_num + increment; 
    std::cout << result << std::endl;
    return 0;
}",long long result = large_num + increment;
"#include <string>
#include <sstream>

std::string formatFloat(double num, int precision) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(precision) << num;
    return ss.str();
}

int main() {
    double pi = 3.14159265359;
    int precision = 2;
    std::string formattedPi = formatFloat(pi, precision);
    std::cout << ""Pi formatted to "" << precision << "" decimal places: "" << formattedPi << std::endl;
    double ratio = 1.0 / 3.0;
    std::string formattedRatio = formatFloat(ratio, 5);
    std::cout << ""1/3 formatted to 5 decimal places: "" << formattedRatio << std::endl;
    double verySmall = 0.0000000000000001;
    std::string formattedVerySmall = formatFloat(verySmall, 10);
    std::cout << ""Very small number formatted to 10 decimal places: "" << formattedVerySmall << std::endl;
    
    return 0;
}","std::string formattedVerySmall = formatFloat(verySmall, 10);"
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ofstream outfile(filename);
    if (!outfile.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    for (int i = 0; i < 10; ++i) {
        outfile << i * 1.1 << std::endl;  // Intent: Write floating-point numbers
    }

    outfile.close();

    std::ifstream infile(filename);
    if (!infile.is_open()) {
        std::cerr << ""Error opening file for reading!"" << std::endl;
        return 1;
    }

    std::string line;
    int count = 0;
    while (std::getline(infile, line)) {
        int number = std::stoi(line);  // Fault: Converting string to integer directly
        std::cout << ""Read: "" << number << std::endl;
        count++;
    }

    infile.close();

    std::cout << ""Total lines read: "" << count << std::endl;
    return 0;
}",int number = std::stoi(line);
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> values = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= values.size(); ++i) {
    sum += values[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= values.size(); ++i) {
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    auto it = std::find(data.begin(), data.end(), target);

    if (it == data.end()) {
        std::cout << ""Target not found."" << std::endl;
    } else {
        std::cout << ""Target found at index: "" << it - data.begin() << std::endl;
    }

    return 0;
}","std::cout << ""Target found at index: "" << it - data.begin() << std::endl;"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, world!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());
  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }
  return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    // Incorrect calculation of diameter
    double diameter = circumference / M_PI;
    std::cout << ""Diameter: "" << diameter << std::endl;
    
    return 0;
}",double diameter = circumference / M_PI;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double circumference = 2 * M_PI * radius;
    
    std::cout << ""Area: "" << area << std::endl;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    //Incorrectly calculating the diameter
    double diameter = radius;

    std::cout << ""Diameter: "" << diameter << std::endl;
    
    return 0;
}",double diameter = radius;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    // Intended to add David with age 35, but mistakenly trying to increment existing value.
    ages[name]++ ; //Fault

    std::cout << ""David's age: "" << ages[name] << std::endl;
    return 0;
}",ages[name]++
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int count = 0;
    for (int i = 0; i < 10; ++i) {
        int number = distrib(gen);
        if (number % 2 == 0) {
            count++;
        } else {
            count = count;
        }
    }

    std::cout << ""Number of even numbers: "" << count << std::endl;
    return 0;
}",count = count;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""hello world"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> nums = {1, 2, 3, 4, 5};
  int sum = std::accumulate(nums.begin(), nums.end(), 0);
  
  // Incorrectly decrement the sum by 1 after calculating it.
  sum--;
  
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",sum--;
"#include <iostream>
#include <queue>
#include <vector>

using namespace std;

int main() {
    priority_queue<int, vector<int>, greater<int>> pq;
    pq.push(5);
    pq.push(2);
    pq.push(8);

    int sum = 0;
    while (!pq.empty()) {
        sum += pq.top();
        pq.pop();
    }

    cout << ""Sum: "" << sum << endl;
    return 0;
}","priority_queue<int, vector<int>, greater<int>> pq;"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string."";
  std::string substring = text.substr(10, 5);
  substring.erase(std::remove(substring.begin(), substring.end(), 's'), substring.end());
  std::cout << substring << std::endl;
  return 0;
}","substring.erase(std::remove(substring.begin(), substring.end(), 's'), substring.end());"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <limits>

int main() {
    long long max_val = std::numeric_limits<long long>::max();
    long long result = max_val * 2;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",long long result = max_val * 2;
"#include <array>
#include <numeric>
#include <iostream>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 4, 0);
    // The intent was to sum the first 5 elements, but the loop only goes up to the 4th element.
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers.begin() + 4
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!\n"";
    } else {
        std::cout << ""Area calculation is correct!\n"";
    }

    double circumference = 2 * M_PI * radius;
    double expected_circumference = 31.4159;

    if (std::abs(circumference - expected_circumference) > 0.0001) {
        std::cout << ""Circumference calculation is incorrect!\n"";
    } else {
        std::cout << ""Circumference calculation is correct!\n"";
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""Area of the circle: "" << area << std::endl;
    
    // Incorrectly calculating the circumference
    double circumference = 2 * M_PI * radius - 1.0;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius - 1.0;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // This will default initialize age to 0 if 'David' isn't in the map.
    std::cout << ""David's age is: "" << age << std::endl;
    return 0;
}",int age = ages[name];
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = ""incorrect_type""; // Fault: Attempting to assign an incorrect type to the map

    std::cout << ""Alice's age: "" << ages[""Alice""] << std::endl;
    std::cout << ""Bob's age: "" << ages[""Bob""] << std::endl;
    std::cout << ""Charlie's age: "" << ages[""Charlie""] << std::endl;

    return 0;
}","ages[""Charlie""] = ""incorrect_type"";"
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    for (int i = 0; i <= myMap.size(); ++i) {
        std::cout << myMap[i] << std::endl;
    }

    return 0;
}",for (int i = 0; i <= myMap.size(); ++i)
"#include <random> 
#include <iostream>
#include <tuple>

int main() {
  std::random_device rd; 
  std::mt19937 gen(rd());
  std::uniform_int_distribution<> distrib(1, 100);

  int num_iterations = 5;
  int sum = 0;

  for (int i = 0; i < num_iterations; ++i) {
    int random_number = distrib(gen);
    sum += random_number;
  }

  std::cout << ""Sum of "" << num_iterations << "" random numbers: "" << sum << std::endl;
  return 0;
}",int num_iterations = 5;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int x : data) {
        if (x < target) {
            result.push_back(x);
        }
    }

    // Faulty logic: should sort the result vector before printing
    for (int x : result) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;

    return 0;
}","    for (int x : result) {
        std::cout << x << "" "";
    }"
"#include <queue>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::queue<int> q;

    for (int i = 0; i < data.size(); ++i) {
        q.push(data[i]);
    }

    std::vector<int> sorted_data;
    while (!q.empty()) {
        sorted_data.push_back(q.front());
        q.pop();
    }

    std::sort(sorted_data.begin(), sorted_data.end());

    std::cout << ""Sorted data: "";
    for (int val : sorted_data) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(sorted_data.begin(), sorted_data.end());"
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  
  // Find the index of the largest element
  auto it = std::max_element(numbers.begin(), numbers.end());

  // Incorrectly subtract 1 from the iterator to get the index.
  int index = std::distance(numbers.begin(), it) - 1;

  std::cout << ""The index of the largest element is: "" << index << std::endl;
  
  return 0;
}","int index = std::distance(numbers.begin(), it) - 1;"
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 85;
    scores[""Charlie""] = 70;

    std::string name = ""David"";
    int score = scores[name]; // Default construction used - value will be 0
    std::cout << ""David's score: "" << score << std::endl;

    return 0;
}",int score = scores[name];
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cout << ""Invalid input"" << std::endl;
        return 1;
    }
    std::cout << ""Number: "" << num << std::endl;
    double result = num * 2.0;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}","std::cout << ""Number: "" << num << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""Area of the circle: "" << area << std::endl;
    
    // Calculate circumference using incorrect formula
    double circumference = 2 * M_PI * radius / 2;

    std::cout << ""Circumference of the circle: "" << circumference << std::endl;

    return 0;
}",double circumference = 2 * M_PI * radius / 2;
"#include <functional>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> result(data.size());

  std::transform(data.begin(), data.end(), result.begin(), [](int x) { return x * 2; });
  
  // Incorrect initialization of sum
  int sum = 0;
  std::accumulate(result.begin(), result.end(), sum); // Fault: Pass sum by value
  
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}","int sum = 0;
  std::accumulate(result.begin(), result.end(), sum);"
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    std::cout << myMap[4] << std::endl; // Accessing non-existent key
    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <array>
#include <numeric> 

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; });
    
    for (int number : numbers) {
        std::cout << number << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return a > b;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <unordered_map>
#include <string>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 2;

    std::string fruit = ""grape"";
    if (counts.find(fruit) == counts.end()) {
        counts[fruit] = 1; // Initialize to 1 instead of 0
    }

    std::cout << ""Grape count: "" << counts[fruit] << std::endl;
    return 0;
}",counts[fruit] = 1;
"#include <numeric>
#include <random>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(0, numbers.size() - 1);

    for (int i = 0; i < numbers.size(); ++i) {
        int randomIndex = distrib(gen);
        sum += numbers[randomIndex];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int randomIndex = distrib(gen);
"#include <random>
#include <chrono>

int main() {
    std::chrono::system_clock::time_point seed = std::chrono::system_clock::now();
    std::mt19937 generator(seed.time_since_epoch().count());
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int number = distribution(generator);
        if (number % 2 == 0) {
            sum += number * 2;
        } else {
            sum += number / 2;
        }
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += number / 2;
"#include <chrono>
#include <thread>
#include <iostream>

int main() {
    auto start = std::chrono::steady_clock::now();
    std::this_thread::sleep_for(std::chrono::milliseconds(500));

    auto end = std::chrono::steady_clock::now();
    auto duration = end - start;
    long long elapsed_milliseconds = std::chrono::duration_cast<std::chrono::milliseconds>(duration).count();

    if (elapsed_milliseconds < 500) {
        std::cout << ""Slept for less than 500ms. Something is wrong!"" << std::endl;
    } else {
        std::cout << ""Slept for approximately "" << elapsed_milliseconds << "" milliseconds."" << std::endl;
    }
    return 0;
}",if (elapsed_milliseconds < 500)
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123abc456"";
    std::stringstream ss(input);
    int num;
    ss >> num; //Attempts to read an integer, but encounters characters after the initial number
    std::cout << ""Parsed number: "" << num << std::endl;
    return 0;
}",ss >> num;
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> my_tuple = std::make_tuple(10, 3.14, ""hello"");
    
    auto& [a, b, c] = my_tuple;
    
    std::cout << a << std::endl;
    std::cout << b << std::endl;
    std::cout << c << std::endl;

    // Incorrectly attempt to modify a tuple element through a reference
    a = 20;

    std::cout << std::get<0>(my_tuple) << std::endl; // Expecting 20, might observe different behavior depending on compiler/platform.
    return 0;
}",a = 20;
"#include <queue>
#include <iostream>

int main() {
    std::priority_queue<int, std::vector<int>, std::greater<int>> pq;
    pq.push(5);
    pq.push(10);
    pq.push(3);

    std::cout << ""Top element: "" << pq.top() << std::endl;
    pq.pop();
    std::cout << ""Top element after pop: "" << pq.top() << std::endl;

    while (!pq.empty()) {
        std::cout << pq.top() << "" "";
        pq.pop();
    }
    std::cout << std::endl;
    return 0;
}",std::greater<int>
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto const& [key, val] : myMap) {
        std::cout << key << "": "" << val << std::endl;
    }

    std::cout << myMap[4] << std::endl; // Accessing non-existent element
    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Error: Calculated area is significantly different from expected area."" << std::endl;
    } else {
        std::cout << ""Area is within acceptable bounds."" << std::endl;
    }

    // Introduce a subtle error by incorrectly using pow for area calculation
    double incorrect_area = pow(M_PI, radius * radius); 
    
    std::cout << ""Incorrect area: "" << incorrect_area << std::endl;
    
    return 0;
}","double incorrect_area = pow(M_PI, radius * radius);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",return n > target;
"#include <vector>
#include <cmath>

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    double sum = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += std::sqrt(data[i]);
    }
    double average = sum / data.size();
    std::cout << ""Average of square roots: "" << average << std::endl;
    return 0;
}",double average = sum / data.size();
"#include <cmath>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

    // Incorrect calculation of diameter
    double diameter = radius / 2.0;
    std::cout << ""Diameter of the circle: "" << diameter << std::endl;

    return 0;
}",double diameter = radius / 2.0;
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  std::for_each(data.begin(), data.end(), [&](int x) { sum += x; });
  if (sum == 15) {
    std::cout << ""Sum is correct!"" << std::endl;
  } else {
    std::cout << ""Sum is incorrect! Expected 15, got "" << sum << std::endl;
  }
  return 0;
}",if (sum == 15)
"#include <random>
#include <limits>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int secretNumber = distrib(gen);
    int guess = 0; 

    std::cout << ""Guess the number between 1 and 100!\n"";
    while (guess != secretNumber) {
        std::cout << ""Enter your guess: "";
        std::cin >> guess;
        if (guess < secretNumber) {
            std::cout << ""Too low!\n"";
        } else if (guess > secretNumber) {
            std::cout << ""Too high!\n"";
        }
        if (guess > 100 || guess < 1) {
            std::cout << ""Invalid input. Please enter a number between 1 and 100.\n"";
        }
    }

    std::cout << ""Congratulations! You guessed the number.\n"";
    return 0;
}",if (guess > 100 || guess < 1) {
"#include <numeric>
#include <functional>
#include <stdexcept>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    try {
        int sum = std::accumulate(numbers.begin(), numbers.end(), 0, std::minus<int>());
        std::cout << ""Sum: "" << sum << std::endl;
    } catch (const std::exception& e) {
        std::cerr << ""Exception: "" << e.what() << std::endl;
    }
    
    return 0;
}",std::minus<int>()
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""123.45abc"";
    std::stringstream ss(input);
    double value;
    if (ss >> value) {
        std::cout << ""Value: "" << value << std::endl;
    } else {
        std::cout << ""Invalid input!"" << std::endl;
    }
    std::string remaining;
    if (ss >> remaining) {
        std::cout << ""Remaining: "" << remaining << std::endl;
    }
    return 0;
}",if (ss >> remaining)
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    
    // Attempt to sort the vector in descending order
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());
    
    // Print the sorted vector
    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(numbers.begin(), numbers.end(), std::greater<int>());"
"#include <queue>
#include <tuple>
#include <iostream>

int main() {
  std::queue<std::tuple<int, int, int>> q;
  q.push({1, 2, 3});
  q.push({4, 5, 6});

  while (!q.empty()) {
    auto [a, b, c] = q.front();
    q.pop();
    std::cout << a << "" "" << b << "" "" << c << std::endl;
  }

  return 0;
}","std::cout << a << "" "" << b << "" "" << c << std::endl;"
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // Default construction of int
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;
    return 0;
}",int count = counts[fruit];
"#include <iostream>
#include <iomanip>

int main() {
  double radius = 5.0;
  double area = 3.14159 * radius * radius;
  std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
  return 0;
}",double area = 3.14159 * radius * radius;
"#include <algorithm>
#include <tuple>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""hello"");
    int integer_value = std::get<0>(data);
    double double_value = std::get<1>(data);
    std::string string_value = std::get<2>(data);

    // Incorrectly try to add a string to an integer
    int result = integer_value + string_value.length();
    
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",int result = integer_value + string_value.length();
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> myTuple = std::make_tuple(10, 3.14, ""Hello"");
    
    std::cout << std::get<0>(myTuple) << std::endl;
    std::cout << std::get<1>(myTuple) << std::endl;
    std::cout << std::get<2>(myTuple) << std::endl;
    
    std::cout << std::get<3>(myTuple) << std::endl; // Accessing out-of-bounds element

    return 0;
}",std::cout << std::get<3>(myTuple) << std::endl;
"#include <ctime>
#include <iomanip>

int main() {
    std::srand(std::time(nullptr));
    int arr[10];
    for (int i = 0; i <= 10; ++i) {
        arr[i] = std::rand() % 100;
    }
    
    std::cout << ""Array elements: "";
    for (int i = 0; i < 10; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",for (int i = 0; i <= 10; ++i)
"#include <array>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  std::array<int, 5> sorted_data = data;
  
  std::sort(sorted_data.begin(), sorted_data.end(), std::greater<int>());

  if (data == sorted_data) {
    std::cout << ""Arrays are equal"" << std::endl;
  } else {
    std::cout << ""Arrays are not equal"" << std::endl;
  }
  
  return 0;
}","std::sort(sorted_data.begin(), sorted_data.end(), std::greater<int>());"
"#include <random>
#include <limits>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num > 50) {
            sum = sum << 1; // Left bit shift instead of addition
        } else {
            sum += num;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum = sum << 1;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""The area of the circle is: "" << area << std::endl;
    
    // Incorrect calculation of circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""The circumference is: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double value;
    ss >> value;

    if (ss.fail()) {
        std::cerr << ""Conversion failed!"" << std::endl;
        return 1;
    }

    int truncatedValue = (int)value; // Potential loss of data, truncates rather than rounds
    std::cout << ""Truncated value: "" << truncatedValue << std::endl;
    return 0;
}",int truncatedValue = (int)value;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly calculating average (integer division)
    int average = sum / numbers.size();
    
    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",int average = sum / numbers.size();
"#include <iomanip> 
#include <sstream>

int main() {
    double pi = 3.14159265358979323846;
    int degrees = 45;
    double radians = degrees * pi / 180.0;
    double sine_value = sin(radians);

    std::stringstream ss;
    ss << std::fixed << std::setprecision(10) << sine_value;
    std::string sine_string = ss.str();

    if (sine_string == ""0.7071067812"") {
        std::cout << ""Sine of 45 degrees is approximately 0.7071067812"" << std::endl;
    } else {
        std::cout << ""Sine of 45 degrees is not 0.7071067812"" << std::endl;
    }

    return 0;
}","if (sine_string == ""0.7071067812"")"
"#include <iostream>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Off-by-one error
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }
    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            sum += std::stoi(line); // Potential overflow
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << e.what() << '\n';
        } catch (const std::out_of_range& e) {
            std::cerr << ""Out of range: "" << e.what() << '\n';
        }
    }
    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += std::stoi(line);
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (size_t i = 0; i <= data.size(); ++i)
"#include <iostream>
#include <tuple>

int main() {
  int a = 5;
  int b = 10;
  int c = 15;

  auto [x, y, z] = std::make_tuple(a, b, c);
  
  if (x > y && y > z) {
    std::cout << ""Condition met!"" << std::endl;
  } else {
    std::cout << ""Condition not met."" << std::endl;
  }

  return 0;
}",if (x > y && y > z)
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    // Incorrectly iterating through the map
    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->first << "" : "" << it->second << std::endl;
    }

    std::cout << ""Size of map: "" << myMap.size() << std::endl;
    return 0;
}",for (auto it = myMap.begin(); it != myMap.end(); ++it)
"#include <array>
#include <numeric>
#include <iostream>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) { // Fault: Loop goes out of bounds
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <ctime>
#include <random>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
            sum += num / 2;
        } else {
            sum -= num;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= num;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    double expected_circumference = 31.4159;
    if (circumference != expected_circumference) {
        std::cout << ""Circumference check failed!"" << std::endl;
    }
    return 0;
}",if (circumference != expected_circumference)
"#include <string>
#include <vector>

int main() {
  std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie""};
  std::string concatenated_names;

  for (size_t i = 0; i < names.size(); ++i) {
    concatenated_names += names[i];
  }

  // Incorrectly append a space after each name. The space should only appear between names, not at the end.
  for (size_t i = 0; i < names.size(); ++i) {
    concatenated_names += ' '; 
  }

  std::cout << concatenated_names << std::endl;
  return 0;
}",concatenated_names += ' '; 
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) { // Fault: i <= numbers.size() should be i < numbers.size()
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  
  // Calculate the sum of squares, but with an off-by-one error in the loop condition.
  int sum_of_squares = 0;
  for (size_t i = 0; i <= data.size(); ++i) { //Faulty Loop Condition
    sum_of_squares += data[i] * data[i];
  }
  
  std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
  return 0;
}",i <= data.size()
"#include <random> 
#include <iostream>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int numbers[] = {distrib(gen), distrib(gen), distrib(gen), distrib(gen), distrib(gen)};
    int size = sizeof(numbers) / sizeof(numbers[0]);

    std::sort(numbers, numbers + size - 1); // Fault: Sorting up to size-1, not size

    std::cout << ""Sorted array: "";
    for (int i = 0; i < size; ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::sort(numbers, numbers + size - 1);"
"#include <tuple>
#include <numeric>
#include <functional>

int main() {
    std::tuple<int, int, int> my_tuple = std::make_tuple(1, 2, 3);
    int sum = std::accumulate(std::tuple_cat(my_tuple), 0, std::plus<int>());
    std::cout << sum << std::endl;
    return 0;
}",std::tuple_cat(my_tuple)
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> squares(data.size());
    std::transform(data.begin(), data.end(), squares.begin(), [](int x){ return x * x; });

    // Calculate the sum of squares incorrectly by using a starting value of 1 instead of 0
    int sum_of_squares = std::accumulate(squares.begin(), squares.end(), 1);

    std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
    return 0;
}","std::accumulate(squares.begin(), squares.end(), 1);"
"#include <iostream>
#include <limits>

int main() {
    long long max_value = std::numeric_limits<long long>::max();
    long long base = 2;
    long long power = 63;

    long long result = 1;
    for (long long i = 0; i < power; ++i) {
        result *= base;
    }

    if (result > max_value) {
        std::cout << ""Overflow detected!"" << std::endl;
    } else {
       std::cout << result << std::endl;
    }
    return 0;
}",result *= base;
"#include <map>
#include <string>
#include <algorithm>

int main() {
  std::map<std::string, int> scores;
  scores[""Alice""] = 90;
  scores[""Bob""] = 80;
  scores[""Charlie""] = 70;

  std::string highest_scorer = """";
  int highest_score = -1; // Initialize to -1 to ensure first entry is always higher

  for (auto const& [name, score] : scores) {
      if (score > highest_score) {
          highest_score = score;
          highest_scorer = name;
      }
  }

  std::string modified_name = ""David"";
  if (highest_scorer == ""Alice"") {
      modified_name = ""Eve"";
  } else if (highest_scorer == ""Bob""){
      modified_name = ""Frank"";
  } 

  std::cout << ""The highest scorer is "" << highest_scorer << "" and the modified name is "" << modified_name << std::endl;

  return 0;
}","  } else if (highest_scorer == ""Bob""){
      modified_name = ""Frank"";
  }"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) { // Fault: i <= data.size()
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <cmath>

int main() {
  double radius = 5.0;
  double circumference = 2 * M_PI * radius;
  std::cout << ""Circumference: "" << circumference << std::endl;

  double area = M_PI * radius * radius;
  std::cout << ""Area: "" << area << std::endl;

  // Incorrect calculation of diameter
  double diameter = circumference / PI;  //Uses PI instead of M_PI
  std::cout << ""Diameter: "" << diameter << std::endl;

  return 0;
}",double diameter = circumference / PI;
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    size_t pos = message.find(""\n"");
    if (pos != std::string::npos) {
        message.erase(pos, 1); // Incorrect number of characters to erase
    }
    std::cout << message << std::endl;
    return 0;
}","message.erase(pos, 1);"
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::reverse(str.begin(), str.end());
    if (str == ""olleh"") {
        std::cout << ""Correct!"" << std::endl;
    } else {
        std::cout << ""Incorrect."" << std::endl;
    }
    return 0;
}","if (str == ""olleh"")"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    // Incorrect calculation of diameter
    double diameter = radius / 2.0;
    std::cout << ""Diameter: "" << diameter << std::endl;

    return 0;
}",double diameter = radius / 2.0;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    auto it = std::find(data.begin(), data.end(), target);

    if (it != data.end()) {
        std::cout << ""Found target: "" << *it << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrect: Should be data.size() - 1 to access the last element safely.
    std::cout << ""Last element: "" << data[data.size()] << std::endl;

    return 0;
}","std::cout << ""Last element: "" << data[data.size()] << std::endl;"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target value
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        // Incorrectly calculate index by subtracting from numbers.begin() and decrementing
        int index = std::distance(numbers.begin(), it) - 1;
        std::cout << ""Target found at index: "" << index << std::endl;
    } else {
        std::cout << ""Target not found"" << std::endl;
    }

    return 0;
}","int index = std::distance(numbers.begin(), it) - 1;"
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::system_clock::time_point now = std::chrono::system_clock::now();
    std::seed_seq seed{std::chrono::duration_cast<std::chrono::seconds>(now - std::chrono::system_clock::from_time_t(0)).count(), now.time_since_epoch().count() % 1000};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int numbers[10];
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distribution(generator);
    }

    // Calculate the sum of even numbers
    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        if (numbers[i] % 2 == 1) { // Fault: Should be '==' for even numbers
            sum += numbers[i];
        }
    }

    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}",if (numbers[i] % 2 == 1)
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    std::cout << ""Total Score: "" << total_score << std::endl;

    // Calculate average (potential issue)
    double average = total_score / scores.size(); //Integer division
    std::cout << ""Average Score: "" << average << std::endl;

    return 0;
}",double average = total_score / scores.size();
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "" is: "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "" is unknown."" << std::endl;
    }

    ages.erase(""Bob"");
    
    if (ages.find(""Bob"") != ages.end()){
        std::cout << ""Bob's age is still present.""
    }else{
        std::cout << ""Bob's age is no longer present.""
    }

    return 0;
}","if (ages.find(""Bob"") != ages.end())"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string word = ""world"";

    size_t pos = text.find(word);

    if (pos != std::string::npos) {
        std::cout << ""Word found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Word not found."" << std::endl;
    }

    text[pos] = 'W'; // Intended to capitalize 'w' in ""world""
    std::cout << ""Modified text: "" << text << std::endl;

    return 0;
}",text[pos] = 'W';
"#include <iostream>
#include <fstream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    std::string line;
    int sum = 0;

    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line);
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid number: "" << line << std::endl;
        }
    }

    inputFile.close();

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",    int sum = 0;
"#include <iostream>
#include <numeric>

int main() {
  int arr[] = {1, 2, 3, 4, 5};
  int n = sizeof(arr) / sizeof(arr[0]);
  int sum = 0;
  for (int i = 0; i <= n; ++i) {
    sum += arr[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= n; ++i)
"#include <iostream>
#include <string>

int main() {
  std::string message = ""Hello, world!"";
  std::string upper_message = message;

  for (char &c : upper_message) {
    c = c - 32; // Incorrectly convert to uppercase
  }

  std::cout << upper_message << std::endl;
  return 0;
}",c = c - 32;
"#include <string>
#include <sstream>

std::string formatString(int value) {
    std::stringstream ss;
    ss << value;
    return ss.str();
}

int main() {
    int number = 123;
    std::string formatted = formatString(number);
    
    // Incorrect usage of string comparison
    if (formatted == ""12"") {
        std::cout << ""The number is 12."" << std::endl;
    } else {
        std::cout << ""The number is not 12."" << std::endl;
    }
    
    return 0;
}","if (formatted == ""12"")"
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> values = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= values.size(); ++i) {
    sum += values[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= values.size(); ++i)
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  
  // Calculate the sum of the first n elements, where n is data.size() + 1
  int sum = std::accumulate(data.begin(), data.begin() + data.size() + 1, 0);
  
  // Print the sum
  std::cout << ""Sum: "" << sum << std::endl;
  
  return 0;
}",data.begin() + data.size() + 1
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    
    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!\n"";
    } else {
        std::cout << ""Area calculation is correct!\n"";
    }
    
    return 0;
}",double area = M_PI * radius * radius;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    // Incorrect rounding: truncates towards zero instead of nearest integer.
    int roundedArea = (int)area; 
    std::cout << ""Rounded Area: "" << roundedArea << std::endl;

    return 0;
}",int roundedArea = (int)area;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (reversed_text == text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (reversed_text == text)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string pattern = ""world!"";
    size_t pos = text.find(pattern);
    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }
    text[0] = 'J'; //Incorrect attempt to modify the original string at a known index
    std::cout << text << std::endl;
    return 0;
}",text[0] = 'J';
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();
    for (int i = 0; i <= len; ++i) {
        std::cout << text[i];
    }
    std::cout << std::endl;
    return 0;
}",i <= len
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 10;
    counts[""orange""] = 3;

    int total = 0;
    for (auto const& [fruit, count] : counts) {
        total += count;
    }
    
    std::cout << ""Total fruits: "" << total << std::endl;
    
    return 0;
}","counts[""orange""] = 3;"
"#include <iostream>
#include <string>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name] + 5; // Accessing a non-existent key with default value
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",ages[name] + 5
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    
    if (text == reversed_text) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    
    return 0;
}",if (text == reversed_text)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.begin() + 4, 0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",data.begin() + 4
"#include <iostream>
#include <iomanip>

int main() {
    double value = 123.456789;
    std::cout << std::fixed << std::setprecision(3) << value << std::endl;
    std::cout << std::fixed << std::setprecision(2) << value << std::endl;
    std::cout << std::fixed << std::setprecision(1) << value << std::endl;
    
    double pi = 3.141592653589793238;
    std::cout << std::fixed << std::setprecision(10) << pi << std::endl; // display more digits
    std::cout << std::fixed << std::setprecision(3) << pi << std::endl;
    
    return 0;
}",std::cout << std::fixed << std::setprecision(10) << pi << std::endl;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    std::cout << ""Total score: "" << total_score << std::endl;
    return 0;
}","scores[""Alice""] = 85;"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect!\n"";
    } else {
        std::cout << ""Area calculation is correct.\n"";
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area is incorrect. Calculated: "" << area << "", Expected: "" << expected_area << std::endl;
    } else {
        std::cout << ""Area is correct: "" << area << std::endl;
    }

    // Intentionally introduce a floating-point error by adding a very small value
    double modified_radius = radius + 0.000000000000000001;
    double modified_area = M_PI * modified_radius * modified_radius;
    if (std::abs(modified_area - expected_area) > 0.0001) {
        std::cout << ""Modified Area is incorrect. Calculated: "" << modified_area << "", Expected: "" << expected_area << std::endl;
    } else {
        std::cout << ""Modified Area is correct: "" << modified_area << std::endl;
    }

    return 0;
}",double modified_radius = radius + 0.000000000000000001;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect!\n"";
    } else {
        std::cout << ""Area calculation is correct!\n"";
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::sort(data.begin(), data.end(), std::greater<int>());
    
    std::cout << ""Sorted in descending order: "";
    for (size_t i = 0; i < data.size(); ++i) {
        std::cout << data[i] << (i == data.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
    
    std::vector<int> empty_vector;
    empty_vector.push_back(10);
    empty_vector.push_back(20);
    empty_vector.push_back(30);

    auto it = std::find(empty_vector.begin(), empty_vector.end(), 40); // Faulty line

    if (it != empty_vector.end()) {
        std::cout << ""Found 40 in the vector."" << std::endl;
    } else {
        std::cout << ""40 not found in the vector."" << std::endl;
    }

    return 0;
}","std::find(empty_vector.begin(), empty_vector.end(), 40);"
"#include <iostream>
#include <map>

int main() {
  std::map<std::string, int> ages; 
  ages[""Alice""] = 30; 
  ages[""Bob""] = 25;
  ages[""Charlie""] = 40;

  std::string name = ""David"";
  int age = ages[name]; // Accessing non-existent key
  
  std::cout << ""David's age: "" << age << std::endl;
  return 0;
}",int age = ages[name];
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    // Incorrectly access age of David, which doesn't exist
    std::cout << ""David's age: "" << ages[""David""] << std::endl; 
    
    std::cout << ""Alice's age: "" << ages[""Alice""] << std::endl;
    return 0;
}","std::cout << ""David's age: "" << ages[""David""] << std::endl;"
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    ss >> number;
    if (ss.fail() || !ss.eof()) {
        std::cout << ""Invalid input format."" << std::endl;
        return 1;
    }
    int integer_part = static_cast<int>(number);
    std::cout << ""Integer part: "" << integer_part << std::endl;
    return 0;
}",int integer_part = static_cast<int>(number);
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <random>
#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < numbers.size(); ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average of the numbers
    double sum = 0.0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    double average = sum / numbers.size();

    // Find the largest number smaller than the average
    int largest_smaller = -1;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] < average && numbers[i] > largest_smaller) {
            largest_smaller = numbers[i];
        }
    }

    std::cout << ""Average: "" << average << std::endl;
    std::cout << ""Largest number smaller than the average: "" << largest_smaller << std::endl;

    return 0;
}",if (numbers[i] < average && numbers[i] > largest_smaller)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",return n > target;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <fstream>
#include <string>

int main() {
    std::ofstream outputFile(""output.txt"");
    if (outputFile.is_open()) {
        std::string line = ""This is a test line.\n"";
        outputFile << line << ""Another line""; // Missing newline
        outputFile.close();
    } else {
        std::cerr << ""Unable to open file!"" << std::endl;
        return 1;
    }
    return 0;
}","outputFile << line << ""Another line"";"
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
  
  // Incorrectly divide by the size of numbers - 1 instead of numbers.size()
  float average = static_cast<float>(sum) / (numbers.size() - 1);
  
  std::cout << ""Average: "" << average << std::endl;
  return 0;
}",numbers.size() - 1
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""The area of the circle is: "" << area << std::endl;

    // Incorrect calculation of circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""The circumference of the circle is: "" << circumference << std::endl;

    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrect comparison: using == instead of !=
    if (sum == 15) {
        std::cout << ""The sum is 15."" << std::endl;
    } else {
        std::cout << ""The sum is not 15."" << std::endl;
    }
    
    return 0;
}",if (sum == 15)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, World!"";
    size_t pos = text.find(""World"", 7); // Starts searching from index 7, which is past ""Hello, ""
    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }
    return 0;
}","text.find(""World"", 7)"
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::sort(str.begin(), str.end());
    str.erase(str.begin());
    std::cout << str << std::endl;
    return 0;
}",str.erase(str.begin());
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    double expected_area = M_PI * radius * radius;  // Using M_PI from cmath

    if (area == expected_area) {
        std::cout << ""Area calculated correctly!"" << std::endl;
    } else {
        std::cout << ""Area calculation error!"" << std::endl;
        std::cout << ""Calculated area: "" << area << std::endl;
        std::cout << ""Expected area: "" << expected_area << std::endl;
    }

    return 0;
}",double area = 3.14159 * radius * radius;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);
    int max_val = arr[0];

    for (int i = 1; i <= n; ++i) {
        if (arr[i] > max_val) {
            max_val = arr[i];
        }
    }
    std::cout << ""Maximum value: "" << max_val << std::endl;
    return 0;
}",i <= n
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> results; 
    for (int x : data) {
        if (x > target) {
            results.push_back(x);
        }
    }

    if (results.empty()) {
        std::cout << ""No values greater than target found."" << std::endl;
    } else {
        std::cout << ""Values greater than target: "";
        for (size_t i = 0; i < results.size(); ++i) {
           std::cout << results[i];
           if (i < results.size() - 1) {
              std::cout << "", "";
           }
        }
        std::cout << std::endl;
    }

    return 0;
}",if (x > target) {
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!\n"";
    size_t pos = text.find(""world!"");
    if (pos != std::string::npos) {
        text.erase(pos, 5); // Intended to erase ""world!""
    }
    std::cout << text << std::endl;
    return 0;
}","text.erase(pos, 5);"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string best_player;
    int highest_score = -1; 

    for (auto const& [player, score] : scores) {
        if (score > highest_score) {
            highest_score = score;
            best_player = player;
        }
    }

    std::cout << ""Best player: "" << best_player << "" with score: "" << highest_score << std::endl;
    return 0;
}",int highest_score = -1;
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: i <= numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <fstream>
#include <string>

int main() {
    std::ofstream outfile(""data.txt"");
    if (outfile.is_open()) {
        std::string line = ""This is a test line"";
        outfile << line << std::endl;
        outfile << line << std::endl;
        outfile.close();
    } else {
        std::cerr << ""Unable to open file"";
        return 1;
    }

    std::ifstream infile(""data.txt"");
    std::string read_line;
    if (infile.is_open()) {
        std::getline(infile, read_line);
        std::cout << read_line << std::endl;
        std::getline(infile, read_line);
        std::cout << read_line << std::endl;
        infile.close();
    } else {
        std::cerr << ""Unable to open file for reading"";
        return 1;
    }

    return 0;
}","std::getline(infile, read_line);"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    
    // Calculate the sum of elements, but use the wrong iterator range.
    int sum = std::accumulate(data.begin(), data.begin() + data.size() -1 , 0);
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",data.begin() + data.size() -1
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4, 7, 3, 6};
    int target = 7;

    // Find the index of the target value
    auto it = std::find(data.begin(), data.end(), target);

    if (it != data.end()) {
        int index = std::distance(data.begin(), it) - 1; // Fault: Subtracting 1 here.
        std::cout << ""Target found at index: "" << index << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    return 0;
}","std::distance(data.begin(), it) - 1"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    // Incorrect calculation of diameter
    double diameter = circumference / M_PI;
    std::cout << ""Diameter: "" << diameter << std::endl;

    return 0;
}",double diameter = circumference / M_PI;
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    size_t pos = message.find(""world!"");
    if (pos != std::string::npos) {
        message.erase(pos, 5);
    }
    std::cout << message << std::endl;
    return 0;
}","message.erase(pos, 5);"
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!\n"";
    size_t pos = text.find(""world!"");
    if (pos != std::string::npos) {
        text.erase(pos, 5);
    }
    std::cout << text << std::endl;
    return 0;
}","text.erase(pos, 5);"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    if (scores.count(name) == 0) {
        scores[name] = 0;
    }

    std::cout << ""David's score: "" << scores[name] << std::endl;
    return 0;
}","if (scores.count(name) == 0) {
        scores[name] = 0;
    }"
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    size_t pos = message.find(""world!"");
    if (pos != std::string::npos) {
        message.replace(pos, 6, ""universe!"");
    }
    std::cout << message << std::endl;
    return 0;
}","message.replace(pos, 6, ""universe!"");"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    for (int x : data) {
        if (x % 2 == 0) {
            even_numbers.push_back(x);
        }
    }

    // Calculate the sum of even numbers.  Incorrect initialization of 'sum'.
    int sum = 0;
    for (int even : even_numbers) {
        sum = sum + even;
    }

    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}",int sum = 0;
"#include <random>
#include <chrono>
#include <vector>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Should be < numbers.size()
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    std::string upperMessage = message;

    for (char &c : upperMessage) {
        if (c >= 'a' && c <= 'z') {
            c = c - 1; // Incorrect offset - should be c = c - 32;
        }
    }

    std::cout << upperMessage << std::endl;
    return 0;
}",c = c - 1;
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    int len = message.length();

    for (int i = 0; i <= len; ++i) {
        std::cout << message[i];
    }
    std::cout << std::endl;
    return 0;
}",i <= len
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());

    std::cout << ""Sorted in descending order: "";
    for (size_t i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << (i == numbers.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;

    std::vector<int> empty_vector;
    std::sort(empty_vector.begin(), empty_vector.end(), std::greater<int>()); // Fault here
    return 0;
}","std::sort(empty_vector.begin(), empty_vector.end(), std::greater<int>());"
"#include <iostream>
#include <cmath>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double perimeter = 2 * M_PI * radius;
  
  std::cout << ""Area: "" << area << std::endl;
  std::cout << ""Perimeter: "" << perimeter << std::endl;
  
  // Incorrect calculation for the circumference.  It should be 2 * PI * r
  double circumference = M_PI + radius;
  std::cout << ""Circumference: "" << circumference << std::endl;
  
  return 0;
}",double circumference = M_PI + radius;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly using the size of the vector instead of its capacity
    int incorrect_size = numbers.size();
    
    if (incorrect_size > 5) {
        std::cout << ""Vector size is greater than 5."" << std::endl;
    } else {
        std::cout << ""Vector size is not greater than 5."" << std::endl;
    }

    std::cout << ""Sum of numbers: "" << sum << std::endl;
    return 0;
}",if (incorrect_size > 5)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());

    if (str == reversed_str) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (str == reversed_str)
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl; // Intended to print ""Hello"" but prints ""Hello,""
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // Calculate the sum of even numbers
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 1) {  // Fault: Should be numbers[i] % 2 == 0
            sum += numbers[i];
        }
    }
    
    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}",if (numbers[i] % 2 == 1)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area > expected_area + 0.1) {
        std::cout << ""Area is too large: "" << area << std::endl;
    } else if (area < expected_area - 0.1) {
        std::cout << ""Area is too small: "" << area << std::endl;
    } else {
        std::cout << ""Area is correct: "" << area << std::endl;
    }

    return 0;
}",area > expected_area + 0.1
"#include <iostream>
#include <string>
#include <sstream>

std::string formatNumber(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 12.5;
    int quantity = 3;
    std::string formattedPrice = formatNumber(price);
    double total = price * quantity;
    std::cout << ""Total cost: "" << formattedPrice * quantity << std::endl; // Fault: multiplying a string by an integer
    return 0;
}",formattedPrice * quantity
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message;
    return 0;
}",std::cout << message;
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::reverse(str.begin(), str.end());
    if (str == ""olleh"") {
        std::cout << ""Correctly reversed!"" << std::endl;
    } else {
        std::cout << ""Reversal failed."" << std::endl;
    }
    return 0;
}","if (str == ""olleh"")"
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
  int sum = 0;
  for (int i = 0; i < numbers.size(); ++i) {
    sum += numbers[i];
  }
  int average = sum / numbers.size();
  std::cout << ""Average: "" << average << std::endl;
  return 0;
}",int average = sum / numbers.size();
"#include <iostream>
#include <limits>

int main() {
    long long max_int = std::numeric_limits<long long>::max();
    long long sum = 0;
    for (long long i = 0; i <= max_int; ++i) {
        sum += i;
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (long long i = 0; i <= max_int; ++i)
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        sum += std::stoi(line, nullptr, 10); // Potential overflow
    }

    inputFile.close();

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","sum += std::stoi(line, nullptr, 10);"
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of squares, but with an off-by-one error.
    int sumOfSquares = 0;
    for (size_t i = 0; i <= numbers.size(); ++i) {  // Incorrect loop condition
        sumOfSquares += numbers[i] * numbers[i];
    }
    
    std::cout << ""Sum of squares: "" << sumOfSquares << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->second << std::endl;
    }

    std::cout << myMap[4] << std::endl; // Accessing non-existent key
    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World! This is a test."";
    std::string substring = ""world"";

    // Convert both strings to lowercase for case-insensitive comparison
    std::transform(text.begin(), text.end(), text.begin(), ::tolower);
    std::transform(substring.begin(), substring.end(), substring.begin(), ::tolower);

    if (text.find(substring) == std::string::npos) {
        std::cout << ""Substring not found!"" << std::endl;
    } else {
        std::cout << ""Substring found!"" << std::endl;
    }

    return 0;
}","std::transform(text.begin(), text.end(), text.begin(), ::tolower);"
"#include <vector>
#include <numeric>
#include <algorithm>
#include <iostream>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  
  // Calculate the sum of even numbers.
  int sum = 0;
  for (int i = 0; i < data.size(); ++i) {
    if (data[i] % 2 == 0) {
      sum += data[i];
    }
  }
  
  //Incorrectly return the sum of all elements instead of even numbers.
  std::cout << ""Sum of even numbers: "" << sum << std::endl;
  return 0;
}","  std::cout << ""Sum of even numbers: "" << sum << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    //Incorrect usage of pow, intended to square the radius. 
    double area_incorrect = M_PI * pow(radius, 1);
    std::cout << ""Incorrect Area: "" << area_incorrect << std::endl;

    return 0;
}","double area_incorrect = M_PI * pow(radius, 1);"
"#include <iostream>
#include <string>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> word_counts;
    std::string text = ""This is a test. This is only a test."";

    std::string word;
    for (char c : text) {
        if (isalpha(c)) {
            word += c;
        } else if (!word.empty()) {
            word_counts[word]++;
            word = """";
        }
    }

    if (!word.empty()) {
        word_counts[word]++;
    }

    // Print counts
    for (const auto& pair : word_counts) {
        std::cout << pair.first << "": "" << pair.second << std::endl;
    }

    return 0;
}","if (!word.empty()) {
        word_counts[word]++;
        word = """";
    }"
"#include <iostream>
#include <string>

int main() {
  std::string message = ""Hello, world!\n"";
  size_t pos = message.find(""world!"");
  if (pos != std::string::npos) {
    message.replace(pos, 6, ""universe!"");
  }
  std::cout << message << std::endl;
  return 0;
}","message.replace(pos, 6, ""universe!"");"
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::sort(str.begin(), str.end());
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    if (str == reversed_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == reversed_str)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n >= target; });

    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",return n >= target; 
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl;
    double taxRate = 0.075;
    double taxAmount = price * taxRate;
    double totalCost = price + taxAmount;

    std::cout << ""Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    std::cout << ""Total: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;
    return 0;
}","std::cout << ""Total: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size(); // Integer division
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 95;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string highest_scorer = """";
    int highest_score = -1;

    for (auto const& [name, score] : scores) {
        if (score > highest_score) {
            highest_score = score;
            highest_scorer = name;
        }
    }

    std::cout << ""Highest scorer: "" << highest_scorer << "" with score: "" << highest_score << std::endl;

    // Incorrectly tries to access a non-existent key
    std::cout << ""David's score: "" << scores[""David""] << std::endl;

    return 0;
}","std::cout << ""David's score: "" << scores[""David""] << std::endl;"
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores; 
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    
    if (scores.find(name) == scores.end()) {
        scores[name] = 60;
    }

    std::cout << ""David's score: "" << scores[name] << std::endl;
    return 0;
}",scores[name] = 60;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation incorrect!\n"";
    } else {
        std::cout << ""Area calculation correct!\n"";
    }

    // Calculate circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    return 0;
}",double expected_area = 78.5398;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""Area of the circle: "" << area << std::endl;
    
    // Subtle fault: Integer division truncates the result
    int integer_area = area; 
    
    std::cout << ""Integer area: "" << integer_area << std::endl;
    
    return 0;
}",int integer_area = area;
"#include <unordered_map>
#include <string>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 1;
    counts[""banana""] = 2;
    counts[""cherry""] = 3;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // Potential issue: default construction if key doesn't exist
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;
    return 0;
}",int count = counts[fruit];
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::string sub = str.substr(0, 5);
    if (sub == ""hello"") {
        std::cout << ""Match!"" << std::endl;
    } else {
        std::cout << ""No match."" << std::endl;
    }
    return 0;
}","if (sub == ""hello"")"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    size_t pos = message.find(""world!"");
    if (pos != std::string::npos) {
        message.replace(pos, 6, ""universe!"");
    }
    std::cout << message << std::endl;
    return 0;
}",std::string::npos
"#include <queue>
#include <vector>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    std::vector<int> nums;
    while (!q.empty()) {
        nums.push_back(q.front());
        q.pop();
    }

    // Incorrectly calculate the sum of the first two elements
    int sum = nums[0] + nums[1];

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int sum = nums[0] + nums[1];
"#include <fstream>
#include <string>
#include <algorithm>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line);
            sum += num;
        } catch (const std::invalid_argument& e) {
            // Ignore lines that are not numbers
        }
    }

    inputFile.close();

    std::string result = std::to_string(sum);
    std::ofstream outputFile(""result.txt"");
    if (!outputFile.is_open()) {
        std::cerr << ""Error opening output file!\n"";
        return 1;
    }
    outputFile << result;
    outputFile.close();

    return 0;
}",int num = std::stoi(line);
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = std::accumulate(data.begin(), data.end(), 0);

  // Calculate the average, but incorrectly divide by the size + 1
  double average = static_cast<double>(sum) / (data.size() + 1);

  std::cout << ""Sum: "" << sum << std::endl;
  std::cout << ""Average: "" << average << std::endl;

  return 0;
}",double average = static_cast<double>(sum) / (data.size() + 1);
"#include <random>
#include <vector>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    double expected_area = M_PI * radius * radius;

    std::cout << ""Calculated Area: "" << area << std::endl;
    std::cout << ""Expected Area: "" << expected_area << std::endl;
    
    if (area > expected_area + 0.1) {
        std::cout << ""Area is significantly larger than expected."" << std::endl;
    } else {
        std::cout << ""Area is within acceptable range."" << std::endl;
    }

    return 0;
}",double area = 3.14159 * radius * radius;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    // Iterate through the map and print key-value pairs.
    for (const auto& pair : myMap) {
        std::cout << pair.first << "": "" << pair.second << std::endl;
    }

    //Attempting to access a non-existent key.
    std::cout << ""Key 4: "" << myMap[4] << std::endl; // Faulty line
    
    return 0;
}","std::cout << ""Key 4: "" << myMap[4] << std::endl;"
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cerr << ""Conversion failed!\n"";
        return 1;
    }
    double result = num * 2;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",if (ss.fail())
"#include <algorithm>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    int sum = 0;
    for (int i = 0; i <= n; ++i) {  // Fault: Loop iterates one too many times
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= n
"#include <iostream>
#include <tuple>

int main() {
  int a = 5;
  int b = 7;
  int c = 9;

  auto [x, y, z] = std::make_tuple(a, b, c);

  std::cout << ""x: "" << x << "", y: "" << y << "", z: "" << z << std::endl;

  int sum = x + y +
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",int sum = x + y +
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";

    if (counts.find(fruit) != counts.end()) {
        std::cout << ""Count for "" << fruit << "": "" << counts[fruit] << std::endl;
    } else {
        std::cout << ""Count for "" << fruit << "": 0"" << std::endl;
    }

    return 0;
}","std::cout << ""Count for "" << fruit << "": 0"" << std::endl;"
"#include <numeric>
#include <algorithm>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    int sum = 0;
    std::iota(sum, n, 1); //Incorrect use of iota - intended to initialize the sum with the number of elements
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","std::iota(sum, n, 1);"
"#include <iostream>
#include <queue>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    int sum = 0;
    while (!q.empty()) {
        int x = q.front();
        q.pop();
        if (x > 10) {
            break; // Incorrect condition, it should be <= 0 to avoid unintended behavior
        }
        sum += x;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","if (x > 10) {
            break;"
"#include <queue>
#include <vector>

int main() {
    std::queue<int> q;
    std::vector<int> nums = {1, 2, 3, 4, 5};

    for (int num : nums) {
        q.push(num);
    }

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        if (current % 2 == 0) {
            q.push(current * 2);
        } else {
            q.push(current - 1);
        }
    }

    std::cout << ""Final queue size: "" << q.size() << std::endl;
    return 0;
}",q.push(current - 1);
"#include <random>
#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Find the smallest element
    auto min_it = std::min_element(numbers.begin(), numbers.end());

    // Incorrectly attempt to access element beyond the vector's bounds.  The index is calculated after the loop, so it is outside bounds
    std::cout << ""Smallest element: "" << numbers[numbers.size()] << std::endl; 

    return 0;
}",numbers[numbers.size()]
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int x : data) {
        if (x > target) {
            result.push_back(x);
        }
    }

    if (result.empty()) {
        std::cout << ""No values greater than target found."" << std::endl;
    } else {
        std::cout << ""Values greater than target: "";
        for (int i = 0; i < result.size(); ++i) {
            std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }

    return 0;
}",if (x > target) {
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Find the index of the element equal to 7 (which doesn't exist).
    auto it = std::find(numbers.begin(), numbers.end(), 7);
    
    if (it != numbers.end()) {
        int index = std::distance(numbers.begin(), it);
        std::cout << ""Element found at index: "" << index << std::endl;
    } else {
        std::cout << ""Element not found."" << std::endl;
        int wrong_index = 100; //This variable is never used.
    }
    
    return 0;
}",int wrong_index = 100;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Find the index of the largest element
    auto it = std::max_element(numbers.begin(), numbers.end());
    
    // Incorrectly access the element at the *index* of the iterator, not the iterator itself
    int largest_element = numbers[it - numbers.begin()];
    
    std::cout << ""Largest element: "" << largest_element << std::endl;
    
    return 0;
}",int largest_element = numbers[it - numbers.begin()];
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::reverse(str.begin(), str.end());
    if (str == ""olleh"") {
        std::cout << ""Success!"" << std::endl;
    } else {
        std::cout << ""Failure!"" << std::endl;
    }
    return 0;
}","if (str == ""olleh"")"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int sum = 0;

    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }

    // Incorrect calculation of average: missing division by numbers.size()
    double average = sum;

    std::cout << ""The average is: "" << average << std::endl;

    return 0;
}",double average = sum;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct: "" << area << std::endl;
    } else {
        std::cout << ""Area is incorrect: Calculated "" << area << "", Expected "" << expected_area << std::endl;
    }
    return 0;
}",if (area == expected_area)
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";

    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "" is unknown."" << std::endl;
    }

    return 0;
}",if (ages.find(name) != ages.end())
"#include <fstream>
#include <string>

int main() {
    std::ofstream outputFile(""data.txt"");
    if (outputFile.is_open()) {
        std::string line = ""This is a test line.\n"";
        outputFile << line << ""Another line""; // Missing newline character
        outputFile.close();
    } else {
        std::cerr << ""Unable to open file for writing."";
        return 1;
    }
    return 0;
}","outputFile << line << ""Another line"""
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    // Calculate the sum of the elements
    int sum = std::accumulate(arr, arr + n - 1, 0); // Fault: Incorrect upper bound

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",arr + n - 1
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <string>

int main() {
  std::string text = ""Hello, world!"";
  int len = text.length();
  for (int i = 0; i <= len; ++i) {
    std::cout << text[i];
  }
  std::cout << std::endl;
  return 0;
}",i <= len
"#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text)
        std::cout << ""Palindrome!"" << std::endl;
    else
        std::cout << ""Not a palindrome."" << std::endl;

    return 0;
}",if (text == reversed_text)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct!"" << std::endl;
    } else {
        std::cout << ""Area is incorrect: calculated "" << area << "", expected "" << expected_area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <string>
#include <sstream>
#include <iostream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 123.456789;
    std::string formatted_price = format_number(price);
    std::cout << ""The price is: "" << formatted_price << std::endl;
    double tax_rate = 0.075;
    double tax_amount = price * tax_rate;
    std::string formatted_tax = format_number(tax_amount);
    std::cout << ""Tax amount: "" << formatted_tax << std::endl;
    
    double total_price = price + tax_amount;
    std::string formatted_total = format_number(total_price);
    std::cout << ""Total price: "" << formatted_total << std::endl;
    
    return 0;
}",std::string formatted_tax = format_number(tax_amount);
"#include <iostream>
#include <unordered_map>
#include <string>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit];
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;
    return 0;
}",int count = counts[fruit];
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores; 
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;
    
    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }
    
    double average_score = total_score / scores.size(); // Integer division
    std::cout << ""Average score: "" << average_score << std::endl;
    
    return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto const& [key, val] : myMap) {
        std::cout << key << "": "" << val << std::endl;
    }

    myMap.erase(2); // Intentionally removing an element

    std::cout << ""After erase:
"";

    for (auto const& [key, val] : myMap) {
        std::cout << key << "": "" << val << std::endl;
    }

    // This should print the count of all elements, but will print 0 because it's trying to iterate over an empty range.
    std::cout << ""Size of map: "" << myMap.size() << std::endl;
    return 0;
}","std::cout << ""Size of map: "" << myMap.size() << std::endl;"
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (const auto& pair : scores) {
        total_score += pair.first; // Incorrect: adding the key (string) instead of the value (int)
    }

    std::cout << ""Total score: "" << total_score << std::endl;
    return 0;
}",total_score += pair.first;
"#include <iomanip> 
#include <sstream> 
#include <stdexcept> 

std::string format_double(double value, int precision) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(precision) << value;
    return ss.str();
}

int main() {
    double pi = 3.14159265358979323846;
    int precision = 5;
    try {
        std::string formatted_pi = format_double(pi, precision);
        std::cout << ""Formatted PI: "" << formatted_pi << std::endl;
        double parsed_pi = std::stod(formatted_pi); 
        std::cout << ""Parsed PI: "" << parsed_pi << std::endl;
    } catch (const std::invalid_argument& e) {
        std::cerr << ""Invalid argument: "" << e.what() << std::endl;
        return 1;
    } catch (const std::out_of_range& e) {
        std::cerr << ""Out of range: "" << e.what() << std::endl;
        return 1;
    }
    
    double large_number = 1e300;
    int high_precision = 20;
    std::string formatted_large = format_double(large_number, high_precision);
    std::cout << ""Formatted Large Number: "" << formatted_large << std::endl;
    double parsed_large = std::stod(formatted_large);
    std::cout << ""Parsed Large Number: "" << parsed_large << std::endl;

    return 0;
}",double parsed_large = std::stod(formatted_large);
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Intended to double the sum, but accidentally shifts bits instead
    int doubled_sum = sum << 1; 

    std::cout << ""Original sum: "" << sum << std::endl;
    std::cout << ""Doubled sum: "" << doubled_sum << std::endl;
    return 0;
}",int doubled_sum = sum << 1;
"#include <complex>
#include <iostream>

int main() {
  std::complex<double> z(1.0, 1.0);
  std::complex<double> w = z * z;
  double real_part = w.real();
  double imaginary_part = w.imag();

  std::cout << ""Real part: "" << real_part << std::endl;
  std::cout << ""Imaginary part: "" << imaginary_part << std::endl;

  if (real_part == 2.0 && imaginary_part == 0.0) {
    std::cout << ""Correct calculation!"" << std::endl;
  } else {
    std::cout << ""Incorrect calculation."" << std::endl;
  }

  return 0;
}",if (real_part == 2.0 && imaginary_part == 0.0)
"#include <random>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int secretNumber = distrib(gen);
    int guess = 50;

    std::cout << ""I'm thinking of a number between 1 and 100."" << std::endl;

    while (guess <= secretNumber) {
        std::cout << ""Your guess is: "" << guess << std::endl;
        std::cout << ""Too low! Try again."" << std::endl;
        guess = guess + 10;
    }

    std::cout << ""You've exhausted all possible numbers. The secret number was: "" << secretNumber << std::endl;

    return 0;
}",while (guess <= secretNumber)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;
    
    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n < target - 1; });
    
    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return n < target - 1;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <fstream>
#include <string>

int main() {
    std::ofstream outfile(""data.txt"");
    if (outfile.is_open()) {
        std::string line = ""This is a test line.\n"";
        outfile << line; // Only writes once, expecting multiple
        for (int i = 0; i < 5; ++i) {
            outfile << line;
        }
        outfile.close();
    } else {
        std::cerr << ""Unable to open file!"" << std::endl;
        return 1;
    }
    return 0;
}",outfile << line;
"#include <array>
#include <numeric>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <iostream>
#include <limits>

int main() {
    long long sum = 0;
    for (long long i = 0; i < 100000000000LL; ++i) {
        sum += i;
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += i;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius; // Incorrect area calculation
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <deque>
#include <numeric>

int main() {
    std::deque<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.end(), 0);

    // Incorrectly shifting elements to the right by one, potentially overwriting data.
    for (auto it = data.begin(); it != data.end() - 1; ++it) {
        *it = *(it + 1);
    }
    data.pop_back();

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Modified deque: "";
    for (int x : data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;
    return 0;
}","for (auto it = data.begin(); it != data.end() - 1; ++it) {
        *it = *(it + 1);
    }"
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Fault: Accessing non-existent key
    std::cout << ""David's age is: "" << age << std::endl;
    return 0;
}",int age = ages[name];
"#include <tuple>
#include <iostream>
#include <numeric>

int main() {
    std::tuple<int, int, int> my_tuple = std::make_tuple(1, 2, 3);
    int sum = std::accumulate(std::get<std::tuple_element<0, std::tuple<int, int, int>>>.value, my_tuple, 0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","std::accumulate(std::get<std::tuple_element<0, std::tuple<int, int, int>>>.value, my_tuple, 0)"
"#include <random>
#include <ctime>
#include <algorithm>

int main() {
    std::srand(std::time(nullptr));
    std::vector<int> numbers = {1, 2, 3, 4, 5};

    // Shuffle the numbers.
    std::shuffle(numbers.begin(), numbers.end(), std::default_random_engine{std::rand()});

    // Print the shuffled numbers.
    for (int number : numbers) {
        std::cout << number << "" "";
    }
    std::cout << std::endl;

    // Calculate the sum of the numbers, but add 1 to each element before summing.
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i] - 1;
    }

    std::cout << ""Sum: "" << sum << std::endl;

    return 0;
}",sum += numbers[i] - 1;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4, 7, 3, 6};
    int target = 8;

    std::vector<int> result;
    std::copy_if(data.begin(), data.end(), std::back_inserter(result), [target](int x){ return x < target; });

    for (int val : result) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return x < target; 
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    if (sum > 10) {
        std::cout << ""Sum is greater than 10"" << std::endl;
    } else {
        std::cout << ""Sum is not greater than 10"" << std::endl;
    }
    
    return 0;
}","else {
        std::cout << ""Sum is not greater than 10"" << std::endl;
    }"
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45abc"";
    std::stringstream ss(input);
    double num;
    ss >> num; // Attempt to read a double from a mixed string
    if (ss.fail()) {
        std::cout << ""Conversion failed!"" << std::endl;
    } else {
        std::cout << ""Converted number: "" << num << std::endl;
    }
    return 0;
}",ss >> num;
"#include <numeric>
#include <functional>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the product of all numbers using std::accumulate
    int product = std::accumulate(numbers.begin(), numbers.end(), 1, std::multiplies<int>());

    // Incorrectly print the sum instead of the product
    std::cout << ""Sum: "" << product << std::endl;
    
    return 0;
}","std::cout << ""Sum: "" << product << std::endl;"
"#include <fstream>
#include <sstream>
#include <string>

int main() {
    std::string line;
    std::ifstream file(""input.txt"");
    std::stringstream sum;
    int total = 0;

    if (file.is_open()) {
        while (std::getline(file, line)) {
            try {
                int num = std::stoi(line);
                sum << num; 
            } catch (const std::invalid_argument& e) {
                std::cerr << ""Invalid number: "" << line << std::endl;
                continue;
            }
        }
        total = sum.str().length();
        file.close();
    } else {
        std::cerr << ""Unable to open file"" << std::endl;
        return 1;
    }

    std::cout << ""Sum of numbers (represented as string length): "" << total << std::endl;
    return 0;
}",total = sum.str().length();
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <bitset>
#include <limits>

int main() {
    std::bitset<32> bits;
    bits[0] = 1;
    
    unsigned int num = bits.to_ulong();
    
    if (num == 0) {
        std::cout << ""Number is zero."" << std::endl;
    } else {
        std::cout << ""Number is not zero."" << std::endl;
    }
    
    return 0;
}","if (num == 0) {
        std::cout << ""Number is zero."" << std::endl;
    } else {
        std::cout << ""Number is not zero."" << std::endl;
    }"
"#include <array>
#include <cmath>

int main() {
    std::array<double, 5> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    double sum = 0.0;
    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <queue>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    std::priority_queue<int> pq(nums.begin(), nums.end());
    
    std::vector<int> sortedNums;
    while (!pq.empty()) {
        sortedNums.push_back(pq.top());
        pq.pop();
    }
    
    std::reverse(sortedNums.begin(), sortedNums.end());

    // Incorrectly assumes sortedNums is ascending after reverse
    for (int num : sortedNums) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::reverse(sortedNums.begin(), sortedNums.end());"
"#include <map>
#include <string>
#include <iostream>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 2;

    std::string fruit = ""grape"";
    if (counts.find(fruit) != counts.end()) {
        std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;
    } else {
        std::cout << ""Fruit not found: "" << fruit << std::endl;
    }

    return 0;
}",if (counts.find(fruit) != counts.end())
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distrib(gen);
        if (randomNumber % 2 == 0) {
            sum -= randomNumber; // Incorrect: should be sum += randomNumber for even numbers
        } else {
            sum += randomNumber;
        }
    }

    std::cout << ""The sum is: "" << sum << std::endl;
    return 0;
}",sum -= randomNumber;
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> nums = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= nums.size(); ++i) {
    sum += nums[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= nums.size()
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> nums = {1, 2, 3, 4, 5};
  int target = 7;
  
  std::vector<int> result;
  std::copy_if(nums.begin(), nums.end(), std::back_inserter(result), [target](int n){ return n < target; });

  int sum = 0;
  for (size_t i = 0; i <= result.size(); ++i) {  // Fault: i <= result.size() should be i < result.size()
    sum += result[i];
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= result.size()
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    // Incorrect handling of floating-point comparison.
    if (area == expected_area) {
        std::cout << ""Area is exactly equal to expected area."" << std::endl;
    } else {
        std::cout << ""Area is not exactly equal to expected area."" << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <functional>
#include <tuple>

int main() {
  std::function<int(int, int)> calculate = [](int x, int y) { return x * y; };
  std::tuple<int, int, int> data = std::make_tuple(5, 3, 2);
  int a = std::get<0>(data);
  int b = std::get<1>(data);
  int c = std::get<2>(data);

  int result = calculate(a, b) + c;
  std::cout << result << std::endl;
  return 0;
}",return x * y;
"#include <iostream>
#include <tuple>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""hello"");
    int integer_value = std::get<0>(data);
    double double_value = std::get<1>(data);
    std::string string_value = std::get<2>(data);

    std::cout << ""Integer: "" << integer_value << std::endl;
    std::cout << ""Double: "" << double_value << std::endl;
    std::cout << ""String: "" << string_value << std::endl;

    // Incorrectly attempting to get a non-existent element
    // This will result in undefined behavior
    std::get<3>(data) = 5;
    
    std::cout << ""Element 3: "" << std::get<3>(data) << std::endl;

    return 0;
}",std::get<3>(data) = 5;
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""Hello"");
    int integer_val = std::get<0>(data);
    double double_val = std::get<1>(data);
    std::string string_val = std::get<2>(data);

    std::cout << ""Integer: "" << integer_val << std::endl;
    std::cout << ""Double: "" << double_val << std::endl;
    std::cout << ""String: "" << string_val << std::endl;

    // Incorrectly trying to assign the string to the integer.
    integer_val = string_val;

    std::cout << ""Integer after assignment: "" << integer_val << std::endl;
    return 0;
}",integer_val = string_val;
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ofstream outputFile(""output.txt"");
    if (outputFile.is_open()) {
        std::string line = ""This is a test line.\n"";
        outputFile << line << ""Another line""; // Intended to add a newline after the first line.
        outputFile.close();
    } else {
        std::cerr << ""Unable to open file."";
        return 1;
    }
    return 0;
}","outputFile << line << ""Another line"";"
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (size_t i = 0; i <= data.size(); ++i) {
"#include <numeric>
#include <iomanip>

int main() {
    double values[] = {1.0, 2.5, 3.0, 4.5, 5.0};
    int size = sizeof(values) / sizeof(values[0]);

    double sum = 0.0;
    for (int i = 0; i <= size; ++i) { // Fault: Loop iterates one too many times
        sum += values[i];
    }

    std::cout << ""Sum: "" << std::fixed << std::setprecision(2) << sum << std::endl;
    return 0;
}",i <= size
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores; 
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int score = scores[name]; //Potential error - accessing non-existent key
    std::cout << ""Score for "" << name << "": "" << score << std::endl;

    return 0;
}",scores[name]
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> sorted_data = data;
    
    std::sort(sorted_data.begin(), sorted_data.begin() + 3); // Sort only the first 3 elements
    
    for (int i = 0; i < sorted_data.size(); ++i) {
        std::cout << sorted_data[i] << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}","std::sort(sorted_data.begin(), sorted_data.begin() + 3);"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <string>
#include <sstream>

std::string formatNumber(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 12.5;
    double taxRate = 0.075;
    double taxAmount = price * taxRate;
    std::string formattedTax = formatNumber(taxAmount);
    std::cout << ""Price: "" << price << std::endl;
    std::cout << ""Tax Rate: "" << taxRate << std::endl;
    std::cout << ""Tax Amount: "" << formattedTax << std::endl;
    
    double totalCost = price + taxAmount;
    std::string formattedTotalCost = formatNumber(totalCost - 1.0); //Subtle fault: subtracting 1.0 before formatting
    std::cout << ""Total Cost: "" << formattedTotalCost << std::endl;
    return 0;
}",std::string formattedTotalCost = formatNumber(totalCost - 1.0);
"#include <random>
#include <chrono>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    std::vector<int> numbers(10);
    for (int i = 0; i < numbers.size(); ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average
    double sum = 0.0;
    for (int number : numbers) {
        sum += number;
    }
    double average = sum / numbers.size();

    // Find the element closest to the average
    int closest_index = 0;
    double min_difference = std::abs(numbers[0] - average);
    for (int i = 1; i < numbers.size(); ++i) {
        double difference = std::abs(numbers[i] - average);
        if (difference < min_difference) {
            min_difference = difference;
            closest_index = i;
        }
    }

    std::cout << ""The closest number to the average is: "" << numbers[closest_index] << std::endl;
    return 0;
}",double average = sum / numbers.size();
"#include <cmath>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

    //Incorrect calculation of diameter
    double diameter = radius - 1.0;
    std::cout << ""Diameter of the circle: "" << std::fixed << std::setprecision(2) << diameter << std::endl;

    return 0;
}",double diameter = radius - 1.0;
"#include <iomanip> 
#include <sstream> 
#include <complex> 

int main() { 
  std::stringstream ss;
  double value = 3.14159265358979323846;
  ss << std::fixed << std::setprecision(10) << value; 
  std::string s = ss.str();

  // Convert the string representation to a complex number 
  std::complex<double> z(0.0, 0.0);
  z = std::stod(s);

  std::cout << ""The complex number is: "" << z << std::endl; 
  
  return 0; 
}",z = std::stod(s);
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int x = q.front();
        q.pop();
        if (x == 2) {
            // Intentionally incorrect: should delete, but modifies
            q.push(x + 1); //This causes infinite loop
        } else {
            std::cout << x << "" "";
        }
    }
    std::cout << std::endl;
    return 0;
}",q.push(x + 1);
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(1, 2.5, ""Hello"");
    int integer_part = std::get<0>(data);
    double double_part = std::get<1>(data);
    std::string string_part = std::get<2>(data);

    std::cout << ""Integer: "" << integer_part << std::endl;
    std::cout << ""Double: "" << double_part << std::endl;
    std::cout << ""String: "" << string_part << std::endl;

    // Incorrectly trying to add a string to an integer.
    int sum = integer_part + string_part.length();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int sum = integer_part + string_part.length();
"#include <complex>
#include <iostream>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> w = z * z;
    double magnitude_squared = w.real() * w.imag();
    std::cout << magnitude_squared << std::endl;
    return 0;
}",double magnitude_squared = w.real() * w.imag();
"#include <iostream>
#include <array>

int main() {
    std::array<int, 5> arr = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= arr.size(); ++i) {
        sum += arr[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= arr.size()
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    for (auto const& [key, val] : myMap) {
        std::cout << ""Key: "" << key << "", Value: "" << val << std::endl;
    }

    std::cout << ""Searching for key 4: "" << myMap[4] << std::endl; // Fault: Accessing non-existent key.
    return 0;
}","std::cout << ""Searching for key 4: "" << myMap[4] << std::endl;"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return n > target;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <string>
#include <sstream>
#include <algorithm>

int main() {
    std::string input = ""123abc456"";
    std::stringstream ss(input);
    int num;
    std::string str;

    if (ss >> num) {
        std::getline(ss, str); //attempting to read remaining input as a string
    }

    std::cout << ""Number: "" << num << std::endl;
    std::cout << ""String: "" << str << std::endl;

    return 0;
}","std::getline(ss, str);"
"#include <fstream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(file, line)) {
        try {
            sum += std::stoi(line) * 2;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << e.what() << '\n';
        }
    }

    file.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += std::stoi(line) * 2;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area > expected_area + 0.1) {
        std::cout << ""Area is too large."" << std::endl;
    } else if (area < expected_area - 0.1) {
        std::cout << ""Area is too small."" << std::endl;
    } else {
        std::cout << ""Area is correct."" << std::endl;
    }

    return 0;
}",if (area > expected_area + 0.1)
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    int num_iterations = 5;
    int sum = 0;

    for (int i = 0; i < num_iterations; ++i) {
        int randomNumber = distrib(gen);
        if (randomNumber % 2 == 0) {
            sum += randomNumber;
        } else {
            sum -= randomNumber;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= randomNumber;
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) { // Fault: i <= data.size()
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> odd_numbers;

    for (int x : data) {
        if (x % 2 == 0) {
            odd_numbers.push_back(x);
        }
    }

    int sum = std::accumulate(odd_numbers.begin(), odd_numbers.end(), 0);
    
    std::cout << ""Sum of odd numbers: "" << sum << std::endl;
    return 0;
}","if (x % 2 == 0) {
            odd_numbers.push_back(x);
        }"
"#include <iostream>
#include <iomanip>

int main() {
    double price = 99.99;
    int quantity = 3;
    double discount_rate = 0.15;

    double total_price = price * quantity;
    double discount = total_price * discount_rate;
    double final_price = total_price - discount;

    std::cout << ""Original Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    std::cout << ""Quantity: "" << quantity << std::endl;
    std::cout << ""Discount Rate: "" << std::fixed << std::setprecision(2) << discount_rate << std::endl;
    std::cout << ""Total Price: "" << std::fixed << std::setprecision(2) << total_price << std::endl;
    std::cout << ""Discount Amount: "" << std::fixed << std::setprecision(2) << discount << std::endl;
    std::cout << ""Final Price: "" << std::fixed << std::setprecision(2) << final_price << std::endl;

    return 0;
}",double discount = total_price * discount_rate;
"#include <iomanip> 
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0); 
    double angle = atan2(z.imag(), z.real());

    if (angle > M_PI) {
        angle -= 2 * M_PI; // Correctly handle angles > PI
    }

    std::cout << std::fixed << std::setprecision(10) << angle << std::endl;
    return 0;
}","if (angle > M_PI) {
        angle -= 2 * M_PI; // Correctly handle angles > PI
    }"
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 95;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string name = ""David"";
    int score = scores[name]; // potential issue: default-constructed int value
    std::cout << ""David's score: "" << score << std::endl;

    return 0;
}",int score = scores[name];
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    
    // Calculate the sum of even numbers.
    int sum = 0;
    for (int x : data) {
        if (x % 2 == 1) {
            sum += x; // Fault: Should be x % 2 == 0
        }
    }
    
    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    
    return 0;
}",if (x % 2 == 1)
"#include <chrono>
#include <thread>
#include <numeric>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::vector<int> even_numbers;

    for (int i = 0; i < data.size(); ++i) {
        if (data[i] % 2 == 0) {
            even_numbers.push_back(data[i]);
        }
    }

    int sum = 0;
    for (int i = 1; i < even_numbers.size(); ++i) { // Fault: Starting loop from index 1
        sum += even_numbers[i];
    }

    std::cout << ""Sum of even numbers: "" << sum << std::endl;

    std::this_thread::sleep_for(std::chrono::seconds(1));
    return 0;
}",for (int i = 1; i < even_numbers.size(); ++i)
"#include <string>
#include <sstream>
#include <vector>

int main() {
    std::string input = ""1,2,3,4,5"";
    std::stringstream ss(input);
    std::vector<int> numbers;
    int num;
    while (ss >> num) {
        numbers.push_back(num);
    }
    
    int sum = 0;
    for (size_t i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",    int num;
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> my_tuple = std::make_tuple(10, 3.14, ""hello"");
    int integer_value = std::get<0>(my_tuple);
    double double_value = std::get<1>(my_tuple);
    std::string string_value = std::get<2>(my_tuple);

    std::cout << ""Integer: "" << integer_value << std::endl;
    std::cout << ""Double: "" << double_value << std::endl;
    std::cout << ""String: "" << string_value << std::endl;

    // Incorrectly accessing the tuple element using a wrong index.
    int wrong_value = std::get<3>(my_tuple);  // Fault: Accessing out of bounds
    std::cout << ""Wrong Value: "" << wrong_value << std::endl;

    return 0;
}",std::get<3>(my_tuple)
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    std::string line;
    int sum = 0;

    if (inputFile.is_open()) {
        while (std::getline(inputFile, line)) {
            try {
                int num = std::stoi(line);
                sum += num;
            } catch (const std::invalid_argument& e) {
                std::cerr << ""Invalid argument: "" << e.what() << std::endl;
            } catch (const std::out_of_range& e) {
                std::cerr << ""Out of range: "" << e.what() << std::endl;
            }
        }
        inputFile.close();
        std::cout << ""Sum: "" << sum << std::endl;
    } else {
        std::cerr << ""Unable to open file"";
        return 1;
    }
    return 0;
}",int num = std::stoi(line);
"#include <random>
#include <ctime>
#include <numeric>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        sum += num;
    }

    // Calculate the average, but use incorrect integer division.
    double average = sum / 10.0; 
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = sum / 10.0;
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""Area of the circle: "" << area << std::endl;
    
    double expected_area = 78.5398;
    if (area == expected_area) {
        std::cout << ""Area calculation is correct!"" << std::endl;
    } else {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    }
    
    return 0;
}",if (area == expected_area)
"#include <iostream>
#include <array>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {  // Fault: i <= data.size() should be i < data.size()
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <array>
#include <numeric>
#include <iomanip>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};

    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iomanip> 
#include <numeric> 
#include <map> 

int main() { 
  std::map<std::string, int> counts; 
  counts[""apple""] = 5; 
  counts[""banana""] = 3; 
  counts[""cherry""] = 7; 

  int total = 0; 
  for (const auto& pair : counts) { 
    total += pair.first; // Should be pair.second 
  } 
  
  std::cout << ""Total count: "" << total << std::endl; 
  return 0; 
}",total += pair.first;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    // Find the index of the target value using std::find
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrectly calculate the size of the vector after searching
    int size = numbers.size() + 1; 
    std::cout << ""Size of the vector: "" << size << std::endl;

    return 0;
}",int size = numbers.size() + 1;
"#include <limits>
#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int target = 7;

    auto it = std::find(data.begin(), data.end(), target);
    if (it != data.end()) {
        int index = std::distance(data.begin(), it);
        std::cout << ""Target found at index: "" << index << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    //Demonstration of another algorithm. Potentially masking the fault
    std::sort(data.begin(), data.end());

    return 0;
}","int index = std::distance(data.begin(), it);"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string word;
    std::string vowels = ""aeiouAEIOU"";

    // Count vowels in the string
    int vowelCount = 0;
    for (char c : text) {
        if (vowels.find(c) != std::string::npos)
            vowelCount++;
    }

    // Incorrectly print the vowel count (off by one)
    std::cout << ""Number of vowels: "" << vowelCount - 1 << std::endl;

    return 0;
}","std::cout << ""Number of vowels: "" << vowelCount - 1 << std::endl;"
"#include <random>
#include <vector>
#include <numeric>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the sum of the squares of the numbers.
    int sum_of_squares = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum_of_squares += numbers[i]; // Fault: Should be numbers[i] * numbers[i]
    }

    std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;

    return 0;
}",sum_of_squares += numbers[i];
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> squares(data.size());

    std::transform(data.begin(), data.end(), squares.begin(), [](int x){ return x * x; });

    long long sum = 0;
    for (size_t i = 0; i < squares.size(); ++i) {
        sum += squares[i];
    }

    std::cout << ""Sum of squares: "" << sum << std::endl;
    return 0;
}",long long sum = 0;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    // Incorrect calculation of circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->second << std::endl;
    }

    // Attempting to access a key that doesn't exist.
    std::cout << myMap[4] << std::endl;

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 4, 0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers.begin() + 4
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <complex>
#include <vector>

int main() {
    std::vector<std::complex<double>> data = {
        {1.0, 2.0}, {3.0, 4.0}, {5.0, 6.0}
    };

    double sum_real = 0.0;
    double sum_imag = 0.0;

    for (const auto& c : data) {
        sum_real += c.real();
        sum_imag += c.imag();
    }

    std::complex<double> average = {sum_real / data.size(), sum_imag / data.size()};
    
    std::cout << ""Average: "" << average << std::endl;
    
    return 0;
}",sum_imag += c.imag();
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string"";
  std::string search_term = ""test"";
  size_t pos = text.find(search_term, 10); //Starts the search from the 10th position
  if (pos != std::string::npos) {
    std::cout << ""Found "" << search_term << "" at position: "" << pos << std::endl;
  } else {
    std::cout << """" << search_term << "" not found."" << std::endl;
  }
  return 0;
}","text.find(search_term, 10)"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <fstream>
#include <string>

int main() {
  std::ofstream outfile(""data.txt"");
  if (outfile.is_open()) {
    std::string line = ""This is a test line"";
    outfile << line << std::endl;

    // Incorrectly close the file before writing more data
    outfile.close();

    std::string another_line = ""Another line to write"";
    outfile << another_line << std::endl; // This line won't be written

    outfile.close();
  } else {
    std::cerr << ""Unable to open file"";
  }
  return 0;
}",outfile.close();
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        if (current == 2) {
            // Incorrectly decrements before pushing back, causing infinite loop.
            current--;
            q.push(current);
        } else {
            std::cout << current << "" "";
        }
    }
    std::cout << std::endl;
    return 0;
}","current--;
            q.push(current);"
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 2;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // Potential issue: default construction if ""grape"" isn't present
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

    return 0;
}",int count = counts[fruit];
"#include <cmath>
#include <iostream>

int main() {
    double x = 2.0;
    double y = 3.0;
    double z = std::sqrt(x) + std::sqrt(y);
    
    if (z == 0.0) {
        std::cout << ""z is zero"" << std::endl;
    } else {
        std::cout << ""z is not zero"" << std::endl;
    }

    return 0;
}",if (z == 0.0)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly multiplies the sum by 2 instead of printing it.
    std::cout << sum * 2 << std::endl;

    return 0;
}",std::cout << sum * 2 << std::endl;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int num : numbers) {
        if (num > target) {
            result.push_back(num);
        }
    }

    if (result.empty()) {
        std::cout << ""No numbers greater than target found."" << std::endl;
    } else {
        std::cout << ""Numbers greater than target: "";
        for (int i = 0; i < result.size() - 1; ++i) {
            std::cout << result[i] << "" "";
        }
        std::cout << std::endl;
    }

    return 0;
}",if (num > target) {
"#include <iostream>
#include <string>
#include <sstream>

std::string formatNumber(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 12.5;
    int quantity = 3;
    std::string formattedPrice = formatNumber(price);
    std::string formattedQuantity = formatNumber(quantity);

    double total = formattedPrice * formattedQuantity; // Fault: String multiplication
    std::cout << ""Total cost: "" << total << std::endl;
    return 0;
}",double total = formattedPrice * formattedQuantity;
"#include <random>
#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::random_device rd;  
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::string words[] = {""apple"", ""banana"", ""cherry"", ""date"", ""elderberry""};
    int num_words = sizeof(words) / sizeof(words[0]);

    for (int i = 0; i < 5; ++i) {
        int randomIndex = distrib(gen) % num_words;
        std::cout << words[randomIndex] << std::endl;
    }

    return 0;
}",int randomIndex = distrib(gen) % num_words;
"#include <numeric>
#include <functional>
#include <stdexcept>

int main() {
    std::vector<int> values = {1, 2, 3, 4, 5};
    
    try {
        int sum = std::accumulate(values.begin(), values.end(), 0, std::plus<int>());
        // Intentionally overflow the sum by adding a large value.
        sum += std::numeric_limits<int>::max(); 
        std::cout << ""Sum: "" << sum << std::endl;
    } catch (const std::overflow_error& e) {
        std::cerr << ""Overflow error: "" << e.what() << std::endl;
    } catch (const std::exception& e) {
        std::cerr << ""Exception: "" << e.what() << std::endl;
    }

    return 0;
}",sum += std::numeric_limits<int>::max();
"#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 12.5;
    double tax_rate = 0.075;
    double tax_amount = price * tax_rate;
    std::string formatted_tax = format_number(tax_amount);
    std::string total_price_str = ""Total price: "" + formatted_tax;
    std::cout << total_price_str << std::endl;
    return 0;
}","std::string total_price_str = ""Total price: "" + formatted_tax;"
"#include <ctime>
#include <iomanip>

int main() {
    std::time_t t = std::time(0);
    std::tm* now = std::localtime(&t);

    int year = now->tm_year;
    int month = now->tm_mon;
    int day = now->tm_mday;

    // Incorrectly attempt to represent the year. It should be tm_year - 1900
    int display_year = year;
    
    std::cout << ""Current Date: "" << std::setw(4) << display_year << std::setw(2) << std::setfill('0') << month << std::setw(2) << std::setfill('0') << day << std::endl;
    return 0;
}",int display_year = year;
"#include <fstream>
#include <string>

int main() {
    std::ofstream outfile(""data.txt"");
    if (outfile.is_open()) {
        std::string line = ""This is a test line.\n"";
        outfile << line;
        outfile.close();
    } else {
        std::cerr << ""Unable to open file for writing.\n"";
        return 1;
    }

    std::ifstream infile(""data.txt"");
    std::string read_line;

    if (infile.is_open()) {
        std::getline(infile, read_line);
        std::cout << ""Read from file: "" << read_line << std::endl;
    } else {
        std::cerr << ""Unable to open file for reading.\n"";
        return 1;
    }

    infile.close();

    return 0;
}","std::getline(infile, read_line);"
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> myTuple = std::make_tuple(10, 3.14, ""hello"");

    auto& [intVal, doubleVal, stringVal] = myTuple;

    std::cout << ""Integer: "" << intVal << std::endl;
    std::cout << ""Double: "" << doubleVal << std::endl;

    // Incorrectly trying to access a non-existent element
    std::cout << ""String: "" << stringVal[2] << std::endl; 

    return 0;
}",stringVal[2]
"#include <map>
#include <iostream>

int main() {
  std::map<int, std::string> myMap;
  myMap[1] = ""one"";
  myMap[2] = ""two"";
  myMap[3] = ""three"";

  for (auto it = myMap.begin(); it != myMap.end(); ++it) {
    if (it->first == 2) {
      it = myMap.erase(it);
    }
    std::cout << it->first << "" : "" << it->second << std::endl;
  }
  return 0;
}",it = myMap.erase(it);
"#include <array>
#include <cmath>

int main() {
  std::array<double, 5> data = {1.0, 2.0, 3.0, 4.0, 5.0};
  double sum = 0.0;
  for (size_t i = 0; i < data.size(); ++i) {
    sum += std::sqrt(data[i]);
  }
  double average = sum / data.size();
  
  if (average > 4.0) {
    std::cout << ""Average is greater than 4: "" << average << std::endl;
  } else {
    std::cout << ""Average is not greater than 4: "" << average << std::endl;
  }

  return 0;
}",if (average > 4.0)
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int x : data) {
        if (x > target) {
            result.push_back(x);
        }
    }

    // The following line incorrectly calculates the sum
    int sum = result.size() * target; 
    
    std::cout << ""Sum of elements greater than target: "" << sum << std::endl;
    return 0;
}",int sum = result.size() * target;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct."" << std::endl;
    } else {
        std::cout << ""Area is incorrect: "" << area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area != expected_area) {
        std::cout << ""Area calculation is incorrect!\n"";
        std::cout << ""Calculated area: "" << area << ""\n"";
        std::cout << ""Expected area: "" << expected_area << ""\n"";
    } else {
        std::cout << ""Area calculation is correct!\n"";
    }

    return 0;
}",if (area != expected_area)
"#include <random>
#include <chrono>
#include <limits>

int main() {
    unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int count = 0;
    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int number = distribution(generator);
        if (number % 2 == 0) {
            sum += number;
        } else { 
           count = -1; //incorrect assignment
        }
    }
    
    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    std::cout << ""Count of odd numbers: "" << count << std::endl;
    return 0;
}",count = -1;
"#include <string>
#include <sstream>

std::string formatNumber(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 123.4567;
    std::string formattedPrice = formatNumber(price);
    double parsedPrice = 0.0;
    std::stringstream ss(formattedPrice);
    ss >> parsedPrice;
    if (ss.fail()) {
        std::cerr << ""Error parsing price!\n"";
        return 1;
    }
    std::cout << ""Original Price: "" << price << std::endl;
    std::cout << ""Formatted Price: "" << formattedPrice << std::endl;
    std::cout << ""Parsed Price: "" << parsedPrice << std::endl;
    return 0;
}",    double parsedPrice = 0.0;
"#include <chrono>
#include <thread>
#include <mutex>
#include <iostream>

std::mutex mtx;

void worker(int id) {
    for (int i = 0; i < 5; ++i) {
        std::lock_guard<std::mutex> lock(mtx);
        std::cout << ""Worker "" << id << "": "" << i << std::endl;
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }
}

int main() {
    std::thread t1(worker, 1);
    std::thread t2(worker, 2);

    t1.join();
    t2.join();

    return 0;
}","std::cout << ""Worker "" << id << "": "" << i << std::endl;"
"#include <numeric>
#include <limits>

int main() {
  long long sum = 0;
  for (long long i = 1; i <= 200000; ++i) {
    sum += i;
  }
  
  if (sum > 0) {
    std::cout << ""Sum is positive: "" << sum << std::endl;
  } else {
    std::cout << ""Sum is negative or zero: "" << sum << std::endl;
  }
  
  return 0;
}",sum += i;
"#include <tuple>
#include <iostream>

int main() {
  std::tuple<int, double, std::string> myTuple = std::make_tuple(1, 2.5, ""hello"");

  int intValue = std::get<1>(myTuple); // Should be std::get<0>(myTuple) to get the int.
  double doubleValue = std::get<2>(myTuple); 
  std::string stringValue = std::get<0>(myTuple);

  std::cout << ""Int: "" << intValue << std::endl;
  std::cout << ""Double: "" << doubleValue << std::endl;
  std::cout << ""String: "" << stringValue << std::endl;

  return 0;
}",int intValue = std::get<1>(myTuple);
"#include <map>
#include <string>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // potential issue

    std::cout << ""David's age is: "" << age << std::endl;
    return 0;
}",int age = ages[name];
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4, 7, 3, 6}; 
    std::sort(data.begin(), data.end(), [](int a, int b) { return a < b; });
    
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) { // Fault: i <= data.size()
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <algorithm>
#include <array>
#include <numeric>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    std::for_each(data.begin(), data.end(), [&](int x) { sum += x; });
    
    // Incorrectly calculate the average
    double average = sum / data.size();
    
    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = sum / data.size();
"#include <fstream>
#include <string>

int main() {
  std::fstream file(""data.txt"", std::ios::out);
  if (file.is_open()) {
    std::string line = ""This is a test line"";
    file << line << std::endl;
    file.close();
  } else {
    std::cerr << ""Unable to open file!"" << std::endl;
    return 1;
  }

  std::fstream infile(""data.txt"");
  std::string content;
  if (infile.is_open()) {
    std::getline(infile, content);
    std::cout << ""Content: "" << content << std::endl;
  } else {
    std::cerr << ""Unable to open file for reading!"" << std::endl;
    return 1;
  }

  return 0;
}","std::getline(infile, content);"
"#include <array>
#include <cmath>
#include <iomanip>
#include <limits>
#include <stdexcept>

int main() {
    std::array<double, 5> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    double sum = 0.0;

    for (size_t i = 0; i < data.size(); ++i) {
        sum += data[i];
    }

    double mean = sum / data.size();
    double std_dev = 0.0;

    for (size_t i = 0; i < data.size(); ++i) {
        std_dev += std::pow(data[i] - mean, 2);
    }
    std_dev = std::sqrt(std_dev / (data.size() - 1));

    std::cout << ""Mean: "" << std::fixed << std::setprecision(2) << mean << std::endl;
    std::cout << ""Standard Deviation: "" << std::fixed << std::setprecision(2) << std_dev << std::endl;
    return 0;
}",std_dev = std::sqrt(std_dev / (data.size() - 1));
"#include <complex> 
#include <cmath>

int main() {
    std::complex<double> z(1.0, 1.0);
    double angle = std::arg(z);
    double expected_angle = atan(z.imag() / z.real());
    if (abs(angle - expected_angle) > 1e-6) {
        return 1; // Indicate error - complex number angle calculation is slightly off due to precision.
    }
    return 0;
}",if (abs(angle - expected_angle) > 1e-6) {
"#include <string>
#include <vector>

int main() {
  std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie""};
  std::string concatenated_name;
  for (const std::string& name : names) {
    concatenated_name = concatenated_name + name;
  }

  // This line intends to print the concatenated string, but has a subtle error.
  std::cout << ""Concatenated Name: "" << concat_name << std::endl;
  return 0;
}","std::cout << ""Concatenated Name: "" << concat_name << std::endl;"
"#include <random>
#include <chrono>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
            sum += num / 2;
        } else {
            sum += num * 2;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += num * 2;
"#include <numeric>
#include <functional>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> squares;

    std::transform(numbers.begin(), numbers.end(), std::back_inserter(squares), [](int x) { return x * x; });

    //Incorrectly calculate the sum of squares. Should use std::accumulate.
    int sum = 0;
    for (size_t i = 0; i <= squares.size(); ++i) {
        sum += squares[i];
    }

    std::cout << ""Sum of squares: "" << sum << std::endl;
    return 0;
}","for (size_t i = 0; i <= squares.size(); ++i) {
        sum += squares[i];
    }"
"#include <queue>
#include <vector>

int main() {
    std::queue<int> q;
    std::vector<int> data = {1, 2, 3, 4, 5};

    for (int i = 0; i < data.size(); ++i) {
        q.push(data[i]);
    }

    int sum = 0;
    while (!q.empty()) {
        int val = q.front();
        q.pop();
        sum += val;
    }

    if (sum != 15) {
        std::cout << ""Sum is incorrect: "" << sum << std::endl;
    } else {
        std::cout << ""Sum is correct: "" << sum << std::endl;
    }

    return 0;
}",if (sum != 15)
"#include <map>
#include <string>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) == ages.end()) {
        ages[name] = 0;
    }

    std::cout << ""David's age: "" << ages[name] << std::endl;
    
    // Increment David's age.
    ages[name]++;

    std::cout << ""David's age after increment: "" << ages[name] << std::endl;

    return 0;
}",ages[name]++;
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""Hello"");
    int integer_val = std::get<0>(data);
    double double_val = std::get<1>(data);
    std::string string_val = std::get<2>(data);

    std::cout << ""Integer: "" << integer_val << std::endl;
    std::cout << ""Double: "" << double_val << std::endl;
    std::cout << ""String: "" << string_val << std::endl;

    // Incorrectly attempting to access an index that is out of bounds.
    // This will cause a compile-time error but might be subtle depending on the compiler.
    // std::cout << std::get<3>(data) << std::endl;  

    return 0;
}",std::get<3>(data)
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <algorithm>
#include <functional>
#include <iostream>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n, std::greater<int>());

    std::cout << ""Sorted array in descending order: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    int sum = 0;
    for (int i = 0; i < n; ++i) {
        sum += arr[i];
    }

    std::cout << ""Sum of the elements: "" << sum << std::endl;

    // Fault: Incorrect calculation of average
    double average = sum / n;

    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = sum / n;
"#include <chrono>
#include <iostream>
#include <thread>

int main() {
    std::cout << ""Starting..."";
    std::this_thread::sleep_for(std::chrono::milliseconds(500));
    
    int arr[5] = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= 5; ++i) { // Fault: Loop goes out of bounds
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= 5
"#include <iostream>
#include <iomanip>

int main() {
  double pi = 3.14159;
  double radius = 5.0;
  double area = pi * radius * radius;

  std::cout << std::fixed << std::setprecision(2) << ""Area of the circle: "" << area << std::endl;
  return 0;
}",double area = pi * radius * radius;
"#include <complex>
#include <vector>
#include <cmath>

int main() {
    std::vector<std::complex<double>> data = {
        std::complex<double>(1.0, 0.0), 
        std::complex<double>(0.0, 1.0), 
        std::complex<double>(1.0, 1.0)
    };

    double sum_magnitude = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum_magnitude += std::abs(data[i]) * 1.1;
    }

    std::cout << ""Sum of magnitudes: "" << sum_magnitude << std::endl;
    return 0;
}",sum_magnitude += std::abs(data[i]) * 1.1;
"#include <string>
#include <sstream>

int main() {
    std::string input = ""12.34"";
    std::stringstream ss(input);
    double value;
    if (ss >> value) {
        std::cout << ""Conversion successful: "" << value << std::endl;
    } else {
        std::cout << ""Conversion failed."" << std::endl;
    }
    
    std::string input2 = ""abc"";
    std::stringstream ss2(input2);
    double value2;
    if (ss2 >> value2) {
        std::cout << ""Conversion successful: "" << value2 << std::endl;
    } else {
        std::cout << ""Conversion failed."" << std::endl;
    }
    
    return 0;
}",if (ss2 >> value2)
"#include <random>
#include <ctime>
#include <limits>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int random_number = distrib(gen);
        if (random_number % 2 == 0) {
            sum += random_number;  // Fault: Incorrect increment when random number is even
        } else {
            sum -= random_number;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += random_number;
"#include <cmath>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    // Calculate circumference with a subtle error
    double circumference = 2 * M_PI * radius;
    circumference = circumference / 3.0; // Incorrect calculation – dividing circumference
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

    return 0;
}",circumference = circumference / 3.0;
"#include <queue>
#include <iostream>

int main() {
    std::priority_queue<int, std::vector<int>, std::greater<int>> pq;
    pq.push(5);
    pq.push(2);
    pq.push(8);
    pq.push(1);

    while (!pq.empty()) {
        std::cout << pq.top() << "" "";
        pq.pop();
    }
    std::cout << std::endl;
    return 0;
}",std::greater<int>
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    if (scores.count(name) > 0) {
        std::cout << ""Score for "" << name << "": "" << scores[name] << std::endl;
    } else {
        std::cout << ""Score for "" << name << "": 0"" << std::endl;
    }

    return 0;
}","std::cout << ""Score for "" << name << "": 0"" << std::endl;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <fstream>
#include <sstream>
#include <iostream>

int main() {
    std::stringstream ss;
    ss << ""Hello, world!\n"";
    ss << ""This is a test."";

    std::string line;
    int lineNumber = 1;
    while (std::getline(ss, line)) {
        std::cout << ""Line "" << lineNumber << "": "" << line << std::endl;
        lineNumber++;
    }

    std::cout << ""Number of lines processed: "" << lineNumber - 1 << std::endl;
    return 0;
}","std::cout << ""Number of lines processed: "" << lineNumber - 1 << std::endl;"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int target = 3;

    auto it = std::find(data.begin(), data.end(), target);
    if (it != data.end()) {
        data.erase(it);
    }

    // Intended to print 1 2 4 5, but erases the wrong element due to iterator invalidation
    for (int x : data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;

    return 0;
}",data.erase(it);
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
  // Incorrect use of accumulate - should not be initialized with 0.  This will cause an incorrect sum.
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}","int sum = std::accumulate(numbers.begin(), numbers.end(), 0);"
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    int sum = 0;
    for (int i = 0; i <= n; ++i) {  // Fault: Loop goes one element too far
        sum += arr[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= n
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());

    if (str == reversed_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }

    return 0;
}",if (str == reversed_str)
"#include <iomanip> 
#include <sstream> 

int main() {
    double value = 123456789.987654321;
    std::stringstream ss;
    ss << std::fixed << std::setprecision(15) << value; 
    std::string str = ss.str();

    if (str.length() > 20) {
        std::cout << ""String too long!"" << std::endl;
    } else {
        std::cout << ""String length: "" << str.length() << std::endl;
    }
    return 0;
}",if (str.length() > 20) {
"#include <random>
#include <iostream>
#include <tuple>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int count = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
            count++;
        }
    }

    std::cout << ""Even numbers: "" << count << std::endl;
    return 0;
}","if (num % 2 == 0) {
            count++;
        }"
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""The area of the circle is: "" << area << std::endl;
  
  double circumference = 2 * M_PI * radius;
  std::cout << ""The circumference of the circle is: "" << circumferences << std::endl;
  
  return 0;
}","std::cout << ""The circumference of the circle is: "" << circumferences << std::endl;"
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(5);
    q.push(10);

    int sum = 0;
    while (!q.empty()) {
        int current = q.front();
        q.pop();
        sum += current * 2; // Incorrect: Should be sum += current;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += current * 2;
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    size_t len = message.length();
    std::string reversed_message = """";

    for (size_t i = 0; i <= len; ++i) { // Fault: Includes the null terminator in the reversed string
        reversed_message += message[len - i];
    }

    std::cout << ""Original: "" << message << std::endl;
    std::cout << ""Reversed: "" << reversed_message << std::endl;
    return 0;
}",i <= len
"#include <iostream>
#include <map>

int main() {
  std::map<std::string, int> scores;
  scores[""Alice""] = 90;
  scores[""Bob""] = 80;
  scores[""Charlie""] = 70;

  std::string best_player;
  int highest_score = -1; 
  for (auto const& [player, score] : scores) {
    if (score > highest_score) {
      best_player = player;
      highest_score = score;
    }
  }

  std::cout << ""Best player: "" << best_player << "" with score: "" << highest_score << std::endl;

  return 0;
}",int highest_score = -1;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    for (auto const& [name, age] : ages) {
        std::cout << name << "" is "" << age << "" years old."" << std::endl;
    }

    std::string youngestName;
    int youngestAge = 150; // Intentionally set to a high value to ensure the first entry is considered the youngest initially.

    for (auto const& [name, age] : ages) {
        if (age < youngestAge) {
            youngestAge = age;
            youngestName = name;
        }
    }

    std::cout << ""The youngest person is "" << youngestName << "" at "" << youngestAge << "" years old."" << std::endl;
    
    return 0;
}",int youngestAge = 150;
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {  // Fault: Loop goes one element too far.
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <fstream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    std::string line;
    int sum = 0;

    if (inputFile.is_open()) {
        while (std::getline(inputFile, line)) {
            try {
                int number = std::stoi(line);
                sum += number;
            } catch (const std::invalid_argument& e) {
                // Handle non-numeric lines gracefully
                std::cerr << ""Invalid input: "" << line << std::endl;
            } catch (const std::out_of_range& e) {
                std::cerr << ""Number out of range: "" << line << std::endl;
            }
        }
        inputFile.close();
        std::cout << ""Sum: "" << sum << std::endl;
    } else {
        std::cerr << ""Unable to open file!"" << std::endl;
        return 1;
    }
    return 0;
}","std::cerr << ""Invalid input: "" << line << std::endl;"
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    if (ss >> number) {
        std::cout << ""Number: "" << number << std::endl;
    } else {
        std::cout << ""Invalid input!"" << std::endl;
    }
    std::cout << ""End of program"" << std::endl;
    return 0;
}",if (ss >> number)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.begin() + 4, 0); // Accumulates only the first 4 elements
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",data.begin() + 4
"#include <array>
#include <numeric>
#include <iostream>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <random>
#include <chrono>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    int numbers[5];
    for (int i = 0; i <= 5; ++i) { // Off-by-one error
        numbers[i] = distrib(gen);
    }

    for (int i = 0; i < 5; ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","int numbers[5];
    for (int i = 0; i <= 5; ++i)"
"#include <queue>
#include <vector>

int main() {
    std::queue<int> q;
    std::vector<int> nums = {1, 2, 3, 4, 5};

    for (int i = 0; i < nums.size(); ++i) {
        q.push(nums[i]);
    }

    while (!q.empty()) {
        int val = q.front();
        q.pop();
        if (val % 2 == 0) {
            // Should multiply by 2, but incorrectly subtracts 2
            q.push(val - 2);
        } else {
            q.push(val);
        }
    }

    std::cout << ""Final queue: "";
    while (!q.empty()) {
        std::cout << q.front() << "" "";
        q.pop();
    }
    std::cout << std::endl;

    return 0;
}",q.push(val - 2);
"#include <unordered_map>
#include <string>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""cherry""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit];

    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;
    return 0;
}",int count = counts[fruit];
"#include <iostream>
#include <tuple>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""Hello"");
    int integer_val = std::get<0>(data);
    double double_val = std::get<1>(data);
    std::string string_val = std::get<2>(data);

    std::cout << ""Integer: "" << integer_val << std::endl;
    std::cout << ""Double: "" << double_val << std::endl;
    std::cout << ""String: "" << string_val << std::endl;

    // Incorrect indexing.  Should be std::get<1>(data) + 1.0
    double_val += std::get<0>(data);
    std::cout << ""Modified Double: "" << double_val << std::endl;

    return 0;
}",double_val += std::get<0>(data);
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""Area of the circle: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;
    
    double perimeter = circumference; // Incorrect: Perimeter applies to polygons, not circles
    std::cout << ""Perimeter of the circle: "" << perimeter << std::endl;
    
    return 0;
}","double perimeter = circumference; // Incorrect: Perimeter applies to polygons, not circles"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    
    // Sort the vector in descending order
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());

    // Print the sorted vector
    for (int i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << (i == numbers.size() - 1 ? '' : ',');
    }
    std::cout << std::endl;
    return 0;
}","std::cout << numbers[i] << (i == numbers.size() - 1 ? '' : ',');"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    std::vector<int> squares(numbers.size());
    for (size_t i = 0; i < numbers.size(); ++i) {
        squares[i] = numbers[i] * numbers[i];
    }
    int sum_of_squares = std::accumulate(squares.begin(), squares.end(), 0);
    
    if (sum_of_squares == sum * sum) {
        std::cout << ""The sum of squares equals the square of the sum!"" << std::endl;
    } else {
        std::cout << ""The sum of squares does not equal the square of the sum."" << std::endl;
    }
    
    return 0;
}","int sum_of_squares = std::accumulate(squares.begin(), squares.end(), 0);"
"#include <fstream>
#include <string>
#include <algorithm>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    std::string line;
    int sum = 0;

    if (file.is_open()) {
        while (std::getline(file, line)) {
            try {
                int num = std::stoi(line);
                sum += num;
            } catch (const std::invalid_argument& e) {
                // Ignore non-numeric lines
            }
        }
        file.close();
        std::cout << ""Sum: "" << sum << std::endl;
    } else {
        std::cerr << ""Unable to open file""
        << filename << std::endl;
        return 1;
    }
    return 0;
}","std::cerr << ""Unable to open file""
        << filename << std::endl;"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <tuple>
#include <functional>
#include <iostream>

int main() {
    auto combine = std::make_tuple(1, std::function<int(int)>([](int x) { return x * 2; }), ""hello"");
    
    auto& num = std::get<0>(combine);
    auto& func = std::get<1>(combine);
    auto& str = std::get<2>(combine);
    
    std::cout << ""Number: "" << num << std::endl;
    std::cout << ""Function Result: "" << func(num) << std::endl;
    std::cout << ""String: "" << str << std::endl;

    //Potential fault here: trying to modify a const reference
    //num = 5;

    return 0;
}",auto& num = std::get<0>(combine);
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <random>
#include <chrono>
#include <limits>

int main() {
    unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distribution(generator);
        sum += num;
    }

    if (sum > 400) {
       return 42; // Intentional return to signal a specific state.
    }
    else {
        return 0;
    }
}",return 42; // Intentional return to signal a specific state.
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <iostream>
#include <limits>

int main() {
    int arr[5] = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= 5; ++i) {
        sum += arr[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= 5
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit];
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;
    return 0;
}",int count = counts[fruit];
"#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct!"" << std::endl;
    } else {
        std::cout << ""Area is incorrect. Calculated: "" << area << "", Expected: "" << expected_area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  std::for_each(data.begin(), data.end(), [&](int x) { sum += x; });
  
  std::vector<int> expected = {1, 2, 3, 4, 5};
  std::sort(expected.begin(), expected.end());
  
  if (sum == 15) {
    std::cout << ""Test passed!\n"";
  } else {
    std::cout << ""Test failed! Expected 15, got "" << sum << ""\n"";
  }

  return 0;
}",if (sum == 15) {
"#include <complex> 
#include <iostream>

int main() {
    std::complex<double> z1(2.0, 3.0);
    std::complex<double> z2(1.0, -1.0);

    std::complex<double> sum = z1 + z2;

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Magnitude: "" << sqrt(sum.real() * sum.real() + sum.imag() * sum.imag()) << std::endl;
    return 0;
}",sqrt(sum.real() * sum.real() + sum.imag() * sum.imag())
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    ss >> number;
    if (ss.fail()) {
        std::cerr << ""Conversion failed!"" << std::endl;
        return 1;
    }

    std::cout << ""The number is: "" << number << std::endl;
    std::cout << ""The number squared is: "" << number * number << std::endl;
    return 0;
}","    std::cout << ""The number squared is: "" << number * number << std::endl;"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iomanip> 
#include <sstream> 
#include <limits> 

int main() {
    double value = 1.23456789;
    std::stringstream ss;
    ss << std::fixed << std::setprecision(10) << value; 
    std::string str_value = ss.str();

    double recovered_value;
    ss.str(str_value);
    ss.clear();

    ss >> recovered_value;

    if (recovered_value != value) {
        std::cout << ""Conversion failed!"" << std::endl;
    } else {
        std::cout << ""Conversion successful!"" << std::endl;
    }

    return 0;
}",ss >> recovered_value;
"#include <fstream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    std::string line;
    int sum = 0;

    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line);
            sum += num;
        } catch (const std::invalid_argument& e) {
            // Ignore non-numeric lines
        }
    }

    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int num = std::stoi(line);
"#include <random>
#include <iostream>
#include <vector>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 10);

    std::vector<int> numbers(5);
    for (int i = 0; i < 5; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Loop goes out of bounds
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <tuple>
#include <numeric>

int main() {
    std::tuple<int, int, int> my_tuple = std::make_tuple(1, 2, 3);
    int sum = 0;
    for (int i = 0; i < std::tuple_size<decltype(my_tuple)>(); ++i) {
        sum += std::get<0>(my_tuple); // Always adds the first element
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += std::get<0>(my_tuple);
"#include <deque>
#include <iostream>

int main() {
    std::deque<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) 
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    // Iterate and print
    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->second << std::endl;
    }

    //Attempt to access an out-of-bounds element
    std::cout << myMap[4] << std::endl;

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    return 0;
}",int target = 7;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <cmath>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

    //Calculate the area of a square with the same perimeter as the circle
    double squareSide = circumference / 4.0;
    double squareArea = squareSide * squareSide;
    std::cout << ""Area of the square (with same perimeter): "" << std::fixed << std::setprecision(2) << squareArea << std::endl;

    return 0;
}",double squareSide = circumference / 4.0;
"#include <string>
#include <sstream>
#include <iostream>

std::string formatString(int num) {
    std::stringstream ss;
    ss << std::hex << num;
    std::string result = ss.str();
    return result;
}

int main() {
    int value = 10;
    std::string formattedValue = formatString(value);
    std::cout << ""The formatted value is: "" << formattedValue << std::endl;
    int decimalValue = std::stoi(formattedValue, nullptr, 16) - 1; //subtracted 1 from base 16 value
    std::cout << ""The decimal value is: "" << decimalValue << std::endl;
    return 0;
}","int decimalValue = std::stoi(formattedValue, nullptr, 16) - 1;"
"#include <iostream>
#include <ctime>

int main() {
    std::srand(std::time(nullptr));
    int arr[10];
    for (int i = 0; i <= 10; ++i) {
        arr[i] = std::rand() % 100;
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",for (int i = 0; i <= 10; ++i)
"#include <ctime>
#include <iomanip>

int main() {
    std::time_t timer;
    std::time(&timer);
    std::tm* now = std::localtime(&timer);

    int year = now->tm_year;
    int month = now->tm_mon;
    int day = now->tm_mday;

    // Incorrectly subtract 100 from the year.  This creates an off-by-one error.
    year -= 100; 

    std::cout << ""Current date: "" << std::setfill('0') << std::setw(4) << year << std::setw(2) << month << std::setw(2) << day << std::endl;
    return 0;
}",year -= 100;
"#include <array>
#include <numeric>

int main() {
  std::array<int, 5> arr = {1, 2, 3, 4, 5};
  int sum = std::accumulate(arr.begin(), arr.end(), 0);
  int product = 1;
  for (int i = 0; i < arr.size(); ++i) {
    product *= arr[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  std::cout << ""Product: "" << product << std::endl;
  return 0;
}",product *= arr[i];
"#include <numeric>
#include <random>
#include <limits>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    int n = 10;
    std::vector<int> numbers(n);
    for (int i = 0; i < n; ++i) {
        numbers[i] = distrib(gen);
    }

    long long sum = 0;
    for (int i = 0; i < n; ++i) {
        sum += numbers[i];
    }

    // Incorrect conversion of sum to int.  Overflow possible.
    int average = static_cast<int>(sum) / n; 
    
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",int average = static_cast<int>(sum) / n;
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> my_tuple = std::make_tuple(10, 3.14, ""hello"");
    int integer_value = std::get<0>(my_tuple);
    double double_value = std::get<1>(my_tuple);
    std::string string_value = std::get<2>(my_tuple);

    std::cout << ""Integer: "" << integer_value << std::endl;
    std::cout << ""Double: "" << double_value << std::endl;
    std::cout << ""String: "" << string_value << std::endl;

    // Incorrectly attempts to access a non-existent element of the tuple
    int extra_value = std::get<3>(my_tuple);  // Accessing element at index 3, but only 3 elements exist.
    std::cout << ""Extra: "" << extra_value << std::endl;

    return 0;
}",int extra_value = std::get<3>(my_tuple);
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::high_resolution_clock::time_point now = std::chrono::high_resolution_clock::now();
    std::seed_seq seed{ std::chrono::duration_cast<std::chrono::seconds>(now - std::chrono::high_resolution_clock::time_point{}).count(), 0 };
    std::mt19937 generator(seed);
    std::uniform_int_distribution<> distribution(1, 10);

    int sum = 0;
    for (int i = 0; i < 5; ++i) {
        sum += distribution(generator);
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","std::seed_seq seed{ std::chrono::duration_cast<std::chrono::seconds>(now - std::chrono::high_resolution_clock::time_point{}).count(), 0 };"
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
    }
    
    return 0;
}","std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Loop iterates one element too far
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <cmath>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

    // Calculate the area of a square with the same perimeter as the circle
    double side = circumference / 4.0;
    double square_area = side * side;
    std::cout << ""Area of the square: "" << std::fixed << std::setprecision(2) << square_area << std::endl;
    
    return 0;
}",double square_area = side * side;
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    if (ss >> number) {
        std::cout << ""Conversion successful: "" << number << std::endl;
    } else {
        std::cout << ""Conversion failed!"" << std::endl;
    }
    
    std::string input2 = ""abc"";
    std::stringstream ss2(input2);
    double number2;
    if (ss2 >> number2) {
        std::cout << ""Conversion successful: "" << number2 << std::endl;
    } else {
        std::cout << ""Conversion failed!"" << std::endl;
    }
    
    return 0;
}",if (ss2 >> number2)
"#include <iostream>
#include <iomanip>

int main() {
  double pi = 3.14159;
  double radius = 5.0;
  double area = pi * radius * radius;
  std::cout << ""Area of circle with radius "" << radius << "" is: "" << std::fixed << std::setprecision(2) << area << std::endl;
  return 0;
}",double area = pi * radius * radius;
"#include <ctime>
#include <iomanip>

int main() {
    std::time_t now = std::time(0);
    std::tm* ltm = std::localtime(&now);

    int year = 1900 + ltm->tm_year;
    int month = 1 + ltm->tm_mon; 
    int day = ltm->tm_mday;

    std::cout << ""Current date: "" << year << ""-"" << std::setw(2) << std::setfill('0') << month << ""-"" << std::setw(2) << std::setfill('0') << day << std::endl;

    // Calculate days since epoch incorrectly
    int days_since_epoch = (year - 1970) * 365 + (year - 1970) / 4 - (year - 1970) / 100 + (year - 1970) / 400;
    days_since_epoch += (month - 1) * 30; // Incorrectly assumes 30 days per month
    days_since_epoch += day;

    std::cout << ""Days since epoch: "" << days_since_epoch << std::endl;

    return 0;
}",days_since_epoch += (month - 1) * 30; // Incorrectly assumes 30 days per month
"#include <complex>
#include <iomanip>

int main() {
    std::complex<double> z1(1.0, 2.0);
    std::complex<double> z2(3.0, -1.0);

    std::complex<double> sum = z1 + z2;

    std::cout << std::fixed << std::setprecision(2) << ""Sum: "" << sum << std::endl;

    std::complex<double> product = z1 * z2;

    std::cout << std::fixed << std::setprecision(2) << ""Product: "" << product << std::endl;

    double real_part = product.real();
    double imaginary_part = product.imag();

    std::cout << ""Real part: "" << real_part << std::endl;
    std::cout << ""Imaginary part: "" << imaginary_part << std::endl;

    std::complex<double> z3(1.0);
    std::complex<double> z4(0.0);
    std::complex<double> z5 = z3/z4; // Potential division by zero.
    std::cout << z5 << std::endl;

    return 0;
}",std::complex<double> z5 = z3/z4;
"#include <queue>
#include <vector>
#include <iostream>

int main() {
  std::queue<int> q;
  std::vector<int> data = {1, 2, 3, 4, 5};

  for (int i = 0; i < data.size(); ++i) {
    q.push(data[i]);
  }

  int sum = 0;
  while (!q.empty()) {
    int val = q.front();
    q.pop();
    sum += val;
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",q.push(data[i]);
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {  // Fault: i <= data.size()
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <random>
#include <chrono>
#include <numeric>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    int arr[5];
    for (int i = 0; i <= 5; ++i) { // Fault: Loop iterates one too many times
        arr[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i < 5; ++i) {
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= 5
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    for (const auto& pair : ages) {
        std::cout << pair.first << "": "" << pair.second << std::endl;
    }

    // Incorrectly attempt to access a non-existent key using subscript operator.
    std::cout << ""David's age: "" << ages[""David""] << std::endl;

    return 0;
}","std::cout << ""David's age: "" << ages[""David""] << std::endl;"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());
    
    for (int i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::sort(numbers.begin(), numbers.end(), std::greater<int>());"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <fstream>
#include <string>

int main() {
  std::ofstream outfile(""output.txt"");
  if (outfile.is_open()) {
    std::string line = ""This is a test line."";
    outfile << line << std::endl;
    // Intentionally write to a buffer that's smaller than the string.
    char buffer[5];
    outfile.write(buffer, sizeof(line));
    outfile.close();
  }
  else {
    std::cerr << ""Unable to open file."";
    return 1;
  }
  return 0;
}","outfile.write(buffer, sizeof(line));"
"#include <string>
#include <sstream>
#include <iostream>

int main() {
  std::string input = ""123.45"";
  std::stringstream ss(input);
  double num;
  ss >> num;
  if (ss.fail()) {
    std::cerr << ""Conversion failed!"" << std::endl;
    return 1;
  }

  // Incorrectly checks if the number is greater than or equal to 123.0 but not a double comparison
  if (num >= ""123.0"") {
    std::cout << ""Number is greater or equal to 123.0"" << std::endl;
  } else {
    std::cout << ""Number is less than 123.0"" << std::endl;
  }

  return 0;
}","if (num >= ""123.0"")"
"#include <iostream>
#include <cmath>

int main() {
    double x = 2.0;
    double y = 3.0;
    double result = std::pow(x, y);
    std::cout << ""Result: "" << result << std::endl;
    if (result > 10.0) {
        std::cout << ""Result is greater than 10.""
    } else {
        std::cout << ""Result is not greater than 10.""
    }
    return 0;
}","else {
        std::cout << ""Result is not greater than 10.""
    }"
"#include <ctime>
#include <iomanip>

int main() {
    std::srand(std::time(nullptr));

    int numbers[5];
    for (int i = 0; i < 5; ++i) {
        numbers[i] = std::rand() % 100;
    }

    int sum = 0;
    for (int i = 0; i <= 5; ++i) { // Fault: i <= 5 should be i < 5
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= 5
"#include <numeric>
#include <tuple>

int main() {
    std::tuple<int, int, int> my_tuple = std::make_tuple(1, 2, 3);
    int sum = 0;
    for (int i = 0; i < std::get<2>(my_tuple); ++i) {
        sum += std::get<0>(my_tuple);
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += std::get<0>(my_tuple);
"#include <set>
#include <iostream>

int main() {
    std::set<int> numbers = {1, 2, 3, 4, 5};

    // Iterate through the set and print even numbers
    for (int num : numbers) {
        if (num % 2 == 0) {
            std::cout << num << "" "";
        }
    }
    std::cout << std::endl;

    // Attempt to add an element that already exists (incorrect logic)
    numbers.insert(3); //This should insert 6 not 3

    std::cout << ""Set after insertion: "";
    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",numbers.insert(3);
"#include <iostream>
#include <tuple>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""hello"");
    int int_val = std::get<0>(data);
    double double_val = std::get<1>(data);
    std::string string_val = std::get<2>(data);

    std::cout << ""Integer: "" << int_val << std::endl;
    std::cout << ""Double: "" << double_val << std::endl;
    std::cout << ""String: "" << string_val << std::endl;

    //Incorrectly attempts to access the first element of the tuple using an integer index instead of std::get<index>
    std::cout << ""Incorrect Access: "" << data[0] << std::endl;

    return 0;
}","std::cout << ""Incorrect Access: "" << data[0] << std::endl;"
"#include <queue>
#include <iostream>

int main() {
    std::priority_queue<int> pq;
    pq.push(5);
    pq.push(1);
    pq.push(10);

    int sum = 0;
    while (!pq.empty()) {
        sum += pq.top();
        pq.pop();
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",std::priority_queue<int> pq;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    if (scores.count(name) == 0) {
        scores[name] = 0;
    }
    std::cout << ""David's score: "" << scores[name] << std::endl;
    
    name = ""Eve"";
    std::cout << ""Eve's score: "" << scores[name] << std::endl;
    
    return 0;
}","std::cout << ""Eve's score: "" << scores[name] << std::endl;"
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <vector>
#include <cmath>

int main() {
  std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
  double sum = 0.0;
  for (size_t i = 0; i < data.size(); ++i) {
    sum += std::sqrt(data[i]);
  }

  double average = sum / data.size();
  std::cout << ""Average of square roots: "" << average << std::endl;
  return 0;
}",std::sqrt(data[i])
"#include <random>
#include <chrono>
#include <fstream>
#include <iomanip>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::ofstream outputFile(""numbers.txt"");
    if (outputFile.is_open()) {
        for (int i = 0; i < 10; ++i) {
            int number = distrib(gen);
            outputFile << number << std::endl;
        }
        outputFile.close();
    } else {
        std::cerr << ""Unable to open file!"" << std::endl;
        return 1;
    }

    // Calculate the sum of numbers in the file
    long long sum = 0; //Using long long to avoid potential overflow
    std::ifstream inputFile(""numbers.txt"");
    if (inputFile.is_open()) {
        int num;
        while (inputFile >> num) {
            sum += num;
        }
        inputFile.close();
    } else {
        std::cerr << ""Unable to open file for reading!"" << std::endl;
        return 1;
    }

    std::cout << ""Sum of numbers: "" << sum << std::endl;
    return 0;
}",long long sum = 0; //Using long long to avoid potential overflow
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    ss >> number;
    if (ss.fail()) {
        std::cout << ""Invalid input format.\n"";
        return 1;
    }
    double converted_int = (int)number; // Fault: Implicit type conversion truncates the decimal part.
    std::cout << ""Converted integer: "" << converted_int << std::endl;
    return 0;
}",double converted_int = (int)number;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    // Incorrect calculation of diameter
    double diameter = circumference / M_PI;
    std::cout << ""Diameter: "" << diameter << std::endl;

    return 0;
}",double diameter = circumference / M_PI;
"#include <array>
#include <numeric>
#include <iostream>

int main() {
    std::array<int, 5> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (size_t i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <bitset>
#include <iostream>

int main() {
    std::bitset<8> bs = ""10101010"";
    std::bitset<8> shifted_bs = bs << 1;  //Intent: Shift left by one
    std::cout << shifted_bs << std::endl;
    return 0;
}",bs << 1
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <iostream>
#include <iomanip>

int main() {
    double price = 100.0;
    int quantity = 3;
    double taxRate = 0.07;

    double subtotal = price * quantity;
    double taxAmount = subtotal * taxRate;
    double total = subtotal - taxAmount; // Intentional Error: Should be subtotal + taxAmount

    std::cout << ""Subtotal: "" << std::fixed << std::setprecision(2) << subtotal << std::endl;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    std::cout << ""Total: "" << std::fixed << std::setprecision(2) << total << std::endl;

    return 0;
}",double total = subtotal - taxAmount;
"#include <tuple>
#include <limits>

int main() {
    std::tuple<int, double, char> data = std::make_tuple(10, 3.14, 'A');

    int int_val = std::get<0>(data);
    double double_val = std::get<1>(data);
    char char_val = std::get<2>(data);

    // Incorrectly attempt to add the double value to the integer value
    int result = int_val + double_val; 

    std::cout << ""Result: "" << result << std::endl;

    return 0;
}",int result = int_val + double_val;
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (int i = 1; i <= 3; ++i) {
        if (myMap.count(i) == 1){
            std::cout << myMap[i] << std::endl;
        } else {
            std::cout << ""Key not found: "" << i << std::endl;
        }
    }

    std::cout << myMap[4] << std::endl;
    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
  std::vector<int> values = {1, 2, 3, 4, 5};
  int sum = 0;
  std::for_each(values.begin(), values.end(), [&](int x) { sum += x; });
  
  std::vector<int> another_values = {6, 7, 8, 9, 10};
  int another_sum = std::accumulate(another_values.begin(), another_values.end(), 0);

  if (sum == another_sum) {
    std::cout << ""Sums are equal!"" << std::endl;
  } else {
    std::cout << ""Sums are not equal."" << std::endl;
  }
  
  return 0;
}","int another_sum = std::accumulate(another_values.begin(), another_values.end(), 0);"
"#include <chrono>
#include <thread>
#include <mutex>
#include <iostream>
#include <vector>

std::mutex mtx;

void worker(int id, std::vector<int>& data) {
    for (int i = 0; i < data.size(); ++i) {
        std::lock_guard<std::mutex> lock(mtx);
        std::cout << ""Worker "" << id << "" processing element "" << i << "" : "" << data[i] * 2 << std::endl;
        std::this_thread::sleep_for(std::chrono::milliseconds(10));
    }
}

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<std::thread> threads;
    for (int i = 0; i < 3; ++i) {
        threads.push_back(std::thread(worker, i, std::ref(data)));
    }

    for (auto& thread : threads) {
        thread.join();
    }

    return 0;
}","std::cout << ""Worker "" << id << "" processing element "" << i << "" : "" << data[i] * 2 << std::endl;"
"#include <map>
#include <string>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Key not found, default constructor called
    
    std::cout << ""David's age is: "" << age << std::endl;
    
    return 0;
}",int age = ages[name];
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail() || !ss.eof()) {
        std::cout << ""Invalid input!"" << std::endl;
        return 1;
    }

    // Intentionally incorrect conversion - truncates the decimal part
    int integerPart = (int)num;

    std::cout << ""Integer part: "" << integerPart << std::endl;
    return 0;
}",int integerPart = (int)num;
"#include <cmath>
#include <iostream>

int main() {
    double x = 2.0;
    double y = 3.0;
    double result = std::sqrt(std::pow(x, 2) + std::pow(y, 2));
    std::cout << ""The hypotenuse is: "" << result << std::endl;
    return 0;
}","double result = std::sqrt(std::pow(x, 2) + std::pow(y, 2));"
"#include <random>
#include <limits>
#include <iostream>

int main() {
  std::random_device rd;
  std::mt19937 gen(rd());
  std::uniform_int_distribution<> distrib(0, std::numeric_limits<int>::max());

  int limit = 1000000;
  int count = 0;
  while (count < limit) {
    int randomNumber = distrib(gen);
    if (randomNumber % 2 == 1) {
      count++;
    }
  }

  std::cout << ""Number of odd numbers generated: "" << count << std::endl;
  return 0;
}",if (randomNumber % 2 == 1)
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <iomanip> 
#include <fstream> 

int main() {
    std::ofstream outfile(""data.txt"");
    if (!outfile.is_open()) {
        return 1; // Handle file open error
    }

    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    
    outfile << std::fixed << std::setprecision(2) << area << std::endl; 
    outfile.close();

    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <limits>

int main() {
    long long sum = 0;
    for (long long i = 0; i < 1000000000000000000; ++i) {
        sum += i;
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += i;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> processed_data;

  for (int i = 0; i < data.size(); ++i) {
    processed_data.push_back(data[i] * 2);
  }

  // Incorrectly calculate the sum of squares. It should be sum of squares of *processed* data.
  long long sum_of_squares = 0;
  for (int i = 0; i < data.size(); ++i) {
    sum_of_squares += data[i] * data[i];
  }

  std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
  return 0;
}","for (int i = 0; i < data.size(); ++i) {
    sum_of_squares += data[i] * data[i];
  }"
"#include <queue>
#include <iostream>
#include <algorithm>

int main() {
    std::priority_queue<int, std::vector<int>, std::greater<int>> pq;
    pq.push(5);
    pq.push(2);
    pq.push(8);

    int sum = 0;
    while (!pq.empty()) {
        sum += pq.top();
        pq.pop();
    }

    std::cout << ""Sum of elements: "" << sum << std::endl;
    return 0;
}",std::greater<int>
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <fstream>
#include <sstream>
#include <string>

int main() {
    std::string line;
    std::stringstream ss; 
    ss << ""Hello, world!\nThis is a test."";
    std::ofstream outfile(""output.txt"");
    while (getline(ss, line)) {
        outfile << line << ""_incorrect_suffix"";
    }
    outfile.close();
    return 0;
}","outfile << line << ""_incorrect_suffix"";"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 7;
    
    std::vector<int> results;
    for (int num : nums) {
        if (num > target) { 
            results.push_back(num);
        }
    }
    
    if (results.empty()) {
        std::cout << ""No numbers greater than target found."" << std::endl;
    } else {
        std::cout << ""Numbers greater than target: "";
        for (size_t i = 0; i < results.size(); ++i) {
            std::cout << results[i] << (i == results.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }

    return 0;
}",if (num > target) { 
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""12.34"";
    std::stringstream ss(input);
    double number;
    if (ss >> number) {
        std::cout << ""Conversion successful: "" << number << std::endl;
    } else {
        std::cout << ""Conversion failed."" << std::endl;
    }
    
    //Intentionally incorrect comparison
    if(number = 5.0){
        std::cout << ""Number is equal to 5.0"" << std::endl;
    }
    else{
        std::cout << ""Number is not equal to 5.0"" << std::endl;
    }
    
    return 0;
}",if(number = 5.0)
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Potential error: Default constructed value used
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect."" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <random>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Find the maximum element incorrectly
    int max_index = 0;
    for (int i = 1; i < numbers.size(); ++i) {
        if (numbers[i] <= numbers[max_index]) { // Faulty comparison: <= instead of >
            max_index = i;
        }
    }

    std::cout << ""Maximum element index: "" << max_index << std::endl;
    std::cout << ""Maximum element: "" << numbers[max_index] << std::endl;

    return 0;
}",if (numbers[i] <= numbers[max_index])
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl;

    double taxRate = 0.075;
    double taxAmount = price * taxRate;
    double totalCost = price + taxAmount;

    std::cout << ""Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    std::cout << ""Total: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;
    return 0;
}","std::cout << ""Total: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <iomanip> #include <sstream> 

int main() {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << 1234.5678;
    double num;
    ss >> num;
    if (num == 1234.57) {
        std::cout << ""Match!\n"";
    } else {
        std::cout << ""No match.\n"";
    }
    return 0;
}",if (num == 1234.57)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <queue>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    int sum = 0;
    while (!q.empty()) {
        int x = q.front();
        q.pop();
        sum += x;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int sum = 0;
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    size_t n = sizeof(arr) / sizeof(arr[0]);

    int sum = 0;
    for (size_t i = 0; i <= n; ++i) { // Fault: Loop iterates one element too far
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= n
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::vector<int> even_numbers;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0)
            even_numbers.push_back(numbers[i]);
    }
    std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());
    for (int num : even_numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());"
"#include <string>
#include <algorithm>

std::string reverseWords(std::string s) {
    std::string result = """";
    std::string word = """";
    for (char c : s) {
        if (c == ' ') {
            std::reverse(word.begin(), word.end());
            result += word + "" "";
            word = """";
        } else {
            word += c;
        }
    }
    std::reverse(word.begin(), word.end());
    result += word;
    return result;
}

int main() {
    std::string input = ""the sky is blue"";
    std::string reversed = reverseWords(input);
    std::cout << reversed << std::endl;
    return 0;
}",if (c == ' ')
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {  // Fault: i <= numbers.size()
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Error: Calculated area differs significantly from expected area."" << std::endl;
    }
    else {
        std::cout << ""Area is calculated correctly."" << std::endl;
    }
    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    double diameter = radius;
    std::cout << ""Diameter: "" << diameter << std::endl;
    return 0;
}",double diameter = radius;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""The area of the circle is: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""The circumference of the circle is: "" << circumference << std::endl;
    
    double perimeter = circumference;
    std::cout << ""The perimeter is: "" << perimeter << std::endl;

    return 0;
}",double perimeter = circumference;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string search_string = ""world!"";

    size_t pos = text.find(search_string, 10); // Intentional offset

    if (pos != std::string::npos) {
        std::cout << ""Found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Not found"" << std::endl;
    }

    return 0;
}","text.find(search_string, 10)"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of the squares of the first four elements
    int sum_of_squares = 0;
    for (size_t i = 0; i <= numbers.size(); ++i) { // Fault: Loop goes out of bounds
        sum_of_squares += numbers[i] * numbers[i];
    }
    
    std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!\n"";
    } else {
        std::cout << ""Area calculation is correct!\n"";
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <iomanip>

int main() {
    double value = 12345.6789;
    std::cout << std::fixed << std::setprecision(2) << value << std::endl;
    std::cout << std::fixed << std::setprecision(3) << value << std::endl;
    std::cout << std::fixed << std::setprecision(4) << value << std::endl;
    
    double pi = 3.14159265358979323846;
    std::cout << std::fixed << std::setprecision(10) << pi << std::endl;
    
    double result = pi * value;
    std::cout << std::fixed << std::setprecision(12) << result << std::endl;
    return 0;
}",std::cout << std::fixed << std::setprecision(12) << result << std::endl;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorts only up to n-1, leaving the last element unsorted

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());

    if (str == reversed_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }

    std::string another_str = ""level"";
    std::string reversed_another_str = another_str;
    std::reverse(reversed_another_str.begin(), reversed_another_str.end());
    
    if (another_str != reversed_another_str) {
        std::cout << ""This should not print!"" << std::endl;
    }

    return 0;
}",if (another_str != reversed_another_str)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int x : data) {
        if (x == target) {
            result.push_back(x);
        }
    }

    if (result.empty()) {
        std::cout << ""Target not found."" << std::endl;
    } else {
        std::cout << ""Target found."" << std::endl;
    }

    return 0;
}",if (x == target) {
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> doubled_data(data.size());

    for (size_t i = 0; i < data.size(); ++i) {
        doubled_data[i] = data[i] * 2;
    }

    int sum = std::accumulate(doubled_data.begin(), doubled_data.end(), 0);

    //Incorrectly prints sum - 1
    std::cout << ""Sum: "" << sum - 1 << std::endl;
    return 0;
}","std::cout << ""Sum: "" << sum - 1 << std::endl;"
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int length = text.length();

    for (int i = 0; i <= length; ++i) {
        std::cout << text[i];
    }
    std::cout << std::endl;
    return 0;
}",i <= length
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (const auto& pair : scores) {
        total_score += pair.first; // Incorrect: Adding string to int
    }

    std::cout << ""Total score: "" << total_score << std::endl;
    return 0;
}",total_score += pair.first;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  
  std::cout << ""Area of the circle: "" << area << std::endl;
  
  double expected_area = 78.5398;
  if (area != expected_area) {
    std::cout << ""Warning: Calculated area differs slightly from expected value."" << std::endl;
  }
  
  return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <map>
#include <string>

int main() {
  std::map<std::string, int> ages;
  ages[""Alice""] = 30;
  ages[""Bob""] = 25;
  ages[""Charlie""] = 40;

  std::string name = ""David"";
  if (ages.find(name) != ages.end()) {
    std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
  } else {
    std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
  }

  return 0;
}",ages.find(name) != ages.end()
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores; 
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());

    if (str == reversed_str) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == reversed_str)
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;

  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    int key = 5;
    std::string value = myMap[key]; // Potential for unexpected behavior if key not present.
    std::cout << ""Value for key "" << key << "": "" << value << std::endl;

    return 0;
}",std::string value = myMap[key];
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    
    // Calculate the product of all elements, but with an off-by-one error
    int product = 1;
    for (size_t i = 0; i <= data.size(); ++i) {
        product *= data[i]; // Accessing out of bounds element
    }
    
    std::cout << ""Product: "" << product << std::endl;
    return 0;
}",product *= data[i];
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    std::string upper_text = text;
    for (char &c : upper_text) {
        if (c >= 'a' && c <= 'z') {
            c = c - 1; // Incorrect: should be c = c - 32;
        }
    }
    std::cout << upper_text << std::endl;
    return 0;
}",c = c - 1;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    
    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation incorrect!\n"";
    } else {
        std::cout << ""Area calculation correct!\n"";
    }
    
    return 0;
}",double area = M_PI * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly calculates the average by dividing by the size of the vector + 1
    double average = static_cast<double>(sum) / numbers.size() + 1;
    
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",numbers.size() + 1
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""hello world"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);
    std::sort(arr, arr + n - 1); // Fault: Incorrect upper bound for sort

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",arr + n - 1
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  
  // Calculate the sum of squares of the first three elements.
  int sum_of_squares = 0;
  for (int i = 0; i <= 3; ++i) { // Fault: Should be i < 3
    sum_of_squares += numbers[i] * numbers[i];
  }
  
  std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
  
  return 0;
}",i <= 3
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World! This is a test."";
    std::string search_string = ""world"";

    size_t pos = text.find(search_string, 10); // Intentional offset

    if (pos != std::string::npos) {
        std::cout << ""Found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Not found."" << std::endl;
    }

    return 0;
}","text.find(search_string, 10)"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  
  // Calculate the sum of the first 'n' numbers, but with a potential off-by-one error
  int n = 11;  //Intentionally set to 11 to go out of bounds
  int sum = std::accumulate(numbers.begin(), numbers.begin() + n, 0);
  
  std::cout << ""Sum of first "" << n << "" numbers: "" << sum << std::endl;

  return 0;
}",numbers.begin() + n
"#include <iomanip> 
#include <sstream> 
#include <string>

std::string formatFloat(double num, int precision) {
    std::stringstream stream;
    stream << std::fixed << std::setprecision(precision) << num;
    return stream.str();
}

int main() {
    double pi = 3.141592653589793238;
    int precision = 2;
    std::string formatted_pi = formatFloat(pi, precision);
    std::cout << ""Pi with "" << precision << "" decimal places: "" << formatted_pi << std::endl;

    double value = 12345.6789;
    int incorrect_precision = 100; //Intentional large precision
    std::string formatted_value = formatFloat(value, incorrect_precision); 
    std::cout << ""Value with "" << incorrect_precision << "" decimal places: "" << formatted_value << std::endl;
    return 0;
}",int incorrect_precision = 100; //Intentional large precision
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = -5; //Faulty age
    std::cout << ""Alice's age: "" << ages[""Alice""] << std::endl;
    std::cout << ""Bob's age: "" << ages[""Bob""] << std::endl;
    std::cout << ""Charlie's age: "" << ages[""Charlie""] << std::endl;
    return 0;
}","ages[""Charlie""] = -5; //Faulty age"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;

    return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Fault: Accessing a non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl;

    return 0;
}",ages[name]
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    
    // Incorrectly truncates the circumference to an integer before outputting.
    std::cout << ""Circumference: "" << (int)circumference << std::endl;
    
    return 0;
}","std::cout << ""Circumference: "" << (int)circumference << std::endl;"
"#include <map>
#include <iostream>

int main() {
  std::map<int, std::string> myMap;
  myMap[1] = ""one"";
  myMap[2] = ""two"";
  myMap[3] = ""three"";

  // Incorrect usage of iterators - assumes the map is already sorted
  for (auto it = myMap.begin(); it != myMap.end(); ++it) {
    std::cout << it->second << std::endl;
  }

  std::cout << ""Incorrectly accessed element: "" << myMap[4] << std::endl; // Accessing non-existent key

  return 0;
}","std::cout << ""Incorrectly accessed element: "" << myMap[4] << std::endl;"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::reverse(str.begin(), str.end());
    std::cout << str << std::endl;
    return 0;
}",std::cout << str << std::endl;
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4};
  int target = 7;

  auto it = std::find(data.begin(), data.end(), target);

  if (it != data.end()) {
    std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
  } else {
    std::cout << ""Target not found."" << std::endl;
  }

  // Incorrectly calculate the sum of all elements
  int sum = 0;
  for (size_t i = 1; i < data.size(); ++i) {
    sum += data[i];
  }

  std::cout << ""Sum of elements: "" << sum << std::endl;
  return 0;
}",for (size_t i = 1; i < data.size(); ++i)
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
  
  int product = 1;
  for (int i = 0; i < numbers.size(); ++i) {
    product *= numbers[i];
  }
  
  std::cout << ""Sum: "" << sum << std::endl;
  std::cout << ""Product: "" << product << std::endl;
  
  return 0;
}",product *= numbers[i];
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: i <= numbers.size() instead of i < numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <queue>
#include <iostream>

int main() {
    std::priority_queue<int> pq;
    pq.push(5);
    pq.push(1);
    pq.push(10);

    while (!pq.empty()) {
        std::cout << pq.top() << std::endl;
        pq.pop();
    }

    return 0;
}",std::priority_queue<int> pq;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <map>
#include <string>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "" is not found."" << std::endl;
        std::cout << ""Age of "" << name << "": "" << ages[""Alice""] << std::endl;
    }

    return 0;
}","std::cout << ""Age of "" << name << "": "" << ages[""Alice""] << std::endl;"
"#include <fstream>
#include <string>
#include <algorithm>

using namespace std;

int main() {
    ifstream inputFile(""data.txt"");
    string line;
    if (inputFile.is_open()) {
        while (getline(inputFile, line)) {
            string reversedLine = line;
            reverse(reversedLine.begin(), reversedLine.end());
            cout << reversedLine << endl;
        }
        inputFile.close();
    } else {
        cout << ""Unable to open file"" << endl;
        return 1;
    }
    return 0;
}",string reversedLine = line; 
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""Hello, World!"";
    std::sort(str.begin(), str.begin() + 5); // Sorts only the first 5 characters
    std::cout << str << std::endl;
    return 0;
}","std::sort(str.begin(), str.begin() + 5);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return n > target;
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <random>
#include <numeric>
#include <algorithm>
#include <vector>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the sum of the first 11 elements (out of bounds)
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 11, 0);

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers.begin() + 11
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly multiply sum by 2 instead of adding a constant
    int result = sum * 2;
    
    return result;
}",int result = sum * 2;
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    int key = 4;
    std::string value = myMap[key]; // Accessing a non-existent key
    std::cout << value << std::endl;
    return 0;
}",std::string value = myMap[key];
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iomanip> 
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    double angle = atan2(z.imag(), z.real());
    std::cout << std::fixed << std::setprecision(10) << angle << std::endl;
    
    //Incorrect use of atan2, will result in incorrect angle calculation.
    double incorrect_angle = atan(z.imag()/z.real());
    std::cout << std::fixed << std::setprecision(10) << incorrect_angle << std::endl;
    
    return 0;
}",double incorrect_angle = atan(z.imag()/z.real());
"#include <tuple>
#include <cmath>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(5, 3.14, ""hello"");

    int int_val = std::get<0>(data);
    double double_val = std::get<1>(data);
    std::string string_val = std::get<2>(data);

    double result = std::sqrt(int_val) + double_val;
    std::cout << std::fixed << std::setprecision(2) << result << std::endl;
    return 0;
}",std::sqrt(int_val)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Error: Calculated area is significantly different from expected area."" << std::endl;
    } else {
        std::cout << ""Area is: "" << area << std::endl;
    }
    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string."";
  std::string substring = text.substr(10, 5);
  substring.erase(std::remove(substring.begin(), substring.end(), 't'), substring.end());
  std::cout << substring << std::endl;
  return 0;
}","substring.erase(std::remove(substring.begin(), substring.end(), 't'), substring.end());"
"#include <iostream>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());

    std::cout << ""Sorted in descending order: "";
    for (size_t i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << (i == numbers.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;

    int sum = 0;
    for (int number : numbers) {
        sum += number;
    }

    std::cout << ""Sum of the elements: "" << sum << std::endl;
    return 0;
}",std::greater<int>()
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::sort(data.begin(), data.end(), [](int a, int b) { return a < b; });

    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) { // Fault: i <= data.size()
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <queue>
#include <vector>
#include <iostream>

using namespace std;

int main() {
  queue<int> q;
  vector<int> nums = {1, 2, 3, 4, 5};

  for (int num : nums) {
    q.push(num);
  }

  int sum = 0;
  while (!q.empty()) {
    int val = q.front();
    q.pop();
    if (val > 100) {
      break;
    }
    sum += val;
  }

  cout << ""Sum: "" << sum << endl;
  return 0;
}","if (val > 100) {
      break;
    }"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 3, 0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers.begin() + 3
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <iomanip>

int main() {
  double pi = 3.14159;
  double radius = 5.0;
  double area = pi * radius * radius;
  std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
  return 0;
}",double area = pi * radius * radius;
"#include <random>
#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 10);

    std::vector<int> numbers(5);
    for (int i = 0; i < 5; ++i) {
        numbers[i] = distrib(gen);
    }

    // Find the maximum element's index (incorrect implementation)
    int max_index = 0; 
    for (int i = 1; i < numbers.size(); ++i) {
        if (numbers[i] > numbers[max_index]) {
            max_index = i;
        }
    }

    std::cout << ""Maximum element: "" << numbers[max_index] << std::endl;
    std::cout << ""Index of maximum element: "" << max_index << std::endl;

    return 0;
}",if (numbers[i] > numbers[max_index])
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""The area of the circle is: "" << area << std::endl;

    //Incorrect calculation of circumference.
    double circumference = 2 * M_PI * radius;
    std::cout << ""The circumference of the circle is: "" << circumference * 0.5 << std::endl; //Faulty multiplication by 0.5
    return 0;
}",circumference * 0.5
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    
    // Incorrectly cast the double to an integer, losing precision
    int intArea = (int)area;

    std::cout << ""Area with integer cast: "" << intArea << std::endl;
    std::cout << ""Actual area: "" << area << std::endl;
    
    return 0;
}",(int)area
"#include <string>
#include <iostream>

int main() {
    std::string text = ""Hello, world!\n"";
    std::cout << text.substr(0, 5) << std::endl; // Incorrect substring length
    return 0;
}","std::cout << text.substr(0, 5) << std::endl;"
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto const& [key, val] : myMap) {
        std::cout << key << "": "" << val << std::endl;
    }

    std::cout << myMap[4] << std::endl; // Accessing a non-existent key
    
    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    std::string line;
    int sum = 0;

    if (inputFile.is_open()) {
        while (std::getline(inputFile, line)) {
            try {
                int num = std::stoi(line);
                sum += num;
            } catch (const std::invalid_argument& e) {
                std::cerr << ""Invalid number: "" << line << std::endl;
            } catch (const std::out_of_range& e) {
                std::cerr << ""Number out of range: "" << line << std::endl;
            }
        }
        std::cout << ""Sum: "" << sum << std::endl;
        inputFile.close();
    } else {
        std::cerr << ""Unable to open file\n"";
        return 1;
    }
    return 0;
}",int sum = 0;
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    int total = 0;
    for (const auto& pair : counts) {
        total += pair.second;
    }

    std::cout << ""Total fruit count: "" << total << std::endl;

    // Incorrectly tries to access a key that doesn't exist
    std::cout << ""Grape count: "" << counts[""grape""] << std::endl;

    return 0;
}","std::cout << ""Grape count: "" << counts[""grape""] << std::endl;"
"#include <deque>
#include <iostream>
#include <algorithm>

int main() {
    std::deque<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of all elements in the deque
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Loop goes one element too far
        sum += numbers[i];
    }
    
    std::cout << ""Sum: "" << sum << std::endl;
    
    return 0;
}",i <= numbers.size()
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int target = 3;

    auto it = std::find(data.begin(), data.end(), target);

    if (it != data.end()) {
        data.erase(it);
    }

    // The issue here is that after erasing the element, the iterator 'it' becomes invalid.
    // Attempting to access or use it after erasing leads to undefined behavior.
    // If you want to use 'it' after erasing, you should store the position of the element before erasing it or search for it again after the erase operation.
    // std::cout << *it << std::endl; // Undefined Behavior

    std::cout << ""Vector after removal: "";
    for (int val : data) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;

    return 0;
}",std::cout << *it << std::endl;
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  double sum = std::accumulate(data.begin(), data.end(), 0.0);

  // Incorrect type casting.  The result is truncated.
  int truncated_sum = (int)sum;

  std::cout << ""Sum: "" << sum << std::endl;
  std::cout << ""Truncated Sum: "" << truncated_sum << std::endl;
  return 0;
}",int truncated_sum = (int)sum;
"#include <ctime>
#include <iomanip>

int main() {
    std::srand(std::time(nullptr));
    int numbers[5];
    for (int i = 0; i < 5; ++i) {
        numbers[i] = std::rand() % 100;
    }

    // Calculate the average of the numbers
    double sum = 0.0;
    for (int i = 0; i <= 5; ++i) { // Fault: i <= 5 instead of i < 5
        sum += numbers[i];
    }

    double average = sum / 5.0;
    std::cout << ""Average: "" << std::fixed << std::setprecision(2) << average << std::endl;
    return 0;
}",i <= 5
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of squares, but incorrectly apply std::transform
    std::vector<int> squares(numbers.size());
    std::transform(numbers.begin(), numbers.end(), squares.begin(), [](int x){ return x + 1; });
    
    int sum_of_squares = std::accumulate(squares.begin(), squares.end(), 0);
    
    std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
    
    return 0;
}",[](int x){ return x + 1; }
"#include <iomanip> 
#include <iostream>

int main() {
    double price = 123.4567;
    std::cout << ""Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    double taxRate = 0.075;
    double taxAmount = price * taxRate;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    double totalCost = price + taxAmount;
    std::cout << ""Total cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;
    return 0;
}","std::cout << ""Total cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;"
"#include <random>
#include <chrono>
#include <thread>
#include <iostream>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    int num_iterations = 5;

    for (int i = 0; i < num_iterations; ++i) {
        int random_number = distrib(gen);
        std::this_thread::sleep_for(std::chrono::milliseconds(100));

        if (random_number % 2 == 0) {
            std::cout << ""Even: "" << random_number << std::endl;
        } else {
            std::cout << ""Odd: "" << random_number << std::endl;
        }
    }

    return 0;
}","else {
            std::cout << ""Odd: "" << random_number << std::endl;
        }"
"#include <string>
#include <sstream>

int main() {
    std::string input = ""12.34"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cout << ""Conversion failed!"" << std::endl;
        return 1;
    }
    
    std::cout << ""Value: "" << num << std::endl;
    double result = num * 2.0;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",    double result = num * 2.0;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    // Calculate the diameter
    double diameter = radius / 2.0;
    std::cout << ""Diameter: "" << diameter << std::endl;

    // Incorrectly calculate area using circumference
    double area_from_circumference = circumference * circumference / (4 * M_PI);
    std::cout << ""Area (from circumference): "" << area_from_circumference << std::endl;
    
    return 0;
}",double area_from_circumference = circumference * circumference / (4 * M_PI);
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        if (it->first == 2) {
            it = myMap.erase(it);
        }
        std::cout << it->first << "": "" << it->second << std::endl;
    }
    return 0;
}",it = myMap.erase(it);
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
    }

    return 0;
}",if (ages.find(name) != ages.end())
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    int sum = 0;
    while (!q.empty()) {
        int x = q.front();
        q.pop();
        sum += x;
    }

    // Incorrectly subtract 1 after the loop. Should be outside the loop.
    sum -= 1; 
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= 1;
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1 instead of n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.begin() + 4, 0);
    //The intention was to sum all elements, but it sums only first 4.
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",data.begin() + 4
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <fstream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ofstream outfile(filename);
    if (!outfile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    int num_lines = 5;
    for (int i = 0; i <= num_lines; ++i) {
        outfile << ""Line "" << i << ""\n"";
    }

    outfile.close();
    return 0;
}",i <= num_lines
"#include <random>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);
    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Sort in descending order, but use ascending comparison.
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());
    
    // Print the sorted numbers.
    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::sort(numbers.begin(), numbers.end(), std::greater<int>());"
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    if (ss >> num) {
        std::cout << ""Successfully converted: "" << num << std::endl;
    } else {
        std::cout << ""Conversion failed."" << std::endl;
    }
    
    std::string input2 = ""abc"";
    std::stringstream ss2(input2);
    double num2;
    if (ss2 >> num2) {
        std::cout << ""Successfully converted: "" << num2 << std::endl;
    } else {
        std::cout << ""Conversion failed."" << std::endl;
    }
    
    return 0;
}",if (ss2 >> num2)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    double wrong_calculation = radius / 2.0;
    std::cout << ""Wrong Calculation: "" << wrong_calculation << std::endl;
    
    return 0;
}",double wrong_calculation = radius / 2.0;
"#include <unordered_map>
#include <string>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 1;
    counts[""banana""] = 2;

    std::string fruit = ""orange"";
    if (counts.find(fruit) == counts.end()) {
        counts[fruit] = 0;
    }
    
    std::cout << ""Orange count: "" << counts[fruit] << std::endl;
    
    fruit = ""apple"";
    std::cout << ""Apple count: "" << counts[fruit] << std::endl;

    return 0;
}",counts[fruit] = 0;
"#include <numeric>
#include <tuple>

int main() {
  std::tuple<int, int, int> my_tuple(1, 2, 3);
  int sum = 0;
  for (int i = 0; i < 4; ++i) { // Fault: loop iterates one too many times
    sum += std::get<i>(my_tuple);
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i < 4; ++i)
"#include <queue>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::priority_queue<int> pq(data.begin(), data.end());

    std::vector<int> sorted_data;
    while (!pq.empty()) {
        sorted_data.push_back(pq.top());
        pq.pop();
    }

    std::reverse(sorted_data.begin(), sorted_data.end());

    int sum = 0;
    for (int i = 0; i < sorted_data.size(); ++i) {
        sum += sorted_data[i];
    }

    std::cout << ""Sum of elements: "" << sum << std::endl;
    return 0;
}","std::reverse(sorted_data.begin(), sorted_data.end());"
"#include <algorithm>
#include <tuple>

int main() {
    std::tuple<int, int, int> myTuple = std::make_tuple(1, 2, 3);
    int a = std::get<0>(myTuple);
    int b = std::get<1>(myTuple);
    int c = std::get<2>(myTuple);

    if (a > b && b > c) {
        std::cout << ""Order is correct."" << std::endl;
    } else {
        std::cout << ""Order is incorrect."" << std::endl;
    }

    return 0;
}",if (a > b && b > c)
"#include <iostream>
#include <iomanip>

int main() {
  double radius = 5.0;
  double area = 3.14159 * radius * radius;
  std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
  return 0;
}",double area = 3.14159 * radius * radius;
"#include <array>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  std::sort(data.begin(), data.end(), std::greater<int>());
  
  for (int i = 0; i < data.size(); ++i) {
    std::cout << data[i] << "" "";
  }
  std::cout << std::endl;
  return 0;
}",std::greater<int>()
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    auto it = std::find(data.begin(), data.end(), target);

    if (it != data.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Attempt to access element one position beyond the vector's bounds
    if (it != data.end()) {
        std::cout << data[std::distance(data.begin(), it) + 1] << std::endl; // Faulty line
    }

    return 0;
}","std::cout << data[std::distance(data.begin(), it) + 1] << std::endl;"
"#include <iomanip> 
#include <fstream> 
#include <sstream> 

int main() {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(3) << 123.456789;
    std::string formatted_string = ss.str();
    
    std::ofstream outfile(""output.txt"");
    if (outfile.is_open()) {
        outfile << formatted_string;
        outfile.close();
    } else {
        std::cerr << ""Unable to open file."";
        return 1;
    }

    std::ifstream infile(""output.txt"");
    std::string read_string;
    if (infile.is_open()) {
        std::getline(infile, read_string);
        infile.close();
        std::cout << read_string << std::endl;
    } else {
        std::cerr << ""Unable to open file for reading."";
        return 1;
    }

    return 0;
}",std::string formatted_string = ss.str();
"#include <random>
#include <chrono>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 10);

    int sum = 0;
    for (int i = 0; i < 5; ++i) {
        int randomNumber = distrib(gen);
        if (randomNumber % 2 == 0) {
            sum += randomNumber;
        } else {
           sum -= randomNumber;
        }
    }
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= randomNumber;
"#include <string>
#include <sstream>

int main() {
    std::string input = ""12.34"";
    std::stringstream ss(input);
    double value;
    ss >> value;
    if (ss.fail()) {
        std::cout << ""Conversion failed."" << std::endl;
        return 1;
    }
    std::string extra;
    ss >> extra;  // Attempting to read extra characters after a double.
    std::cout << ""Extra: "" << extra << std::endl;
    std::cout << ""Value: "" << value << std::endl;
    return 0;
}","    std::string extra;
    ss >> extra;  // Attempting to read extra characters after a double."
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    double perimeter = 4 * radius;
    std::cout << ""Perimeter: "" << perimeter << std::endl;
    return 0;
}",double perimeter = 4 * radius;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto const& [key, val] : myMap) {
        std::cout << key << "" : "" << val << std::endl;
    }

    myMap.erase(2);

    std::cout << ""After erasing key 2:\n"";
    for (auto const& [key, val] : myMap) {
        std::cout << key << "" : "" << val << std::endl;
    }

    myMap[5] = ""five"";
    std::cout << ""After adding key 5:\n"";
     for (auto const& [key, val] : myMap) {
        std::cout << key << "" : "" << val << std::endl;
    }

    //Incorrectly assumes myMap[4] exists and has a value.
    std::cout << ""Value of key 4: "" << myMap[4] << std::endl;

    return 0;
}","std::cout << ""Value of key 4: "" << myMap[4] << std::endl;"
"#include <bitset>
#include <algorithm>

int main() {
    std::bitset<8> bits = ""10101010"";
    std::bitset<8> inverted_bits = bits.to_ulong() ^ 0xFF;
    std::cout << inverted_bits << std::endl;
    return 0;
}",bits.to_ulong() ^ 0xFF
"#include <tuple>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  
  // Calculate the product of all elements in the vector.
  int product = 1;
  for (int i = 0; i < data.size(); ++i) {
    product *= data[i];
  }

  //Incorrect use of std::accumulate - incorrect type.
  auto sum = std::accumulate(data.begin(), data.end(), 0.0);
  
  std::cout << ""Product: "" << product << std::endl;
  std::cout << ""Sum: "" << sum << std::endl;
  
  return 0;
}","auto sum = std::accumulate(data.begin(), data.end(), 0.0);"
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(5);
    q.push(10);

    int sum = 0;
    while (!q.empty()) {
        int current = q.front();
        q.pop();
        sum += current;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",    int sum = 0; 
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (size_t i = 0; i <= data.size(); ++i) { // Fault: Loop condition goes one element too far
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line);  // Potential exception if line is not a valid integer.
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << e.what() << '\n';
            return 1;
        }
    }

    inputFile.close();

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int num = std::stoi(line);
"#include <random> 
#include <numeric>
#include <complex>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_real_distribution<> dis(0.0, 1.0);

    std::complex<double> sum(0.0, 0.0);
    for (int i = 0; i < 10; ++i) {
        double r = dis(gen);
        std::complex<double> z(r, r); 
        sum += z;
    }

    std::complex<double> avg = sum / 10.0;
    double realPart = avg.real();
    double imagPart = avg.imag();

    std::cout << ""Average real part: "" << realPart << std::endl;
    std::cout << ""Average imaginary part: "" << imagPart << std::endl;

    return 0;
}",std::complex<double> avg = sum / 10.0;
"#include <string>
#include <sstream>
#include <iomanip>

std::string format_double(double num, int precision) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(precision) << num;
    return ss.str();
}

int main() {
    double pi = 3.14159265358979323846;
    int precision = 5;
    std::string formatted_pi = format_double(pi, precision);
    std::cout << ""Pi formatted to "" << precision << "" decimal places: "" << formatted_pi << std::endl;

    double value = 123456789.0;
    precision = -2; //Intentionally set to a negative number
    std::string formatted_value = format_double(value, precision);
    std::cout << ""Value formatted to "" << precision << "" decimal places: "" << formatted_value << std::endl;
    return 0;
}",precision = -2; //Intentionally set to a negative number
"#include <cmath>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    // Calculate circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

    //Incorrect calculation of diameter - fault
    double diameter = radius / 2.0;
    std::cout << ""Diameter of the circle: "" << std::fixed << std::setprecision(2) << diameter << std::endl;

    return 0;
}",double diameter = radius / 2.0;
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    int key = 4;
    std::string value = myMap[key]; // Accessing non-existent key
    std::cout << ""Value for key "" << key << "": "" << value << std::endl;

    return 0;
}",std::string value = myMap[key];
"#include <map>
#include <string>
#include <algorithm>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // Should check if key exists first
    
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;
    
    return 0;
}",int count = counts[fruit];
"#include <iomanip> 
#include <complex>

int main() {
  double pi = 3.14159265358979323846;
  double radius = 5.0;
  double area = pi * radius * radius;
  std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

  std::complex<double> z(radius, 0.0);
  std::complex<double> rotated_z = z * std::complex<double>(0, 1.0); // Should rotate by 90 degrees, but complex multiplication rotates by pi/2
  double rotated_x = rotated_z.real();
  double rotated_y = rotated_z.imag();

  std::cout << ""Rotated x: "" << rotated_x << std::endl;
  std::cout << ""Rotated y: "" << rotated_y << std::endl;

  return 0;
}","  std::complex<double> rotated_z = z * std::complex<double>(0, 1.0);"
"#include <algorithm>
#include <numeric>
#include <tuple>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  
  // Calculate the product of elements using std::accumulate
  // Incorrect initial value for the product
  int product = std::accumulate(data.begin(), data.end(), 1, std::multiplies<int>());
  
  // Calculate the sum of the elements
  sum = std::accumulate(data.begin(), data.end(), 0);
  
  std::cout << ""Sum: "" << sum << std::endl;
  std::cout << ""Product: "" << product << std::endl;
  
  return 0;
}","int product = std::accumulate(data.begin(), data.end(), 1, std::multiplies<int>());"
"#include <queue>
#include <iostream>
#include <tuple>

int main() {
    std::priority_queue<int, std::vector<int>, std::greater<int>> pq;
    pq.push(5);
    pq.push(2);
    pq.push(8);
    pq.push(1);

    int sum = 0;
    while (!pq.empty()) {
        sum += pq.top();
        pq.pop();
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += pq.top();
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <complex> 
#include <vector>
#include <numeric>

int main() {
    std::vector<std::complex<double>> data = {
        std::complex<double>(1.0, 2.0), 
        std::complex<double>(3.0, 4.0), 
        std::complex<double>(5.0, 6.0)
    };

    double sum_real = 0.0;
    double sum_imag = 0.0;

    for (const auto& z : data) {
        sum_real += z.real();
        sum_imag -= z.imag(); // Fault: Should be += to add the imaginary part
    }

    std::cout << ""Sum of real parts: "" << sum_real << std::endl;
    std::cout << ""Sum of imaginary parts: "" << sum_imag << std::endl;

    return 0;
}",sum_imag -= z.imag();
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> squares(data.size());

    std::transform(data.begin(), data.end(), squares.begin(), [](int x) { return x * x; });

    // Calculate the sum of squares, but increment the accumulator incorrectly.
    int sum = 0;
    for (size_t i = 0; i < squares.size(); ++i) {
        sum += squares[i] + 1; // Fault: adding 1 instead of just the square
    }

    std::cout << ""Sum of squares: "" << sum << std::endl;
    return 0;
}",sum += squares[i] + 1;
"#include <random> 
#include <chrono> 
#include <iostream>

int main() {
    std::chrono::high_resolution_clock::time_point start_time = std::chrono::high_resolution_clock::now();
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        sum += distrib(gen);
    }

    std::chrono::high_resolution_clock::time_point end_time = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end_time - start_time);

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Time taken: "" << duration.count() << "" microseconds"" << std::endl;

    return 0;
}",sum += distrib(gen);
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""12.34"";
    std::stringstream ss(input);
    double value;
    ss >> value;

    if (ss.fail()) {
        std::cerr << ""Conversion failed!"" << std::endl;
        return 1;
    }

    // Incorrect conversion from double to int
    int intValue = value + 0.5;
    std::cout << ""Integer value: "" << intValue << std::endl;
    return 0;
}",int intValue = value + 0.5;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    double area = M_PI * radius * radius;

    std::cout << ""Circumference: "" << circumference << std::endl;
    std::cout << ""Area: "" << area << std::endl;
    
    // Incorrect calculation of diameter
    double diameter = circumference / PI; 
    std::cout << ""Diameter: "" << diameter << std::endl;
    
    return 0;
}",double diameter = circumference / PI;
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    int sum = 0;
    for (int i = 0; i <= n; ++i) {
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= n; ++i) {
"#include <map>
#include <string>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;

    std::string name = ""Charlie"";
    int age = ages[name]; // Accessing non-existent key
    
    std::cout << ""Charlie's age: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <iomanip> 
#include <fstream> 
#include <string> 

using namespace std; 

int main() { 
  ofstream outputFile(""data.txt""); 
  if (!outputFile.is_open()) { 
    cerr << ""Error opening file!"" << endl; 
    return 1; 
  }

  string name = ""Alice"";
  int age = 30;
  double salary = 60000.50;

  outputFile << ""Name: "" << name << endl;
  outputFile << ""Age: "" << age << endl;
  outputFile << fixed << setprecision(2) << ""Salary: "" << salary << endl;

  outputFile.close();

  // Read data back from the file 
  ifstream inputFile(""data.txt"");
  if (!inputFile.is_open()) { 
    cerr << ""Error opening file for reading!"" << endl; 
    return 1; 
  }

  string readName;
  int readAge;
  double readSalary;

  inputFile >> readName >> readAge >> readSalary;

  cout << ""Read Name: "" << readName << endl;
  cout << ""Read Age: "" << readAge << endl;
  cout << ""Read Salary: "" << readSalary << endl;
  
  return 0; 
}",inputFile >> readName >> readAge >> readSalary;
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line);  // Potential conversion error
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << line << std::endl;
        } catch (const std::out_of_range& e) {
            std::cerr << ""Out of range: "" << line << std::endl;
        }
    }

    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int num = std::stoi(line);
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <ctime>
#include <iomanip>

int main() {
    std::srand(std::time(nullptr));
    double radius = std::rand() % 100; // Radius from 0 to 99
    double area = 3.14 * radius * radius; // Calculate area
    std::cout << ""The area of the circle with radius "" << radius << "" is: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {  // Fault: Loop condition goes one element too far
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <string>
#include <sstream>

std::string formatString(int value) {
    std::stringstream ss;
    ss << ""The value is: "" << value;
    return ss.str();
}

int main() {
    int number = 5;
    std::string formattedString = formatString(number);
    std::cout << formattedString << std::endl;

    int otherNumber = 10;
    std::string anotherFormattedString = formatString(otherNumber);
    std::cout << anotherFormattedString << std::endl;

    //Incorrectly using a different variable to affect the first one.
    number = 20;
    std::cout << ""Modified String: "" << formattedString << std::endl;
    return 0;
}",number = 20;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area of circle: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    int sum = 0;
    while (!q.empty()) {
        int x = q.front();
        q.pop();
        sum += x * 2; //Incorrect: should be x
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += x * 2;
"#include <random>
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 10);

    std::vector<int> numbers(5);
    for (int i = 0; i < numbers.size(); ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average
    double sum = 0.0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }

    double average = sum / numbers.size();

    // Find the largest number.
    int max_value = numbers[0];
    for (int i = 1; i <= numbers.size(); ++i) { // Fault: Off-by-one error. Should be i < numbers.size()
        if (numbers[i] > max_value) {
            max_value = numbers[i];
        }
    }

    std::cout << ""Average: "" << average << std::endl;
    std::cout << ""Largest number: "" << max_value << std::endl;

    return 0;
}",i <= numbers.size()
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string pattern = ""string"";
    size_t pos = text.find(pattern, 10); // Start searching from index 10, which is beyond the first 'string'

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;
    std::vector<int> result;

    for (int num : numbers) {
        if (num < target) {
            result.push_back(num);
        }
    }
    
    // Incorrectly calculate the sum of the elements in the result vector.
    int sum = 0;
    for(size_t i = 0; i <= result.size(); ++i) {
        sum += result[i];
    }
    
    std::cout << ""Sum of numbers less than target: "" << sum << std::endl;
    return 0;
}",for(size_t i = 0; i <= result.size(); ++i)
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Accessing non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl; 

    return 0;
}",int age = ages[name];
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""cherry""] = 7;

    std::string fruit = ""grape"";
    if (counts.find(fruit) == counts.end()) {
        std::cout << ""Fruit not found, setting count to 0."" << std::endl;
    }
    std::cout << ""Count for "" << fruit << "": "" << counts[fruit] << std::endl;
    return 0;
}","std::cout << ""Count for "" << fruit << "": "" << counts[fruit] << std::endl;"
"#include <fstream>
#include <string>

int main() {
    std::ofstream outfile(""data.txt"");
    if (outfile.is_open()) {
        std::string line = ""This is the first line.\n"";
        outfile << line;
        std::string line2 = ""This is the second line""; // Missing newline
        outfile << line2;
        outfile.close();
    } else {
        std::cerr << ""Unable to open file"";
        return 1;
    }
    return 0;
}","std::string line2 = ""This is the second line""; // Missing newline"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly calculating the average. Should divide by numbers.size()
    double average = sum / 5;
    
    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = sum / 5;
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i)
"#include <cmath>
#include <iostream>

int main() {
    double x = 2.0;
    double y = 3.0;
    double result = std::sqrt(x) + std::sqrt(y);
    
    if (result < 0) {
        std::cout << ""Result is negative: "" << result << std::endl;
    } else {
        std::cout << ""Result is positive: "" << result << std::endl;
    }
    
    return 0;
}",if (result < 0)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <string>
#include <sstream>

std::string formatString(int num) {
    std::stringstream ss;
    ss << num;
    std::string str = ss.str();
    return str;
}

int main() {
    int value = 123;
    std::string formattedValue = formatString(value);
    std::string result = ""The value is: "" + formattedValue + 10;
    std::cout << result << std::endl;
    return 0;
}",+ 10
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target value.
    auto it = std::find(nums.begin(), nums.end(), target);

    if (it != nums.end()) {
        std::cout << ""Target found at index: "" << std::distance(nums.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrectly modify the vector after searching.  This will affect future searches if they were to happen.
    nums.push_back(target); // This is the fault.
    
    return 0;
}",nums.push_back(target);
"#include <queue>
#include <vector>
#include <iostream>

using namespace std;

int main() {
  priority_queue<int> pq;
  vector<int> nums = {1, 5, 2, 8, 3};

  for (int num : nums) {
    pq.push(num);
  }

  int sum = 0;
  while (!pq.empty()) {
    sum += pq.top();
    pq.pop();
  }

  cout << ""Sum of elements: "" << sum << endl;
  return 0;
}",priority_queue<int> pq;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto const& [key, val] : myMap) {
        std::cout << key << "" : "" << val << std::endl;
    }

    // Incorrectly attempt to access a key that doesn't exist.
    std::cout << myMap[4] << std::endl;  // This should not be done without checking.

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl;
    double taxRate = 0.085;
    double taxAmount = price * taxRate;
    double totalCost = price + taxAmount;
    std::cout << ""Total cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;
    return 0;
}",    double taxAmount = price * taxRate;
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = 5;

    // Calculate the sum of all elements using std::accumulate
    int sum = std::accumulate(arr, arr + n - 1, 0); // Fault here

    std::cout << ""Sum of array elements: "" << sum << std::endl;
    return 0;
}",arr + n - 1
"#include <fstream>
#include <iostream>
#include <string>

int main() {
  std::fstream file(""data.txt"", std::ios::out);
  if (file.is_open()) {
    std::string line = ""This is a test line.\n"";
    file << line;
    file << ""Second line""; // Missing newline character
    file.close();
  } else {
    std::cerr << ""Unable to open file\n"";
    return 1;
  }
  return 0;
}","file << ""Second line""; // Missing newline character"
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    int num_iterations = 5;
    double sum = 0.0;
    for (int i = 0; i <= num_iterations; ++i) {
        sum += i * 0.5;
    }

    std::cout << ""Sum of series: "" << sum << std::endl;
    return 0;
}",i <= num_iterations
"#include <random>
#include <iostream>
#include <vector>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 10);

    std::vector<int> numbers(5);
    for (int i = 0; i < 5; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= 5; ++i) { // Fault: should be i < 5
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= 5
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    // Incorrect calculation of diameter
    double diameter = circumference / M_PI;

    std::cout << ""Diameter: "" << diameter << std::endl;
    
    return 0;
}",double diameter = circumference / M_PI;
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());

    if (str == reversed_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == reversed_str)
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
  int target = 7;

  std::vector<int> result;
  std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

  for (int num : result) {
    std::cout << num << "" "";
  }
  std::cout << std::endl;

  return 0;
}",return n > target;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Find the index of the largest element
    auto it = std::max_element(numbers.begin(), numbers.end());
    size_t index = std::distance(numbers.begin(), it);

    // Access element at index (potential out-of-bounds)
    std::cout << numbers[index + 1] << std::endl; //Faulty line

    return 0;
}",std::cout << numbers[index + 1] << std::endl;
"#include <iostream>
#include <algorithm>

int main() {
  int numbers[] = {5, 2, 8, 1, 9, 4};
  int n = sizeof(numbers) / sizeof(numbers[0]);
  std::sort(numbers, numbers + n - 1); // Fault: Sorts up to the second-to-last element
  
  for (int i = 0; i < n; ++i) {
    std::cout << numbers[i] << "" "";
  }
  std::cout << std::endl;
  return 0;
}","numbers, numbers + n - 1"
"#include <chrono>
#include <thread>
#include <mutex>
#include <iostream>
#include <vector>

std::mutex mtx;

void worker(int id) {
    for (int i = 0; i < 10; ++i) {
        std::lock_guard<std::mutex> lock(mtx);
        std::cout << ""Worker "" << id << "": "" << i << std::endl;
        std::this_thread::sleep_for(std::chrono::milliseconds(50));
    }
}

int main() {
    std::vector<std::thread> threads;
    for (int i = 0; i < 5; ++i) {
        threads.push_back(std::thread(worker, i));
    }

    for (auto& thread : threads) {
        thread.join();
    }

    return 0;
}","std::cout << ""Worker "" << id << "": "" << i << std::endl;"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""cherry""] = 7;

    int total = 0;
    for (const auto& pair : counts) {
        total += pair.first; // Incorrectly summing string values, should sum int values
    }

    std::cout << ""Total: "" << total << std::endl;
    return 0;
}",total += pair.first;
"#include <random>
#include <iostream>
#include <vector>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Loop goes out of bounds
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    
    // Calculate the sum of the elements using std::accumulate
    int sum = std::accumulate(data.begin(), data.end(), 0);
    
    // Incorrectly print the size of the vector instead of the sum
    std::cout << data.size() << std::endl; // Should print the sum
    
    return 0;
}",std::cout << data.size() << std::endl;
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string rev_str = str;
    std::reverse(rev_str.begin(), rev_str.end());

    if (str == rev_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }

    return 0;
}",if (str == rev_str)
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    std::for_each(data.begin(), data.end(), [&](int x) { sum += x; });
    std::cout << ""Sum: "" << sum << std::endl;

    std::vector<int> empty_vector;
    int sum_empty = std::accumulate(empty_vector.begin(), empty_vector.end(), 0);
    std::cout << ""Sum of empty vector: "" << sum_empty << std::endl;

    return 0;
}","int sum_empty = std::accumulate(empty_vector.begin(), empty_vector.end(), 0);"
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> values = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= values.size(); ++i) {
    sum += values[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= values.size()
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    // Incorrect calculation of circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    double diameter = radius / 2.0;
    std::cout << ""Diameter: "" << diameter << std::endl;

    double incorrect_calculation = M_PI * (radius + 1.0) * (radius + 1.0); 
    std::cout << ""Incorrect Calculation: "" << incorrect_calculation << std::endl;

    return 0;
}",double incorrect_calculation = M_PI * (radius + 1.0) * (radius + 1.0);
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Potential default construction issue
    std::cout << ""David's age: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

  // Intentionally incorrect calculation.  Should be 15 but will be 14 due to truncation.
  int incorrect_sum = std::accumulate(numbers.begin(), numbers.end(), 0.0) ; // Accumulate with 0.0 as initial value

  std::cout << ""Sum: "" << sum << std::endl;
  std::cout << ""Incorrect Sum: "" << incorrect_sum << std::endl;
  return 0;
}","std::accumulate(numbers.begin(), numbers.end(), 0.0)"
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    message.resize(5); // Truncates the string, potentially losing data.
    std::cout << message << std::endl;
    return 0;
}",message.resize(5);
"#include <string>
#include <algorithm>

int main() {
  std::string str = ""Hello, World!"";
  std::transform(str.begin(), str.end(), str.begin(), ::tolower);
  std::cout << str << std::endl;
  return 0;
}",::tolower
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
  std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
  int target = 7;

  std::vector<int> result;
  std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

  std::cout << ""Numbers greater than "" << target << "":"";
  for (int num : result) {
    std::cout << num << "" "";
  }
  std::cout << std::endl;

  return 0;
}",return n > target;
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (const auto& pair : scores) {
        total_score += pair.first; // Incorrect: Adding the key (string) instead of the value (int)
    }

    std::cout << ""Total score: "" << total_score << std::endl;
    return 0;
}",total_score += pair.first;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30; 
    ages[""Bob""] = 25;

    std::string name = ""Charlie"";
    int age = ages[name]; // Potential undefined behavior: accessing non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Potential error: Accessing non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl;

    return 0;
}",ages[name]
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    double expected_circumference = 31.4159;
    if (abs(circumference - expected_circumference) > 0.0001) {
        std::cout << ""Circumference calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Circumference calculation is correct."" << std::endl;
    }

    return 0;
}",expected_circumference = 31.4159;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct."" << std::endl;
    } else {
        std::cout << ""Area is incorrect. Expected: "" << expected_area << "", Calculated: "" << area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <iostream>
#include <string>

int main() {
    std::string str = ""Hello"";
    std::string sub = str.substr(1, 3);
    std::cout << sub << std::endl;
    return 0;
}","std::string sub = str.substr(1, 3);"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {  // Off-by-one error
    sum += numbers[i];
  }
  
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <random>
#include <ctime>
#include <vector>

int main() {
    std::srand(std::time(nullptr));
    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = std::rand() % 100;
    }

    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }

    double average = sum / numbers.size(); // Integer division
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = sum / numbers.size();
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <iostream>
#include <iomanip>

int main() {
    double value = 123456789.12345;
    std::cout << std::fixed << std::setprecision(3) << value << std::endl;
    
    double truncated_value = value; // Truncated to nearest integer
    truncated_value = std::trunc(truncated_value);
    std::cout << std::fixed << std::setprecision(3) << truncated_value << std::endl;
    
    return 0;
}",truncated_value = std::trunc(truncated_value);
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area: "" << area << std::endl;

  double circumference = 2 * M_PI * radius;
  std::cout << ""Circumference: "" << circumferece << std::endl; //Typo: circumferece instead of circumference
  return 0;
}","std::cout << ""Circumference: "" << circumferece << std::endl;"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""hello world"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text)
        std::cout << ""Palindrome!"" << std::endl;
    else
        std::cout << ""Not a palindrome."" << std::endl;
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting only up to n-1, leaves the last element unsorted

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> modified_data = data;

  // Intended to sort the modified data in ascending order.
  std::sort(modified_data.begin(), modified_data.end(), std::greater<int>());

  int sum = std::accumulate(modified_data.begin(), modified_data.end(), 0);

  std::cout << ""Sum of modified data: "" << sum << std::endl;
  return 0;
}","std::sort(modified_data.begin(), modified_data.end(), std::greater<int>());"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string target = ""world!"";
    size_t pos = text.find(target);

    if (pos != std::string::npos) {
        std::cout << ""Target found at position: "" << pos << std::endl;
        text.erase(pos, target.length() - 1);  // Incorrect length
        std::cout << ""Modified text: "" << text << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    return 0;
}","text.erase(pos, target.length() - 1);"
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of the squares of all elements in the vector
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i] * numbers[i];
    }
    
    // Incorrectly calculate the square root of the sum.  We should cast to double first.
    int sqrt_sum = sqrt(sum);
    
    std::cout << ""Sum of squares: "" << sum << std::endl;
    std::cout << ""Square root of sum: "" << sqrt_sum << std::endl;
    
    return 0;
}",int sqrt_sum = sqrt(sum);
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the product of all numbers in the vector
    int product = 1;
    for (int i = 0; i <= numbers.size(); ++i) {
        product *= numbers[i];
    }
    
    std::cout << ""Product: "" << product << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // Calculate the average, but misplace the sum
    int sum = 0;
    for (int number : numbers) {
        sum = number; // Incorrect placement - only sets sum to the last element
    }
    
    double average = static_cast<double>(sum) / numbers.size();
    
    std::cout << ""The average is: "" << average << std::endl;
    
    return 0;
}",sum = number;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    std::cout << ""Average score: "" << total_score / scores.size() << std::endl;
    return 0;
}","std::cout << ""Average score: "" << total_score / scores.size() << std::endl;"
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Fault: Accessing non-existent key without checking
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.begin() + 3, 0);
    // The above line is faulty: it only accumulates the first 3 elements (1,2,3) instead of the whole vector.
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",data.begin() + 3
"#include <string>
#include <sstream>

std::string formatString(int value) {
    std::stringstream ss;
    ss << ""The value is: "" << value;
    return ss.str();
}

int main() {
    int number = 5;
    std::string formatted = formatString(number);
    std::cout << formatted << std::endl;
    
    // Incorrectly trying to compare a string with an integer
    if (formatted == 5) {
        std::cout << ""Equal!"" << std::endl;
    } else {
        std::cout << ""Not equal."" << std::endl;
    }
    
    return 0;
}",if (formatted == 5)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    // Incorrectly converting double to int for output
    std::cout << ""Area: "" << static_cast<int>(area) << std::endl; 

    return 0;
}",static_cast<int>(area)
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);
    std::sort(arr, arr + n - 1); // Faulty line

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Should be i < numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <queue>
#include <vector>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    std::vector<int> nums;
    while (!q.empty()) {
        nums.push_back(q.front());
        q.pop();
    }

    // Incorrect loop condition. Should be nums.size() - 1
    for (int i = nums.size(); i >= 0; --i) {
        std::cout << nums[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",for (int i = nums.size(); i >= 0; --i)
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <iostream>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    std::cout << ""Number of "" << fruit << "": "" << counts[fruit] << std::endl;

    return 0;
}",counts[fruit]
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <random>
#include <chrono>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 5; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
            sum += num;
        } else {
           // Bug: Intentionally incorrect logic. Should be sum -= num;
           sum += num;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += num;
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""12.34"";
    std::stringstream ss(input);
    double value;
    if (ss >> value) {
        std::cout << ""Value: "" << value << std::endl;
    } else {
        std::cout << ""Invalid input."" << std::endl;
    }
    double factor = 2.0;
    double result = value + factor;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",double factor = 2.0;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect. Calculated: "" << area << std::endl;
        std::cout << ""Expected: "" << expected_area << std::endl;
    } else {
        std::cout << ""Area calculation is correct. Area: "" << area << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""The area of the circle is: "" << area << std::endl;
    
    //Incorrectly adding 1 to the radius before calculating area. This changes the calculation and introduces a fault.
    double incorrect_area = M_PI * (radius + 1) * (radius + 1);
    
    std::cout << ""Incorrect area calculation: "" << incorrect_area << std::endl;
    
    return 0;
}",double incorrect_area = M_PI * (radius + 1) * (radius + 1);
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Loop goes one element too far
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};

    // Calculate the sum of elements using std::accumulate
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    // Incorrectly print the size of the vector instead of the sum
    std::cout << numbers.size() << std::endl; 

    return 0;
}",std::cout << numbers.size() << std::endl;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly calculate average
    double average = sum / numbers.size(); 
    
    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = sum / numbers.size();
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    int sum = 0;

    for (int i = 0; i <= n; ++i) {
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= n; ++i)
"#include <iostream>
#include <map>

int main() {
  std::map<std::string, int> scores; 
  scores[""Alice""] = 90;
  scores[""Bob""] = 80;
  scores[""Charlie""] = 70;

  int total_score = 0;
  for (const auto& pair : scores) {
    total_score += pair.second;
  }

  double average_score = total_score / scores.size();
  std::cout << ""Average score: "" << average_score << std::endl;
  return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    for (int i = 0; i <= text.length(); ++i) {
        std::cout << text[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",i <= text.length()
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << ""Price: "" << std::fixed << std::setprecision(1) << price << std::endl;
    double taxRate = 0.075;
    double taxAmount = price * taxRate;
    double totalPrice = price + taxAmount;
    std::cout << ""Total Price: "" << std::fixed << std::setprecision(2) << totalPrice << std::endl;
    return 0;
}","std::cout << ""Total Price: "" << std::fixed << std::setprecision(2) << totalPrice << std::endl;"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();

    for (int i = 0; i < len; ++i) {
        if (text[i] == 'l') {
            text[i] = 'p'; // Incorrectly modify the string in-place
        }
    }

    std::cout << text << std::endl;
    return 0;
}",text[i] = 'p';
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""hello world"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (text == reversed_text) {
    std::cout << ""Palindrome!"" << std::endl;
  } else {
    std::cout << ""Not a palindrome."" << std::endl;
  }

  return 0;
}",if (text == reversed_text)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area > expected_area + 0.1) {
        std::cout << ""Area is significantly larger than expected."" << std::endl;
    } else if (area < expected_area - 0.1) {
        std::cout << ""Area is significantly smaller than expected."" << std::endl;
    } else {
        std::cout << ""Area is within the expected range."" << std::endl;
    }

    return 0;
}",if (area > expected_area + 0.1)
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    std::sort(arr, arr + n - 1); // Fault: sorts only up to n-1, leaving the last element unsorted

    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target value
    auto it = std::find(nums.begin(), nums.end(), target);

    if (it != nums.end()) {
        int index = std::distance(nums.begin(), it);
        std::cout << ""Target found at index: "" << index << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrectly assume the target was found.
    int value = nums[index]; 
    std::cout << ""Value at index: "" << value << std::endl;

    return 0;
}",int value = nums[index];
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: i <= numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""hello world"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == ""olleh"") {
        std::cout << ""The text is reversed!"" << std::endl;
    } else {
        std::cout << ""The text is not reversed."" << std::endl;
    }
    return 0;
}","if (text == ""olleh"")"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> squares;

    for (int x : data) {
        squares.push_back(x * x);
    }

    // Incorrect calculation of the sum of squares using a wrong initializer list
    int sum_of_squares = std::accumulate(squares.begin(), squares.end(), 0.0);

    std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
    return 0;
}",0.0
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 3, 0); // Incorrect range
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers.begin() + 3
"#include <fstream>
#include <iostream>
#include <string>

int main() {
  std::ifstream inputFile(""data.txt"");
  if (!inputFile.is_open()) {
    std::cerr << ""Error opening file!\n"";
    return 1;
  }

  std::string line;
  int sum = 0;
  while (std::getline(inputFile, line)) {
    try {
      int number = std::stoi(line);
      sum += number;
    } catch (const std::invalid_argument& e) {
      std::cerr << ""Invalid number format: "" << line << std::endl;
    }
  }

  inputFile.close();
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",int number = std::stoi(line);
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""12.34"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cerr << ""Conversion failed!"" << std::endl;
        return 1;
    }

    std::string extra;
    ss >> extra; // Attempt to read extra characters after the number

    std::cout << ""Number: "" << num << std::endl;
    std::cout << ""Extra: "" << extra << std::endl;
    return 0;
}","    std::string extra;
    ss >> extra; // Attempt to read extra characters after the number"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is calculated correctly."" << std::endl;
    } else {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
        std::cout << ""Calculated area: "" << area << std::endl;
        std::cout << ""Expected area: "" << expected_area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1 instead of n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    // Sort the array in descending order
    std::sort(arr, arr + n, std::greater<int>());

    // Print the sorted array
    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    // Find the sum of the first three elements
    int sum = 0;
    for (int i = 0; i <= n; ++i) { // Fault: Loop goes out of bounds
        sum += arr[i];
    }

    std::cout << ""Sum of first three elements: "" << sum << std::endl;

    return 0;
}",for (int i = 0; i <= n; ++i)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int num : numbers) {
        if (target - num < 0) {
            result.push_back(num); // Fault: Should check if target - num > 0
        }
    }

    if (result.empty()) {
        std::cout << ""No numbers found that satisfy the condition."" << std::endl;
    } else {
        std::cout << ""Numbers found: "";
        for (int num : result) {
            std::cout << num << "" "";
        }
        std::cout << std::endl;
    }

    return 0;
}",if (target - num < 0)
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl;  // Prints only ""Hello"" instead of the complete message
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <random>
#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Find the largest number in the vector
    int max_value = numbers[0];
    for (int i = 1; i <= 10; ++i) { // Fault: i <= 10 instead of i < 10
        if (numbers[i] > max_value) {
            max_value = numbers[i];
        }
    }

    std::cout << ""Largest number: "" << max_value << std::endl;

    return 0;
}",i <= 10
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    int total = 0;
    for (auto const& [fruit, count] : counts) {
        total += count;
    }
    
    std::cout << ""Total fruits: "" << total << std::endl;
    
    if (total == 15) {
        std::cout << ""Total is correct!"" << std::endl;
    } else {
        std::cout << ""Total is incorrect!"" << std::endl;
    }

    return 0;
}",if (total == 15)
"#include <iostream>
#include <map>

int main() {
  std::map<std::string, int> ages; 
  ages[""Alice""] = 30;
  ages[""Bob""] = 25;
  ages[""Charlie""] = 40;

  std::string name = ""David"";
  int age = ages[name]; // Accessing a non-existent key
  std::cout << ""Age of "" << name << "": "" << age << std::endl; 

  return 0;
}",ages[name]
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!\n"";
    std::string upper_text = text;
    std::transform(upper_text.begin(), upper_text.end(), upper_text.begin(), ::tolower);
    std::cout << upper_text << std::endl;
    return 0;
}",::tolower
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""The area of a circle with radius "" << radius << "" is approximately: "" << area << std::endl;
    
    // Incorrect type conversion for comparison
    if (area > 75.0) {
        std::cout << ""The area is large!"" << std::endl;
    } else {
        std::cout << ""The area is not that large."" << std::endl;
    }
    
    return 0;
}",if (area > 75.0)
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> result(data.size());

    // Calculate cumulative sum, but with incorrect initial value
    std::partial_sum(data.begin(), data.end(), result.begin(), 10);

    for (int i = 0; i < result.size(); ++i) {
        std::cout << result[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::partial_sum(data.begin(), data.end(), result.begin(), 10);"
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    message.resize(5);  // Truncates the string
    std::cout << message << std::endl;
    return 0;
}",message.resize(5);
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 10;
    counts[""cherry""] = 15;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // Potential issue: default initialization of count
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

    return 0;
}",int count = counts[fruit];
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    // Find the index of the target value in the vector
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found in the vector."" << std::endl;
    }

    // Incorrectly using the iterator to access an element.
    std::cout << *it << std::endl;

    return 0;
}",*it
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    if (str == reversed_str) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == reversed_str)
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> processed_data;

  for (int i = 0; i < data.size(); ++i) {
    processed_data.push_back(data[i] * 2);
  }

  int sum = std::accumulate(processed_data.begin(), processed_data.end(), 0);

  // Incorrect: Should divide by data.size(), not processed_data.size()
  double average = static_cast<double>(sum) / processed_data.size();

  std::cout << ""Average: "" << average << std::endl;
  return 0;
}",double average = static_cast<double>(sum) / processed_data.size();
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl; // Intended to print 'Hello'
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <fstream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        sum += line.length(); // Fault: Should convert line to integer first
    }

    inputFile.close();
    std::cout << ""Sum of line lengths: "" << sum << std::endl;
    return 0;
}",sum += line.length();
"#include <random>
#include <ctime>
#include <numeric>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int arr[10];
    for (int i = 0; i < 10; ++i) {
        arr[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= 10; ++i) { // Fault: Loop iterates one element beyond the array bounds
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= 10; ++i)
"#include <string>
#include <sstream>

std::string formatString(int value) {
    std::stringstream ss;
    ss << ""The value is: "" << value;
    return ss.str();
}

int main() {
    int number = 5;
    std::string formatted = formatString(number);
    std::cout << formatted << std::endl;
    
    //Incorrect conversion attempt - should use std::to_string
    int num = 123;
    std::string strNum = std::string(num);
    std::cout << ""String representation of number: "" << strNum << std::endl;
    
    return 0;
}",std::string strNum = std::string(num);
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();
    for (int i = 0; i <= len; ++i) {
        std::cout << text[i];
    }
    std::cout << std::endl;
    return 0;
}",i <= len
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area > expected_area + 0.1) {
        std::cout << ""Area is unexpectedly large."" << std::endl;
    } else {
        std::cout << ""Area is within tolerance."" << std::endl;
    }

    return 0;
}",if (area > expected_area + 0.1)
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Default constructed value instead of error handling.
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target value
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrectly attempt to access an element beyond the vector's bounds
    std::cout << ""Element at index out of bounds: "" << numbers[numbers.size()] << std::endl; // Faulty line

    return 0;
}","std::cout << ""Element at index out of bounds: "" << numbers[numbers.size()] << std::endl;"
"#include <array>
#include <numeric>
#include <algorithm>
#include <iostream>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <iostream>
#include <limits>

int main() {
    long long max_val = std::numeric_limits<long long>::max();
    long long result = max_val * 2;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",long long result = max_val * 2;
"#include <iostream>
#include <limits>

int main() {
  long long sum = 0;
  for (int i = 0; i < 1000; ++i) {
    sum += i;
  }

  if (sum > std::numeric_limits<int>::max()) {
    std::cout << ""Overflow detected!"" << std::endl;
    std::cout << sum << std::endl;
  } else {
    std::cout << ""Sum: "" << sum << std::endl;
  }
  return 0;
}",if (sum > std::numeric_limits<int>::max())
"#include <random>
#include <limits>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(0, 100);

    int num_iterations = 1000;
    long long sum = 0;

    for (int i = 0; i < num_iterations; ++i) {
        int random_number = distrib(gen);
        sum += random_number;
    }

    double average = static_cast<double>(sum) / num_iterations;
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",static_cast<double>(sum)
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""hello world"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <fstream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ofstream outfile(filename);
    if (!outfile.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    int sum = 0;
    std::string line;
    std::ifstream infile(filename);

    while (std::getline(infile, line)) {
        try {
            int num = std::stoi(line);  // Potential exception if not a number
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid number format: "" << line << std::endl;
        }
    }

    std::cout << ""Sum of numbers in file: "" << sum << std::endl;

    outfile.close();
    infile.close();
    return 0;
}",int num = std::stoi(line);
"#include <tuple>
#include <cmath>

int main() {
    double x = 2.0;
    double y = 3.0;

    auto [result, err] = std::make_tuple(std::sqrt(x) + std::sqrt(y), 0.0);

    if (err != 0.0) {
        std::cout << ""Error occurred!"" << std::endl;
    } else {
        std::cout << ""Result: "" << result << std::endl;
    }

    return 0;
}","auto [result, err] = std::make_tuple(std::sqrt(x) + std::sqrt(y), 0.0);"
"#include <map>
#include <string>
#include <iostream>

int main() {
  std::map<std::string, int> scores;
  scores[""Alice""] = 85;
  scores[""Bob""] = 92;
  scores[""Charlie""] = 78;

  std::string best_player;
  int highest_score = -1;

  for (const auto& pair : scores) {
    if (pair.second > highest_score) {
      highest_score = pair.second;
      best_player = pair.first;
    }
  }

  std::cout << ""Best player: "" << best_player << "" with score "" << highest_score << std::endl;

  scores.erase(""Bob"");

  std::cout << ""Number of players after removing Bob: "" << scores.size() << std::endl;

  return 0;
}","scores.erase(""Bob"");"
"#include <algorithm>
#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of circle: "" << area << std::endl;

    // Calculate circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of circle: "" << circumference << std::endl;

    //Incorrect calculation of diameter
    double diameter = radius / 2.0;
    std::cout << ""Diameter of circle: "" << diameter << std::endl;

    //Example demonstrating the incorrect implementation
    double r = 2.5;
    double a = M_PI * r * r;
    double c = 2 * M_PI * r;
    double d = r / 2.0; // This is correct, but the previous diameter was also correct 

    std::cout << ""Area (r=2.5): "" << a << std::endl;
    std::cout << ""Circumference (r=2.5): "" << c << std::endl;
    std::cout << ""Diameter (r=2.5): "" << d << std::endl;

    return 0;
}",double diameter = radius / 2.0;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    double circumference = 2 * M_PI * radius; 
    std::cout << ""Circumference: "" << circumference << std::endl;
    double new_radius = area / M_PI;
    std::cout << ""New Radius (calculated from area): "" << new_radius << std::endl;
    double expected_radius = sqrt(area / M_PI);
    std::cout << ""Expected Radius (using sqrt): "" << expected_radius << std::endl;
    if (new_radius == expected_radius) {
        std::cout << ""Calculations are consistent!"" << std::endl;
    } else {
       std::cout << ""Calculations are inconsistent!"" << std::endl;
    }
    return 0;
}",double new_radius = area / M_PI;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) { // Fault: Loop goes out of bounds
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {  // Fault: i <= numbers.size()
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << ""Price: "" << std::fixed << std::setprecision(1) << price << std::endl;
    double taxRate = 0.08;
    double taxAmount = price * taxRate;
    double totalCost = price + taxAmount;
    std::cout << ""Total Cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;
    return 0;
}","std::cout << ""Total Cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;"
"#include <random> 
#include <chrono> 
#include <iostream>

int main() {
    std::chrono::high_resolution_clock::time_point start = std::chrono::high_resolution_clock::now();
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
           sum = sum + num; //Correct
        } else {
           sum = sum - num; //Subtle Fault: Should be sum += num;
        }
    }

    std::chrono::high_resolution_clock::time_point end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> elapsed = end - start;

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Elapsed time: "" << elapsed.count() << "" s"" << std::endl;
    return 0;
}",sum = sum - num;
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    ss >> number;
    if (ss.fail()) {
        std::cerr << ""Conversion failed!"" << std::endl;
        return 1;
    }
    double result = number * 2.0;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",ss >> number;
"#include <numeric>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <queue>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4, 7, 3, 6};
    std::priority_queue<int> pq(data.begin(), data.end());
    std::vector<int> sorted_data;
    while (!pq.empty()) {
        sorted_data.push_back(pq.top());
        pq.pop();
    }
    std::reverse(sorted_data.begin(), sorted_data.end());
    
    for (int i = 0; i < sorted_data.size(); ++i) {
        std::cout << sorted_data[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::reverse(sorted_data.begin(), sorted_data.end());"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    if (!file.is_open())
    {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(file, line)) {
        try {
            sum += std::stoi(line) ; // potential overflow
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << e.what() << '\n';
        } catch (const std::out_of_range& e) {
            std::cerr << ""Out of range: "" << e.what() << '\n';
        }
    }
    file.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += std::stoi(line);
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Loop goes out of bounds
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;

    std::string name = ""Charlie"";
    if (ages.count(name) > 0) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl; 
    } else {
        std::cout << ""Age of "" << name << "" is unknown."" << std::endl;
    }

    ages[name] = 40; //Overwriting a non-existent value. Should check if the key exists before adding.

    std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;

    return 0;
}",ages[name] = 40;
"#include <cmath>
#include <vector>

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    double sum = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += std::sqrt(data[i]);
    }

    double mean = sum / data.size();
    
    double variance = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        variance += (data[i] - mean) * (data[i] + mean); // Fault: Should be data[i] - mean squared.
    }
    variance /= data.size();
    
    double stdDev = std::sqrt(variance);
    
    std::cout << ""Standard Deviation: "" << stdDev << std::endl;
    return 0;
}",variance += (data[i] - mean) * (data[i] + mean);
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << ""Price: "" << std::fixed << std::setprecision(1) << price << std::endl;
    std::cout << ""Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    std::cout << ""Price: "" << std::fixed << std::setprecision(3) << price << std::endl;
    std::cout << ""Price: "" << std::fixed << std::setprecision(4) << price << std::endl;
    std::cout << ""Price: "" << std::fixed << std::setprecision(5) << price << std::endl;

    return 0;
}","std::cout << ""Price: "" << std::fixed << std::setprecision(5) << price << std::endl;"
"#include <ctime>
#include <iomanip>

int main() {
    std::srand(std::time(nullptr));
    int arr[10];
    for (int i = 0; i <= 10; ++i) { // Fault: loop iterates one element too far
        arr[i] = std::rand() % 100;
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",for (int i = 0; i <= 10; ++i)
"#include <random> 
#include <string>
#include <sstream>

std::string generate_random_string(int length) {
    static std::random_device rd;
    static std::mt19937 gen(rd());
    static const char alphanum[] = ""0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
    std::string result;
    result.reserve(length);
    for (int i = 0; i < length; ++i) {
        result += alphanum[gen() % (sizeof(alphanum) - 1)];
    }
    return result;
}

int main() {
    std::string input_string = """";
    int string_length = 10;

    // Generate a random string
    std::string random_string = generate_random_string(string_length);

    // Convert the random string to an integer, potential fault!
    std::stringstream ss(random_string);
    int num;
    ss >> num;

    if (ss.fail()) {
        std::cout << ""Conversion failed!"" << std::endl;
    } else {
        std::cout << ""Converted number: "" << num << std::endl;
    }

    return 0;
}","std::stringstream ss(random_string);
    int num;
    ss >> num;"
"#include <string>
#include <sstream>
#include <iomanip>

int main() {
  std::string input = ""12.34"";
  double value;
  std::stringstream ss(input);
  ss >> value;
  if (ss.fail()) {
    std::cerr << ""Conversion failed!\n"";
    return 1;
  }

  std::cout << std::fixed << std::setprecision(2) << value << std::endl;
  
  double expected = 12.34;
  if (value != expected) {
    std::cout << ""Unexpected value: "" << value << std::endl;
  }

  return 0;
}","if (value != expected) {
    std::cout << ""Unexpected value: "" << value << std::endl;
  }"
"#include <iomanip> 
#include <sstream> 

int main() {
  double value = 1234.5678;
  std::stringstream ss;
  ss << std::fixed << std::setprecision(3) << value; 
  double recovered_value;
  ss >> recovered_value; 

  if (recovered_value != 1234.568) { 
    std::cout << ""Error: Conversion failed!"" << std::endl; 
  } else { 
    std::cout << ""Conversion successful!"" << std::endl; 
  }

  return 0;
}",if (recovered_value != 1234.568)
"#include <deque>
#include <iostream>

int main() {
  std::deque<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly attempt to calculate the average
    double average = sum / numbers.size();
    
    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;
    
    return 0;
}",double average = sum / numbers.size();
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <fstream>
#include <string>
#include <algorithm>

int main() {
    std::ifstream inputFile(""data.txt"");
    std::string line;
    long long sum = 0;

    if (inputFile.is_open()) {
        while (std::getline(inputFile, line)) {
            try {
                long long num = std::stoll(line);
                sum += num;
            } catch (const std::invalid_argument& e) {
                // Ignore lines that are not numbers
            }
        }
        inputFile.close();
        std::cout << ""Sum: "" << sum << std::endl;
    } else {
        std::cerr << ""Unable to open file\n"";
        return 1;
    }
    return 0;
}",long long sum = 0;
"#include <iostream>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> w = z * z;
    
    if (w.real() == 2.0 && w.imag() == 0.0) {
        std::cout << ""w is 2.0 + 0.0i"" << std::endl;
    } else {
        std::cout << ""w is not 2.0 + 0.0i"" << std::endl;
    }
    
    return 0;
}",if (w.real() == 2.0 && w.imag() == 0.0)
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  
  std::cout << ""Area of the circle: "" << area << std::endl;

  // Incorrect calculation - should be 2 * radius instead of radius
  double circumference = M_PI * radius;
  std::cout << ""Circumference of the circle: "" << circumference << std::endl;

  return 0;
}",double circumference = M_PI * radius;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // potential error: David isn't in the map
    std::cout << ""David's age is: "" << age << std::endl;
    return 0;
}",int age = ages[name];
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    int count = 0;
    while (count < 10) {
        int randomNumber = distrib(gen);
        if (randomNumber % 2 == 1) {
            count++;
        }
    }
    std::cout << ""Final count: "" << count << std::endl;
    return 0;
}",if (randomNumber % 2 == 1)
"#include <string>
#include <sstream>

int main() {
  std::string input = ""123.45"";
  std::stringstream ss(input);
  double num;
  ss >> num;
  if (ss.fail()) {
    std::cerr << ""Conversion failed!"" << std::endl;
    return 1;
  }

  double result = num * 2;
  std::cout << ""Result: "" << result << std::endl;
  return 0;
}",  double result = num * 2;
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> myTuple = std::make_tuple(10, 3.14, ""Hello"");

    int intValue = std::get<0>(myTuple);
    double doubleValue = std::get<1>(myTuple);
    std::string stringValue = std::get<2>(myTuple);

    std::cout << ""Integer: "" << intValue << std::endl;
    std::cout << ""Double: "" << doubleValue << std::endl;
    std::cout << ""String: "" << stringValue << std::endl;

    //Incorrectly trying to retrieve a value at index 3, which doesn't exist.
    //This will cause a runtime error.
    int invalidValue = std::get<3>(myTuple);
    std::cout << ""Invalid Value: "" << invalidValue << std::endl;

    return 0;
}",int invalidValue = std::get<3>(myTuple);
"#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> nums = {1, 2, 3, 4, 5};
    int target = 7;

    auto it = std::find(nums.begin(), nums.end(), target);

    if (it != nums.end()) {
        std::cout << ""Found! Index: "" << std::distance(nums.begin(), it) << std::endl;
    } else {
        std::cout << ""Not found!"" << std::endl;
    }

    // Incorrectly decrementing iterator to access previous element
    if (it != nums.begin()) {
        std::cout << ""Previous element: "" << *(--it) << std::endl;
    }
    else {
        std::cout << ""No previous element."" << std::endl;
    }
    
    return 0;
}","if (it != nums.begin()) {
        std::cout << ""Previous element: "" << *(--it) << std::endl;
    }"
"#include <ctime>
#include <iomanip>

int main() {
    std::time_t now = std::time(nullptr);
    std::tm* ltm = std::localtime(&now);

    std::cout << ""Current date and time: "" << std::endl;
    std::cout << std::put_time(ltm, ""%Y-%m-%d %H:%M:%S"") << std::endl;

    // Incorrectly assuming tm_wday is zero-based (Sunday=0, Monday=1, etc.)
    int day_of_week = ltm->tm_wday;
    if (day_of_week == 0) {
        std::cout << ""Today is Sunday."" << std::endl;
    } else {
        std::cout << ""Today is not Sunday."" << std::endl;
    }

    return 0;
}","if (day_of_week == 0) {\n        std::cout << ""Today is Sunday."" << std::endl;\n    } else {\n        std::cout << ""Today is not Sunday."" << std::endl;\n    }"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int target = 3;

    auto it = std::find(data.begin(), data.end(), target);
    if (it != data.end()) {
        data.erase(it);
    }

    //Print the vector contents
    for (int val : data) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;

    return 0;
}",data.erase(it);
"#include <array>
#include <iostream>

int main() {
  std::array<int, 5> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <iostream>
#include <limits>

int main() {
    int max_int = std::numeric_limits<int>::max();
    int increment = 2;
    int result = max_int + increment;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",int result = max_int + increment;
"#include <cmath>
#include <iomanip>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;

  std::cout << ""The area of a circle with radius "" << radius << "" is approximately: "" << std::fixed << std::setprecision(2) << area << std::endl;
  
  double circumference = 2 * M_PI * radius; 

  std::cout << ""The circumference of a circle with radius "" << radius << "" is approximately: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

  double expected_circumference = 31.4159;
  double difference = abs(circumference - expected_circumference);
  
  if (difference > 0.01) {
      std::cout << ""Warning: Circumference calculation may be inaccurate!"" << std::endl;
  }
  return 0;
}",double expected_circumference = 31.4159;
"#include <functional> #include <stdexcept> #include <iostream>

std::function<int(int)> factorial = [&](int n) {
    if (n == 0) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
};

int main() {
    try {
        std::cout << ""Factorial of 5: "" << factorial(5) << std::endl;
        std::cout << ""Factorial of 10: "" << factorial(10) << std::endl;
        std::cout << ""Factorial of -1: "" << factorial(-1) << std::endl; // Fault here
    } catch (const std::exception& e) {
        std::cerr << ""Exception: "" << e.what() << std::endl;
    }
    return 0;
}","std::cout << ""Factorial of -1: "" << factorial(-1) << std::endl;"
"#include <map>
#include <string>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;

    std::string name = ""Charlie"";
    int age = ages[name]; // Fault: Accessing non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl;
    return 0;
}",ages[name];
"#include <string>
#include <sstream>
#include <iomanip>

int main() {
  std::string input = ""12.345"";
  double value;
  std::stringstream ss(input);
  ss >> value;

  if (ss.fail()) {
    std::cerr << ""Conversion failed!"" << std::endl;
    return 1;
  }

  double truncated_value = static_cast<double>(static_cast<int>(value * 100.0));
  std::cout << ""Original value: "" << value << std::endl;
  std::cout << ""Truncated value: "" << truncated_value << std::endl;
  return 0;
}",double truncated_value = static_cast<double>(static_cast<int>(value * 100.0));
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        sum += num;
    }

    // Incorrect calculation of average - integer division
    int average = sum / 10;

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",int average = sum / 10;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of squares of even numbers using std::accumulate
    int sum_of_squares = std::accumulate(numbers.begin(), numbers.end(), 0, [](int sum, int n) {
        if (n % 2 == 0) {
            return sum + (n * n);
        } else {
            return sum;
        }
    });
    
    std::cout << ""Sum of squares of even numbers: "" << sum_of_squares << std::endl;
    
    return 0;
}",return sum + (n * n);
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.end(), 0);
    
    // Incorrectly assuming the sum is positive to take its square root
    double square_root = sqrt(sum);
    std::cout << ""Square root: "" << square_root << std::endl;
    
    return 0;
}",double square_root = sqrt(sum);
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);
    std::sort(arr, arr + n - 1); // Fault: sorts up to n-2 elements, not the entire array

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;

  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << ""Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    double taxRate = 0.075;
    double taxAmount = price * taxRate;
    double totalCost = price + taxAmount;

    std::cout << ""Tax Amount: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    std::cout << ""Total Cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;

    return 0;
}","std::cout << ""Total Cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;"
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size(); //Integer division
    std::cout << ""Average Score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    
    int average = sum / numbers.size();
    
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",int average = sum / numbers.size();
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    // Incorrectly calculating the circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());
  if (reversed_text == ""dlroW ,olleH"") {
    std::cout << ""Reversed string is correct."" << std::endl;
  } else {
    std::cout << ""Reversed string is incorrect."" << std::endl;
  }
  return 0;
}","if (reversed_text == ""dlroW ,olleH"")"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, world!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());
  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }
  return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();
    std::string reversed_text = """";

    for (int i = 0; i <= len; ++i) {
        reversed_text += text[len - i];
    }

    std::cout << ""Original: "" << text << std::endl;
    std::cout << ""Reversed: "" << reversed_text << std::endl;
    return 0;
}",i <= len
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie""};
    
    std::sort(names.begin(), names.end(), [](const std::string& a, const std::string& b) {
        return a.length() < b.length(); //Incorrect sorting: sorts by length, not alphabetically.
    });
    
    for (const std::string& name : names) {
        std::cout << name << std::endl;
    }
    
    return 0;
}",return a.length() < b.length();
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Loop iterates one element too far.
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iomanip> #include <sstream> #include <iostream>

int main() {
    double pi = 3.14159265358979323846;
    std::stringstream ss;
    ss << std::fixed << std::setprecision(15) << pi;
    std::string pi_str = ss.str();

    double restored_pi = std::stod(pi_str);

    if (restored_pi == pi) {
        std::cout << ""Conversion and restoration successful!\n"";
    } else {
        std::cout << ""Conversion or restoration failed!\n"";
    }

    //Intentional Fault:  Using `std::stod` with precision exceeding the representable double range.
    double very_large_num = 1e300; // a large number.
    std::stringstream ss2;
    ss2 << std::fixed << std::setprecision(16) << very_large_num;
    std::string large_num_str = ss2.str();
    double restored_large_num = std::stod(large_num_str);
    std::cout << ""Restored Large Number: "" << restored_large_num << std::endl;

    return 0;
}","std::stringstream ss2;
    ss2 << std::fixed << std::setprecision(16) << very_large_num;
    std::string large_num_str = ss2.str();
    double restored_large_num = std::stod(large_num_str);"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1, excluding the last element

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());

    std::cout << ""Sorted in descending order: "";
    for (size_t i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << (i == numbers.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;

    int sum = 0;
    for (int number : numbers) {
        sum += number;
    }

    std::cout << ""Sum of elements: "" << sum << std::endl;

    // Incorrect calculation of average
    double average = static_cast<double>(sum) / numbers.size() - 1;
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = static_cast<double>(sum) / numbers.size() - 1;
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseString(std::string str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string input_string = ""hello"";
    std::string reversed_string = reverseString(input_string);
    std::cout << ""Original: "" << input_string << std::endl;
    std::cout << ""Reversed: "" << reversed_string << std::endl;
    return 0;
}","std::reverse(reversed_str.begin(), reversed_str.end());"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect!\n"";
    } else {
        std::cout << ""Area calculation is correct!\n"";
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message;
    return 0;
}",std::cout << message;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    
    if (abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }
    
    double perimeter = 2 * M_PI * radius;
    std::cout << ""Perimeter: "" << perimeter << std::endl;
    return 0;
}",if (abs(area - expected_area) > 0.0001)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    double area = M_PI * radius * radius;

    std::cout << ""Radius: "" << radius << std::endl;
    std::cout << ""Circumference: "" << circumference << std::endl;
    std::cout << ""Area: "" << area << std::endl;
    
    double expected_area = 3.14159 * radius * radius; 
    if (abs(area - expected_area) > 1e-6) {
        std::cout << ""Error: Area calculation is incorrect!"" << std::endl;
    }
    
    return 0;
}",double expected_area = 3.14159 * radius * radius;
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl; // Intended to print ""Hello"" but prints ""Hello,""
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    int length = message.size();
    std::cout << ""The length of the message is: "" << length << std::endl;

    // Attempt to access an out-of-bounds character
    char char_at_index = message[length]; 
    std::cout << ""Character at index "" << length << "": "" << char_at_index << std::endl;

    return 0;
}",char char_at_index = message[length];
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    std::string upperMessage = message;

    for (char &c : upperMessage) {
        c = c - 32; // Incorrectly attempts to convert to uppercase
    }

    std::cout << upperMessage << std::endl;
    return 0;
}",c = c - 32;
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::reverse(str.begin(), str.end());
    if (str == ""olleh"") {
        std::cout << ""Correct!"" << std::endl;
    } else {
        std::cout << ""Incorrect!"" << std::endl;
    }
    return 0;
}","if (str == ""olleh"")"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int num : nums) {
        if (num > target) {
            result.push_back(num);
        }
    }

    if (result.empty()) {
        std::cout << ""No numbers greater than target found."" << std::endl;
    } else {
        std::cout << ""Numbers greater than target: "";
        for (int i = 0; i < result.size(); ++i) {
            std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }

    return 0;
}",if (num > target) {
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1 instead of n

    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",arr + n - 1
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;

    std::string fruit = ""orange"";
    int count = counts[fruit];  // Potential issue: default value initialization
    
    std::cout << ""The count of "" << fruit << "" is: "" << count << std::endl;
    
    return 0;
}",int count = counts[fruit];
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 2;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // Should default to 0 if not found, but doesn't
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

    return 0;
}",int count = counts[fruit];
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string keyword = ""world"";
    size_t pos = text.find(keyword, 10); // Search starts at index 10
    if (pos != std::string::npos) {
        std::cout << ""Keyword found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Keyword not found."" << std::endl;
    }
    return 0;
}","text.find(keyword, 10)"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    
    // Incorrectly calculating circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;

    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation correct!"" << std::endl;
    }

    return 0;
}",double expected_area = 78.5398;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    
    // Calculate the sum of squares
    int sum_of_squares = 0;
    for (int i = 0; i < data.size(); ++i) {
        sum_of_squares += data[i] * data[i];
    }

    // Incorrectly calculate square root. Should be sqrt(sum_of_squares)
    int square_root = sum_of_squares / 5; 

    std::cout << ""Square root: "" << square_root << std::endl;
    
    return 0;
}",int square_root = sum_of_squares / 5;
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (area == expected_area) {
    std::cout << ""Area is correct."" << std::endl;
  } else {
    std::cout << ""Area is incorrect. Calculated: "" << area << std::endl;
  }
  return 0;
}",if (area == expected_area)
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string pattern = ""world!"";

    size_t pos = text.find(pattern, 1); // Start searching from index 1.

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }
    
    return 0;
}","text.find(pattern, 1)"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; }); // Incorrect sort order

    std::cout << ""Sorted numbers (descending): "";
    for (int number : numbers) {
        std::cout << number << "" "";
    }
    std::cout << std::endl;

    return 0;
}","[](int a, int b) { return a > b; }"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {  // Off-by-one error
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int davidScore = scores[name]; // Should initialize with a default value

    std::cout << ""David's score: "" << davidScore << std::endl;
    return 0;
}",int davidScore = scores[name];
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit];
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;
    return 0;
}",int count = counts[fruit];
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line);
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << e.what() << '\n';
            // Handle non-numeric lines by ignoring them
        } catch (const std::out_of_range& e) {
            std::cerr << ""Out of range: "" << e.what() << '\n';
        }
    }

    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int num = std::stoi(line);
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""Area: "" << area << std::endl;
    
    //Calculate circumference
    double circumference = 2 * M_PI * radius;
    
    //Truncate circumference to integer for formatting (Fault)
    int intCircumference = static_cast<int>(circumference);
    
    std::cout << ""Circumference: "" << intCircumference << std::endl;
    
    return 0;
}",int intCircumference = static_cast<int>(circumference);
"#include <string>
#include <sstream>
#include <iostream>

std::string formatString(int num) {
    std::stringstream ss;
    ss << num;
    return ss.str();
}

int main() {
    int number = 123;
    std::string formatted = formatString(number);
    std::string combined = ""Result: "" + formatted + ""!\n"";
    std::cout << combined;
    return 0;
}","std::string combined = ""Result: "" + formatted + ""!\n"";"
"#include <random>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the sum of even numbers
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 1) { // Fault: Should be == 0 for even numbers
            sum += numbers[i];
        }
    }

    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}",if (numbers[i] % 2 == 1)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int num : nums) {
        if (target - num in result) { // Fault here
            result.push_back(num);
        }
    }

    if (result.size() == 2) {
        std::cout << ""Pair found!"" << std::endl;
    } else {
        std::cout << ""Pair not found."" << std::endl;
    }

    return 0;
}",if (target - num in result)
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int length = text.length();
    std::string reversed_text = """";
    for (int i = length - 1; i >= 0; i--) {
        reversed_text += text[i];
    }
    if (reversed_text == text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}","if (reversed_text == text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }"
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
  
  // Sort the numbers in ascending order
  std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a < b - 1; }); // Intentional Error
  
  // Print the sorted numbers
  for (int number : numbers) {
    std::cout << number << "" "";
  }
  std::cout << std::endl;
  
  return 0;
}",return a < b - 1;
"#include <iomanip> 
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0); 
    double angle = std::arg(z);
    std::cout << std::fixed << std::setprecision(6) << angle << std::endl; 
    return 0;
}",double angle = std::arg(z);
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(5);
    q.push(10);
    q.push(15);

    int sum = 0;
    while (!q.empty()) {
        int current = q.front();
        q.pop();
        sum += current;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int sum = 0;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 95;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.begin() + 3, 0); //Fault here
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",numbers.begin() + 3
"#include <fstream>
#include <iostream>
#include <string>

int main() {
  std::ifstream inputFile(""data.txt"");
  if (!inputFile.is_open()) {
    std::cerr << ""Error opening file!\n"";
    return 1;
  }

  std::string line;
  int sum = 0;
  while (std::getline(inputFile, line)) {
    try {
      int num = std::stoi(line); //Potential fault: No error handling for non-numeric input
      sum += num;
    } catch (const std::invalid_argument& e) {
      std::cerr << ""Invalid argument: "" << e.what() << '\n';
      return 1;
    }
  }

  inputFile.close();
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",int num = std::stoi(line);
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 4, 0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers.begin() + 4
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    if (str == reversed_str) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == reversed_str)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n < target; });

    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return n < target; 
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> ages;
    ages[25] = ""Alice"";
    ages[30] = ""Bob"";
    ages[25] = ""Charlie""; // Overwrites Alice's name
    std::cout << ages[25] << std::endl;
    return 0;
}","ages[25] = ""Charlie"";"
"#include <random>
#include <ctime>
#include <limits>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int count = 0;
    while (true) {
        int randomNumber = distrib(gen);
        if (randomNumber % 2 == 0) {
            count++;
        } else {
          // Subtle fault: Incrementing count even when it's odd
            count++;
        }
        if (count > 10) {
            break;
        }
    }

    std::cout << ""Number of even numbers encountered: "" << count << std::endl;
    return 0;
}",count++;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseString(const std::string& str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string input_string = ""hello"";
    std::string reversed_string = reverseString(input_string);
    std::cout << ""Original: "" << input_string << std::endl;
    std::cout << ""Reversed: "" << reversed_string << std::endl;
    
    std::string another_string = ""world"";
    std::string reversed_another = reverseString(another_string);
    std::cout << ""Original: "" << another_string << std::endl;
    std::cout << ""Reversed: "" << reversed_another << std::endl;
    
    return 0;
}","std::cout << ""Reversed: "" << reversed_string << std::endl;"
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    std::string upperMessage = message;

    for (char &c : upperMessage) {
        c = c - 1; // Intended to convert to uppercase but subtracts 1 instead
    }

    std::cout << upperMessage << std::endl;
    return 0;
}",c = c - 1;
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""cherry""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // Default construction instead of lookup
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

    return 0;
}",int count = counts[fruit];
"#include <iostream>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the product of all numbers in the vector
    int product = 1;
    for (int i = 0; i <= numbers.size(); ++i) {
        product *= numbers[i];
    }
    
    std::cout << ""Product: "" << product << std::endl;
    return 0;
}",i <= numbers.size()
"#include <string>
#include <sstream>

int main() {
  std::string input = ""123.45"";
  std::stringstream ss(input);
  double number;
  if (ss >> number) {
    std::cout << ""Conversion successful: "" << number << std::endl;
  } else {
    std::cout << ""Conversion failed."" << std::endl;
  }
  
  std::string input2 = ""abc"";
  std::stringstream ss2(input2);
  double number2;
  ss2 >> number2; 
  std::cout << ""Number2 value: "" << number2 << std::endl; // potential issue: using uninitialized number2
  return 0;
}","  std::cout << ""Number2 value: "" << number2 << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area: "" << area << std::endl;
  
  // Calculate the circumference incorrectly
  double circumference = 2 * M_PI * radius - 1.0; 
  std::cout << ""Circumference: "" << circumference << std::endl;
  
  return 0;
}",double circumference = 2 * M_PI * radius - 1.0;
"#include <algorithm>
#include <iostream>
#include <string>
#include <vector>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie""};
    std::string target = ""Bob"";

    auto it = std::find(names.begin(), names.end(), target);

    if (it != names.end()) {
        std::cout << ""Found: "" << *it << std::endl;
    } else {
        std::cout << ""Not found"" << std::endl;
    }

    // Incorrectly trying to modify the vector element through the iterator
    *it = ""Robert""; 

    std::cout << ""Modified vector: "";
    for (const auto& name : names) {
        std::cout << name << "" "";
    }
    std::cout << std::endl;

    return 0;
}","*it = ""Robert"";"
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message;
    return 0;
}","std::string message = ""Hello, world!\n"";"
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    
    int expected_sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    if (sum != expected_sum) {
        std::cout << ""Error: Sum calculated incorrectly!\n"";
    } else {
        std::cout << ""Sum calculated correctly!\n"";
    }
    
    return 0;
}",int sum = 0;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    
    int expected_sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    if (sum != expected_sum) {
        std::cout << ""Sum mismatch! Expected: "" << expected_sum << "", Actual: "" << sum << std::endl;
    } else {
        std::cout << ""Sum is correct!"" << std::endl;
    }
    
    std::cout << ""The sum is: "" << sum << std::endl;
    return 0;
}",int sum = 0;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of even numbers
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0) {
            sum += numbers[i];
        }
    }
    
    // Incorrectly multiplying the sum by 2 instead of returning it
    std::cout << sum * 2 << std::endl;
    return 0;
}",std::cout << sum * 2 << std::endl;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    int total = 0;
    for (auto const& [fruit, count] : counts) {
        total += count;
    }

    std::cout << ""Total fruit: "" << total << std::endl;

    if (counts[""grape""] > 0) {
        std::cout << ""Grapes are in stock."" << std::endl;
    } else {
        std::cout << ""Grapes are out of stock."" << std::endl;
    }

    return 0;
}","counts[""grape""] > 0"
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30; 
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    int total_age = 0;
    for (auto const& [name, age] : ages) {
        total_age += age;
    }

    std::cout << ""Average age: "" << total_age / ages.size() << std::endl; 
    return 0;
}","std::cout << ""Average age: "" << total_age / ages.size() << std::endl;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    
    // Calculate the sum of squares of even numbers
    int sum_of_squares = 0;
    for (int x : data) {
        if (x % 2 == 0) {
            sum_of_squares += x * x;
        }
    }
    
    // Incorrectly assuming 'data' always has an even number.
    // If no even numbers exist, sum_of_squares remains 0, leading to potential errors
    
    if(sum_of_squares == 0) {
        sum_of_squares = -1;
    }
    
    std::cout << ""Sum of squares of even numbers: "" << sum_of_squares << std::endl;
    
    return 0;
}","if(sum_of_squares == 0) {
        sum_of_squares = -1;
    }"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius; // Using a fixed value of pi
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1, causing the last element to be omitted.

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
  int arr[] = {5, 2, 8, 1, 9};
  int n = sizeof(arr) / sizeof(arr[0]);

  std::sort(arr, arr + n - 1); // Faulty line

  std::cout << ""Sorted array: "";
  for (int i = 0; i < n; ++i) {
    std::cout << arr[i] << "" "";
  }
  std::cout << std::endl;

  return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);
    int max_val = arr[0];

    for (int i = 1; i <= n; ++i) { // Fault: Loop goes out of bounds
        if (arr[i] > max_val) {
            max_val = arr[i];
        }
    }

    std::cout << ""Maximum value: "" << max_val << std::endl;
    return 0;
}",i <= n
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: sorting only up to n-1, leaving the last element unsorted

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int i = 0; i < data.size(); ++i) {
        if (data[i] > target) {
            result.push_back(data[i]);
        }
    }

    if (result.empty()) {
        std::cout << ""No elements greater than target found."" << std::endl;
    } else {
        std::cout << ""Elements greater than target: "";
        for (int i = 0; i < result.size(); ++i) {
            std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }

    return 0;
}",if (data[i] > target) {
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area > expected_area + 0.1) {
        std::cout << ""Area is too large: "" << area << std::endl;
    } else if (area < expected_area - 0.1) {
        std::cout << ""Area is too small: "" << area << std::endl;
    } else {
        std::cout << ""Area is correct: "" << area << std::endl;
    }

    return 0;
}",area > expected_area + 0.1
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::sort(data.begin(), data.end(), [](int a, int b) { return a > b; });
    
    for (int i = 0; i < data.size(); ++i) {
        std::cout << data[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return a > b;
"#include <string>
#include <sstream>

std::string formatString(int num) {
    std::stringstream ss;
    ss << num;
    return ss.str();
}

int main() {
    int value = 123;
    std::string strValue = formatString(value);
    int parsedValue = std::stoi(strValue, nullptr, 2); //Base 2 is incorrect for a decimal integer.
    std::cout << ""Parsed Value: "" << parsedValue << std::endl;
    return 0;
}","std::stoi(strValue, nullptr, 2)"
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string best_player;
    int highest_score = -1;

    for (const auto& pair : scores) {
        if (pair.second > highest_score) {
            highest_score = pair.second;
            best_player = pair.first;
        }
    }

    std::cout << ""Best player: "" << best_player << "" with score "" << highest_score << std::endl;

    scores.erase(""Alice""); // Erase Alice before calculating average, affecting the result

    int total_score = 0;
    int num_players = 0;
    for (const auto& pair : scores) {
        total_score += pair.second;
        num_players++;
    }

    double average_score = (num_players > 0) ? (double)total_score / num_players : 0.0;

    std::cout << ""Average score: "" << average_score << std::endl;

    return 0;
}","scores.erase(""Alice"");"
"#include <iostream>
#include <unordered_map>

int main() {
  std::unordered_map<std::string, int> counts;
  counts[""apple""] = 5;
  counts[""banana""] = 3;
  counts[""cherry""] = 7;

  std::string fruit = ""grape"";
  int count = counts[fruit];
  std::cout << ""Count of "" << fruit << "": "" << count << std::endl; // Should be zero, but defaults to zero

  return 0;
}",int count = counts[fruit];
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.count(name) > 0) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "" not found."" << std::endl;
    }

    return 0;
}",if (ages.count(name) > 0)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly calculating the average
    double average = sum / numbers.size();
    
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = sum / numbers.size();
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) == ages.end()) {
      ages[name] = 20; // Correct behavior if David doesn't exist
    }

    std::cout << ""David's age: "" << ages[name] << std::endl;
    return 0;
}",ages[name] = 20;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <string>
#include <sstream>
#include <vector>

std::string format_vector(const std::vector<int>& data) {
    std::stringstream ss;
    ss << ""["";
    for (size_t i = 0; i < data.size(); ++i) {
        ss << data[i];
        if (i < data.size() - 1) {
            ss << "", "";
        }
    }
    ss << ""]"";
    return ss.str();
}

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::string formatted_string = format_vector(numbers);
    std::cout << formatted_string << std::endl;

    std::vector<int> empty_vector;
    std::string empty_formatted = format_vector(empty_vector);
    std::cout << empty_formatted << std::endl;
    
    std::vector<int> single_element = {7};
    std::string single_formatted = format_vector(single_element);
    std::cout << single_formatted << std::endl;

    return 0;
}",if (i < data.size() - 1) {
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(even_numbers), [](int n){ return n % 2 != 0; });

    int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);
    
    //The next line is where the fault is, it should be even_numbers.size() -1
    //To avoid indexing out of bounds.
    for (int i = 0; i <= even_numbers.size(); ++i) {
        std::cout << even_numbers[i] << "" "";
    }
    std::cout << std::endl;
    std::cout << ""Sum of odd numbers: "" << sum << std::endl;
    return 0;
}",i <= even_numbers.size()
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    int sum = 0;
    for (int i = 0; i <= n; ++i) {
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= n; ++i) {
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // This line is faulty - default construction of int
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;
    return 0;
}",int count = counts[fruit];
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distrib(gen);
        if (randomNumber % 2 == 0) {
            sum += randomNumber;
        } else {
           sum = sum;
        }
    }

    std::cout << ""Sum of even random numbers: "" << sum << std::endl;
    return 0;
}",sum = sum;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Potential issue: accessing non-existent key
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",ages[name]
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    for (int num : numbers) {
        if (num % 2 == 0) {
            even_numbers.push_back(num);
        }
    }

    // Incorrect size calculation. Should be even_numbers.size()
    std::cout << ""Number of even numbers: "" << numbers.size() << std::endl;

    return 0;
}","std::cout << ""Number of even numbers: "" << numbers.size() << std::endl;"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    
    // Sort the vector in descending order
    std::sort(data.begin(), data.end(), std::greater<int>());

    //Print the second largest element.
    if (data.size() < 2) {
        std::cout << ""Not enough elements to find the second largest."" << std::endl;
    } else {
        std::cout << data[1] << std::endl; // Accessing out of bounds, second largest
    }

    return 0;
}",std::cout << data[1] << std::endl;
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <queue>
#include <vector>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    std::vector<int> values;
    while (!q.empty()) {
        values.push_back(q.front());
        q.pop();
    }

    for (size_t i = 0; i < values.size(); ++i) {
        if (i == values.size() - 1) {
            std::cout << values[i] << std::endl;
        } else {
            std::cout << values[i] << "" "";
        }
    }
    return 0;
}",if (i == values.size() - 1)
"#include <iostream>
#include <limits>

int main() {
    long long max_value = std::numeric_limits<long long>::max();
    long long increment = 2;
    long long result = max_value + increment;
    std::cout << ""Max value plus increment: "" << result << std::endl;
    return 0;
}",long long result = max_value + increment;
"#include <random>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average of the numbers
    double sum = 0.0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    double average = sum / numbers.size();

    // Find the numbers greater than the average
    std::vector<int> greater_than_average;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] > average)
            greater_than_average.push_back(numbers[i]);
    }

    std::cout << ""Numbers greater than average: "";
    for (int i = 0; i < greater_than_average.size(); ++i) {
        std::cout << greater_than_average[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","if (numbers[i] > average)
            greater_than_average.push_back(numbers[i]);"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <queue>
#include <vector>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    std::vector<int> v;
    while (!q.empty()) {
        v.push_back(q.front());
        q.pop();
    }

    // The bug is that the loop condition should check if q.size() > 0 
    // instead of !q.empty() as the queue might not be empty, but its front element can be invalid.
    // It's a subtle bug, and q.empty() might give false positives in some cases

    for (int i = 0; i < v.size(); ++i) {
        std::cout << v[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",while (!q.empty())
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;

  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <fstream>
#include <iostream>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    int number;
    while (inputFile >> number) {
        if (number % 2 != 0) {
            std::cout << number * 2 << std::endl; // Should be number - 1
        } else {
            std::cout << number / 2 << std::endl;
        }
    }

    inputFile.close();
    return 0;
}",std::cout << number * 2 << std::endl;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""The area of a circle with radius "" << radius << "" is approximately: "" << area << std::endl;
    
    // Incorrect calculation of circumference
    double circumference = 2 * M_PI * radius - 1.0;
    
    std::cout << ""The circumference is approximately: "" << circumference << std::endl;

    return 0;
}",double circumference = 2 * M_PI * radius - 1.0;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    // Incorrect initialization of sum. Should be 0.0 for floating-point accuracy
    // when dealing with floating-point numbers in the vector.
    double average = sum / numbers.size();
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}","int sum = std::accumulate(numbers.begin(), numbers.end(), 0);"
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (int i = 1; i <= 3; ++i) {
        if (myMap.find(i) != myMap.end() && i == 4) {
            std::cout << myMap[i] << std::endl;
        }
        else {
            std::cout << ""Key not found or condition not met"" << std::endl;
        }
    }

    return 0;
}",i == 4
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    std::cout << ""Total score: "" << total_score / 2 << std::endl; // Integer division causing incorrect result
    return 0;
}",total_score / 2
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";

    int key = 3;
    std::string value = myMap[key]; // Accessing a non-existent key
    std::cout << ""Value for key "" << key << "": "" << value << std::endl;

    return 0;
}",std::string value = myMap[key];
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""cherry""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit]; //Fault: Accessing non-existent key returns default value of 0, not an error.
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

    return 0;
}",int count = counts[fruit];
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Calculate the average (incorrectly)
    double average = sum / numbers.size(); 
    
    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = sum / numbers.size();
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::high_resolution_clock::time_point start_time = std::chrono::high_resolution_clock::now();
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        sum += distrib(gen);
    }

    std::chrono::high_resolution_clock::time_point end_time = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end_time - start_time);

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Time taken: "" << duration.count() << "" microseconds"" << std::endl;
    return 0;
}","std::uniform_int_distribution<> distrib(1, 100);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;
    
    std::vector<int> result;
    
    for (int i = 0; i < numbers.size(); ++i) {
        for (int j = i + 1; j < numbers.size(); ++j) {
            if (numbers[i] + numbers[j] == target) {
                result.push_back(numbers[i]);
                result.push_back(numbers[j]);
                break;
            }
        }
    }
    
    if (result.empty()) {
        std::cout << ""No pair found!"" << std::endl;
    } else {
        std::cout << ""Pair found: {"" << result[0] << "", "" << result[1] << ""}"" << std::endl;
    }

    return 0;
}","if (numbers[i] + numbers[j] == target) {
                result.push_back(numbers[i]);
                result.push_back(numbers[j]);
                break;
            }
"
"#include <array>
#include <numeric>
#include <iostream>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {  // Faulty loop condition
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    //Incorrect comparison, should be > 0 for positive area
    if (area <= 0) {
        std::cout << ""Error: Area is non-positive."" << std::endl;
    } else {
        std::cout << ""Area is positive."" << std::endl;
    }

    return 0;
}",if (area <= 0)
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World! This is a test."";
  std::string pattern = ""world"";

  // Convert both strings to lowercase for case-insensitive search
  std::transform(text.begin(), text.end(), text.begin(), ::tolower);
  std::transform(pattern.begin(), pattern.end(), pattern.begin(), ::tolower);

  size_t pos = text.find(pattern, 0);
  if (pos != std::string::npos) {
    std::cout << ""Pattern found at position: "" << pos << std::endl;
  } else {
    std::cout << ""Pattern not found."" << std::endl;
  }

  return 0;
}","std::transform(text.begin(), text.end(), text.begin(), ::tolower);"
"#include <ctime>
#include <numeric>

int main() {
    std::time_t now = std::time(nullptr);
    int seed = static_cast<int>(now);
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        sum += distribution(generator);
    }

    if (sum > 500) {
        std::cout << ""The sum is greater than 500."" << std::endl;
    } else {
        std::cout << ""The sum is not greater than 500."" << std::endl;
    }

    return 0;
}",if (sum > 500)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> squares(data.size());
    
    std::transform(data.begin(), data.end(), squares.begin(), [](int x){ return x * x; });
    
    // Incorrect calculation of sum.  Should be std::accumulate(squares.begin(), squares.end(), 0);
    int sum = 0; 
    for (size_t i = 0; i < squares.size() - 1; ++i) {
        sum += squares[i];
    }
    
    std::cout << ""Sum of squares: "" << sum << std::endl;
    return 0;
}",for (size_t i = 0; i < squares.size() - 1; ++i)
"#include <numeric>
#include <functional>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    // Calculate the product of all numbers
    std::accumulate(numbers.begin(), numbers.end(), sum, std::plus<int>());

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","std::accumulate(numbers.begin(), numbers.end(), sum, std::plus<int>())"
"#include <iostream>
#include <set>

int main() {
    std::set<int> numbers = {1, 2, 3, 4, 5};
    
    for (int num : numbers) {
        if (num == 3) {
            break;
        } else {
            numbers.insert(num * 2);
        }
    }
    
    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",numbers.insert(num * 2);
"#include <tuple>
#include <iostream>

int main() {
  std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""hello"");
  int int_val = std::get<0>(data);
  double double_val = std::get<1>(data);
  std::string string_val = std::get<2>(data);

  std::cout << ""Integer: "" << int_val << std::endl;
  std::cout << ""Double: "" << double_val << std::endl;
  std::cout << ""String: "" << string_val << std::endl;

  // Attempting to access an index that doesn't exist
  // The index should be between 0 and 2. Accessing index 3 will result in undefined behavior.
  int invalid_index_val = std::get<3>(data); 
  std::cout << ""Invalid Index: "" << invalid_index_val << std::endl;

  return 0;
}",int invalid_index_val = std::get<3>(data);
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""cherry""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // Should be 0, but may be garbage.
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

    return 0;
}",int count = counts[fruit];
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ofstream outfile(filename);
    if (outfile.is_open()) {
        for (int i = 0; i < 10; ++i) {
            outfile << i * 2 << std::endl; // Bug: Incorrect calculation
        }
        outfile.close();
    } else {
        std::cerr << ""Unable to open file!"" << std::endl;
        return 1;
    }

    std::ifstream infile(filename);
    std::string line;
    if (infile.is_open()) {
        int sum = 0;
        while (std::getline(infile, line)) {
            sum += std::stoi(line);
        }
        std::cout << ""Sum of numbers in file: "" << sum << std::endl;
        infile.close();
    } else {
        std::cerr << ""Unable to open file for reading!"" << std::endl;
        return 1;
    }

    return 0;
}",outfile << i * 2 << std::endl;
"#include <algorithm>
#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (const auto& pair : scores) {
        total_score += pair.second;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <array>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int target = 7;
  auto it = std::find(data.begin(), data.end(), target);

  if (it != data.end()) {
    std::cout << ""Found: "" << *it << std::endl;
  } else {
    std::cout << ""Not found"" << std::endl;
  }

  return 0;
}",int target = 7;
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area: "" << area << std::endl;

  double circumference = 2 * M_PI * radius;
  std::cout << ""Circumference: "" << circumference << std::endl;

  double new_radius = area / M_PI;
  double expected_radius = sqrt(new_radius);

  if (abs(new_radius - expected_radius * expected_radius) > 0.0001) {
    std::cout << ""Radius calculation mismatch detected!"" << std::endl;
  }
  else {
    std::cout << ""Radius calculation is correct.""
  }
  return 0;
}",if (abs(new_radius - expected_radius * expected_radius) > 0.0001)
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cout << ""Invalid input"" << std::endl;
        return 1;
    }
    
    double result = num * 2;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",if (ss.fail())
"#include <vector>
#include <random>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(0, numbers.size() - 1);

    int index = distrib(gen);
    int value = numbers[index];
    numbers.erase(numbers.begin() + index);
    
    // Incorrect: Accessing the vector after erasing the element at 'index'.
    std::cout << ""Value at index: "" << value << std::endl;
    std::cout << ""Value after erase: "" << numbers[index] << std::endl; // Potential out-of-bounds access

    return 0;
}","std::cout << ""Value after erase: "" << numbers[index] << std::endl;"
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    int count = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distrib(gen);
        if (randomNumber % 2 == 0) {
            count++;
        }
    }

    std::cout << ""Number of even numbers: "" << count << std::endl;
    return 0;
}","std::uniform_int_distribution<> distrib{1, 100};"
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};

  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <iostream>
#include <queue>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    int sum = 0;
    while (!q.empty()) {
        int val = q.front();
        q.pop();
        sum += val;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","std::cout << ""Sum: "" << sum << std::endl;"
"#include <queue>
#include <vector>

int main() {
    std::queue<int> q;
    std::vector<int> nums = {1, 2, 3, 4, 5};

    for (int num : nums) {
        q.push(num);
    }

    int sum = 0;
    while (!q.empty()) {
        int current = q.front();
        q.pop();
        sum += current;
    }

    // Incorrectly decrementing 'sum' by 1. This introduces a subtle error.
    sum--;

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum--;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Potential fault: Accessing non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <tuple>
#include <iostream>

int main() {
  std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""hello"");
  int integer_value = std::get<0>(data);
  double double_value = std::get<1>(data);
  std::string string_value = std::get<2>(data);

  std::cout << ""Integer: "" << integer_value << std::endl;
  std::cout << ""Double: "" << double_value << std::endl;
  std::cout << ""String: "" << string_value << std::endl;

  // Incorrectly attempting to access element at index 3 which does not exist
  // This will cause a runtime error.
  int invalid_value = std::get<3>(data);
  std::cout << ""Invalid: "" << invalid_value << std::endl;

  return 0;
}",int invalid_value = std::get<3>(data);
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = std::accumulate(data.begin(), data.end(), 0);
  
  // Incorrect check: Using sum instead of data.size()
  if (sum > data.size()) {
    std::cout << ""Sum is greater than the size of the vector."" << std::endl;
  } else {
    std::cout << ""Sum is not greater than the size of the vector."" << std::endl;
  }
  
  return 0;
}",if (sum > data.size())
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            sum += std::stoi(line) * 2;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << e.what() << '\n';
        } catch (const std::out_of_range& e) {
            std::cerr << ""Out of range: "" << e.what() << '\n';
        }
    }

    inputFile.close();

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += std::stoi(line) * 2;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    double perimeter = 2 * M_PI * radius;
    std::cout << ""Perimeter: "" << perimeter << std::endl;

    // Incorrect calculation of circumference (should be 2 * pi * radius)
    double circumference = M_PI + radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    return 0;
}",double circumference = M_PI + radius;
"#include <string>
#include <algorithm>

int main() {
  std::string str = ""hello world"";
  std::sort(str.begin(), str.end());
  if (str == "" worldhello"") {
    std::cout << ""Sorted correctly!"" << std::endl;
  } else {
    std::cout << ""Sorting failed."" << std::endl;
  }
  return 0;
}","if (str == "" worldhello"")"
"#include <chrono>
#include <thread>
#include <mutex>
#include <iostream>

std::mutex mtx;

void worker(int id) {
    for (int i = 0; i < 10; ++i) {
        std::lock_guard<std::mutex> lock(mtx);
        std::cout << ""Worker "" << id << "": "" << i << std::endl;
        std::this_thread::sleep_for(std::chrono::milliseconds(50));
    }
}

int main() {
    std::thread t1(worker, 1);
    std::thread t2(worker, 2);

    t1.join();
    t2.join();

    return 0;
}","std::cout << ""Worker "" << id << "": "" << i << std::endl;"
"#include <random>
#include <vector>
#include <numeric>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 10);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the product of all elements in the vector.
    int product = 1;
    for (int i = 0; i <= numbers.size(); ++i) {
        product *= numbers[i];
    }

    std::cout << ""Product: "" << product << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <limits>
#include <iostream>

int main() {
    int max_int = std::numeric_limits<int>::max();
    int result = max_int + 1;
    std::cout << ""Result: "" << result << std::endl; 
    return 0;
}",int result = max_int + 1;
"#include <iostream>
#include <queue>

int main() {
    std::priority_queue<int, std::vector<int>, std::greater<int>> pq;
    pq.push(5);
    pq.push(2);
    pq.push(8);

    while (!pq.empty()) {
        std::cout << pq.top() << "" "";
        pq.pop();
    }
    std::cout << std::endl;

    return 0;
}",std::greater<int>
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;

  for (size_t i = 0; i <= data.size(); ++i) { // Fault: Loop goes out of bounds
    sum += data[i];
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <tuple>
#include <algorithm>

int main() {
    std::tuple<int, double, std::string> myTuple(1, 2.5, ""hello"");

    auto& [first, second, third] = myTuple;
    
    if (first > 1) {
        second = second * 2.0;
    } else {
        second = second / 2.0;
    }
    
    std::cout << ""First: "" << first << std::endl;
    std::cout << ""Second: "" << second << std::endl;
    std::cout << ""Third: "" << third << std::endl;

    return 0;
}","else {
        second = second / 2.0;
    }"
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <map>
#include <iostream>

int main() {
  std::map<int, std::string> myMap;
  myMap[1] = ""one"";
  myMap[2] = ""two"";
  myMap[3] = ""three"";

  for (auto it = myMap.begin(); it != myMap.end(); ++it) {
    if (it->first == 2) {
      it = myMap.erase(it);
    }
  }

  for (const auto& pair : myMap) {
    std::cout << pair.first << "": "" << pair.second << std::endl;
  }

  return 0;
}",it = myMap.erase(it);
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // Calculate the sum of even numbers
    int sum_of_evens = std::accumulate(numbers.begin(), numbers.end(), 0, [](int acc, int n) { return (n % 2 == 0) ? acc - n : acc; });

    // Output the sum
    //std::cout << ""Sum of even numbers: "" << sum_of_evens << std::endl;
    return 0;
}","[](int acc, int n) { return (n % 2 == 0) ? acc - n : acc; }"
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::reverse(str.begin(), str.end());
    if (str == ""olleh"") {
        std::cout << ""Correct!"" << std::endl;
    } else {
        std::cout << ""Incorrect!"" << std::endl;
    }
    return 0;
}","if (str == ""olleh"")"
"#include <numeric>
#include <functional>
#include <vector>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0, [](int a, int b) { return a - b; });
  
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}","[](int a, int b) { return a - b; }"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    
    if (area == expected_area) {
        std::cout << ""Area is correct."" << std::endl;
    } else {
        std::cout << ""Area is incorrect. Calculated: "" << area << std::endl;
    }
    
    return 0;
}",if (area == expected_area)
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Subtle off-by-one error
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iomanip> 
#include <sstream> 
#include <complex> 

int main() {
    std::complex<double> z(1.0, 1.0); 
    std::stringstream ss;
    ss << std::fixed << std::setprecision(10) << z; 
    std::string complex_string = ss.str();

    double real_part = z.real();
    double imag_part = z.imag();

    if (complex_string == ""1.0+1.0i"") {
        std::cout << ""Match!"" << std::endl; 
    } else {
        std::cout << ""No match."" << std::endl;
    }

    return 0;
}","if (complex_string == ""1.0+1.0i"")"
"#include <chrono>
#include <thread>
#include <mutex>
#include <iostream>

std::mutex mtx;

void worker(int id) {
    for (int i = 0; i < 10; ++i) {
        std::lock_guard<std::mutex> lock(mtx);
        std::cout << ""Worker "" << id << "": "" << i << std::endl;
        std::this_thread::sleep_for(std::chrono::milliseconds(50));
    }
}

int main() {
    std::thread t1(worker, 1);
    std::thread t2(worker, 2);

    t1.join();
    t2.join();

    return 0;
}","std::cout << ""Worker "" << id << "": "" << i << std::endl;"
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <random>
#include <iostream>
#include <array>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::array<int, 5> numbers;
    for (int i = 0; i < 5; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= 5; ++i) { // Fault: i <= 5 instead of i < 5
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= 5
"#include <queue>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    std::priority_queue<int> pq(nums.begin(), nums.end());
    std::vector<int> sorted_nums;

    while (!pq.empty()) {
        sorted_nums.push_back(pq.top());
        pq.pop();
    }

    std::reverse(sorted_nums.begin(), sorted_nums.end());
    
    // Find the sum of elements at even indices
    int sum = 0;
    for (size_t i = 1; i < sorted_nums.size(); i += 2) {  // Fault: should start at 0, not 1
        sum += sorted_nums[i];
    }

    std::cout << ""Sum of elements at even indices: "" << sum << std::endl;

    return 0;
}",for (size_t i = 1; i < sorted_nums.size(); i += 2)
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto const& [key, val] : myMap) {
        std::cout << key << "": "" << val << std::endl;
    }

    myMap.erase(2);

    std::cout << ""After erasing element with key 2:"" << std::endl;
    for (auto const& [key, val] : myMap) {
        std::cout << key << "": "" << val << std::endl;
    }

    myMap.clear();
    
    if (myMap.empty()) {
        std::cout << ""Map is empty"" << std::endl;
    }
    else {
       std::cout << ""Map is not empty"" << std::endl;
    }

    return 0;
}","else {
       std::cout << ""Map is not empty"" << std::endl;
    }"
"#include <algorithm>
#include <array>
#include <tuple>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;

  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <string>
#include <sstream>

std::string formatString(int num) {
    std::stringstream ss;
    ss << num;
    std::string str = ss.str();
    return str;
}

int main() {
    int number = 12345;
    std::string formatted = formatString(number);
    int reversedNumber = 0;
    std::string reversedString = """";

    for (int i = formatted.length() - 1; i >= 0; --i) {
        reversedString += formatted[i];
    }

    std::stringstream ss(reversedString);
    ss >> reversedNumber;

    if (reversedNumber == number) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",    std::stringstream ss(reversedString);
"#include <array>
#include <numeric>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <fstream>
#include <sstream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    std::stringstream ss;
    int sum = 0;

    while (std::getline(inputFile, line)) {
        ss << line;  // Load entire line into stringstream
        int num;
        if (ss >> num) {
            sum += num;
        } else {
            std::cerr << ""Invalid number format in line: "" << line << '\n';
        }
        ss.str("""");
        ss.clear();
    }

    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","ss.str("""");"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 1; i <= numbers.size(); ++i) {
        sum += numbers[i - 1];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 1; i <= numbers.size(); ++i) {
        sum += numbers[i - 1];
    }"
"#include <iostream>
#include <cmath>

int main() {
    double x = 2.0;
    double y = 3.0;
    double result = std::sqrt(x + y);
    
    if (std::isnan(result)) {
        std::cout << ""Result is NaN (Not a Number)"" << std::endl;
    } else {
        std::cout << ""Result: "" << result << std::endl;
    }
    
    double z = -1.0; // Potential issue: Square root of negative number.
    double result2 = std::sqrt(z);
    std::cout << ""Result2: "" << result2 << std::endl;
    return 0;
}",double result2 = std::sqrt(z);
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> my_tuple = std::make_tuple(1, 2.5, ""hello"");
    
    int integer_value = std::get<0>(my_tuple);
    double double_value = std::get<1>(my_tuple);
    std::string string_value = std::get<2>(my_tuple);

    std::cout << integer_value << "" "" << double_value << "" "" << string_value << std::endl;

    std::tuple<int, double, std::string> another_tuple = std::make_tuple(1, ""world"", 3.14);
    double wrong_double = std::get<1>(another_tuple);

    std::cout << wrong_double << std::endl;
    return 0;
}",double wrong_double = std::get<1>(another_tuple);
"#include <chrono>
#include <thread>
#include <mutex>

std::mutex mtx;

void print_message(const std::string& message) {
    std::lock_guard<std::mutex> lock(mtx);
    std::cout << message << std::endl;
}

int main() {
    std::thread t1([&]() {
        for (int i = 0; i < 10; ++i) {
            print_message(""Thread 1: Message "" + std::to_string(i));
            std::this_thread::sleep_for(std::chrono::milliseconds(50));
        }
    });

    std::thread t2([&]() {
        for (int i = 0; i < 10; ++i) {
            print_message(""Thread 2: Message "" + std::to_string(i));
            std::this_thread::sleep_for(std::chrono::milliseconds(75));
        }
    });

    t1.join();
    t2.join();

    return 0;
}",std::this_thread::sleep_for(std::chrono::milliseconds(75));
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""The area of a circle with radius "" << radius << "" is: "" << area << std::endl;
    
    // Incorrectly compute circumference
    double circumference = 2 * M_PI * radius;
    
    std::cout << ""The circumference is: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <random>
#include <limits>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int num_iterations = 1000;
    long long sum = 0;

    for (int i = 0; i < num_iterations; ++i) {
        int random_number = distrib(gen);
        sum += random_number;
    }

    double average = static_cast<double>(sum) / num_iterations;
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = static_cast<double>(sum) / num_iterations;
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    // Iterating through the map and printing values
    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->second << std::endl;
    }

    std::cout << ""Size of the map: "" << myMap.size() << std::endl;
    return 0;
}",for (auto it = myMap.begin(); it != myMap.end(); ++it)
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    ss >> number;
    if (ss.fail()) {
        std::cout << ""Invalid input"" << std::endl;
        return 1;
    }
    double result = number * 2;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",    double result = number * 2;
"#include <queue>
#include <vector>
#include <iostream>

int main() {
    std::queue<int> q;
    std::vector<int> data = {1, 2, 3, 4, 5};

    for (int i = 0; i < data.size(); ++i) {
        q.push(data[i]);
    }

    while (!q.empty()) {
        int element = q.front();
        q.pop();
        std::cout << element << "" "";
    }
    std::cout << std::endl;

    // Attempt to access an element beyond the queue's size. This is the bug.
    std::cout << q.front() << std::endl;  // Accessing an empty queue

    return 0;
}",std::cout << q.front() << std::endl;
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (size_t i = 0; i <= data.size(); ++i) { // Fault: loop goes out of bounds
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {  // Fault: Loop goes one element too far
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    // Incorrectly calculate circumference
    double circumference = 2 * pi * radius;
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

    return 0;
}",double circumference = 2 * pi * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> nums = {1, 2, 3, 4, 5};
    int sum = std::accumulate(nums.begin(), nums.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <iostream>
#include <iomanip>

int main() {
  double radius = 5.0;
  double area = 3.14159 * radius * radius;
  std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
  return 0;
}",double area = 3.14159 * radius * radius;
"#include <numeric>
#include <tuple>

int main() {
    std::tuple<int, int, int> my_tuple = std::make_tuple(1, 2, 3);
    int sum = std::accumulate(std::get<std::tuple_element<0, std::tuple<int, int, int>>> (my_tuple), std::get<std::tuple_element<1, std::tuple<int, int, int>>> (my_tuple), std::get<std::tuple_element<2, std::tuple<int, int, int>>> (my_tuple), 0);
    std::cout << sum << std::endl;
    return 0;
}","std::get<std::tuple_element<0, std::tuple<int, int, int>>> (my_tuple)"
"#include <map>
#include <functional>

int main() {
  std::map<int, std::function<int(int)>> funcMap;
  funcMap[1] = [](int x) { return x * 2; };
  funcMap[2] = [](int x) { return x + 5; };

  int input = 7;
  int result = funcMap[3](input); // Accessing a non-existent key.
  std::cout << result << std::endl;
  return 0;
}",funcMap[3](input)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    
    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculated: "" << area << std::endl;
        std::cout << ""Expected area: "" << expected_area << std::endl;
        std::cout << ""Calculation failed!"" << std::endl;
    } else {
        std::cout << ""Area calculated: "" << area << std::endl;
        std::cout << ""Calculation successful!"" << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <algorithm>
#include <tuple>
#include <random>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int numbers[5] = {distrib(gen), distrib(gen), distrib(gen), distrib(gen), distrib(gen)};

    // Find the maximum element in the array
    int max_index = 0;
    for (int i = 1; i < 5; ++i) {
        if (numbers[i] > numbers[max_index]) {
            max_index = i;
        }
    }

    // Incorrectly swap the elements.  Should swap numbers[0] and numbers[max_index]
    std::swap(numbers[0], numbers[1]); 

    std::cout << ""Maximum element is at index: "" << max_index << std::endl;
    std::cout << ""Array after swap: "";
    for (int i = 0; i < 5; ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::swap(numbers[0], numbers[1]);"
"#include <string>
#include <sstream>
#include <iomanip>

int main() {
    std::string input = ""12.345"";
    double value;
    std::stringstream ss(input);
    ss >> value;
    if (ss.fail()) {
        std::cout << ""Conversion failed."" << std::endl;
        return 1;
    }
    std::cout << std::fixed << std::setprecision(2) << value << std::endl; // Expect 12.34, but might truncate
    return 0;
}",std::cout << std::fixed << std::setprecision(2) << value << std::endl;
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""hello"");
    int int_val = std::get<0>(data) + 5;
    double double_val = std::get<1>(data) * 2.0;
    std::string string_val = std::get<2>(data) + "" world"";

    std::cout << ""Integer: "" << int_val << std::endl;
    std::cout << ""Double: "" << double_val << std::endl;
    std::cout << ""String: "" << string_val << std::endl;

    return 0;
}","std::string string_val = std::get<2>(data) + "" world"";"
"#include <random>
#include <iostream>
#include <vector>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }

    double average = sum / numbers.size(); // Integer division

    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = sum / numbers.size(); // Integer division
"#include <queue>
#include <vector>
#include <iostream>

int main() {
    std::queue<int> q;
    std::vector<int> nums = {1, 2, 3, 4, 5};

    for (int num : nums) {
        q.push(num);
    }

    while (!q.empty()) {
        int val = q.front();
        q.pop();
        std::cout << val << "" "";
        if (val == 3) {
            break; // Intentional early exit to demonstrate fault
        }
    }
    std::cout << std::endl;
    return 0;
}","if (val == 3) {
            break; // Intentional early exit to demonstrate fault
        }"
"#include <functional>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::function<int(int)> factorial = [&](int n) {
        if (n == 0) {
            return 1;
        } else {
            return n * factorial(n - 1);
        }
    };

    for (int i = 0; i < data.size(); ++i) {
        if (data[i] > 2) {
            data[i] = factorial(data[i]);
        }
    }

    for (int val : data) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;
    return 0;
}","if (data[i] > 2) {
            data[i] = factorial(data[i]);
        }"
"#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <limits>
#include <bitset>

int main() {
  std::bitset<32> bits;
  bits.set(0);
  bits.set(1);
  bits.set(2);

  unsigned int value = bits.to_ulong();

  if (value > std::numeric_limits<unsigned int>::max() - 100) {
     std::cout << ""Overflow detected!"" << std::endl;
  } else {
     std::cout << ""Value: "" << value << std::endl;
  }

  return 0;
}",if (value > std::numeric_limits<unsigned int>::max() - 100)
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iomanip> 
#include <complex>

int main() {
    double pi = 3.14159265358979323846;
    std::complex<double> z(1.0, 0.0);
    int n = 10;

    for (int i = 0; i < n; ++i) {
        z = z * z + 1.0; // Iterative complex number calculation
    }

    std::cout << std::fixed << std::setprecision(15) << z << std::endl;
    return 0;
}",z = z * z + 1.0;
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <algorithm>
#include <cmath>

int main() {
  double arr[] = {1.0, 2.0, 3.0, 4.0, 5.0};
  int n = sizeof(arr) / sizeof(arr[0]);
  double sum = 0.0;

  for (int i = 0; i < n; ++i) {
    sum += sqrt(arr[i]);
  }

  if (n > 0) {
    double average = sum / (n - 1); // Fault: dividing by n-1 instead of n
    std::cout << ""Average: "" << average << std::endl;
  } else {
    std::cout << ""Array is empty."" << std::endl;
  }

  return 0;
}",double average = sum / (n - 1);
"#include <string>
#include <sstream>
#include <algorithm>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    char delim;
    ss >> number >> delim;
    if (delim != '.') {
        std::cerr << ""Error: Unexpected delimiter."" << std::endl;
    } else {
        std::cout << ""Extracted number: "" << number << std::endl;
    }
    return 0;
}",ss >> number >> delim;
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<int, int> counts;
    int arr[] = {1, 2, 2, 3, 3, 3, 4, 4, 4, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    for (int i = 0; i < n; ++i) {
        counts[arr[i]]++;
    }

    int max_count = 0;
    int most_frequent = 0;
    for (auto const& [key, val] : counts) {
        if (val > max_count) {
            max_count = val;
            most_frequent = key;
        }
    }

    std::cout << ""Most frequent element: "" << most_frequent << std::endl;
    std::cout << ""Count: "" << max_count << std::endl;
    return 0;
}",if (val > max_count)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""Area of the circle: "" << area << std::endl;
    
    double expected_area = 78.5398;
    if (area > expected_area + 0.1) {
        std::cout << ""The calculated area is significantly larger than expected."" << std::endl;
    }
    else if (area < expected_area - 0.1) {
        std::cout << ""The calculated area is significantly smaller than expected."" << std::endl;
    } else {
        std::cout << ""The calculated area is close to the expected value."" << std::endl;
    }
    
    return 0;
}",if (area > expected_area + 0.1)
"#include <iostream>
#include <string>

int main() {
  std::string text = ""Hello, world!"";
  size_t len = text.length();
  std::string reversed_text = """";

  for (size_t i = 0; i < len; ++i) {
    reversed_text += text[len - i - 1];
  }

  std::cout << ""Original: "" << text << std::endl;
  std::cout << ""Reversed: "" << reversed_text << std::endl;
  return 0;
}",reversed_text += text[len - i - 1];
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""123.45abc"";
    std::stringstream ss(input);
    double num;
    if (ss >> num) {
        std::cout << ""Extracted number: "" << num << std::endl;
    } else {
        std::cout << ""No number found."" << std::endl;
    }
    std::string remaining;
    if (ss >> remaining) {
        std::cout << ""Remaining string: "" << remaining << std::endl;
    } else {
        std::cout << ""No remaining string found."" << std::endl;
    }
    return 0;
}",if (ss >> remaining)
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {  // Fault: Off-by-one error
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <random>
#include <ctime>
#include <limits>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int num_iterations = 10;
    int sum = 0;

    for (int i = 0; i < num_iterations; ++i) {
        int random_number = distrib(gen);
        sum += random_number;
    }

    double average = static_cast<double>(sum) / num_iterations;
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = static_cast<double>(sum) / num_iterations;
"#include <limits>
#include <iostream>

int main() {
    long long sum = 0;
    for (int i = 0; i < 100000; ++i) {
        sum += i;
    }
    
    if (sum > std::numeric_limits<int>::max()) {
        std::cout << ""Overflow detected!"" << std::endl;
    } else {
        std::cout << ""Sum: "" << sum << std::endl;
    }
    
    return 0;
}",sum += i;
"#include <iomanip> 
#include <sstream> 
#include <stdexcept> 

std::string format_float(double value, int precision) {
  std::stringstream ss;
  ss << std::fixed << std::setprecision(precision) << value;
  return ss.str();
}

int main() {
  double pi = 3.14159265358979323846;
  int precision = 5;
  try {
    std::string formatted_pi = format_float(pi, precision);
    std::cout << ""Formatted PI: "" << formatted_pi << std::endl;
    double parsed_pi = std::stod(formatted_pi, nullptr); // Potential overflow due to precision
    std::cout << ""Parsed PI: "" << parsed_pi << std::endl;
  } catch (const std::invalid_argument& e) {
    std::cerr << ""Invalid argument: "" << e.what() << std::endl;
  } catch (const std::out_of_range& e) {
    std::cerr << ""Out of range: "" << e.what() << std::endl;
  }
  return 0;
}","double parsed_pi = std::stod(formatted_pi, nullptr);"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <ctime>
#include <iomanip>
#include <vector>

int main() {
    std::srand(std::time(nullptr));
    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = std::rand() % 100;
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Loop goes out of bounds
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    // Iterate and print
    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    // Bug: attempting to access element with key 4, which does not exist
    std::cout << ""Key 4: "" << myMap[4] << std::endl;

    return 0;
}","std::cout << ""Key 4: "" << myMap[4] << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area: "" << area << std::endl;
  double perimeter = 2 * M_PI * radius; 
  std::cout << ""Perimeter: "" << perimeter << std::endl;
  double circumference = radius * M_PI;
  std::cout << ""Circumference: "" << circumference << std::endl;
  return 0;
}",double circumference = radius * M_PI;
"#include <iostream>
#include <numeric>

int main() {
  double sum = 0.0;
  std::vector<double> values = {1.0, 2.0, 3.0, 4.0, 5.0};

  for (size_t i = 0; i <= values.size(); ++i) {
    sum += values[i];
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= values.size()
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <queue>
#include <iostream>

int main() {
    std::priority_queue<int> pq;
    pq.push(5);
    pq.push(2);
    pq.push(8);

    while (!pq.empty()) {
        std::cout << pq.top() << ' ';
        pq.pop();
    }
    std::cout << std::endl;
    return 0;
}",std::priority_queue<int> pq;
"#include <numeric>
#include <tuple>
#include <functional>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    
    // Incorrectly using std::accumulate with a lambda that doesn't capture anything.
    // This will capture the address of sum, but not its value.
    sum = std::accumulate(data.begin(), data.end(), 0, [](int a, int b) { return a + b; });
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","[](int a, int b) { return a + b; }"
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    std::seed_seq seed{std::chrono::steady_clock::now().time_since_epoch().count(), seed_time.time_since_epoch().count()};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distribution(generator);
        sum += randomNumber;
    }

    std::cout << ""Sum of 10 random numbers: "" << sum << std::endl;

    //Calculate the average
    double average = sum / 10.0;
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = sum / 10.0;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;
    
    std::vector<int> result;
    std::copy_if(data.begin(), data.end(), std::back_inserter(result), [target](int x){ return x > target; });
    
    for (int val : result) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return x > target;
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> myTuple(10, 3.14, ""hello"");
    int intVal = std::get<1>(myTuple); // Should be 3.14, but accesses index 1 (double)
    std::cout << intVal << std::endl;
    return 0;
}",std::get<1>(myTuple)
"#include <map>
#include <string>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    if (scores.count(name) > 0) {
        std::cout << ""Score for "" << name << "": "" << scores[name] << std::endl;
    } else {
        std::cout << ""Score for "" << name << "": 0"" << std::endl;
    }

    return 0;
}","std::cout << ""Score for "" << name << "": 0"" << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect: "" << area << std::endl;
    } else {
        std::cout << ""Area calculation is correct: "" << area << std::endl;
    }

    // Incorrect use of fmod (should be modf)
    double quotient, remainder = std::fmod(10.0, 3.0);
    std::cout << ""Quotient: "" << quotient << "", Remainder: "" << remainder << std::endl;

    return 0;
}","double quotient, remainder = std::fmod(10.0, 3.0);"
"#include <fstream>
#include <string>

int main() {
    std::ofstream outputFile(""data.txt"");
    if (outputFile.is_open()) {
        std::string line = ""This is a test line.\n"";
        outputFile << line << line; // Intentional double write
        outputFile.close();
    } else {
        std::cerr << ""Unable to open file for writing."";
        return 1;
    }
    return 0;
}",outputFile << line << line;
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    ss >> number;
    if (ss.fail()) {
        std::cout << ""Conversion failed!"" << std::endl;
        return 1;
    }
    
    std::cout << ""The number is: "" << number << std::endl;
    
    double result = number * 2.0;
    std::cout << ""Double the number is: "" << result << std::endl;
    
    return 0;
}",    double result = number * 2.0;
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <array>
#include <iomanip>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <numeric>
#include <limits>

int main() {
  long long sum = 0;
  for (long long i = 1; i <= 100000; ++i) {
    sum += i;
  }

  if (sum > std::numeric_limits<int>::max()) {
    std::cout << ""Overflow detected!"" << std::endl;
  }
  else {
    std::cout << ""Sum: "" << sum << std::endl;
  }

  return 0;
}",sum += i;
"#include <random>
#include <chrono>
#include <vector>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 10);

    std::vector<int> numbers(5);
    for (int i = 0; i < 5; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= 5; ++i) { // Fault: Loop iterates one element past the end of the vector.
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= 5
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {  // Fault: i <= data.size() should be i < data.size()
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(data.begin(), data.end(), std::back_inserter(result), [target](int x){ return x < target; });

    for (int val : result) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::copy_if(data.begin(), data.end(), std::back_inserter(result), [target](int x){ return x < target; })"
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> my_tuple(1, 2.5, ""hello"");
    
    auto& [a, b, c] = my_tuple;
    
    std::cout << a << "" "" << b << "" "" << c << std::endl;
    
    // Incorrect attempt to modify tuple elements directly
    a = 10;

    std::cout << a << "" "" << b << "" "" << c << std::endl;
    
    return 0;
}",a = 10;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "" is "" << ages[name] << std::endl; 
    } else {
        std::cout << ""Age of "" << name << "" is unknown."" << std::endl;
    }

    return 0;
}",if (ages.find(name) != ages.end())
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (area > expected_area + 0.1) {
    std::cout << ""Area is too large: "" << area << std::endl;
  } else if (area < expected_area - 0.1) {
    std::cout << ""Area is too small: "" << area << std::endl;
  } else {
    std::cout << ""Area is within tolerance: "" << area << std::endl;
  }
  
  return 0;
}",if (area > expected_area + 0.1)
"#include <map>
#include <string>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string best_player;
    int highest_score = -1;

    for (const auto& pair : scores) {
        if (pair.second > highest_score) {
            highest_score = pair.second;
            best_player = pair.first;
        }
    }

    std::cout << ""Best player: "" << best_player << "" with score "" << highest_score << std::endl;
    
    scores.erase(""Bob"");
    
    if (scores.count(""Bob"") > 0){
        std::cout << ""Bob still exists"" << std::endl;
    }
    else{
       std::cout << ""Bob removed"" << std::endl;
    }

    return 0;
}","scores.erase(""Bob"");"
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""12.34"";
    std::stringstream ss(input);
    double number;
    ss >> number;

    if (ss.fail() || !ss.eof()) {
        std::cout << ""Conversion failed."" << std::endl;
        return 1;
    }

    std::cout << ""Number: "" << number << std::endl;
    std::cout << ""Square: "" << number * number << std::endl;
    return 0;
}",if (ss.fail() || !ss.eof())
"#include <iomanip> 
#include <sstream> 

int main() {
    double pi = 3.14159265358979323846;
    int degree = 45;
    double radians = degree * pi / 180.0;
    std::stringstream ss;
    ss << std::fixed << std::setprecision(10) << radians;
    std::string radian_str = ss.str();
    double recovered_radians = std::stod(radian_str);
    if (abs(recovered_radians - radians) > 1e-6) {
        std::cout << ""Conversion failed!"" << std::endl;
    } else {
        std::cout << ""Conversion successful!"" << std::endl;
    }
    return 0;
}",if (abs(recovered_radians - radians) > 1e-6)
"#include <iostream>
#include <limits>

int main() {
    int max_int = std::numeric_limits<int>::max();
    int x = max_int;
    int y = 1;
    int result = x - y;

    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",int result = x - y;
"#include <array>
#include <numeric>
#include <algorithm>
#include <iostream>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  std::for_each(data.begin(), data.end(), [&](int x) { sum += x; });
  
  // Incorrectly calculate the average. Should be (double)sum / data.size()
  double average = sum / data.size();
  
  std::cout << ""Average: "" << average << std::endl;
  return 0;
}",double average = sum / data.size();
"#include <random>
#include <vector>
#include <numeric>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the sum of the first 11 elements (out of bounds)
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 11, 0);

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers.begin() + 11
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9};
    int target = 10;

    std::vector<int> result;
    for (int num : nums) {
        if (num > target) {
            result.push_back(num);
        }
    }

    if (result.empty()) {
        std::cout << ""No numbers greater than target found."" << std::endl;
    } else {
        std::cout << ""Numbers greater than target: "";
        for (int i = 0; i < result.size(); ++i) {
            std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }

    return 0;
}",if (num > target) {
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";

    // Incorrect: Accessing a key that might not exist without checking first
    int count = counts[fruit];

    std::cout << ""The number of "" << fruit << "" is: "" << count << std::endl;
    return 0;
}",int count = counts[fruit];
"#include <limits>
#include <tuple>

int main() {
    int a = std::numeric_limits<int>::max();
    int b = 1;
    int c = a + b; // Potential integer overflow
    std::cout << c << std::endl;
    return 0;
}",int c = a + b;
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> myTuple = std::make_tuple(10, 3.14, ""hello"");
    
    int integerValue = std::get<0>(myTuple);
    double doubleValue = std::get<1>(myTuple);
    std::string stringValue = std::get<2>(myTuple);

    std::cout << ""Integer: "" << integerValue << std::endl;
    std::cout << ""Double: "" << doubleValue << std::endl;
    std::cout << ""String: "" << stringValue << std::endl;

    // Incorrect index access - should be 0, not 5
    int wrongValue = std::get<5>(myTuple);
    std::cout << ""Wrong Value: "" << wrongValue << std::endl;
    
    return 0;
}",int wrongValue = std::get<5>(myTuple);
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    // Incorrect calculation of diameter
    double diameter = circumference / M_PI;
    std::cout << ""Diameter: "" << diameter << std::endl;

    return 0;
}",double diameter = circumference / M_PI;
"#include <string>
#include <sstream>
#include <vector>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    std::vector<double> data = {1.234, 5.678, 9.012, 3.456};
    
    for (double value : data) {
        std::string formatted_value = format_number(value);
        if (formatted_value.length() > 5) {
            std::cout << ""Value too long: "" << formatted_value << std::endl;
        } else {
            std::cout << ""Formatted: "" << formatted_value << std::endl;
        }
    }
    
    return 0;
}",if (formatted_value.length() > 5)
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <numeric>
#include <algorithm>
#include <vector>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  
  std::for_each(data.begin(), data.end(), [&](int x) {
    sum += x;
  });

  // Incorrectly incrementing sum *after* the loop. Should be before.
  sum++;
  
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",sum++;
"#include <array>
#include <algorithm>
#include <iostream>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) { // Fault: Loop goes out of bounds
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <vector>
#include <random>

int main() {
    std::vector<int> numbers(10);
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Loop goes out of bounds
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iomanip>
#include <sstream>

int main() {
    double pi = 3.14159265358979323846;
    std::stringstream ss;
    ss << std::fixed << std::setprecision(10) << pi;
    double recovered_pi = 0.0;
    ss >> recovered_pi;

    double expected_pi = 3.1415926535;

    if (recovered_pi != expected_pi) {
        std::cout << ""Mismatch detected! Recovered pi: "" << recovered_pi << "", Expected pi: "" << expected_pi << std::endl;
    } else {
        std::cout << ""Pi recovered successfully!"" << std::endl;
    }

    return 0;
}",double expected_pi = 3.1415926535;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int target = 7;

    auto it = std::find(data.begin(), data.end(), target);
    if (it != data.end()) {
        std::cout << ""Found: "" << *it << std::endl;
    } else {
        std::cout << ""Not found."" << std::endl;
    }

    // Incorrectly modifies the original vector
    std::sort(data.begin(), data.end(), std::greater<int>());

    std::cout << ""Sorted (incorrectly): "";
    for (int x : data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(data.begin(), data.end(), std::greater<int>());"
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    std::seed_seq seed{seed_time.time_since_epoch().count()};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int count = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distribution(generator);
        if (randomNumber % 2 == 0) {
            count++;
        }
    }

    std::cout << ""Number of even numbers generated: "" << count << std::endl;
    return 0;
}",if (randomNumber % 2 == 0) {
"#include <map>
#include <string>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string best_student = ""David""; // Faulty line: Incorrect initialization.
    int best_score = -1;

    for (const auto& pair : scores) {
        if (pair.second > best_score) {
            best_score = pair.second;
            best_student = pair.first;
        }
    }

    std::cout << ""Best student: "" << best_student << "" with score "" << best_score << std::endl;
    return 0;
}","std::string best_student = ""David"";"
"#include <chrono>
#include <thread>
#include <iostream>

int main() {
    std::cout << ""Starting calculation..."" << std::endl;
    long long sum = 0;
    for (long long i = 0; i < 10000000000LL; ++i) {
        sum += i;
    }
    std::this_thread::sleep_for(std::chrono::seconds(2));
    std::cout << ""Calculation complete. Sum: "" << sum << std::endl;
    return 0;
}",long long sum = 0;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area calculation is correct!"" << std::endl;
    } else {
        std::cout << ""Area calculation is incorrect. Calculated: "" << area << "", Expected: "" << expected_area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    ss >> number;
    if (ss.fail()) {
        std::cout << ""Conversion failed!"" << std::endl;
        return 1;
    }
    std::cout << ""Number: "" << number << std::endl;
    
    // Potential subtle fault: Incorrectly reading an additional character
    char extraChar;
    ss >> extraChar; 
    std::cout << ""Extra char: "" << extraChar << std::endl;
    
    return 0;
}","    char extraChar;
    ss >> extraChar;"
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    int sum = 0;
    while (!q.empty()) {
        int x = q.front();
        q.pop();
        sum += x;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int sum = 0;
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""hello"");
    int integer_val = std::get<0>(data);
    double double_val = std::get<1>(data);
    std::string string_val = std::get<2>(data);

    std::cout << integer_val << std::endl;
    std::cout << double_val << std::endl;
    std::cout << string_val << std::endl;

    // Incorrectly try to access a non-existent element.  This is the fault.
    // std::get<3>(data) = 5; 

    return 0;
}",std::get<3>(data)
"#include <iostream>
#include <array>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <algorithm>
#include <functional>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4, 7, 3, 6}; 
  std::sort(data.begin(), data.end(), std::greater<int>());
  
  std::cout << ""Sorted in descending order: "";
  for (size_t i = 0; i < data.size(); ++i) {
    std::cout << data[i] << "" "";
  }
  std::cout << std::endl;
  
  std::vector<int> subset = {data[0], data[1], data[2]};
  int sum = 0;
  for (int val : subset) {
    sum += val;
  }
  std::cout << ""Sum of first three elements: "" << sum << std::endl;

  return 0;
}","std::vector<int> subset = {data[0], data[1], data[2]};"
"#include <limits>
#include <cstdint>

int main() {
    std::uint64_t large_number = std::numeric_limits<std::uint64_t>::max();
    std::uint64_t increment = 2;
    std::uint64_t result = large_number + increment;
    
    // Expected behavior: overflow, result should wrap around to 0 or a small value.
    // Actual behavior (due to the fault): result is calculated correctly as a uint64_t.
    
    if (result == large_number + increment) {
        std::cout << ""No overflow detected!"" << std::endl;
    } else {
        std::cout << ""Overflow detected!"" << std::endl;
    }

    return 0;
}",if (result == large_number + increment)
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) { // Fault: Loop goes out of bounds
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
    }

    return 0;
}",if (ages.find(name) != ages.end())
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 4, 0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers.begin() + 4
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""The area of the circle is: "" << area << std::endl;
    
    // Incorrect calculation of circumference
    double circumference = 2 * M_PI * radius / 2;
    
    std::cout << ""The circumference of the circle is: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius / 2;
"#include <string>
#include <sstream>

std::string formatString(int num) {
    std::stringstream ss;
    ss << num;
    std::string str = ss.str();
    return str;
}

int main() {
    int value = 123;
    std::string formatted = formatString(value);
    int parsedValue = std::stoi(formatted, nullptr, 2); // Fault: Incorrect base
    std::cout << ""Parsed value: "" << parsedValue << std::endl;
    return 0;
}","std::stoi(formatted, nullptr, 2)"
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::system_clock::time_point now = std::chrono::system_clock::now();
    std::seed_seq seed({std::chrono::duration_cast<std::chrono::seconds>(now - std::chrono::system_clock::time_point{}).count(), 12345});
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int count = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distribution(generator);
        if (num % 2 == 0) {
            count++;
        }
    }

    std::cout << ""Number of even numbers: "" << count << std::endl;
    return 0;
}","if (num % 2 == 0) {
            count++;
        }"
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    int key = 4;
    std::string value = myMap[key]; // Potential issue: accessing non-existent key
    std::cout << value << std::endl;

    return 0;
}",std::string value = myMap[key];
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    size_t n = sizeof(arr) / sizeof(arr[0]);

    int sum = 0;
    for (size_t i = 0; i <= n; ++i) {  // Fault: i <= n instead of i < n
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= n
"#include <bitset>
#include <iostream>

int main() {
    std::bitset<8> bits(""10110100"");
    
    int num = bits.to_ulong();
    
    std::cout << ""Original number: "" << num << std::endl;

    // Incorrectly try to convert to a signed integer using to_ulong
    int signed_num = static_cast<int>(bits.to_ulong());

    std::cout << ""Signed representation: "" << signed_num << std::endl;
    
    return 0;
}",int signed_num = static_cast<int>(bits.to_ulong());
"#include <algorithm>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    int sum = std::accumulate(arr, arr + n - 1, 0);
    //The loop calculates the sum of elements until the second-to-last element, not the whole array.
    
    //The following line would produce a different value, if the intended sum was the whole array. 
    //int sum = std::accumulate(arr, arr + n, 0);

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",arr + n - 1
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(1, 2.5, ""hello"");
    int integer_value = std::get<0>(data);
    double double_value = std::get<1>(data);
    std::string string_value = std::get<2>(data);

    std::cout << ""Integer: "" << integer_value << std::endl;
    std::cout << ""Double: "" << double_value << std::endl;
    std::cout << ""String: "" << string_value << std::endl;

    // Incorrect use of std::get with a wrong index
    int wrong_value = std::get<3>(data); // Should be std::get<2>(data) to access the string
    std::cout << ""Wrong Value: "" << wrong_value << std::endl;

    return 0;
}",int wrong_value = std::get<3>(data);
"#include <array>
#include <numeric>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <fstream>
#include <sstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::string line;
    std::stringstream ss;
    int sum = 0;

    while (std::getline(inputFile, line)) {
        ss << line;
        int value;
        if (ss >> value) {
            sum += value;
        }
        ss.clear();
        ss.str("""");
    }

    inputFile.close();

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","    int value;
        if (ss >> value) {
            sum += value;
        }
        ss.clear();
        ss.str("""");"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;

    // Calculate circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << circumfrence << std::endl;
    return 0;
}","std::cout << ""Circumference of the circle: "" << circumfrence << std::endl;"
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45abc"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cout << ""Invalid input format."" << std::endl;
        return 1;
    }
    std::cout << ""Extracted number: "" << num << std::endl;
    return 0;
}",double num;
"#include <queue>
#include <limits>

int main() {
    std::priority_queue<int, std::vector<int>, std::greater<int>> pq;
    pq.push(10);
    pq.push(5);
    pq.push(20);

    int sum = 0;
    while (!pq.empty()) {
        int top = pq.top();
        pq.pop();
        sum += top;
    }

    if (sum == 35) {
        std::cout << ""Correct sum\n"";
    } else {
        std::cout << ""Incorrect sum\n"";
    }

    return 0;
}","if (sum == 35) {
        std::cout << ""Correct sum\n"";
    } else {
        std::cout << ""Incorrect sum\n"";
    }"
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    auto it = myMap.find(4);
    if (it != myMap.end()) {
        std::cout << it->second << std::endl;
    } else {
        std::cout << ""Not found"" << std::endl;
    }

    return 0;
}",auto it = myMap.find(4);
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
            sum += num * 2;
        } else {
            sum += num / 2;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += num / 2;
"#include <set>
#include <iostream>

int main() {
    std::set<int> numbers = {1, 2, 3, 4, 5};

    for (int num : numbers) {
        if (num == 3) {
            break;
        } else {
            numbers.insert(num * 2);
        }
    }

    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",numbers.insert(num * 2);
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    std::copy_if(data.begin(), data.end(), std::back_inserter(even_numbers), [](int x){ return x % 2 == 0; });

    int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);

    // Incorrectly printing the size of the original vector instead of even_numbers
    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    std::cout << ""Number of even numbers: "" << data.size() << std::endl; // Fault here

    return 0;
}","std::cout << ""Number of even numbers: "" << data.size() << std::endl;"
"#include <iostream>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> conjugate_z = z.real(); // Should be z.conjugate()
    std::cout << ""Original: "" << z << std::endl;
    std::cout << ""Conjugate (incorrect): "" << conjugate_z << std::endl;
    return 0;
}",std::complex<double> conjugate_z = z.real();
"#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <array>
#include <algorithm>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    std::array<int, 5> sorted_data = data;

    std::sort(sorted_data.begin(), sorted_data.begin() + 4); // Intentionally sort only the first 4 elements

    for (int i = 0; i < sorted_data.size(); ++i) {
        std::cout << sorted_data[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(sorted_data.begin(), sorted_data.begin() + 4);"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    
    // Incorrectly calculating circumference
    double circumference = 2 * M_PI * radius / 2;
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius / 2;
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""123.45abc"";
    std::stringstream ss(input);
    double number;
    if (ss >> number) {
        std::cout << ""Conversion successful: "" << number << std::endl;
    } else {
        std::cout << ""Conversion failed."" << std::endl;
    }
    
    std::string remaining;
    if (ss >> remaining) {
        std::cout << ""Remaining string: "" << remaining << std::endl;
    } else {
        std::cout << ""No remaining string."" << std::endl;
    }

    return 0;
}",if (ss >> remaining)
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""hello"");
    int integer_value = std::get<0>(data);
    double double_value = std::get<1>(data);
    std::string string_value = std::get<2>(data);

    std::cout << ""Integer: "" << integer_value << std::endl;
    std::cout << ""Double: "" << double_value << std::endl;
    std::cout << ""String: "" << string_value << std::endl;

    // Incorrectly try to access a non-existent element (index 3)
    std::cout << ""Element at index 3: "" << std::get<3>(data) << std::endl; 

    return 0;
}","std::cout << ""Element at index 3: "" << std::get<3>(data) << std::endl;"
"#include <map>
#include <iostream>

int main() {
  std::map<int, std::string> myMap;
  myMap[1] = ""one"";
  myMap[2] = ""two"";
  myMap[3] = ""three"";

  for (auto const& [key, val] : myMap) {
    std::cout << key << "": "" << val << std::endl;
  }

  std::cout << myMap[4] << std::endl; // Accessing a non-existent key
  
  return 0;
}",std::cout << myMap[4] << std::endl;
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::system_clock::time_point now = std::chrono::system_clock::now();
    std::seed_seq seed{std::chrono::duration_cast<std::chrono::seconds>(now - std::chrono::system_clock::from_time_t(0)).count(), now.time_since_epoch().count() % 65535};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int number = distribution(generator);
        if (number % 2 == 0) {
            sum -= number; // Fault: should be +=, causing incorrect sum
        } else {
            sum += number;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= number;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());

    for (int i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",std::greater<int>()
"#include <complex>
#include <iostream>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> w = z * z;
    std::cout << ""w = "" << w << std::endl;
    double real_part = w.real();
    double imaginary_part = w.imag();
    std::cout << ""Real part: "" << real_part << std::endl;
    std::cout << ""Imaginary part: "" << imaginary_part << std::endl;

    if (real_part > 2.0) {
        std::cout << ""Real part is greater than 2.0"" << std::endl;
    } else {
        std::cout << ""Real part is not greater than 2.0"" << std::endl;
    }

    return 0;
}",if (real_part > 2.0)
"#include <bitset>
#include <iostream>

int main() {
    std::bitset<8> bits = ""10101010"";
    std::bitset<8> inverted_bits = bits.to_ulong() ^ 0xFF;
    std::cout << inverted_bits << std::endl;
    return 0;
}",bits.to_ulong() ^ 0xFF
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        if (current == 2) {
            // Incorrect logic: should remove elements until 2 is found
            break; // Stops after processing only the first element
        }
        std::cout << current << "" "";
    }
    std::cout << std::endl;
    return 0;
}",break;
"#include <array>
#include <numeric>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) { // Fault: i <= data.size()
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <functional>
#include <iostream>
#include <iomanip>

int main() {
    std::function<double(double)> calculate = [](double x) {
        return std::sqrt(x);
    };

    double input = -1.0;
    double result = calculate(input);
    std::cout << ""Result: "" << std::fixed << std::setprecision(2) << result << std::endl;
    return 0;
}",double input = -1.0;
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""12.34abc"";
    std::stringstream ss(input);
    double value;
    if (ss >> value) {
        std::cout << ""Parsed value: "" << value << std::endl;
    } else {
        std::cout << ""Failed to parse value.""
    }
    return 0;
}",if (ss >> value)
"#include <limits>
#include <iomanip>

int main() {
    double pi = 3.14159265358979323846;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << std::fixed << std::setprecision(10) << area << std::endl;

    // Calculate circumference
    double circumference = 2 * pi * radius;
    circumference = circumference / 0.0;  // Faulty division by zero
    std::cout << ""Circumference: "" << circumference << std::endl;
    return 0;
}",circumference = circumference / 0.0;
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    int key = 4;
    if (myMap.count(key)) {
        std::cout << ""Value for key "" << key << "": "" << myMap[key] << std::endl;
    } else {
        std::cout << ""Key "" << key << "" not found."" << std::endl;
    }

    std::cout << ""Value for key "" << key << "": "" << myMap[key] << std::endl;
    return 0;
}","std::cout << ""Value for key "" << key << "": "" << myMap[key] << std::endl;"
"#include <unordered_map>
#include <string>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;

    std::string fruit = ""orange"";
    int count = counts[fruit]; //Potential issue: Accessing a non-existent key.
    
    if (count > 0) {
        std::cout << ""There are "" << count << "" "" << fruit << std::endl;
    } else {
        std::cout << fruit << "" is not in the list."" << std::endl;
    }

    return 0;
}",int count = counts[fruit];
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;

  for (int i = 0; i <= data.size(); ++i) {  // Fault: Loop goes out of bounds
    sum += data[i];
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <random> 
#include <iostream>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
            sum += num * 2;
        } else {
            sum -= num;  // Fault: Incorrectly subtracting odd numbers.
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= num;
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> my_tuple(10, 3.14, ""hello"");

    auto& [int_val, double_val, string_val] = my_tuple;

    std::cout << ""Integer: "" << int_val << std::endl;
    std::cout << ""Double: "" << double_val << std::endl;
    std::cout << ""String: "" << string_val << std::endl;

    // Incorrectly attempting to modify the tuple element through the reference
    int_val = 20;

    std::cout << ""Modified Integer: "" << std::get<0>(my_tuple) << std::endl;

    return 0;
}",int_val = 20;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    double area = M_PI * radius * radius;

    std::cout << ""Radius: "" << radius << std::endl;
    std::cout << ""Circumference: "" << circumference << std::endl;
    std::cout << ""Area: "" << area << std::endl;

    //Incorrect use of std::pow for calculating the square of the radius
    double incorrect_area = M_PI * std::pow(radius, 1.0);
    std::cout << ""Incorrect Area: "" << incorrect_area << std::endl;
    return 0;
}","double incorrect_area = M_PI * std::pow(radius, 1.0);"
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  std::for_each(data.begin(), data.end(), [&](int x) { sum += x; });
  // Incorrectly divide by 4 instead of 5
  double average = static_cast<double>(sum) / 4;
  std::cout << ""Average: "" << average << std::endl;
  return 0;
}",double average = static_cast<double>(sum) / 4;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    ss >> number;

    if (ss.fail()) {
        std::cout << ""Conversion failed!"" << std::endl;
        return 1;
    }

    int integer_part = (int)number; //Potential loss of precision and incorrect integer representation.
    std::cout << ""Integer part: "" << integer_part << std::endl;
    return 0;
}",int integer_part = (int)number;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    // Intended to multiply sum by 2, but incorrect operator used.
    int result = sum << 1; 
    
    //The result is shifted left, not multiplied by 2, causing incorrect output.
    
    return 0;
}",int result = sum << 1;
"#include <iomanip>
#include <sstream>

int main() {
    double pi = 3.14159265358979323846;
    int degrees = 45;
    double radians = degrees * pi / 180.0;
    double sine_value = sin(radians);

    std::stringstream ss;
    ss << std::fixed << std::setprecision(10) << sine_value;
    std::string sine_str = ss.str();

    if (sine_str == ""0.7071067812"") {
        std::cout << ""The sine of 45 degrees is approximately 0.7071067812."" << std::endl;
    } else {
        std::cout << ""The sine of 45 degrees is not approximately 0.7071067812."" << std::endl;
    }

    return 0;
}","if (sine_str == ""0.7071067812"")"
"#include <iostream>
#include <limits>

int main() {
    long long sum = 0;
    for (int i = 0; i < 100; ++i) {
        sum += i;
    }
    
    //Potential overflow if sum is very large, but we're masking it 
    sum = sum * 2;

    std::cout << ""Sum: "" << sum << std::endl;
    
    if (sum > std::numeric_limits<int>::max()) {
        std::cout << ""Overflow detected!"" << std::endl;
    } else {
        std::cout << ""No overflow detected."" << std::endl;
    }
    
    return 0;
}",sum = sum * 2;
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> scores;
    scores[""Alice""] = 100;
    scores[""Bob""] = 90;
    scores[""Charlie""] = 80;

    std::string best_player;
    int highest_score = -1;

    for (const auto& pair : scores) {
        if (pair.second > highest_score) {
            highest_score = pair.second;
            best_player = pair.first;
        }
    }

    std::cout << ""Best player: "" << best_player << "" with score: "" << highest_score << std::endl;
    return 0;
}",int highest_score = -1;
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  std::for_each(data.begin(), data.end(), [&](int x) { sum += x; });
  
  // Incorrect condition for comparison. Should be sum == 15, but it's sum = 15.
  if (sum = 15) {
    std::cout << ""The sum is 15."" << std::endl;
  } else {
    std::cout << ""The sum is not 15."" << std::endl;
  }

  return 0;
}",if (sum = 15)
"#include <iostream>
#include <limits>

int main() {
    long long num = std::numeric_limits<long long>::max();
    long long increment = 1;
    long long result = num + increment;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",long long result = num + increment;
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
            sum += num * 2;
        } else {
            sum += num / 2;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += num / 2;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct."" << std::endl;
    } else {
        std::cout << ""Area is incorrect. Calculated: "" << area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9};
    
    // Find the index of the largest element
    auto it = std::max_element(nums.begin(), nums.end());
    size_t index = std::distance(nums.begin(), it);
    
    // Incorrectly assume index is within bounds - no check
    int largest_element = nums[index];
    
    std::cout << ""Largest element: "" << largest_element << std::endl;
    return 0;
}",int largest_element = nums[index];
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message[0] << std::endl; // Accessing index 0
    return 0;
}",std::cout << message[0] << std::endl;
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""123.45abc"";
    std::stringstream ss(input);
    double number;
    if (ss >> number) {
        std::cout << ""Number: "" << number << std::endl;
    } else {
        std::cout << ""Invalid input."" << std::endl;
    }
    std::cout << ""Remaining input: "" << ss.str() << std::endl;
    return 0;
}",if (ss >> number)
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {  // Subtle off-by-one error
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << ""Error opening file: "" << filename << std::endl;
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(file, line)) {
        try {
            int num = std::stoi(line);
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid number format: "" << line << std::endl;
        } catch (const std::out_of_range& e) {
           std::cerr << ""Number out of range: "" << line << std::endl;
        }
    }

    file.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",std::stoi(line)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    // Incorrectly multiply the sum by 2 instead of returning it.
    sum *= 2;
    return sum;
}",sum *= 2;
"#include <iomanip> 
#include <sstream> 
#include <algorithm> 

int main() { 
    std::stringstream ss;
    double value = 123.456789; 
    ss << std::fixed << std::setprecision(3) << value; 
    std::string str = ss.str(); 

    double recovered_value;
    ss.clear();
    ss.str(str);
    ss >> recovered_value; 

    if (recovered_value == value) { 
        std::cout << ""Conversion successful!"" << std::endl; 
    } else { 
        std::cout << ""Conversion failed!"" << std::endl; 
    }

    return 0; 
}",if (recovered_value == value)
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    for (int i = 0; i < data.size(); ++i) {
        if (data[i] % 2 == 0) {
            even_numbers.push_back(data[i]);
        }
    }

    // Sort even numbers in descending order
    std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());

    std::cout << ""Even numbers in descending order: "";
    for (int i = 0; i < even_numbers.size(); ++i) {
        std::cout << even_numbers[i] << (i == even_numbers.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;

    return 0;
}","std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());"
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    size_t pos = message.find(""world!"");
    if (pos != std::string::npos) {
        message.replace(pos, 6, ""universe!"");
    }
    std::cout << message << std::endl;
    return 0;
}","message.replace(pos, 6, ""universe!"");"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    auto it = std::find(data.begin(), data.end(), target);

    if (it != data.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Calculate sum of elements greater than target
    int sum = 0;
    for (int i = 0; i < data.size(); ++i) {
        if (data[i] > target) {
            sum += data[i];
        }
    }

    std::cout << ""Sum of elements greater than target: "" << sum << std::endl;

    return 0;
}",if (data[i] > target)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area is "" << area << std::endl;
    } else {
        std::cout << ""Area is approximately correct: "" << area << std::endl;
    }
    
    double circumference = 2 * M_PI * radius;
    double expected_circumference = 31.4159;

    if (std::abs(circumference - expected_circumference) > 0.0001) {
        std::cout << ""Circumference is "" << circumference << std::endl;
    } else {
        std::cout << ""Circumference is approximately correct: "" << circumference << std::endl;
    }
    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string highest_scorer = """";
    int highest_score = -1;

    for (const auto& pair : scores) {
        if (pair.second > highest_score) {
            highest_score = pair.second;
            highest_scorer = pair.first;
        }
    }

    std::cout << ""Highest scorer: "" << highest_scorer << "" with score: "" << highest_score << std::endl;

    return 0;
}","    std::string highest_scorer = """";"
"#include <iostream>
#include <string>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit];
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

    return 0;
}",int count = counts[fruit];
"#include <string>
#include <sstream>

std::string formatString(int value) {
    std::stringstream ss;
    ss << std::hex << value;
    std::string result = ss.str();
    return result;
}

int main() {
    int number = 255;
    std::string formatted = formatString(number);
    std::cout << ""The formatted value is: "" << formatted << std::endl;
    return 0;
}",    std::string formatted = formatString(number);
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;

    std::string name = ""Charlie"";
    int age = ages[name]; // Accessing non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}","for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }"
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    double sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <random>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 10);

    std::vector<int> numbers(5);
    for (int i = 0; i < numbers.size(); ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average of the numbers
    double sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    double average = sum / numbers.size();

    // Find the number closest to the average
    int closestNumber = numbers[0];
    double minDifference = std::abs(numbers[0] - average);

    for (int i = 1; i < numbers.size(); ++i) {
        double difference = std::abs(numbers[i] - average);
        if (difference < minDifference) {
            minDifference = difference;
            closestNumber = numbers[i];
        }
    }

    std::cout << ""Average: "" << average << std::endl;
    std::cout << ""Closest number to the average: "" << closestNumber << std::endl;
    return 0;
}",int closestNumber = numbers[0];
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of squares
    int sumOfSquares = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sumOfSquares += numbers[i] * numbers[i];
    }

    // Incorrectly calculate the square root
    double squareRoot = sqrt(sumOfSquares) / numbers.size(); //Potential loss of precision and incorrect scaling

    std::cout << ""Square root of sum of squares: "" << squareRoot << std::endl;
    
    return 0;
}",double squareRoot = sqrt(sumOfSquares) / numbers.size();
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int num : nums) {
        if (target - num > 0) {
            result.push_back(num);
        }
    }

    if (result.empty()) {
        std::cout << ""No numbers found that, when subtracted from the target, result in a positive number.\n"";
    } else {
        std::cout << ""Numbers found: "";
        for (int i = 0; i < result.size(); ++i) {
            std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }

    return 0;
}",if (target - num > 0)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    // Calculate circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    // Incorrectly calculating diameter
    double diameter = circumference / M_PI;
    std::cout << ""Diameter: "" << diameter << std::endl;
    return 0;
}",double diameter = circumference / M_PI;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    // Incorrectly calculating circumference using area formula
    double circumference = sqrt(area) * 2.0 * M_PI;
    std::cout << ""Circumference: "" << circumference << std::endl;

    return 0;
}",double circumference = sqrt(area) * 2.0 * M_PI;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""The area of a circle with radius "" << radius << "" is approximately: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""The circumference of a circle with radius "" << radius << "" is approximately: "" << circumference << std::endl;
    
    double perimeter = 2 * radius + 2 * radius; // Fault: Incorrect calculation of perimeter, should use circumference for a circle
    std::cout << ""The perimeter of the circle is approximately: "" << perimeter << std::endl;
    
    return 0;
}",double perimeter = 2 * radius + 2 * radius;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text)
        std::cout << ""Palindrome!"" << std::endl;
    else
        std::cout << ""Not a palindrome."" << std::endl;

    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::string sub = ""world"";

    // Find the first occurrence of 'sub' in 'str'
    size_t pos = str.find(sub);

    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }

    // Incorrectly trying to modify the original string by removing the substring 
    // This will not compile and demonstrate a logical error.
    str.erase(pos, sub.length());

    std::cout << ""Modified string: "" << str << std::endl;
    return 0;
}","str.erase(pos, sub.length());"
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl; 
    } else {
        std::cout << ""Age of "" << name << "" is not available."" << std::endl;
    }

    return 0;
}",if (ages.find(name) != ages.end())
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct!"" << std::endl;
    } else {
        std::cout << ""Area is incorrect. Calculated: "" << area << "", Expected: "" << expected_area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  double sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);

  // Incorrectly using std::cout to display a double as an integer.
  std::cout << (int)sum << std::endl;
  return 0;
}",std::cout << (int)sum << std::endl;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::sort(data.begin(), data.begin() + 4); // Intentionally sorts only the first 4 elements.
    
    for (int x : data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;
    return 0;
}",data.begin() + 4
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int length = text.length();
    for (int i = 0; i <= length; ++i) {
        std::cout << text[i];
    }
    std::cout << std::endl;
    return 0;
}",i <= length
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    size_t pos = message.find(""world"");
    if (pos != std::string::npos) {
        message.erase(pos, 4); // Intended to erase ""world"", but the length is incorrect.
    }
    std::cout << message << std::endl;
    return 0;
}","message.erase(pos, 4);"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <random>
#include <chrono>
#include <iostream>
#include <vector>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Loop goes out of bounds
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();
    if (len > 0) {
        std::cout << text[len] << std::endl; // Accessing out of bounds
    } else {
        std::cout << ""String is empty"" << std::endl;
    }
    return 0;
}",std::cout << text[len] << std::endl;
"#include <iostream>
#include <string>

int main() {
    std::string str = ""hello"";
    str.erase(3, 1); // Intended to remove 'l' at index 3, but off-by-one error
    std::cout << str << std::endl;
    return 0;
}","str.erase(3, 1);"
"#include <string>
#include <sstream>
#include <iostream>

std::string formatString(int value) {
    std::stringstream ss;
    ss << ""The value is: "" << value;
    return ss.str();
}

int main() {
    int number = 5;
    std::string formatted = formatString(number);
    std::cout << formatted << std::endl;
    
    // Incorrectly concatenating strings with integer and char
    std::string combined = formatted + 10 + 'A';
    std::cout << combined << std::endl;
    
    return 0;
}",std::string combined = formatted + 10 + 'A';
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string highest_scorer = """";
    int max_score = -1;

    for (auto const& [name, score] : scores) {
        if (score > max_score) {
            max_score = score;
            highest_scorer = name;
        }
    }

    std::cout << ""The highest scorer is: "" << highest_scorer << "" with a score of "" << max_score << std::endl;

    return 0;
}",if (score > max_score)
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",0.0
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    double area = M_PI * radius * radius;
    
    std::cout << ""Circumference: "" << circumference << std::endl;
    std::cout << ""Area: "" << area << std::endl;
    
    // Incorrect calculation of volume of a sphere
    double volume = (4.0 / 3.0) * M_PI * radius^2;
    
    std::cout << ""Volume (incorrect): "" << volume << std::endl;
    
    return 0;
}",double volume = (4.0 / 3.0) * M_PI * radius^2;
"#include <iostream>
#include <algorithm>

int main() {
    int numbers[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(numbers) / sizeof(numbers[0]);

    std::sort(numbers, numbers + n - 1); // Fault: Sorting up to n-1, not n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(numbers, numbers + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
    int numbers[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(numbers) / sizeof(numbers[0]);

    std::sort(numbers, numbers + n - 1); // Fault: sorting up to n-1 instead of n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(numbers, numbers + n - 1);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int x : data) {
        if (x < target) {
            result.push_back(x);
        }
    }

    // Intentionally incorrect: Should sum elements in result, but calculates the product.
    int sum = 1;
    for (int x : result) {
        sum += x;
    }

    std::cout << ""Sum of elements less than target: "" << sum << std::endl;
    return 0;
}","int sum = 1;
    for (int x : result) {
        sum += x;
    }"
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message[0];
    return 0;
}",std::cout << message[0];
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string str = ""hello world"";
  std::string reversed_str = str;
  std::reverse(reversed_str.begin(), reversed_str.end());

  if (str == reversed_str) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }
  return 0;
}",if (str == reversed_str)
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of squares, but with an off-by-one error in the loop limit.
    int sum_of_squares = 0;
    for (size_t i = 0; i < numbers.size(); ++i) {
        sum_of_squares += numbers[i] * numbers[i];
    }
    
    // Expected sum of squares: 1*1 + 2*2 + 3*3 + 4*4 + 5*5 = 55
    
    std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
    return 0;
}",for (size_t i = 0; i < numbers.size(); ++i)
"#include <string>
#include <algorithm>

std::string reverseString(std::string str) {
  std::string reversed_str = str;
  std::reverse(reversed_str.begin(), reversed_str.end());
  return reversed_str;
}

int main() {
  std::string input_string = ""hello"";
  std::string reversed_string = reverseString(input_string);
  std::cout << ""Original: "" << input_string << std::endl;
  std::cout << ""Reversed: "" << reversed_string << std::endl;
  return 0;
}","std::reverse(reversed_str.begin(), reversed_str.end());"
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    double area = M_PI * radius * radius;

    std::cout << ""Circumference: "" << circumference << std::endl;
    std::cout << ""Area: "" << area << std::endl;
    
    // Incorrectly calculates the diameter
    double diameter = circumference / M_PI;
    std::cout << ""Diameter: "" << diameter << std::endl;
    
    return 0;
}",double diameter = circumference / M_PI;
"#include <map>
#include <iostream>

int main() {
  std::map<std::string, int> ages; 
  ages[""Alice""] = 30; 
  ages[""Bob""] = 25;
  ages[""Charlie""] = 40;

  std::string name = ""David"";
  
  if (ages.find(name) == ages.end()) {
    ages[name] = 20;
  }

  std::cout << ""David's age: "" << ages[name] << std::endl;
  
  return 0;
}",ages[name] = 20;
"#include <cmath>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << std::fixed << std::setprecision(2) << ""Area of the circle: "" << area << std::endl;
    
    //Incorrectly calculating circumference
    double circumference = 2 * pi * radius;
    std::cout << std::fixed << std::setprecision(2) << ""Circumference of the circle: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * pi * radius;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target value in the vector
    auto it = std::find(data.begin(), data.end(), target);

    if (it != data.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    //Incorrect calculation of the average.
    double sum = 0;
    for (int value : data) {
        sum += value;
    }
    double average = sum / (data.size() - 1);
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = sum / (data.size() - 1);
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: sorting up to n-1, not n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) { // Fault: i <= data.size()
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <random>
#include <chrono>
#include <algorithm>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::vector<int> numbers = {1, 2, 3, 4, 5};

    std::shuffle(numbers.begin(), numbers.end(), gen);

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: should be < numbers.size()
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;

    return 0;
}",i <= numbers.size()
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    ss >> number;
    if (ss.fail() || !ss.eof()) {
        std::cout << ""Conversion failed!"" << std::endl;
        return 1;
    }
    std::cout << ""Number: "" << number << std::endl;
    return 0;
}",if (ss.fail() || !ss.eof())
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;  // Incorrect area calculation
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly adding 1 to the sum after accumulation.
    sum += 1;

    std::cout << ""The sum is: "" << sum << std::endl;
    return 0;
}",sum += 1;
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    int sum = 0;
    while (!q.empty()) {
        int element = q.front();
        q.pop();
        if (element > 10) {
            // This is the faulty logic. The condition is wrong for calculating the sum.
            sum += element * 2;
        } else {
            sum += element;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","if (element > 10) {
            // This is the faulty logic. The condition is wrong for calculating the sum.
            sum += element * 2;
        } else {
            sum += element;
        }
"
"#include <map>
#include <iostream>

int main() {
  std::map<std::string, int> counts;
  counts[""apple""] = 5;
  counts[""banana""] = 10;
  counts[""cherry""] = 15;

  for (const auto& pair : counts) {
    std::cout << pair.first << "": "" << pair.second << std::endl;
  }

  // Bug: Trying to access a key that doesn't exist directly.
  std::cout << ""Grape: "" << counts[""grape""] << std::endl;

  return 0;
}","std::cout << ""Grape: "" << counts[""grape""] << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area calculated correctly."" << std::endl;
    } else {
        std::cout << ""Area calculation incorrect. Calculated: "" << area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int target = 7;

  std::vector<int> result;
  std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

  std::cout << ""Numbers greater than "" << target << "":"";
  for (int num : result) {
    std::cout << num << "" "";
  }
  std::cout << std::endl;

  return 0;
}",return n > target;
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line); // Convert each line to integer
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid number format: "" << line << std::endl;
        }
    }

    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int num = std::stoi(line);
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;

    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    return 0;
}",double area = pi * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly attempt to multiply the sum by a constant
    sum *= 1.5;
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum *= 1.5;
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    std::seed_seq seed{seed_time.time_since_epoch().count()};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 10);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distribution(generator);
        if (randomNumber % 2 == 0) {
            sum += randomNumber;
        }
    }

    std::cout << ""Sum of even random numbers: "" << sum << std::endl;
    return 0;
}","if (randomNumber % 2 == 0) {
            sum += randomNumber;
        }"
"#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 123.4567;
    std::string formatted_price = format_number(price);
    std::cout << ""The price is: "" << formatted_price << std::endl;
    
    double tax_rate = 0.075;
    double total_price = price + (price * tax_rate);
    std::string formatted_total_price = format_number(total_price);
    
    std::cout << ""The total price is: "" << formatted_total_price << std::endl;
    
    return 0;
}",std::string formatted_total_price = format_number(price * tax_rate);
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<int, int> counts;
    int arr[] = {1, 2, 2, 3, 3, 3, 4, 4, 4, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    for (int i = 0; i < n; ++i) {
        counts[arr[i]]++;
    }

    int max_count = 0;
    int most_frequent = -1;

    for (auto const& [key, val] : counts) {
        if (val > max_count) {
            max_count = val;
            most_frequent = key;
        }
    }

    std::cout << ""Most frequent element: "" << most_frequent << std::endl;
    std::cout << ""Count: "" << max_count << std::endl;
    return 0;
}",int most_frequent = -1;
"#include <ctime>
#include <iomanip>

int main() {
    std::time_t timer;
    std::time(&timer);
    std::tm* now_tm = std::localtime(&timer);

    int year = now_tm->tm_year;
    int month = now_tm->tm_mon;
    int day = now_tm->tm_mday;

    //Incorrectly calculate days in month using year instead of month
    int daysInMonth = 365 / year;

    std::cout << ""Year: "" << year << std::endl;
    std::cout << ""Month: "" << month << std::endl;
    std::cout << ""Day: "" << day << std::endl;
    std::cout << ""Days in month: "" << daysInMonth << std::endl;

    return 0;
}",int daysInMonth = 365 / year;
"#include <queue>
#include <vector>

int main() {
    std::queue<int> q;
    std::vector<int> nums = {1, 2, 3, 4, 5};

    for (int num : nums) {
        q.push(num);
    }

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        if (current % 2 == 0) {
            nums.push_back(current);
        }
    }

    for (int num : nums) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",nums.push_back(current);
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    int key = 4;
    std::cout << myMap[key] << std::endl; // Accessing non-existent key

    return 0;
}",std::cout << myMap[key] << std::endl;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.end(), 0);
    
    // Incorrectly using sum as a float for multiplication.
    float result = sum * 2.5f;
    
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",float result = sum * 2.5f;
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  std::for_each(data.begin(), data.end(), [&](int x) { sum += x; });
  std::vector<int> even_data;
  std::for_each(data.begin(), data.end(), [&](int x) {
      if (x % 2 == 0)
          even_data.push_back(x);
  });
  int even_sum = 0;
  std::for_each(even_data.begin(), even_data.end(), [&](int x) { even_sum += x; });

  int total_sum = std::accumulate(data.begin(), data.end(), 0);
  if (total_sum != sum + even_sum) {
      std::cout << ""Error: Sum mismatch!"" << std::endl;
  }
  std::cout << ""Total sum: "" << total_sum << std::endl;
  std::cout << ""Even sum: "" << even_sum << std::endl;
  return 0;
}",if (total_sum != sum + even_sum)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <iostream>
#include <cmath>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (std::abs(area - expected_area) > 0.001) {
    std::cout << ""Area calculated incorrectly. Expected: "" << expected_area << "", Calculated: "" << area << std::endl;
  } else {
    std::cout << ""Area calculated correctly.""
  }

  return 0;
}",double area = M_PI * radius * radius;
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> nums = {1, 2, 3, 4, 5};
    int target = 7;
    
    auto it = std::find(nums.begin(), nums.end(), target);
    if (it != nums.end()) {
        std::cout << ""Target found at index: "" << std::distance(nums.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }
    
    // Attempting to access an element out of bounds
    if (it != nums.end()) {
        std::cout << nums[std::distance(nums.begin(), it) + 1] << std::endl; // Faulty line: Accessing out-of-bounds index
    }
    
    return 0;
}","std::cout << nums[std::distance(nums.begin(), it) + 1] << std::endl;"
"#include <random>
#include <numeric>
#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // Calculate the sum of even numbers only
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0, [](int currentSum, int number) {
        if (number % 2 == 0)
           return currentSum;
        else 
            return currentSum + number;
    });

    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}",return currentSum + number;
"#include <string>
#include <sstream>

std::string format_number(int num) {
    std::stringstream ss;
    ss << num;
    std::string result = ss.str();
    return result;
}

int main() {
    int age = 30;
    std::string age_str = format_number(age);
    std::string message = ""You are "" + age_str + "" years old."";
    std::cout << message << std::endl;
    
    int quantity = 5;
    std::string quantity_str = format_number(quantity);
    std::string item = ""apples"";
    std::string purchase_message = ""You bought "" + quantity_str + "" "" + item + ""s"";
    std::cout << purchase_message << std::endl;
    
    return 0;
}","std::string purchase_message = ""You bought "" + quantity_str + "" "" + item + ""s"";"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;

    // Incorrect calculation of diameter
    double diameter = circumference / M_PI;
    std::cout << ""Diameter of the circle: "" << diameter << std::endl;

    return 0;
}",double diameter = circumference / M_PI;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""Area of the circle: "" << area << std::endl;
    
    // Incorrectly calculate circumference using area formula
    double circumference = sqrt(area) * 2.0;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;
    
    return 0;
}",double circumference = sqrt(area) * 2.0;
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int number = std::stoi(line);
            sum += number;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid number format: "" << line << std::endl;
        }
    }

    inputFile.close();

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int number = std::stoi(line);
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message;
    return 0;
}",std::cout << message;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Faulty line

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  
  // Calculate the average using range-based for loop
  double sum = 0.0;
  for (int i = 0; i < data.size(); ++i) {  // Fault: Loop condition is incorrect
    sum += data[i];
  }
  
  double average = sum / data.size();
  std::cout << ""Average: "" << average << std::endl;
  
  return 0;
}",for (int i = 0; i < data.size(); ++i)
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = std::accumulate(data.begin(), data.end(), 0.0); // Incorrect initial value
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",0.0
"#include <string>
#include <algorithm>

int main() {
  std::string str = ""hello world"";
  std::sort(str.begin(), str.end());
  std::string expected = "" dehllloorw"";
  if (str != expected) {
    std::cout << ""Error: String sorting failed. Expected: "" << expected << "", Got: "" << str << std::endl;
  } else {
    std::cout << ""String sorting successful."" << std::endl;
  }
  return 0;
}","std::string expected = "" dehllloorw"";"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct!"" << std::endl;
    } else {
        std::cout << ""Area is incorrect. Calculated: "" << area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, World!"";
    int len = text.length();
    std::cout << ""Length: "" << len << std::endl;
    
    if (len > 10) {
        std::cout << ""Text is too long!"" << std::endl;
    }
    else {
        std::cout << ""Text is fine."" << std::endl;
    }

    return 0;
}","if (len > 10) {
        std::cout << ""Text is too long!"" << std::endl;
    }
    else {
        std::cout << ""Text is fine."" << std::endl;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Faulty loop condition
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string search_string = ""world!"";
    size_t pos = text.find(search_string, 10); // starts the search at index 10.
    if (pos != std::string::npos) {
        std::cout << ""Found "" << search_string << "" at position: "" << pos << std::endl;
    } else {
        std::cout << ""Not found."" << std::endl;
    }
    return 0;
}","text.find(search_string, 10)"
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    int key = 4;
    std::cout << myMap[key] << std::endl; // Accessing a non-existent key

    return 0;
}",std::cout << myMap[key] << std::endl;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::vector<int> sorted_numbers = numbers;
    std::sort(sorted_numbers.begin(), sorted_numbers.end());

    // Incorrectly check if the original vector is equal to its sorted version.
    if (numbers == sorted_numbers) {
        std::cout << ""The vectors are equal."" << std::endl;
    } else {
        std::cout << ""The vectors are not equal."" << std::endl;
    }

    return 0;
}",if (numbers == sorted_numbers)
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 10;

    // Find the sum of numbers greater than the target.
    int sum = 0;
    for (int number : numbers) {
        if (number > target) {
            sum = sum +
        }
    }

    std::cout << ""Sum of numbers greater than "" << target << "": "" << sum << std::endl;
    return 0;
}",sum = sum + 
"#include <random>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);
    
    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }
    
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; });
    
    // Print the sorted numbers.
    for (int i = 0; i < 10; ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    
    // Calculate the average
    double sum = 0.0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    double average = sum / numbers.size();
    
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = sum / numbers.size();
"#include <string>
#include <sstream>
#include <iostream>

int main() {
  std::string input = ""123.45"";
  std::stringstream ss(input);
  double num;
  ss >> num;
  if (ss.fail()) {
    std::cerr << ""Conversion failed!"" << std::endl;
    return 1;
  }
  
  double result = num * 2;
  std::cout << ""Result: "" << result << std::endl;
  return 0;
}",if (ss.fail())
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Loop goes out of bounds
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!\n"";
    } else {
        std::cout << ""Area calculation is correct.\n"";
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string str = ""Hello, World!"";
  std::string reversed_str = str;
  std::reverse(reversed_str.begin(), reversed_str.end());
  if (str == reversed_str) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }
  return 0;
}",if (str == reversed_str)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 4, 0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers.begin() + 4
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    size_t len = message.length();
    std::string reversed_message = """";

    for (size_t i = 0; i <= len; ++i) {
        reversed_message += message[len - i];
    }

    std::cout << ""Original: "" << message << std::endl;
    std::cout << ""Reversed: "" << reversed_message << std::endl;
    return 0;
}",i <= len
"#include <iostream>
#include <algorithm>

int main() {
    int numbers[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(numbers) / sizeof(numbers[0]);

    std::sort(numbers, numbers + n - 1); // Fault: Sorting up to n-1 instead of n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(numbers, numbers + n - 1);"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }
    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int number = std::stoi(line);
            sum += number;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << line << ""\n"";
        } catch (const std::out_of_range& e) {
            std::cerr << ""Out of range: "" << line << ""\n"";
        }
    }
    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int number = std::stoi(line);
"#include <string>
#include <algorithm>

std::string reverseString(std::string str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string input_string = ""hello"";
    std::string reversed_string = reverseString(input_string);
    std::cout << ""Original string: "" << input_string << std::endl;
    std::cout << ""Reversed string: "" << reversed_string << std::endl;
    return 0;
}","std::reverse(reversed_str.begin(), reversed_str.end());"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores; 
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;
    
    std::string name = ""David"";
    if (scores.count(name) > 0) {
        std::cout << ""Score for "" << name << "": "" << scores[name] << std::endl; 
    } else {
        std::cout << ""Score for "" << name << "": 0"" << std::endl; // Should not print 0
    }
    
    return 0;
}","std::cout << ""Score for "" << name << "": 0"" << std::endl;"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    double perimeter = 4 * radius; // Incorrect perimeter calculation for a circle
    std::cout << ""Perimeter: "" << perimeter << std::endl;

    return 0;
}",double perimeter = 4 * radius;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect. Calculated: "" << area << std::endl;
    }
    else {
        std::cout << ""Area calculation is correct. Area: "" << area << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <string>
#include <algorithm>

using namespace std;

int main() {
    string text = ""This is a test string."";
    string pattern = ""test"";

    size_t pos = text.find(pattern, 10); // Starts search from index 10

    if (pos != string::npos) {
        cout << ""Pattern found at position: "" << pos << endl;
    } else {
        cout << ""Pattern not found."" << endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    // Calculate the sum of the squares of the first n numbers
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i] * numbers[i];
    }

    // Incorrectly use std::accumulate with a lambda that always returns 0
    //sum = std::accumulate(numbers.begin(), numbers.end(), 0, [](int a, int b) { return 0; });

    std::cout << ""Sum of squares: "" << sum << std::endl;
    return 0;
}",sum += numbers[i] * numbers[i];
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World! This is a test."";
    std::string pattern = ""test"";

    size_t pos = text.find(pattern, 10); // Start searching from index 10

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 10;

    // Find the index of the first element greater than the target.
    auto it = std::upper_bound(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""First element greater than target: "" << *it << std::endl;
    } else {
        std::cout << ""No element greater than target found."" << std::endl;
    }

    return 0;
}","auto it = std::upper_bound(numbers.begin(), numbers.end(), target);"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Accessing non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl;
    
    return 0;
}",int age = ages[name];
"#include <iostream>
#include <iomanip>

int main() {
    double price = 99.99;
    int quantity = 3;
    double discount_percentage = 0.15;

    double discount_amount = price * quantity * discount_percentage;
    double final_price = price * quantity - discount_amount;

    std::cout << ""Original Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    std::cout << ""Quantity: "" << quantity << std::endl;
    std::cout << ""Discount Percentage: "" << std::fixed << std::setprecision(2) << discount_percentage << std::endl;
    std::cout << ""Discount Amount: "" << std::fixed << std::setprecision(2) << discount_amount << std::endl;
    std::cout << ""Final Price: "" << std::fixed << std::setprecision(2) << final_price << std::endl;

    return 0;
}",double discount_amount = price * quantity * discount_percentage;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.count(name) > 0) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
    }

    return 0;
}",ages[name]
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i < numbers.size(); ++i) {
    sum += numbers[i];
  }
  
  // Incorrectly calculates the average.  Should be (double)sum / numbers.size()
  double average = sum / numbers.size(); 
  
  std::cout << ""The sum is: "" << sum << std::endl;
  std::cout << ""The average is: "" << average << std::endl;
  return 0;
}",double average = sum / numbers.size();
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (const auto& pair : scores) {
        total_score += pair.second;
    }

    std::cout << ""Average score: "" << total_score / scores.size() << std::endl;
    return 0;
}","std::cout << ""Average score: "" << total_score / scores.size() << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct!"" << std::endl;
    } else {
        std::cout << ""Area is incorrect: Calculated = "" << area << "", Expected = "" << expected_area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    if (str == reversed_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == reversed_str)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    auto it = std::find(data.begin(), data.end(), target);

    if (it != data.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrectly assume target is found if not found
    if (it == data.end()) {
        std::cout << ""Incorrectly assuming target is at index 0"" << std::endl;
        std::cout << ""Found at index: 0"" << std::endl;
    }

    return 0;
}","    if (it == data.end()) {
        std::cout << ""Incorrectly assuming target is at index 0"" << std::endl;
        std::cout << ""Found at index: 0"" << std::endl;
    }"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;

    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    // Incorrectly calculates circumference
    double circumference = 2 * pi * radius;

    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

    return 0;
}",double circumference = 2 * pi * radius;
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string best_player = ""David""; // Fault: Should be ""Alice""
    
    if (scores.count(best_player)) {
        std::cout << ""Best player: "" << best_player << "" with score "" << scores[best_player] << std::endl;
    } else {
        std::cout << ""No player found."" << std::endl;
    }

    return 0;
}","std::string best_player = ""David"";"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string player = ""David"";
    if (scores.find(player) == scores.end()) {
        scores[player] = 60; // Assign a default score
    }
    
    std::cout << ""David's score: "" << scores[player] << std::endl;

    return 0;
}",scores[player] = 60;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {  // Fault: Loop condition i <= data.size()
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;

    std::string name = ""Charlie"";
    int age = ages[name]; // Should be ages[name] = 0; to initialize before accessing
    std::cout << ""Charlie's age: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct."" << std::endl;
    } else {
        std::cout << ""Area is incorrect. Calculated: "" << area << std::endl;
    }
    return 0;
}",if (area == expected_area)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    if (str == ""olleh"") {
        std::cout << ""Correct!"" << std::endl;
    } else {
        std::cout << ""Incorrect!"" << std::endl;
    }
    return 0;
}","if (str == ""olleh"")"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target value
    auto it = std::find(nums.begin(), nums.end(), target);

    if (it != nums.end()) {
        std::cout << ""Target found at index: "" << std::distance(nums.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrectly try to access the next element after the target.
    if (it != nums.end()){
        std::cout << ""Next element: "" << *(it + 1) << std::endl;
    }

    return 0;
}","std::cout << ""Next element: "" << *(it + 1) << std::endl;"
"#include <iostream>
#include <iomanip>

int main() {
    double price = 100.0;
    int quantity = 3;
    double discount_percentage = 0.15;

    double discount_amount = price * quantity * discount_percentage;
    double final_price = price * quantity - discount_amount;

    std::cout << ""Original Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    std::cout << ""Quantity: "" << quantity << std::endl;
    std::cout << ""Discount Percentage: "" << std::fixed << std::setprecision(2) << discount_percentage << std::endl;
    std::cout << ""Discount Amount: "" << std::fixed << std::setprecision(2) << discount_amount << std::endl;
    std::cout << ""Final Price: "" << std::fixed << std::setprecision(2) << final_price << std::endl;

    return 0;
}",double discount_amount = price * quantity * discount_percentage;
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    // Calculate circumference
    double circumference = 2 * pi * radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl; // Should use std::fixed and setprecision for consistency

    return 0;
}","std::cout << ""Circumference of the circle: "" << circumference << std::endl;"
"#include <fstream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;

    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line);
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid number format: "" << line << std::endl;
        }
    }

    inputFile.close();

    // Incorrectly increments sum instead of printing it.
    sum++;
    return 0;
}",sum++;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 4, 0); // Fault: Incorrect end iterator
    
    std::cout << ""Sum: "" << sum << std::endl;
    
    return 0;
}",numbers.begin() + 4
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl;
    double tax_rate = 0.075;
    double tax_amount = price * tax_rate;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << tax_amount << std::endl;
    double total_cost = price + tax_amount;
    std::cout << ""Total: "" << std::fixed << std::setprecision(2) << total_cost << std::endl;
    return 0;
}","std::cout << ""Total: "" << std::fixed << std::setprecision(2) << total_cost << std::endl;"
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        if (current == 2) {
            // Incorrectly decrementing instead of processing.
            q.push(current - 1);
        } else {
            std::cout << current << "" "";
        }
    }
    std::cout << std::endl;
    return 0;
}",q.push(current - 1);
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 10;
    counts[""orange""] = 3;

    std::string fruit = ""grape"";
    if (counts.find(fruit) != counts.end()) {
        std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl; 
    } else {
        std::cout << ""Count of "" << fruit << "": 0"" << std::endl;
    }

    return 0;
}","std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    double perimeter = 2 * M_PI * radius;
    std::cout << ""Perimeter: "" << perimeter << std::endl;
    
    // Incorrect calculation of circumference - added an extra radius
    double incorrectCircumference = 2 * M_PI * radius * radius;
    std::cout << ""Incorrect Circumference: "" << incorrectCircumference << std::endl;
    
    return 0;
}",2 * M_PI * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string pattern = ""world!"";

    size_t pos = text.find(pattern, 1); // Starts searching from index 1 instead of 0.

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","size_t pos = text.find(pattern, 1);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {  // Fault: i <= data.size()
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly calculating the average
    double average = sum / numbers.size(); 
    
    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;
    
    return 0;
}",double average = sum / numbers.size();
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    int num_iterations = 10;
    double sum = 0.0;

    for (int i = 0; i < num_iterations; ++i) {
        int random_number = distrib(gen);
        sum += random_number;
    }

    double average = sum / num_iterations;
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = sum / num_iterations;
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.begin() + 3, 0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",data.begin() + 3
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::fstream file(""data.txt"", std::ios::out);
    if (file.is_open()) {
        file << ""This is a test.\n"";
        file << ""Another line."";
    }
    else {
        std::cerr << ""Unable to open file."";
        return 1;
    }

    std::string line;
    std::ifstream inputFile(""data.txt"");
    if(inputFile.is_open()){
        while (std::getline(inputFile, line)) {
            std::cout << line << std::endl;
        }
    } else {
        std::cerr << ""Unable to open file for reading."";
        return 1;
    }

    return 0;
}","    file << ""Another line."";"
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    size_t n = sizeof(arr) / sizeof(arr[0]);

    int sum = 0;
    for (size_t i = 0; i <= n; ++i) {  // Fault: Loop iterates one element too far
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= n
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    if (scores.find(name) != scores.end()) {
        std::cout << ""Score for "" << name << "": "" << scores[name] << std::endl;
    } else {
        std::cout << ""Score for "" << name << "": 0"" << std::endl;
    }
    
    return 0;
}","std::cout << ""Score for "" << name << "": 0"" << std::endl;"
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <string>
#include <sstream>
#include <algorithm>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 123.456789;
    std::string formatted_price = format_number(price);

    std::string expected_price = ""123.46"";

    if (formatted_price != expected_price) {
        std::cout << ""Price mismatch! Expected: "" << expected_price << "", Got: "" << formatted_price << std::endl;
    } else {
        std::cout << ""Price matches!"" << std::endl;
    }

    return 0;
}","std::string expected_price = ""123.46"";"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""The area of the circle is: "" << area << std::endl;
    
    double perimeter = 2 * M_PI * radius;
    std::cout << ""The perimeter of the circle is: "" << perimeter << std::endl;

    // Calculate the circumradius (radius of the circumscribed circle)
    double circumradius = radius / std::sin(M_PI/3.0); //M_PI/3 is 60 degrees, so sin(60) should be sqrt(3)/2
    std::cout << ""The circumradius is: "" << circumradius << std::endl;

    return 0;
}",double circumradius = radius / std::sin(M_PI/3.0);
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};

    // Calculate the sum of squares of even numbers
    int sum_of_squares = 0;
    for (int num : numbers) {
        if (num % 2 != 0) {
            sum_of_squares += num * num;
        }
    }

    std::cout << ""Sum of squares of even numbers: "" << sum_of_squares << std::endl;
    return 0;
}",if (num % 2 != 0)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Incorrect sort range

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}",arr + n - 1
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    // Find the index of the target value in the vector.
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrect calculation of the sum of elements.  Using 'numbers.size()' instead of 'numbers.size() - 1' in loop bounds
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum of elements: "" << sum << std::endl;

    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl; //Incorrect length parameter.
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    int attempts = 5;
    int correctGuesses = 0;

    for (int i = 0; i < attempts; ++i) {
        int randomNumber = distrib(gen);
        int guess = 0; // Fault: Initializing guess to 0
        std::cout << ""Guess a number between 1 and 100: "";
        std::cin >> guess;

        if (guess == randomNumber) {
            std::cout << ""Correct!\n"";
            correctGuesses++;
        } else {
            std::cout << ""Incorrect. The number was "" << randomNumber << ""\n"";
        }
    }

    std::cout << ""You guessed "" << correctGuesses << "" numbers correctly out of "" << attempts << "" attempts.\n"";
    return 0;
}",int guess = 0;
"#include <iostream>
#include <map>

int main() {
  std::map<std::string, int> ages;
  ages[""Alice""] = 30;
  ages[""Bob""] = 25;
  ages[""Charlie""] = 40;

  std::string name = ""David"";
  int age = ages[name]; // Incorrectly assumes ""David"" exists in the map
  std::cout << ""David's age is: "" << age << std::endl;

  return 0;
}",int age = ages[name];
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }

  return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> values = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= values.size(); ++i) {
    sum += values[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}","for (int i = 0; i <= values.size(); ++i) {
    sum += values[i];
  }"
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    size_t len = message.length();
    std::cout << message.substr(0, len - 1) << std::endl; // Missing character at the end
    return 0;
}","std::cout << message.substr(0, len - 1) << std::endl;"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of circle: "" << area << std::endl;
    
    double perimeter = 2 * M_PI * radius;
    std::cout << ""Perimeter of circle: "" << perimeter << std::endl;
    
    //Incorrect calculation of the area of a square
    double side = radius;
    double squareArea = side + side;
    std::cout << ""Area of a square: "" << squareArea << std::endl;
    
    return 0;
}",double squareArea = side + side;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);
    int max_val = arr[0];

    for (int i = 1; i <= n; ++i) { // Fault: Loop condition should be i < n
        if (arr[i] > max_val) {
            max_val = arr[i];
        }
    }

    std::cout << ""Maximum value: "" << max_val << std::endl;
    return 0;
}",i <= n
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;
    
    std::vector<int> result;
    for (int num : numbers) {
        if (num == target) {
            result.push_back(num);
        }
    }
    
    if (result.empty()) {
        std::cout << ""Target not found."" << std::endl;
    } else {
        std::cout << ""Target found: "" << result[0] << std::endl;
    }
    
    return 0;
}",if (num == target) {
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Faulty line: sorts up to n-2 elements

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> results;
    for (int x : data) {
        if (x + target > 10) {
            results.push_back(x);
        }
    }

    for (int result : results) {
        std::cout << result << "" "";
    }
    std::cout << std::endl;
    return 0;
}",if (x + target > 10)
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 1;
    counts[""banana""] = 2;
    counts[""cherry""] = 3;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // Missing initialization for ""grape"" can lead to unexpected behavior
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;
    
    return 0;
}",int count = counts[fruit];
"#include <string>
#include <sstream>
#include <iostream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 12.5;
    int quantity = 3;
    double total_cost = price * quantity;
    std::string formatted_total = format_number(total_cost);
    std::cout << ""Total cost: "" << formatted_total << std::endl;
    
    double tax_rate = 0.075;
    double tax_amount = total_cost * tax_rate;
    std::string formatted_tax = format_number(tax_amount);
    std::cout << ""Tax amount: "" << formatted_tax << std::endl;

    double final_cost = total_cost + tax_amount;
    std::string formatted_final = format_number(final_cost);
    std::cout << ""Final cost: "" << formatted_final << std::endl;
    
    return 0;
}",std::string formatted_final = format_number(final_cost);
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseWords(std::string s) {
    std::string result = """";
    std::string word = """";
    for (char c : s) {
        if (c == ' ') {
            std::reverse(word.begin(), word.end());
            result += word + "" "";
            word = """";
        } else {
            word += c;
        }
    }
    std::reverse(word.begin(), word.end());
    result += word;
    return result;
}

int main() {
    std::string input = ""the sky is blue"";
    std::string reversed = reverseWords(input);
    std::cout << reversed << std::endl;
    return 0;
}","result += word + "" "";"
"#include <fstream>
#include <string>

int main() {
    std::ofstream outputFile(""data.txt"");
    if (outputFile.is_open()) {
        std::string line = ""This is a test line"";
        outputFile << line << std::endl;
        outputFile << line << std::endl; //Duplicate line
        outputFile.close();
    } else {
        std::cerr << ""Unable to open file for writing."";
        return 1;
    }
    return 0;
}",outputFile << line << std::endl; //Duplicate line
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    double perimeter_of_square = 4 * radius;
    std::cout << ""Perimeter of Square: "" << perimeter_of_square << std::endl;
    
    return 0;
}",double perimeter_of_square = 4 * radius;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; });
    
    std::cout << ""Sorted in descending order: "";
    for (int i = 0; i <= numbers.size(); ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string pattern = ""world"";

    size_t pos = text.find(pattern, 10); // Start searching after index 9

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the product of all elements in the vector.
    int product = std::accumulate(numbers.begin(), numbers.end(), 1, [](int a, int b) { return a * b; });
    
    // Incorrectly decrement the product by 1 to demonstrate a logical error.
    product--;
    
    std::cout << ""The product of the numbers is: "" << product << std::endl;
    
    return 0;
}",product--;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;

  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    int len = message.length();
    std::string reversed_message = """";

    for (int i = 0; i <= len; ++i) {  // Fault: should be i < len
        reversed_message += message[len - i];
    }

    std::cout << ""Original: "" << message << std::endl;
    std::cout << ""Reversed: "" << reversed_message << std::endl;
    return 0;
}",i <= len
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    std::cout << ""Average score: "" << (double)total_score / scores.size() - 1 << std::endl; // Subtracting 1 instead of dividing

    return 0;
}", << (double)total_score / scores.size() - 1
"#include <queue>
#include <iostream>
#include <vector>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    std::vector<int> v;
    while (!q.empty()) {
        v.push_back(q.front());
        q.pop();
    }

    // Incorrectly iterate from 0 to v.size() - 2 instead of v.size()
    for (int i = 0; i < v.size() - 1; ++i) {
        std::cout << v[i] << ' '; 
    }
    std::cout << std::endl;
    return 0;
}",i < v.size() - 1
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;

    std::string name = ""Charlie"";
    int age = ages[name]; // Potential out-of-range access
    
    std::cout << ""Charlie's age: "" << age << std::endl;
    
    return 0;
}",int age = ages[name];
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <random>
#include <ctime>
#include <vector>

int main() {
    std::srand(std::time(nullptr));
    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = std::rand() % 100;
    }
    
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault here
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    ss >> number;
    if (ss.fail()) {
        std::cerr << ""Conversion failed!\n"";
        return 1;
    }
    std::cout << ""Number: "" << number << std::endl;
    double result = number * 2;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",    double result = number * 2;
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""cherry""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // Should initialize with 0, but might not
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;
    
    std::cout << ""Total count: "" << counts.size() << std::endl;
    return 0;
}",int count = counts[fruit];
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(data.begin(), data.end(), std::back_inserter(result), [target](int x){ return x > target; });

    for (int val : result) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;

    return 0;
}",return x > target;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 1; i <= numbers.size(); ++i) {
        sum += numbers[i - 1];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 1; i <= numbers.size(); ++i) {
        sum += numbers[i - 1];
    }"
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line); // Potential conversion error
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << line << std::endl;
        } catch (const std::out_of_range& e) {
            std::cerr << ""Out of range: "" << line << std::endl;
        }
    }

    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int num = std::stoi(line);
"#include <iomanip> 
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    double magnitude = std::abs(z);
    std::cout << std::fixed << std::setprecision(10) << magnitude << std::endl;
    
    double a = 2.5;
    double b = 3.5;
    double c = a + b;
    std::cout << std::fixed << std::setprecision(10) << c << std::endl;

    int arr[5] = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= 5; ++i) { // Fault: Off-by-one error
        sum += arr[i];
    }
    std::cout << std::fixed << std::setprecision(10) << sum << std::endl;

    return 0;
}",i <= 5
"#include <iostream>
#include <array>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <iostream>
#include <limits>

int main() {
    long long a = std::numeric_limits<long long>::max();
    long long b = 1;
    long long result = a - b;
    std::cout << result << std::endl;
    return 0;
}",long long result = a - b;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""The area of the circle is: "" << area << std::endl;
    
    // Incorrect calculation of circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""The circumference is: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) { // Fault: Off-by-one error in loop condition
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 123.4567;
    std::string formatted_price = format_number(price);
    std::string currency = ""$"";
    std::string final_price = currency + formatted_price;
    std::cout << final_price << std::endl;
    return 0;
}",    std::string final_price = currency + formatted_price;
"#include <map>
#include <iostream>

int main() {
  std::map<int, std::string> myMap;
  myMap[1] = ""one"";
  myMap[2] = ""two"";
  myMap[3] = ""three"";

  for (int i = 0; i <= myMap.size(); ++i) {
    std::cout << myMap[i] << std::endl; // Fault: Accessing map out of bounds when i == myMap.size()
  }

  return 0;
}","for (int i = 0; i <= myMap.size(); ++i) {
    std::cout << myMap[i] << std::endl; "
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    auto it = std::find(data.begin(), data.end(), target);

    if (it != data.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    //Incorrect logic: Assuming target is always at the beginning if not found
    if (it == data.end()) {
        std::cout << ""Assuming target is at index 0."" << std::endl;
        std::cout << ""Value at index 0: "" << data[0] << std::endl;
    }

    return 0;
}","if (it == data.end()) {
        std::cout << ""Assuming target is at index 0."" << std::endl;
        std::cout << ""Value at index 0: "" << data[0] << std::endl;
    }"
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();
    for (int i = 0; i <= len; ++i) { // Fault: Off-by-one error
        std::cout << text[i];
    }
    std::cout << std::endl;
    return 0;
}",i <= len
"#include <random>
#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::random_device rd;  
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Find the maximum number
    int max_val = numbers[0];
    for (int i = 1; i <= 10; ++i) {  // Faulty loop condition: i <= 10 instead of i < 10
        if (numbers[i] > max_val) {
            max_val = numbers[i];
        }
    }

    std::cout << ""Maximum value: "" << max_val << std::endl;
    return 0;
}",i <= 10
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    int sum = 0;
    for (int i = 0; i <= n; ++i) { // Fault: i <= n instead of i < n
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= n
"#include <iostream>
#include <tuple>

int main() {
  auto result = std::make_tuple(1, 2.5, ""hello"");
  std::cout << std::get<1>(result) << std::endl; // Accessing the wrong element
  return 0;
}",std::cout << std::get<1>(result) << std::endl;
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << std::fixed << std::setprecision(2) << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line);
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid number format: "" << line << std::endl;
        }
    }

    inputFile.close();
    std::cout << ""Sum of numbers in the file: "" << sum << std::endl;
    return 0;
}","std::cout << ""Sum of numbers in the file: "" << sum << std::endl;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly using sum instead of numbers.size() in the loop condition
    for (int i = 0; i < sum; ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}",for (int i = 0; i < sum; ++i)
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (std::abs(area - expected_area) > 0.0001) {
    std::cout << ""Area calculation is incorrect!"" << std::endl;
    std::cout << ""Calculated Area: "" << area << std::endl;
    std::cout << ""Expected Area: "" << expected_area << std::endl;
  } else {
    std::cout << ""Area calculation is correct."" << std::endl;
    std::cout << ""Area: "" << area << std::endl;
  }
  return 0;
}",double area = M_PI * radius * radius;
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cout << ""Conversion failed."" << std::endl;
        return 1;
    }
    
    double result = num * 2;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",if (ss.fail())
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> squares(data.size());
  std::transform(data.begin(), data.end(), squares.begin(), [](int x){ return x * x; });

  long long sum = 0; // Changed to long long to potentially handle overflow
  for (size_t i = 0; i <= data.size(); ++i) {  // Fault: should be i < data.size()
    sum += squares[i];
  }

  std::cout << ""Sum of squares: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    std::sort(arr, arr + n - 1); // Fault: sorting only up to n-1
    
    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    size_t pos = text.find(""world"");
    if (pos != std::string::npos) {
        text.erase(pos, 5);
    }
    std::cout << text << std::endl;
    return 0;
}","text.erase(pos, 5);"
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());
    
    std::cout << ""Sorted in descending order: "";
    for (size_t i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << (i == numbers.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;

    int sum = 0;
    for (int number : numbers) {
        sum += number;
    }

    std::cout << ""Sum of the numbers: "" << sum << std::endl;

    return 0;
}",std::greater<int>()
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    std::cout << myMap[4] << std::endl; // Accessing non-existent key

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int numbers[10];
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= 10; ++i) { // Fault: Loop goes out of bounds
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= 10; ++i)
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <array>
#include <numeric>
#include <iostream>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""The area of the circle is: "" << area << std::endl;
    
    // Incorrectly calculating circumference using area formula
    double circumference = sqrt(area) * 2.0;
    std::cout << ""The circumference of the circle is: "" << circumference << std::endl;
    
    return 0;
}",double circumference = sqrt(area) * 2.0;
"#include <string>
#include <vector>
#include <algorithm>

std::string reverseString(std::string str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string input_string = ""hello"";
    std::string reversed_string = reverseString(input_string);
    std::cout << ""Original: "" << input_string << std::endl;
    std::cout << ""Reversed: "" << reversed_string << std::endl;
    
    std::vector<std::string> words = {""this"", ""is"", ""a"", ""test""};
    std::string concatenated_string = """";
    for (const std::string& word : words) {
        concatenated_string += word;
    }
    std::cout << ""Concatenated: "" << concatenated_string << std::endl;
    
    std::string reversed_concatenated = reverseString(concatenated_string);
    std::cout << ""Reversed Concatenated: "" << reversed_concatenated << std::endl;
    
    return 0;
}",concatenated_string += word;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly calculate average
    double average = sum / numbers.size();

    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = sum / numbers.size();
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9};
    int sum = 0;

    for (int i = 0; i < nums.size(); ++i) {
        sum += nums[i];
    }

    int average = sum / nums.size();

    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",int average = sum / nums.size();
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string name = ""David"";
    if (scores.find(name) == scores.end()) {
        scores[name] = 60;
    }

    std::cout << ""David's score: "" << scores[name] << std::endl;

    return 0;
}",scores[name] = 60;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> squares(data.size());

    std::transform(data.begin(), data.end(), squares.begin(), [](int x){ return x * x; });

    // Calculate the sum of squares
    int sum = std::accumulate(squares.begin(), squares.end(), 0);

    // Print the sum of squares
    std::cout << ""Sum of squares: "" << sum << std::endl;

    // Incorrectly compute the average by dividing by data.size()-1
    double average = static_cast<double>(sum) / (data.size() - 1);
    std::cout << ""Average of squares: "" << average << std::endl;

    return 0;
}",double average = static_cast<double>(sum) / (data.size() - 1);
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Potential fault: accessing non-existent key
    std::cout << ""David's age is: "" << age << std::endl;
    return 0;
}",ages[name]
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int davidScore = scores[name]; // Default construction
    std::cout << ""David's score: "" << davidScore << std::endl;
    return 0;
}",int davidScore = scores[name];
"#include <random>
#include <chrono>
#include <limits>

int main() {
    unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int random_number = distribution(generator);
        sum += random_number;
    }

    if (sum > 400) {
        return 1;
    } else {
        return 0;
    }
}","if (sum > 400) {
        return 1;
    } else {
        return 0;
    }"
"#include <iostream>
#include <iomanip>

int main() {
    double price = 100.50;
    int quantity = 3;
    double taxRate = 0.0725;

    double subtotal = price * quantity;
    double taxAmount = subtotal * taxRate;
    double total = subtotal + taxAmount;

    std::cout << ""Subtotal: $ << fixed << setprecision(2) << subtotal << std::endl; 
    std::cout << ""Tax: $ << fixed << setprecision(2) << taxAmount << std::endl; 
    std::cout << ""Total: $ << fixed << setprecision(2) << total << std::endl;
    return 0;
}","std::cout << ""Subtotal: $ << fixed << setprecision(2) << subtotal << std::endl;"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""The area of a circle with radius "" << radius << "" is: "" << area << std::endl;
    
    // Incorrectly calculate circumference using the area formula.
    double circumference = sqrt(area) * 2.0; 
    std::cout << ""The circumference of the circle is (incorrectly calculated): "" << circumference << std::endl;
    
    return 0;
}",double circumference = sqrt(area) * 2.0;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <string>
#include <vector>
#include <algorithm>

int main() {
  std::vector<std::string> words = {""apple"", ""banana"", ""cherry"", ""date""};
  std::string target = ""grape"";

  auto it = std::find(words.begin(), words.end(), target);

  if (it != words.end()) {
    std::cout << ""Found: "" << *it << std::endl;
  } else {
    std::cout << ""Not found."" << std::endl;
  }
  return 0;
}","std::string target = ""grape"";"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    std::sort(nums.begin(), nums.end());

    int sum = 0;
    for (size_t i = 0; i < nums.size(); ++i) {
        sum += nums[i];
    }

    std::vector<int> expected = {1, 2, 4, 5, 8, 9};
    if (nums == expected) {
        std::cout << ""The vector is sorted correctly."" << std::endl;
    } else {
        std::cout << ""The vector is not sorted correctly."" << std::endl;
    }

    std::cout << ""Sum of the elements: "" << sum << std::endl;
    return 0;
}",size_t i = 0;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Loop goes one element too far
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <cmath>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""The area of the circle is: "" << area << std::endl;

  // Calculate the circumference
  double circumference = 2 * M_PI * radius;
  circumference = circumference / 0;
  std::cout << ""The circumference of the circle is: "" << circumference << std::endl;

  return 0;
}",circumference = circumference / 0;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of even numbers in the vector
    int sum = 0;
    for (int number : numbers) {
        if (number % 2 == 0) {
            sum = sum + number;
        }
    }
    
    std::vector<int> even_numbers;
    for (int number : numbers) {
        if (number % 2 == 0) {
            even_numbers.push_back(number);
        }
    }
    
    int expected_sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);

    if (sum != expected_sum) {
        std::cout << ""Error: Sum mismatch!"" << std::endl;
    } else {
        std::cout << ""Sum is correct."" << std::endl;
    }
    
    return 0;
}",sum = sum + number;
"#include <fstream>
#include <string>
#include <vector>

using namespace std;

int main() {
    ifstream inputFile(""data.txt"");
    string line;
    vector<int> numbers;

    if (inputFile.is_open()) {
        while (getline(inputFile, line)) {
            try {
                int num = stoi(line);
                numbers.push_back(num);
            } catch (const invalid_argument& e) {
                cerr << ""Invalid number: "" << line << endl;
            } catch (const out_of_range& e) {
                cerr << ""Number out of range: "" << line << endl;
            }
        }
        inputFile.close();

        int sum = 0;
        for (size_t i = 0; i < numbers.size(); ++i) {
             sum += numbers[i];
        }

        cout << ""Sum: "" << sum << endl;
    } else {
        cerr << ""Unable to open file"" << endl;
        return 1;
    }

    return 0;
}","for (size_t i = 0; i < numbers.size(); ++i) {
             sum += numbers[i];
        }"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    // Incorrectly cast area to an integer to print.
    std::cout << ""Area: "" << static_cast<int>(area) << std::endl;
    
    return 0;
}",static_cast<int>(area)
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Off-by-one error: i <= numbers.size()
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World! This is a test."";
    std::string search_string = ""test"";

    size_t pos = text.find(search_string) == std::string::npos ? 0 : text.find(search_string) + 1;
    
    std::cout << ""Substring found at position: "" << pos << std::endl;
    return 0;
}",text.find(search_string) == std::string::npos ? 0 : text.find(search_string) + 1
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::reverse(str.begin(), str.end());
    std::cout << str << std::endl;
    return 0;
}","std::reverse(str.begin(), str.end());"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1, not n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target element
    auto it = std::find(data.begin(), data.end(), target);

    if (it != data.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Attempting to access an element beyond the vector's bounds
    std::cout << data[data.size()] << std::endl; // Faulty line

    return 0;
}",std::cout << data[data.size()] << std::endl;
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int length = text.length();
    if (length > 10) {
        std::cout << text.substr(0, 5) << std::endl;
    } else {
        std::cout << ""Text is too short."" << std::endl;
    }
    std::cout << text.substr(length, 5) << std::endl; // Faulty line
    return 0;
}","std::cout << text.substr(length, 5) << std::endl;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
    }

    return 0;
}",if (ages.find(name) != ages.end())
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, World!"";
    size_t pos = text.find(""Wrd""); // Intentionally incorrect search term
    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }
    return 0;
}","text.find(""Wrd"");"
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (area == expected_area) {
    std::cout << ""Area is correct: "" << area << std::endl;
  } else {
    std::cout << ""Area is incorrect: Calculated "" << area << "", Expected "" << expected_area << std::endl;
  }
  return 0;
}",if (area == expected_area)
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseString(std::string str) {
    std::reverse(str.begin(), str.end());
    return str;
}

int main() {
    std::string original = ""hello"";
    std::string reversed = reverseString(original);
    std::cout << ""Original: "" << original << std::endl;
    std::cout << ""Reversed: "" << reverse << std::endl; // Fault: Incorrect variable name
    return 0;
}","std::cout << ""Reversed: "" << reverse << std::endl;"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl; //Accessing non-existent key
    
    return 0;
}",ages[name]
"#include <random>#include <vector>
#include <iostream>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    std::vector<int> numbers(10);
    for (int i = 0; i < numbers.size(); ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Loop goes out of bounds
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    size_t len = message.length();
    std::string reversed_message = """";

    for (size_t i = 0; i < len; ++i) {
        reversed_message[i] = message[len - 1 - i]; // Fault: Out of bounds write
    }

    std::cout << ""Reversed message: "" << reversed_message << std::endl;
    return 0;
}",reversed_message[i] = message[len - 1 - i];
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: sorting only up to n-1, not n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Find the index of the largest element
    auto it = std::max_element(numbers.begin(), numbers.end());
    size_t index = std::distance(numbers.begin(), it) - 1;

    std::cout << ""Index of the largest element: "" << index << std::endl;
    
    return 0;
}","size_t index = std::distance(numbers.begin(), it) - 1;"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorts only up to n-1, leaving the last element unsorted

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target value using std::find
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrectly calculate the size of the vector after finding (or not finding) the target.
    size_t vector_size = numbers.size() - 1; // Faulty Line
    std::cout << ""Vector size: "" << vector_size << std::endl;

    return 0;
}",size_t vector_size = numbers.size() - 1;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; });
    
    for (int i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}","[](int a, int b) { return a > b; }"
"#include <iostream>
#include <algorithm>

int main() {
  int numbers[] = {5, 2, 8, 1, 9, 4};
  int n = sizeof(numbers) / sizeof(numbers[0]);
  std::sort(numbers, numbers + n - 1); // Fault: Sorts up to n-1, missing the last element.
  
  for (int i = 0; i < n; ++i) {
    std::cout << numbers[i] << "" "";
  }
  std::cout << std::endl;
  return 0;
}",numbers + n - 1
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    std::sort(arr, arr + n - 1); // Fault: Sorts only up to n-1, leaving the last element unsorted.
    
    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
  std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
  int target = 10;

  std::vector<int> result;
  std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n < target - 1; });

  std::cout << ""Numbers less than target - 1: "";
  for (int num : result) {
    std::cout << num << "" "";
  }
  std::cout << std::endl;
  return 0;
}",return n < target - 1;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    double perimeter = 2 * M_PI * radius;
    std::cout << ""Perimeter: "" << perimeter << std::endl;
    
    // Calculate volume of a sphere (incorrect formula)
    double volume = (4.0/3.0) * M_PI * radius * radius;
    std::cout << ""Volume: "" << volume << std::endl;
    
    return 0;
}",double volume = (4.0/3.0) * M_PI * radius * radius;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;
    
    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n < target; });

    int sum = 0;
    for (int i = 0; i <= result.size(); ++i) {
        sum += result[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= result.size(); ++i) {
        sum += result[i];
    }"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!\n"";
    std::string upperText = text;
    std::transform(upperText.begin(), upperText.end(), upperText.begin(), ::tolower);
    std::cout << upperText << std::endl;
    return 0;
}",::tolower
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (reversed_text == ""dlrow ,olleH"") {
        std::cout << ""Reversed successfully!"" << std::endl;
    } else {
        std::cout << ""Reversal failed."" << std::endl;
    }
    return 0;
}","if (reversed_text == ""dlrow ,olleH"")"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  
  // Calculate the sum of squares, but apply std::transform incorrectly.
  std::vector<int> squares(data.size());
  std::transform(data.begin(), data.end(), squares.begin(), [](int x){ return x + x; });
  
  int sum_of_squares = std::accumulate(squares.begin(), squares.end(), 0);
  
  std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
  return 0;
}",[](int x){ return x + x; }
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    int key = 4;
    std::cout << myMap[key] << std::endl; // Accessing non-existent key, default constructor used

    return 0;
}",std::cout << myMap[key] << std::endl;
"#include <random>
#include <iostream>
#include <vector>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Loop goes out of bounds
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    // Calculate the sum of even numbers using std::accumulate
    int even_sum = std::accumulate(numbers.begin(), numbers.end(), 0, [](int sum, int num) { 
        return (num % 2 == 0) ? sum + num : sum; 
    });

    std::cout << ""Sum of even numbers: "" << even_sum << std::endl;

    return 0;
}",return (num % 2 == 0) ? sum + num : sum;
"#include <iomanip> 
#include <complex>

int main() {
  std::complex<double> z(1.0, 1.0); 
  double angle = atan2(z.imag(), z.real());

  if (angle < 0.0) {
    angle += 2.0 * M_PI; 
  }

  std::cout << std::fixed << std::setprecision(10) << angle << std::endl;

  // Incorrectly assumes angle will always be positive after adjustment. 
  double expected_angle = M_PI / 4.0; 
  if (angle != expected_angle) {
    std::cout << ""Error: Angle mismatch!"" << std::endl;
  }
  
  return 0;
}",if (angle != expected_angle)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;

    // Incorrect calculation of circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;
    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    std::vector<int> result;
    for (int num : numbers) {
        if (num > target) {
            result.push_back(num);
        }
    }

    if (result.empty()) {
        std::cout << ""No numbers greater than target found.\n"";
    } else {
        std::cout << ""Numbers greater than target: "";
        for (int i = 0; i < result.size(); ++i) {
            std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }
    return 0;
}",if (num > target) {
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string word_to_find = ""world"";
    size_t pos = text.find(word_to_find);
    if (pos != std::string::npos) {
        text.erase(pos, 1); // Incorrect length to erase
    }
    std::cout << text << std::endl;
    return 0;
}","text.erase(pos, 1);"
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) { // Fault: Loop goes out of bounds
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}","for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    std::cout << ""David's age: "" << ages[name] << std::endl; // Fault: Accessing a non-existent key

    return 0;
}",ages[name]
"#include <random> 
#include <chrono>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int numbers[5];
    for (int i = 0; i < 5; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= 5; ++i) { // Fault: i <= 5 should be i < 5
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= 5; ++i)
"#include <iostream>
#include <limits>

int main() {
  long long large_number = std::numeric_limits<long long>::max();
  long long increment = 1;
  long long result = large_number + increment; // Potential overflow
  std::cout << ""Result: "" << result << std::endl;
  return 0;
}",long long result = large_number + increment;
"#include <limits>
#include <iterator>
#include <stdexcept>

int main() {
    double sum = 0.0;
    for (int i = 0; i < 1000; ++i) {
        sum += (double)i / 1000.0;
    }
    if (sum > 100.0) {
        throw std::runtime_error(""Sum exceeds limit"");
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",if (sum > 100.0)
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> my_tuple(10, 3.14, ""hello"");
    
    int int_val = std::get<0>(my_tuple);
    double double_val = std::get<1>(my_tuple);
    std::string string_val = std::get<2>(my_tuple);
    
    std::cout << ""Integer: "" << int_val << std::endl;
    std::cout << ""Double: "" << double_val << std::endl;
    std::cout << ""String: "" << string_val << std::endl;

    // Incorrectly trying to get the second element as an integer
    int wrong_val = std::get<1>(my_tuple); 
    std::cout << ""Wrong Value: "" << wrong_val << std::endl; 

    return 0;
}",int wrong_val = std::get<1>(my_tuple);
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    // Subtle error: Should be radius * radius, but accidentally uses radius + radius
    double incorrect_area = M_PI * (radius + radius);
    std::cout << ""Incorrect Area: "" << incorrect_area << std::endl;
    
    return 0;
}",M_PI * (radius + radius);
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  std::for_each(data.begin(), data.end(), [&](int x) { sum += x; });
  
  std::vector<int> data2 = {6, 7, 8, 9, 10};
  int sum2 = 0;
  std::for_each(data2.begin(), data2.end(), [&](int x) { sum2 += x; });

  int combined_sum = sum + sum2;
  
  if (combined_sum == 55) {
      std::cout << ""Correct Sum\n"";
  } else {
      std::cout << ""Incorrect Sum\n"";
  }
  
  return 0;
}",if (combined_sum == 55)
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <fstream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line); // Potential conversion error
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid number: "" << line << std::endl;
            // Incorrectly continue to next line instead of handling/stopping
        }
    }
    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",        // Incorrectly continue to next line instead of handling/stopping
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 10;
    counts[""orange""] = 3;

    std::string fruit = ""grape"";
    int count = counts[fruit];
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;
    return 0;
}",int count = counts[fruit];
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    for (auto const& [key, val] : myMap) {
        std::cout << key << "": "" << val << std::endl;
    }

    myMap.erase(2); // Removing ""banana""

    if (myMap.count(2) > 0) {
        std::cout << ""Banana still exists!"" << std::endl;
    } else {
        std::cout << ""Banana is gone!"" << std::endl;
    }

    return 0;
}",if (myMap.count(2) > 0)
"#include <random> 
#include <limits>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 1000000); 

    int largeNumber = std::numeric_limits<int>::max();
    int randomNumber = distrib(gen);
    int result = largeNumber - randomNumber; 
    
    std::cout << ""Large Number: "" << largeNumber << std::endl;
    std::cout << ""Random Number: "" << randomNumber << std::endl;
    std::cout << ""Result: "" << result << std::endl;

    return 0;
}",int result = largeNumber - randomNumber;
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.456789;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl;
    double taxRate = 0.08;
    double taxAmount = price * taxRate;
    std::cout << ""Tax amount: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    double totalCost = price + taxAmount;
    std::cout << ""Total cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;
    return 0;
}","std::cout << ""Tax amount: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of circle: "" << area << std::endl;

    //Calculate circumference, but use area formula
    double circumference = 2 * M_PI * area;
    std::cout << ""Circumference: "" << circumference << std::endl;
    return 0;
}",double circumference = 2 * M_PI * area;
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> squares(data.size());

    for (size_t i = 0; i < data.size(); ++i) {
        squares[i] = data[i] * data[i];
    }

    // Calculate sum of squares
    int sum_of_squares = std::accumulate(squares.begin(), squares.end(), 0);

    //Incorrectly multiply sum of squares by 2.
    int result = sum_of_squares * 2;
    
    // Print the incorrect result
    //std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
    //std::cout << ""Result: "" << result << std::endl;
    return 0;
}",int result = sum_of_squares * 2;
"#include <string>
#include <iostream>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl; // Potential out-of-bounds access
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <ctime>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // Calculate the sum of all elements in the vector
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    // Find the average of the numbers
    double average = static_cast<double>(sum) / numbers.size();
    
    // Round down the average to the nearest integer
    int rounded_average = average; // Fault here - should use std::floor

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;
    std::cout << ""Rounded Average: "" << rounded_average << std::endl;
    
    return 0;
}",int rounded_average = average;
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
  
  int incorrect_sum = std::accumulate(numbers.begin(), numbers.begin() + 3, 0); // Sums only first three elements

  std::cout << ""Correct sum: "" << sum << std::endl;
  std::cout << ""Incorrect sum: "" << incorrect_sum << std::endl;

  return 0;
}","std::accumulate(numbers.begin(), numbers.begin() + 3, 0);"
"#include <fstream>
#include <string>
#include <algorithm>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    std::string total_string;
    while (std::getline(inputFile, line)) {
        total_string += line; 
    }
    inputFile.close();

    // Remove trailing whitespace
    total_string.erase(std::find_if(total_string.rbegin(), total_string.rend(), [](int ch) {return !std::isspace(ch);}).base(), total_string.end());

    // Convert to uppercase
    std::transform(total_string.begin(), total_string.end(), total_string.begin(), ::toupper);

    std::cout << total_string << std::endl;
    return 0;
}","total_string.erase(std::find_if(total_string.rbegin(), total_string.rend(), [](int ch) {return !std::isspace(ch);}).base(), total_string.end());"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Should be i < numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());

    if (str == reversed_str) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == reversed_str)
"#include <random>
#include <iomanip>
#include <iostream>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int secretNumber = distrib(gen);
    int guess;
    int attempts = 0;
    std::cout << ""Welcome to the Guessing Game!\n"";
    std::cout << ""I've chosen a number between 1 and 100.\n"";

    do {
        std::cout << ""Enter your guess: "";
        std::cin >> guess;
        attempts++;

        if (guess < secretNumber) {
            std::cout << ""Too low!\n"";
        } else if (guess > secretNumber) {
            std::cout << ""Too high!\n"";
        } else {
            std::cout << ""Congratulations! You guessed the number in "" << attempts << "" attempts.\n"";
            break;
        }
    } while (attempts < 7);

    if (attempts >= 7) {
       std::cout << ""You ran out of attempts. The number was "" << secretNumber << ""\n"";
    }

    return 0;
}","if (guess < secretNumber) {
            std::cout << ""Too low!\n"";
        } else if (guess > secretNumber) {
            std::cout << ""Too high!\n"";
        } else"
"#include <iomanip> 
#include <iostream>

int main() {
    double price = 123.4567;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl;  //Should print 123.46
    double discount = 0.15;
    double discountedPrice = price * (1 - discount);
    std::cout << std::fixed << std::setprecision(2) << discountedPrice << std::endl; //Incorrect precision
    return 0;
}",std::cout << std::fixed << std::setprecision(2) << discountedPrice << std::endl;
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) { // Fault: i <= data.size()
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> transformed_data(data.size());

    std::transform(data.begin(), data.end(), transformed_data.begin(), [](int x){ return x * 2; });

    // Incorrectly calculate the sum of the first 'n' elements (faulty part)
    int sum = std::accumulate(transformed_data.begin(), transformed_data.begin() + data.size(), 0);

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",transformed_data.begin() + data.size()
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    
    double circumference = 2 * 3.14159 * radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;
    
    double perimeter = circumference;
    std::cout << ""Perimeter of the circle: "" << perimeter << std::endl;
    
    return 0;
}",double perimeter = circumference;
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area: "" << area << std::endl;
  
  double circumference = 2 * M_PI * radius;
  std::cout << ""Circumference: "" << circumference << std::endl;

  double diameter = radius / 2.0;
  std::cout << ""Diameter: "" << diameter << std::endl;

  // Incorrect calculation of the surface area of a sphere
  double sphere_surface_area = 4 * area;
  std::cout << ""Sphere Surface Area: "" << sphere_surface_area << std::endl;
  
  return 0;
}",double sphere_surface_area = 4 * area;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
  std::map<std::string, int> scores;
  scores[""Alice""] = 90;
  scores[""Bob""] = 80;
  scores[""Charlie""] = 70;

  int total_score = 0;
  for (auto const& [name, score] : scores) {
    total_score += score;
  }

  double average_score = total_score / scores.size();
  std::cout << ""Average score: "" << average_score << std::endl;
  return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <ctime>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    std::cout << message << std::endl;

    std::srand(std::time(nullptr));

    int randomNumber = std::rand() % 100;
    std::cout << ""Random number: "" << randomNumber << std::endl;

    if (randomNumber = 50) {
        std::cout << ""The number is 50."" << std::endl;
    } else {
        std::cout << ""The number is not 50."" << std::endl;
    }

    return 0;
}",if (randomNumber = 50)
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""hello"");
    int int_val = std::get<0>(data);
    double double_val = std::get<1>(data);
    std::string string_val = std::get<2>(data);

    std::cout << ""Integer: "" << int_val << std::endl;
    std::cout << ""Double: "" << double_val << std::endl;
    std::cout << ""String: "" << string_val << std::endl;

    // Incorrect usage of std::get. Attempting to access an element that does not exist.
    // This results in undefined behavior.
    int nonexistent_val = std::get<3>(data); //Accessing out of bounds index

    std::cout << ""Nonexistent: "" << nonexistent_val << std::endl;

    return 0;
}",int nonexistent_val = std::get<3>(data);
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <random>
#include <limits>
#include <algorithm>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int num_elements = 5;
    int arr[num_elements];

    for (int i = 0; i < num_elements; ++i) {
        arr[i] = distrib(gen);
    }

    // Calculate the average
    double sum = 0.0;
    for (int i = 0; i <= num_elements; ++i) { // Fault: Should be i < num_elements
        sum += arr[i];
    }

    double average = sum / num_elements;

    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",i <= num_elements
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;

    // Incorrectly attempt to modify a key that doesn't exist.
    ages[""Charlie""] = ages[""David""]; //Faulty line

    std::cout << ""Alice's age: "" << ages[""Alice""] << std::endl;
    std::cout << ""Bob's age: "" << ages[""Bob""] << std::endl;
    std::cout << ""Charlie's age: "" << ages[""Charlie""] << std::endl;
    
    return 0;
}","ages[""Charlie""] = ages[""David""];"
"#include <queue>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<int> nums = {1, 2, 3, 4, 5};
    priority_queue<int> pq(nums.begin(), nums.end());

    vector<int> sortedNums;
    while (!pq.empty()) {
        sortedNums.push_back(pq.top());
        pq.pop();
    }

    reverse(sortedNums.begin(), sortedNums.end());

    for (int num : sortedNums) {
        cout << num << "" "";
    }
    cout << endl;

    return 0;
}","reverse(sortedNums.begin(), sortedNums.end());"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;
    std::vector<int> result;

    for (int num : numbers) {
        if (num > target) {
            result.push_back(num);
        }
    }

    std::sort(result.begin(), result.end(), std::greater<int>());

    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",if (num > target)
"#include <fstream>
#include <string>

int main() {
    std::ofstream outfile(""output.txt"");
    if (outfile.is_open()) {
        std::string line = ""This is a test line.\n"";
        outfile << line;
        outfile << ""Another line""; //Missing newline
        outfile.close();
    } else {
        std::cerr << ""Unable to open file."";
        return 1;
    }
    return 0;
}","outfile << ""Another line""; //Missing newline"
"#include <cmath>
#include <vector>

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    double sum = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += sqrt(data[i]);
    }
    double mean = sum / data.size();
    double variance = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        variance += (data[i] - mean) * (data[i] - mean);
    }
    double standardDeviation = sqrt(variance / (data.size() - 1)); //Potential issue: Dividing by (n-1) instead of n for sample standard deviation
    std::cout << ""Standard Deviation: "" << standardDeviation << std::endl;
    return 0;
}",double standardDeviation = sqrt(variance / (data.size() - 1));
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Find the index of the element 6 (which is not present)
    auto it = std::find(numbers.begin(), numbers.end(), 6); 

    if (it != numbers.end()) {
        std::cout << ""Element found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Element not found. Proceeding..."";
    }

    // Accessing an element beyond the valid range. This will cause undefined behavior.
    std::cout << numbers[numbers.size()] << std::endl; // Faulty line

    return 0;
}",std::cout << numbers[numbers.size()] << std::endl;
"#include <iomanip> 
#include <complex> 

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> w = z * z;
    double magnitude_squared = w.real();
    double magnitude = sqrt(magnitude_squared - 1.0); // Incorrect magnitude calculation
    std::cout << std::fixed << std::setprecision(5) << magnitude << std::endl;
    return 0;
}",double magnitude = sqrt(magnitude_squared - 1.0);
"#include <iostream>
#include <limits>

int main() {
    long long sum = 0;
    for (int i = 0; i < 100; ++i) {
        sum += i;
    }
    
    //Demonstrates integer overflow.
    long long final_sum = sum + std::numeric_limits<long long>::max();
    std::cout << ""Final sum: "" << final_sum << std::endl;
    return 0;
}",sum + std::numeric_limits<long long>::max()
"#include <string>
#include <sstream>

std::string formatNumber(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 123.4567;
    std::string formattedPrice = formatNumber(price);
    std::cout << ""The price is: "" << formattedPrice << std::endl;
    
    double discountRate = 0.15;
    double discountedPrice = price * (1 - discountRate);
    std::string formattedDiscountedPrice = formatNumber(discountedPrice);
    std::cout << ""Discounted price: "" << formattedDiscountedPrice << std::endl;
    
    // Calculate total cost including tax (10%)
    double taxRate = 0.10;
    double totalCost = discountedPrice * (1 + taxRate);
    std::string formattedTotalCost = formatNumber(totalCost);
    std::cout << ""Total cost: "" << formattedTotalCost << std::endl;
    return 0;
}",double taxRate = 0.10;
"#include <ctime>
#include <limits>

int main() {
  std::srand(std::time(nullptr));
  int upper_bound = std::numeric_limits<int>::max();
  int random_number = std::rand() % (upper_bound + 1); // Potential overflow
  
  std::cout << ""Random number: "" << random_number << std::endl;
  return 0;
}",int random_number = std::rand() % (upper_bound + 1);
"#include <random>
#include <chrono>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int numbers[10];

    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= 10; ++i) { // Fault: i <= 10 instead of i < 10
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= 10; ++i)
"#include <map>
#include <iostream>

int main() {
  std::map<std::string, int> ages;
  ages[""Alice""] = 30;
  ages[""Bob""] = 25;
  ages[""Charlie""] = 40;

  // Incorrectly incrementing age for Alice
  ages[""Alice""]++; 

  std::cout << ""Alice's age: "" << ages[""Alice""] << std::endl;
  std::cout << ""Bob's age: "" << ages[""Bob""] << std::endl;
  std::cout << ""Charlie's age: "" << ages[""Charlie""] << std::endl;

  return 0;
}","ages[""Alice""]++;"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string substring = text.substr(10, 12);
    std::cout << substring << std::endl;
    return 0;
}","text.substr(10, 12)"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <array>
#include <numeric>
#include <iostream>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) { // Fault: i <= data.size()
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double circumference = 2 * M_PI * radius;
  double area = M_PI * radius * radius;

  std::cout << ""Radius: "" << radius << std::endl;
  std::cout << ""Circumference: "" << circumference << std::endl;
  std::cout << ""Area: "" << area << std::endl;

  double expected_area = 78.5398;  // Correct area for radius 5
  if (area != expected_area) {
    std::cout << ""Warning: Calculated area differs from expected value!"" << std::endl;
  }

  return 0;
}",double expected_area = 78.5398;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> myTuple = std::make_tuple(10, 3.14, ""hello"");
    int intValue = std::get<0>(myTuple);
    double doubleValue = std::get<1>(myTuple);
    std::string stringValue = std::get<2>(myTuple);

    std::cout << ""Integer: "" << intValue << std::endl;
    std::cout << ""Double: "" << doubleValue << std::endl;
    std::cout << ""String: "" << stringValue << std::endl;

    // Incorrectly trying to access the first element as a double
    double incorrectAccess = std::get<0>(myTuple);
    std::cout << ""Incorrect Access: "" << incorrectAccess << std::endl;
    
    return 0;
}",double incorrectAccess = std::get<0>(myTuple);
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <chrono>
#include <thread>
#include <mutex>

std::mutex mtx;

void worker(int id) {
    for (int i = 0; i < 10; ++i) {
        std::lock_guard<std::mutex> lock(mtx);
        std::cout << ""Worker "" << id << "": "" << i << std::endl;
        std::this_thread::sleep_for(std::chrono::milliseconds(10));
    }
}

int main() {
    std::thread t1(worker, 1);
    std::thread t2(worker, 2);

    t1.join();
    t2.join();

    return 0;
}",std::lock_guard<std::mutex> lock(mtx);
"#include <random>
#include <limits>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(0, std::numeric_limits<int>::max());

    int limit = 1000;
    int sum = 0;
    for (int i = 0; i < limit; ++i) {
        int randomNumber = distrib(gen);
        if (randomNumber % 2 == 0) {
            sum = sum + randomNumber; // Fault: Incorrect increment.  Should use '++' instead of '='.
        }
    }

    std::cout << ""Sum of even random numbers: "" << sum << std::endl;
    return 0;
}",sum = sum + randomNumber;
"#include <map>
#include <string>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""cherry""] = 7;

    std::string fruit = ""grape"";
    if (counts.find(fruit) == counts.end()) {
        counts[fruit] = 1; // Intended to initialize to 1
    }
    std::cout << counts[fruit] << std::endl;
    return 0;
}",counts[fruit] = 1;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""Palindrome detected!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <iomanip> 
#include <fstream>

int main() {
    std::ofstream outfile(""data.txt"");
    if (!outfile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    double sum = 0.0;
    int n = 5;
    double values[n] = {1.0, 2.0, 3.0, 4.0, 5.0};

    for (int i = 0; i <= n; ++i) { // Fault: loop goes one element too far
        sum += values[i];
    }

    outfile << std::fixed << std::setprecision(2) << sum << std::endl;
    outfile.close();
    return 0;
}",i <= n
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;

    // Incorrectly calculating circumference
    double circumference = 2 * M_PI * radius - 1.0;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;

    return 0;
}",double circumference = 2 * M_PI * radius - 1.0;
"#include <complex>
#include <vector>
#include <cmath>

int main() {
    std::vector<std::complex<double>> points(5);
    points[0] = std::complex<double>(1.0, 2.0);
    points[1] = std::complex<double>(3.0, 4.0);
    points[2] = std::complex<double>(5.0, 6.0);
    points[3] = std::complex<double>(7.0, 8.0);
    points[4] = std::complex<double>(9.0, 10.0);

    double sum_real = 0.0;
    double sum_imag = 0.0;

    for (int i = 0; i < points.size(); ++i) {
        sum_real += points[i].real();
        sum_imag += points[i].imag();
    }

    std::complex<double> centroid = std::complex<double>(sum_real / points.size(), sum_imag / points.size());

    // Calculate distances from centroid. Should use std::abs() for magnitude.
    double total_distance = 0.0;
    for (int i = 0; i < points.size(); ++i) {
        total_distance += sqrt(pow(points[i].real() - centroid.real(), 2) + pow(points[i].imag() - centroid.imag(), 2));
    }

    std::cout << ""Total distance from centroid: "" << total_distance << std::endl;

    return 0;
}","total_distance += sqrt(pow(points[i].real() - centroid.real(), 2) + pow(points[i].imag() - centroid.imag(), 2));"
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {  // Fault: i <= data.size()
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <queue>
#include <vector>
#include <iostream>

using namespace std;

int main() {
    vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    priority_queue<int> pq(numbers.begin(), numbers.end());

    cout << ""Largest element: "" << pq.top() << endl;
    pq.pop();

    cout << ""Second largest element: "" << pq.top() << endl; // Fault: Accessing top() after only popping once. Should access the second element via iteration.

    return 0;
}","cout << ""Second largest element: "" << pq.top() << endl;"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> even_numbers;

  std::copy_if(data.begin(), data.end(), std::back_inserter(even_numbers), [](int x){ return x % 2 == 0; });

  int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);

  // The intended output is the sum of even numbers: 2 + 4 = 6
  // But due to the faulty logic, it calculates the sum of all numbers.
  std::cout << ""Sum of even numbers: "" << sum << std::endl;
  return 0;
}",[](int x){ return x % 2 == 0; }
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct."" << std::endl;
    } else {
        std::cout << ""Area is incorrect."" << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> myTuple = std::make_tuple(1, 2.5, ""hello"");
    int intValue = std::get<0>(myTuple);
    double doubleValue = std::get<1>(myTuple);
    std::string stringValue = std::get<2>(myTuple);

    std::cout << ""Integer: "" << intValue << std::endl;
    std::cout << ""Double: "" << doubleValue << std::endl;
    std::cout << ""String: "" << stringValue << std::endl;

    // Incorrect usage of std::get with wrong index
    double incorrectValue = std::get<3>(myTuple); 
    std::cout << ""Incorrect Value: "" << incorrectValue << std::endl;

    return 0;
}",double incorrectValue = std::get<3>(myTuple);
"#include <random> 
#include <iostream>
#include <functional>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
            sum += num * 2;
        } else {
           sum -= num; 
        }
    }
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= num;
"#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double value = 3.14159;
    std::string formatted_value = format_number(value);
    std::string expected_value = ""3.14"";

    if (formatted_value == expected_value) {
        std::cout << ""Test passed!"" << std::endl;
    } else {
        std::cout << ""Test failed. Expected: "" << expected_value << "", Got: "" << formatted_value << std::endl;
    }

    return 0;
}","std::string expected_value = ""3.14"";"
"#include <algorithm>
#include <numeric>
#include <functional>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> result(data.size());

    // Incorrectly using iota to fill the result vector
    std::iota(result.begin(), result.end(), -1); 

    std::transform(data.begin(), data.end(), result.begin(), std::plus<int>());

    for (int val : result) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::iota(result.begin(), result.end(), -1);"
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 1;
    counts[""banana""] = 2;
    counts[""cherry""] = 3;

    std::string fruit = ""grape"";
    if (counts.find(fruit) != counts.end()) {
        std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;
    } else {
        std::cout << ""Count of "" << fruit << "": 0"" << std::endl;
    }

    std::cout << ""Total count: "" << counts.size() << std::endl;
    return 0;
}","std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;"
"#include <limits>
#include <iostream>

int main() {
    long long sum = 0;
    for (int i = 0; i < 1000; ++i) {
        sum += i;
    }

    if (sum > std::numeric_limits<int>::max()) {
        std::cout << ""Overflow detected!"" << std::endl;
    } else {
        std::cout << ""Sum: "" << sum << std::endl;
    }
    return 0;
}",sum += i;
"#include <iomanip> 
#include <sstream> 

int main() {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << 123.456789;
    std::string s = ss.str();

    double num;
    ss.clear();
    ss.str(s);
    ss >> num;

    if (num == 123.46) {
        std::cout << ""Match!\n"";
    } else {
        std::cout << ""No match.\n"";
    }
    return 0;
}",if (num == 123.46)
"#include <fstream>
#include <iostream>
#include <string>

int main() {
  std::ifstream inputFile(""data.txt"");
  if (!inputFile.is_open()) {
    std::cerr << ""Error opening file!\n"";
    return 1;
  }

  std::string line;
  int sum = 0;
  while (std::getline(inputFile, line)) {
    try {
      int number = std::stoi(line);
      sum += number; 
    } catch (const std::invalid_argument& e) {
      std::cerr << ""Invalid argument: "" << line << std::endl;
      inputFile.close();
      return 1;
    } catch (const std::out_of_range& e) {
      std::cerr << ""Out of range: "" << line << std::endl;
      inputFile.close();
      return 1;
    }
  }

  inputFile.close();
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",int number = std::stoi(line);
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;

  for (size_t i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <queue>
#include <vector>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    std::vector<int> result;
    while (!q.empty()) {
        int current = q.front();
        q.pop();
        result.push_back(current);
    }

    for (int i = 0; i < result.size(); ++i) {
        std::cout << result[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::cout << result[i] << "" "";"
"#include <string>
#include <sstream>

int main() {
    std::string input = ""12.34"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cout << ""Conversion failed."" << std::endl;
        return 1;
    }

    std::cout << ""The number is: "" << num << std::endl;

    double result = num * 2.0;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",if (ss.fail())
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    // Incorrect deletion
    myMap.erase(myMap.begin()); // Erasing the first element repeatedly

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    return 0;
}",myMap.erase(myMap.begin());
"#include <ctime>
#include <random>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        sum += num;
    }

    // Incorrect average calculation: integer division truncates the decimal part
    int average = sum / 10;
    
    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",int average = sum / 10;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <random>
#include <chrono>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
            sum += num * 2;
        } else {
            sum += num / 2;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += num / 2;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> nums = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= nums.size(); ++i) {  // Fault: Loop condition includes the index equal to the size of the vector.
        sum += nums[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= nums.size()
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;

    // Calculate the sum of the array elements.
    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    double expected_area = 78.5398;
    if (area != expected_area) {
        std::cout << ""Error: Area calculation is incorrect.""
    }
    return 0;
}",double area = M_PI * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 4, 0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers.begin() + 4
"#include <iomanip> 
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> w = z * z;
    double magnitude_squared = w.real() + w.imag();
    std::cout << std::fixed << std::setprecision(10) << magnitude_squared << std::endl; // Should be 2.0
    return 0;
}",double magnitude_squared = w.real() + w.imag();
"#include <string>
#include <algorithm>

int main() {
  std::string str = ""hello world"";
  std::string sub = str.substr(7, 2);
  std::cout << sub << std::endl;
  return 0;
}","std::string sub = str.substr(7, 2);"
"#include <queue>
#include <limits>

int main() {
    std::priority_queue<int, std::vector<int>, std::greater<int>> pq;
    pq.push(5);
    pq.push(10);
    pq.push(2);

    int min_val = pq.top();
    pq.pop();

    if (min_val < 0) {
        std::cout << ""Negative value found!"" << std::endl;
    } else {
        std::cout << ""Smallest value: "" << min_val << std::endl;
    }
    
    std::cout << ""Next smallest: "" << pq.top() << std::endl; // Potential issue: queue may be empty after pop()

    return 0;
}","std::cout << ""Next smallest: "" << pq.top() << std::endl;"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // Default constructed value used instead of not found.
    
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;
    return 0;
}",int count = counts[fruit];
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(data.begin(), data.end(), std::back_inserter(result), [target](int x){ return x < target - 1; });

    for (int val : result) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;

    return 0;
}",return x < target - 1;
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    std::string line;
    int sum = 0;

    if (inputFile.is_open()) {
        while (std::getline(inputFile, line)) {
            try {
                int num = std::stoi(line);  // Potential exception
                sum += num;
            } catch (const std::invalid_argument& e) {
                std::cerr << ""Invalid argument: "" << line << std::endl;
            } catch (const std::out_of_range& e) {
                std::cerr << ""Out of range: "" << line << std::endl;
            }
        }
        inputFile.close();
        std::cout << ""Sum: "" << sum << std::endl;
    } else {
        std::cerr << ""Unable to open file"" << std::endl;
        return 1;
    }
    return 0;
}",int num = std::stoi(line);
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; //Potential error: accessing a non-existent key
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <ctime>
#include <random>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
            sum += num * 2; 
        } else {
            sum -= num; 
        }
    }

    std::cout << ""The final sum is: "" << sum << std::endl;
    return 0;
}",sum -= num;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    
    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!\n"";
    } else {
        std::cout << ""Area calculation is correct.\n"";
    }

    // Calculate the circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    return 0;
}",double area = M_PI * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Faulty loop: Accessing out-of-bounds element
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <random> 
#include <chrono>
#include <iostream>

int main() {
    std::chrono::high_resolution_clock::time_point start = std::chrono::high_resolution_clock::now();
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100); 

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        // Incorrect: using the same number for sum and comparison
        if (sum == num) { 
            sum += num; 
        } else { 
            sum += num; 
        }
    }

    std::chrono::high_resolution_clock::time_point end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> duration = end - start;

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Time taken: "" << duration.count() << "" seconds"" << std::endl;
    return 0;
}",if (sum == num) {
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cerr << ""Conversion failed!"" << std::endl;
        return 1;
    }

    std::cout << ""The number is: "" << num * 2 << std::endl;
    return 0;
}","std::cout << ""The number is: "" << num * 2 << std::endl;"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <queue>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        if (current == 2) {
            // Intentionally skipping processing '2'
        } else {
            std::cout << current << "" "";
        }
    }
    std::cout << std::endl;
    return 0;
}","if (current == 2) {
            // Intentionally skipping processing '2'
        }"
"#include <limits>
#include <algorithm>

int main() {
  int arr[5] = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= 5; ++i) {
    sum += arr[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= 5; ++i)
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(even_numbers), [](int n){ return n % 2 != 0; });

    int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);

    return 0;
}",[](int n){ return n % 2 != 0; }
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(5);
    q.push(10);
    
    while (!q.empty()) {
        int current = q.front();
        q.pop();
        
        if (current % 2 == 0) {
            q.push(current * 2);
        } else {
            // Incorrectly decrements instead of pushes
            q.push(current - 1);
        }
    }
    
    while (!q.empty()) {
        std::cout << q.front() << "" "";
        q.pop();
    }
    std::cout << std::endl;
    return 0;
}",q.push(current - 1);
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.456789;
    std::cout << ""Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    double taxRate = 0.075;
    double taxAmount = price * taxRate;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    double totalCost = price + taxAmount;
    std::cout << ""Total: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;
    return 0;
}","std::cout << ""Total: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;"
"#include <fstream>
#include <string>
#include <sstream>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(file, line)) {
        int num;
        std::stringstream ss(line);
        ss >> num;
        sum += num;
    }

    file.close();
    std::cout << ""Sum of numbers in "" << filename << "": "" << sum << std::endl;
    return 0;
}",int num;
"#include <iostream>
#include <cmath>

int main() {
    double x = 10.0;
    double y = 3.0;
    double result = std::pow(x, y) / std::sqrt(y);
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",std::sqrt(y);
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        if (it->first == 2)
            std::cout << it->second << std::endl;
    }
    
    auto it = myMap.find(5);
    if (it != myMap.end())
        std::cout << it->second << std::endl;
    else
        std::cout << ""Not found"" << std::endl;

    return 0;
}","if (it != myMap.end())
        std::cout << it->second << std::endl;"
"#include <cmath>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    
    // Incorrectly calculating circumference
    double circumference = 2 * M_PI * radius - 1.0;
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius - 1.0;
"#include <string>
#include <vector>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie""};
    std::string longestName;
    for (const std::string& name : names) {
        if (longestName.length() < name.length()) {
            longestName = name;
        }
    }
    std::cout << ""Longest name: "" << longestName << std::endl;
    return 0;
}",longestName = name;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <random>
#include <iostream>
#include <ctime>

int main() {
    std::srand(std::time(nullptr));
    int limit = 100;
    int count = 0;
    while (count < limit) {
        int randomNumber = std::rand() % 10; // Generates numbers 0-9
        if (randomNumber == 7) {
            count++;
        }
    }
    std::cout << ""Number of 7s generated: "" << count << std::endl;
    return 0;
}","if (randomNumber == 7) {
        count++;
    }"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4};
  int target = 7;

  std::vector<int> result;
  std::copy_if(data.begin(), data.end(), std::back_inserter(result), [target](int x) { return x < target; });

  //The error is that the expected value is 7, but 4 is less then 7 and included in the vector
  // so the copy_if filter doesn't achieve the intent.

  for (int val : result) {
    std::cout << val << "" "";
  }
  std::cout << std::endl;

  return 0;
}",return x < target;
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <queue>
#include <vector>

int main() {
    std::queue<int> q;
    std::vector<int> nums = {1, 2, 3, 4, 5};

    for (int num : nums) {
        q.push(num);
    }

    while (!q.empty()) {
        int current = q.front();
        q.pop();

        if (current % 2 == 0) {
            // Intentionally incorrect: Subtracting 1 instead of multiplying by 2
            q.push(current - 1);
        } else {
            q.push(current * 2);
        }
    }

    std::cout << ""Final queue size: "" << q.size() << std::endl;
    return 0;
}",q.push(current - 1);
"#include <iostream>
#include <iomanip>

int main() {
    double price = 100.50;
    int quantity = 3;
    double taxRate = 0.07;

    double subtotal = price * quantity;
    double taxAmount = subtotal * taxRate;
    double total = subtotal + taxAmount;

    std::cout << ""Subtotal: $"" << std::fixed << std::setprecision(2) << subtotal << std::endl;
    std::cout << ""Tax: $"" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    std::cout << ""Total: $"" << std::fixed << std::setprecision(2) << total << std::endl;

    // Incorrect calculation - should be 103.57
    std::cout << ""Total with rounding: $"" << std::fixed << std::setprecision(2) << (int)total << std::endl;
    return 0;
}","std::cout << ""Total with rounding: $"" << std::fixed << std::setprecision(2) << (int)total << std::endl;"
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    int key = 2;
    std::string value = myMap[key];
    std::cout << ""The value for key "" << key << "" is: "" << value << std::endl;

    // Incorrectly trying to increment the string value
    value++; 
    std::cout << ""The incremented value is: "" << value << std::endl;

    return 0;
}",value++;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double perimeter = 2 * M_PI * radius;
    
    std::cout << ""Area: "" << area << std::endl;
    std::cout << ""Perimeter: "" << perimeter << std::endl;

    if (area > perimeter) {
        std::cout << ""Area is greater than perimeter."" << std::endl;
    } else {
        std::cout << ""Area is not greater than perimeter."" << std::endl;
    }
    
    return 0;
}",if (area > perimeter) {
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, world! This is a test string."";
  std::string substring = ""world"";

  size_t pos = text.find(substring);
  if (pos != std::string::npos) {
    text.erase(pos, 1); // Intended to remove 'w', but removes 1 character at pos
  }

  std::cout << text << std::endl;
  return 0;
}","text.erase(pos, 1);"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    
    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }
    
    return 0;
}",double area = M_PI * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    std::vector<int> shifted_numbers(numbers.size());
    for (size_t i = 0; i < numbers.size(); ++i) {
        shifted_numbers[i] = numbers[(i + 1) % numbers.size()];
    }
    int shifted_sum = std::accumulate(shifted_numbers.begin(), shifted_numbers.end(), 0);
    if (sum == shifted_sum) {
        std::cout << ""Sum and shifted sum are equal."" << std::endl;
    } else {
        std::cout << ""Sum and shifted sum are not equal."" << std::endl;
    }
    return 0;
}",shifted_numbers[i] = numbers[(i + 1) % numbers.size()];
"#include <ctime>
#include <iomanip>

int main() {
    std::time_t t = std::time(0);
    std::tm* now = std::localtime(&t);
    std::cout << ""Current time: "" << std::put_time(now, ""%Y-%m-%d %H:%M:%S"") << std::endl;

    // Incorrectly calculating days since epoch
    int daysSinceEpoch = now->tm_year - 1900; //Subtracting 1900 instead of 1970
    std::cout << ""Days since epoch: "" << daysSinceEpoch << std::endl;
    return 0;
}",int daysSinceEpoch = now->tm_year - 1900;
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
            sum += num * 2;
        } else {
            sum += num / 0;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += num / 0;
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    int sum = 0;
    for (int i = 0; i <= n; ++i) {  // Fault: Should be i < n
        sum += arr[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= n
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ofstream outfile(filename);

    if (!outfile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    int num_lines = 5;
    for (int i = 0; i <= num_lines; ++i) {
        outfile << ""Line "" << i << ""\n"";
    }

    outfile.close();

    std::cout << ""File written successfully!\n"";

    return 0;
}",i <= num_lines
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) { // Fault: i <= data.size() instead of i < data.size()
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int score = scores[name]; // Default construction
    std::cout << ""David's score: "" << score << std::endl;
    
    return 0;
}",int score = scores[name];
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> my_tuple = std::make_tuple(10, 3.14, ""hello"");
    int integer_value = std::get<0>(my_tuple);
    double double_value = std::get<1>(my_tuple);
    std::string string_value = std::get<2>(my_tuple);

    std::cout << ""Integer: "" << integer_value << std::endl;
    std::cout << ""Double: "" << double_value << std::endl;
    std::cout << ""String: "" << string_value << std::endl;

    // Attempt to access an element out of bounds
    // This will likely cause undefined behavior (e.g., crash or unexpected output).
    //int out_of_bounds_value = std::get<3>(my_tuple); // Faulty line
    
    return 0;
}",int out_of_bounds_value = std::get<3>(my_tuple);
"#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream stream;
    stream << std::fixed << std::setprecision(2) << num;
    return stream.str();
}

int main() {
    double value = 123.45678;
    std::string formatted_value = format_number(value);
    std::cout << ""Formatted value: "" << formatted_value << std::endl;
    double parsed_value = 0.0;
    std::stringstream ss(formatted_value);
    ss >> parsed_value; // Attempt to convert back to double
    if (ss.fail()) {
        std::cerr << ""Conversion failed!"" << std::endl;
    } else {
        std::cout << ""Parsed value: "" << parsed_value << std::endl;
    }
    return 0;
}",ss >> parsed_value;
"#include <numeric>
#include <vector>
#include <cmath>

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    double sum = 0.0;

    for (size_t i = 0; i < data.size(); ++i) {
        sum += data[i];
    }

    double mean = sum / data.size();
    double stdev = 0.0;

    for (size_t i = 0; i < data.size(); ++i) {
        stdev += pow(data[i] - mean, 2);
    }

    stdev = sqrt(stdev / (data.size() - 1));

    std::cout << ""Mean: "" << mean << std::endl;
    std::cout << ""Standard Deviation: "" << stdev << std::endl;
    return 0;
}",stdev = sqrt(stdev / (data.size() - 1));
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
"
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<int, std::string> ages;
    ages[25] = ""Alice"";
    ages[30] = ""Bob"";
    ages[25] = ""Charlie""; // Overwrites Alice's entry, subtle bug

    std::cout << ages[25] << std::endl;
    std::cout << ages[30] << std::endl;
    return 0;
}","ages[25] = ""Charlie"";"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(even_numbers), [](int n){ return n % 2 == 0; });

    for (int num : even_numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",[](int n){ return n % 2 == 0; }
"#include <cmath>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

    double incorrect_area = radius * radius; // Incorrectly calculates area
    std::cout << ""Incorrect Area: "" << std::fixed << std::setprecision(2) << incorrect_area << std::endl;

    return 0;
}",double incorrect_area = radius * radius;
"#include <random>
#include <ctime>
#include <limits>

int main() {
    std::srand(std::time(nullptr));

    int lower_bound = 10;
    int upper_bound = 20;
    int num_iterations = 5;

    for (int i = 0; i < num_iterations; ++i) {
        int random_num = std::rand() % (upper_bound - lower_bound + 1) + lower_bound;
        std::cout << ""Iteration "" << i + 1 << "": "" << random_num << std::endl;
    }

    int sum = 0;
    for (int i = 0; i <= num_iterations; ++i) { // Fault: should be < num_iterations
      sum += i;
    }

    std::cout << ""Sum of iterations: "" << sum << std::endl;

    return 0;
}",for (int i = 0; i <= num_iterations; ++i)
"#include <queue>
#include <limits>

int main() {
    std::queue<int> q;
    q.push(10);
    q.push(20);
    q.push(30);

    int sum = 0;
    while (!q.empty()) {
        int current = q.front();
        q.pop();
        if (current > 100) {
            break; // Incorrect condition. Should check if current is less than 0
        }
        sum += current;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","if (current > 100) {
            break; // Incorrect condition. Should check if current is less than 0
        }"
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <array>
#include <iomanip>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    double sum = 0.0;

    for (size_t i = 0; i <= data.size(); ++i) { // Fault: i <= data.size() instead of i < data.size()
        sum += data[i];
    }

    std::cout << std::fixed << std::setprecision(2) << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <fstream>
#include <string>
#include <sstream>

int main() {
  std::ifstream inputFile(""data.txt"");
  if (!inputFile.is_open()) {
    std::cerr << ""Error opening file!\n"";
    return 1;
  }

  std::string line;
  std::stringstream ss;
  int sum = 0;

  while (std::getline(inputFile, line)) {
    ss << line;
    int value;
    ss >> value;
    sum += value;
  }

  inputFile.close();

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",int value;
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123abc456"";
    int number;
    std::stringstream ss(input);
    ss >> number;  // Attempts to extract an integer, but input contains non-numeric characters.
    std::cout << ""Extracted number: "" << number << std::endl;
    return 0;
}",ss >> number;
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = std::accumulate(data.begin(), data.end(), 0);
  
  // Incorrectly double the sum
  int result = sum * 2.0;

  std::cout << ""Sum: "" << sum << std::endl;
  std::cout << ""Result: "" << result << std::endl;
  
  return 0;
}",int result = sum * 2.0;
"#include <iomanip> #include <sstream> #include <string>

int main() {
    double pi = 3.14159265358979323846;
    std::stringstream ss;
    ss << std::fixed << std::setprecision(10) << pi;
    std::string pi_str = ss.str();
    
    double restored_pi = std::stod(pi_str); // Potential loss of precision
    
    if (restored_pi == pi) {
        std::cout << ""Pi restored successfully!\n"";
    } else {
        std::cout << ""Pi restoration failed. Expected: "" << pi << "", Restored: "" << restored_pi << ""\n"";
    }

    return 0;
}",double restored_pi = std::stod(pi_str);
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) { // Faulty condition
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <unordered_map>
#include <iostream>
#include <string>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    if (counts.find(fruit) != counts.end()) {
        std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;
    } else {
        std::cout << ""Fruit not found."" << std::endl;
    }

    return 0;
}",counts[fruit]
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    double perimeter = 2 * M_PI * radius;
    std::cout << ""Perimeter: "" << perimeter << std::endl;

    // Incorrect calculation of circumference - using radius instead of diameter.
    double circumference = M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    return 0;
}",double circumference = M_PI * radius;
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string best_student;
    int highest_score = -1; 

    for (auto const& [name, score] : scores) {
        if (score > highest_score) {
            highest_score = score;
            best_student = name;
        }
    }

    std::cout << ""Best student: "" << best_student << "" with score "" << highest_score << std::endl;
    
    // Incorrectly attempt to access a non-existent key
    std::cout << ""David's score: "" << scores[""David""] << std::endl; 

    return 0;
}","std::cout << ""David's score: "" << scores[""David""] << std::endl;"
"#include <map>
#include <iostream>

int main() {
  std::map<std::string, int> scores;
  scores[""Alice""] = 85;
  scores[""Bob""] = 92;
  scores[""Charlie""] = 78;

  int total_score = 0;
  for (auto const& [name, score] : scores) {
    total_score += score;
  }

  double average_score = total_score / scores.size();
  std::cout << ""Average score: "" << average_score << std::endl;
  return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string str = ""hello"";
  std::string reversed_str = str;
  std::reverse(reversed_str.begin(), reversed_str.end());
  if (str == reversed_str) {
    std::cout << ""Palindrome!"" << std::endl;
  } else {
    std::cout << ""Not a palindrome."" << std::endl;
  }
  return 0;
}",if (str == reversed_str)
"#include <iostream>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    int length = message.length();
    std::cout << ""The length of the string is: "" << length << std::endl;
    
    std::string reversed_message = """";
    for (int i = length - 1; i >= 0; --i) {
        reversed_message += message[i];
    }

    std::cout << ""Reversed message: "" << reversed_message << std::endl;

    std::string original = message;
    std::string modified = message;
    modified[0] = 'J';

    if (original == modified) {
        std::cout << ""Strings are equal"" << std::endl;
    } else {
        std::cout << ""Strings are not equal"" << std::endl;
    }
    
    return 0;
}","if (original == modified) {
        std::cout << ""Strings are equal"" << std::endl;
    } else {
        std::cout << ""Strings are not equal"" << std::endl;
    }"
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl; // Incorrect substring length
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <string>
#include <vector>

using namespace std;

int main() {
    vector<string> names = {""Alice"", ""Bob"", ""Charlie""};
    string combined_name = """";
    for (int i = 0; i <= names.size(); ++i) {  // Off-by-one error
        combined_name += names[i];
    }
    cout << combined_name << endl;
    return 0;
}",i <= names.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> processed_data;

  for (int i = 0; i < data.size(); ++i) {
    processed_data.push_back(data[i] * 2);
  }

  int sum = std::accumulate(processed_data.begin(), processed_data.end(), 0);

  // Incorrect condition for checking if sum is even
  if (sum / 2.0 == (int)(sum / 2.0)) {
    std::cout << ""Sum is even."" << std::endl;
  } else {
    std::cout << ""Sum is odd."" << std::endl;
  }

  return 0;
}",if (sum / 2.0 == (int)(sum / 2.0))
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the first index of the target value
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << it - numbers.begin() << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrectly sort in descending order (fault)
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());

    std::cout << ""Sorted numbers: "";
    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(numbers.begin(), numbers.end(), std::greater<int>());"
"#include <iostream>
#include <string>

int main() {
    std::string str = ""Hello"";
    std::string reversed_str = """";
    for (int i = 0; i <= str.length(); ++i) {
        reversed_str += str[str.length() - i];
    }
    std::cout << ""Original: "" << str << ""\n"";
    std::cout << ""Reversed: "" << reversed_str << std::endl;
    return 0;
}",i <= str.length()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of the squares of the first n elements (incorrect indexing)
    int sum_of_squares = 0;
    for (size_t i = 0; i <= numbers.size(); ++i) { // Fault: i <= numbers.size() instead of i < numbers.size()
        sum_of_squares += numbers[i] * numbers[i];
    }
    
    std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    return 0;
}",double area = M_PI * radius * radius;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string pattern = ""test"";

    size_t pos = text.find(pattern, 10); // Start searching after the first 10 characters.
    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    double sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);

    if (sum > 10.0) {
        std::cout << ""Sum is greater than 10."" << std::endl;
    } else {
        std::cout << ""Sum is not greater than 10."" << std::endl;
    }

    return 0;
}",0.0
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrect comparison: Should be sum > 10, but is sum == 10
    if (sum == 10) {
        std::cout << ""The sum is 10."" << std::endl;
    } else {
        std::cout << ""The sum is not 10."" << std::endl;
    }
    
    return 0;
}",if (sum == 10)
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Should initialize age to a default value before use
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (const auto& pair : scores) {
        total_score += pair.second;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30; 
    ages[""Bob""] = 25;
    ages[""Charlie""] = ""Twenty""; // Faulty assignment
    
    std::cout << ""Alice's age: "" << ages[""Alice""] << std::endl; 
    std::cout << ""Bob's age: "" << ages[""Bob""] << std::endl; 
    std::cout << ""Charlie's age: "" << ages[""Charlie""] << std::endl; 
    
    return 0;
}","ages[""Charlie""] = ""Twenty"";"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    
    // Calculate the sum of elements but incorrectly use a size of 1.
    int sum = std::accumulate(data.begin(), data.begin() + 1, 0);
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",data.begin() + 1
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",0.0
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""Area of circle with radius "" << radius << "" is: "" << area << std::endl;
    
    // Incorrectly calculates circumference using area formula.
    double circumference = sqrt(area) * 2.0;
    std::cout << ""Circumference of the circle is: "" << circumference << std::endl;
    
    return 0;
}",double circumference = sqrt(area) * 2.0;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World! This is a test."";
    std::string word = ""test"";
    size_t pos = text.find(word);

    if (pos != std::string::npos) {
        text.erase(pos, 1); // Erase only one character instead of the whole word
    }

    std::cout << text << std::endl;
    return 0;
}","text.erase(pos, 1);"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int length = text.length();
    for (int i = 0; i <= length; ++i) {
        std::cout << text[i];
    }
    std::cout << std::endl;
    return 0;
}",i <= length
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <string>
#include <sstream>
#include <vector>
#include <algorithm>

std::string format_vector(const std::vector<int>& data) {
    std::stringstream ss;
    ss << ""["";
    for (size_t i = 0; i < data.size(); ++i) {
        ss << data[i];
        if (i < data.size() - 1) {
            ss << "", "";
        }
    }
    ss << ""]"";
    return ss.str();
}

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::string formatted_string = format_vector(numbers);
    std::string expected = ""[1, 2, 3, 4, 5]"";

    if (formatted_string != expected) {
        std::cout << ""Test Failed: Expected '"" << expected << ""', got '"" << formatted_string << ""'\n"";
    } else {
        std::cout << ""Test Passed\n"";
    }

    std::vector<int> empty_vector;
    std::string empty_formatted = format_vector(empty_vector);
    std::string empty_expected = ""[]"";

    if (empty_formatted != empty_expected) {
        std::cout << ""Test Failed (Empty): Expected '"" << empty_expected << ""', got '"" << empty_formatted << ""'\n"";
    }
    else {
        std::cout << ""Test Passed (Empty)\n"";
    }

    return 0;
}",if (i < data.size() - 1) {
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area of the circle: "" << area << std::endl;
  
  double circumference = 2 * M_PI * radius;
  std::cout << ""Circumference of the circle: "" << circumference << std::endl;

  // Incorrect calculation of diameter
  double diameter = radius / 2.0;
  std::cout << ""Diameter of the circle: "" << diameter << std::endl;
  
  return 0;
}",double diameter = radius / 2.0;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    auto it = std::find(data.begin(), data.end(), target);
    if (it != data.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrect Calculation
    int sum = 0;
    for (int i = 0; i < data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum of elements: "" << sum << std::endl;
    return 0;
}","int sum = 0;
    for (int i = 0; i < data.size(); ++i) {
        sum += data[i];
    }"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Potential fault: accessing non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl;
    return 0;
}",int age = ages[name];
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    size_t pos = text.find(""world"", 7); // Starts search from index 7, which is past ""world""
    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }
    return 0;
}","text.find(""world"", 7)"
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();
    std::string reversed_text = """";

    for (int i = 0; i <= len; ++i) {
        reversed_text += text[len - i];
    }

    std::cout << ""Original: "" << text << std::endl;
    std::cout << ""Reversed: "" << reversed_text << std::endl;
    return 0;
}",i <= len
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, world! This is a test."";
  std::string substring = text.substr(0, 5);
  std::cout << substring << std::endl;
  std::string new_text = ""The quick brown fox."";
  substring = new_text.substr(100, 5); // Attempting to access out of bounds
  std::cout << substring << std::endl;
  return 0;
}","substring = new_text.substr(100, 5);"
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string highestScorer = """";
    int highestScore = -1; 

    for (auto const& [name, score] : scores) {
        if (score > highestScore)
            highestScore = score;
    }

    if (highestScore == -1) {
        std::cout << ""No scores available."" << std::endl;
    } else {
       std::cout << ""Highest scorer: "" << highestScorer << "" with score "" << highestScore << std::endl;
    }

    return 0;
}","std::cout << ""Highest scorer: "" << highestScorer << "" with score "" << highestScore << std::endl;"
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <iostream>
#include <string>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";

    if (counts.find(fruit) != counts.end()) {
        std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;
    } else {
        std::cout << ""Count of "" << fruit << "": 0"" << std::endl;
    }

    return 0;
}","std::cout << ""Count of "" << fruit << "": 0"" << std::endl;"
"#include <string>
#include <sstream>

int main() {
    std::string number_str = ""123.45"";
    std::stringstream ss(number_str);
    double number;
    if (ss >> number) {
        std::cout << ""Conversion successful: "" << number << std::endl;
    } else {
        std::cout << ""Conversion failed."" << std::endl;
    }
    std::string invalid_str = ""abc"";
    std::stringstream ss2(invalid_str);
    double number2;
    if (ss2 >> number2) {
        std::cout << ""Conversion successful: "" << number2 << std::endl;
    } else {
        std::cout << ""Conversion failed."" << std::endl;
    }
    return 0;
}",if (ss2 >> number2)
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (area == expected_area) {
    std::cout << ""Area calculation is correct."" << std::endl;
  } else {
    std::cout << ""Area calculation is incorrect."" << std::endl;
  }
  return 0;
}",area == expected_area
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (reversed_text == text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (reversed_text == text)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of squares of even numbers
    int sum = 0;
    for (int num : numbers) {
        if (num % 2 == 0) {
            sum += num * num;
        }
    }
    
    // Incorrectly subtract 1 from the sum
    sum -= 1; 
    
    std::cout << ""Sum of squares of even numbers: "" << sum << std::endl;
    
    return 0;
}",sum -= 1;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World! This is a test."";
    std::string search_string = ""world"";

    size_t pos = text.find(search_string, 0);
    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }

    // Incorrectly converting position to uppercase
    text[pos] = toupper(pos);

    std::cout << ""Modified string: "" << text << std::endl;
    return 0;
}",text[pos] = toupper(pos);
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    // Incorrectly calculate the average.
    double average = sum / numbers.size(); 

    std::cout << ""The average is: "" << average << std::endl;
    return 0;
}",double average = sum / numbers.size();
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();
    for (int i = 0; i <= len; ++i) {
        std::cout << text[i];
    }
    std::cout << std::endl;
    return 0;
}",i <= len
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (const auto& pair : scores) {
        total_score += pair.first; // Incorrectly adding the key (string) instead of the value (int)
    }

    std::cout << ""Total score: "" << total_score << std::endl;
    return 0;
}",total_score += pair.first;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30; 
    ages[""Bob""] = 25; 
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Accessing a non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl;
    return 0;
}",int age = ages[name];
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30; 
    ages[""Bob""] = 25; 
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // This will default-construct an int (0) if ""David"" isn't in the map
    std::cout << ""David's age is: "" << age << std::endl; 

    return 0;
}",int age = ages[name];
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    
    if (ages.count(name) > 0) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Not found."" << std::endl;
    }

    ages[name] = 35; // This line is incorrect. It should be before the if/else statement
    
    std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    
    return 0;
}",ages[name] = 35;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    double diameter = radius;
    std::cout << ""Diameter: "" << diameter << std::endl;

    return 0;
}",double diameter = radius;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    //Incorrect calculation of diameter
    double diameter = circumference / M_PI;
    std::cout << ""Diameter: "" << diameter << std::endl;
    
    return 0;
}",double diameter = circumference / M_PI;
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""hello world"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (reversed_text == ""dlrow olleh"") {
    std::cout << ""Correct reversal!"" << std::endl;
  } else {
    std::cout << ""Incorrect reversal."" << std::endl;
  }

  return 0;
}","if (reversed_text == ""dlrow olleh"")"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n > target; });

    // Print the elements greater than the target
    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",return n > target; 
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::system_clock::time_point seed = std::chrono::system_clock::now();
    std::mt19937 generator(seed.time_since_epoch().count());
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 5; ++i) {
        int randomNumber = distribution(generator);
        // Incorrectly adding the loop counter instead of the random number
        sum += i;
    }

    std::cout << ""Sum of 5 random numbers: "" << sum << std::endl;
    return 0;
}",sum += i;
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <fstream>
#include <sstream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream inputFile(filename);
    std::stringstream buffer;
    buffer << inputFile.rdbuf();
    std::string fileContent = buffer.str();

    int lines = 1;
    std::string line;
    std::stringstream ss(fileContent);
    while (std::getline(ss, line)) {
        if (line.length() > 1000) {
            lines++;
        }
    }

    std::cout << ""Number of lines: "" << lines << std::endl;
    return 0;
}","if (line.length() > 1000) {
            lines++;
        }"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;  
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;
    
    std::string name = ""David"";
    if (scores.count(name) > 0) {
        std::cout << ""Score for "" << name << "": "" << scores[name] << std::endl; 
    } else {
        std::cout << ""Score for "" << name << "": 0"" << std::endl; 
    }
    
    return 0;
}","std::cout << ""Score for "" << name << "": "" << scores[name] << std::endl;"
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) == ages.end()) {
        ages[name] = 0;
    }

    std::cout << ""David's age: "" << ages[name] << std::endl;
    return 0;
}",ages[name] = 0;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    // Intentionally truncating the calculated area
    int truncatedArea = (int)area;

    std::cout << ""Area: "" << area << std::endl;
    std::cout << ""Truncated Area: "" << truncatedArea << std::endl;
    
    if (truncatedArea > 75) {
        std::cout << ""Area is large."" << std::endl;
    } else {
        std::cout << ""Area is small."" << std::endl;
    }
    
    return 0;
}",if (truncatedArea > 75)
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, world! This is a test."";
  std::string word_to_find = ""world!"";

  size_t pos = text.find(word_to_find);
  if (pos != std::string::npos) {
    std::cout << ""Word found at position: "" << pos << std::endl;
  } else {
    std::cout << ""Word not found."" << std::endl;
  }

  // Incorrectly using find() with an offset
  size_t wrong_pos = text.find(word_to_find, 100);
  if (wrong_pos != std::string::npos) {
    std::cout << ""Word found (incorrectly) at position: "" << wrong_pos << std::endl;
  } else {
    std::cout << ""Word not found (incorrectly)."" << std::endl;
  }

  return 0;
}","size_t wrong_pos = text.find(word_to_find, 100);"
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4};
  int target = 7;

  auto it = std::find(data.begin(), data.end(), target);

  if (it != data.end()) {
    std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
  } else {
    std::cout << ""Target not found."" << std::endl;
  }

  std::sort(data.begin(), data.end());

  for (int value : data) {
    std::cout << value << "" "";
  }
  std::cout << std::endl;

  return 0;
}",if (it != data.end())
"#include <iostream>
#include <algorithm>

int main() {
  int arr[] = {5, 2, 8, 1, 9};
  int n = sizeof(arr) / sizeof(arr[0]);

  std::sort(arr, arr + n - 1); // Fault: sorting up to n-1 instead of n

  std::cout << ""Sorted array: "";
  for (int i = 0; i < n; ++i) {
    std::cout << arr[i] << "" "";
  }
  std::cout << std::endl;

  return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;

  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    
    // Find the index of the first element greater than 3.
    auto it = std::find_if(data.begin(), data.end(), [](int x){ return x > 3; });

    if (it != data.end()) {
        int index = std::distance(data.begin(), it);
        std::cout << ""Element greater than 3 found at index: "" << index << std::endl;
    } else {
        std::cout << ""No element greater than 3 found."" << std::endl;
    }
    
    // Calculate the sum of elements up to the found index (incorrect)
    int sum = 0;
    for (int i = 0; i <= index; ++i) { 
        sum += data[i];
    }

    std::cout << ""Sum of elements up to the index: "" << sum << std::endl;
    
    return 0;
}","for (int i = 0; i <= index; ++i) { 
        sum += data[i];
    }"
"#include <queue>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::queue<int> myQueue;

    for (int num : numbers) {
        myQueue.push(num);
    }

    // Attempt to sort the queue directly (incorrect approach)
    std::sort(myQueue.begin(), myQueue.end());

    std::vector<int> sortedNumbers;
    while (!myQueue.empty()) {
        sortedNumbers.push_back(myQueue.front());
        myQueue.pop();
    }

    for (int num : sortedNumbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::sort(myQueue.begin(), myQueue.end());"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.begin() + 3, 0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",data.begin() + 3
"#include <array>
#include <numeric>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<int, std::string> studentGrades;
    studentGrades[1] = ""A"";
    studentGrades[2] = ""B"";
    studentGrades[3] = ""C"";

    for (int i = 1; i <= 5; ++i) {
        if (studentGrades.find(i) != studentGrades.end()) {
            std::cout << ""Student "" << i << ""'s grade: "" << studentGrades[i] << std::endl;
        } else {
            std::cout << ""Student "" << i << ""'s grade: N/A"" << std::endl;
        }
    }

    return 0;
}",if (studentGrades.find(i) != studentGrades.end())
"#include <cmath>
#include <vector>

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    double sum = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += data[i];
    }
    double average = sum / data.size();

    std::vector<double> deviations;
    for (size_t i = 0; i < data.size(); ++i) {
        deviations.push_back(sqrt(data[i] - average));
    }

    double std_dev = 0.0;
    for (size_t i = 0; i < deviations.size(); ++i) {
        std_dev += deviations[i];
    }
    std_dev /= deviations.size();

    std::cout << ""Standard Deviation: "" << std_dev << std::endl;
    return 0;
}",std_dev /= deviations.size();
"#include <string>
#include <algorithm>

std::string reverseString(const std::string& str) {
  std::string reversed_str = str;
  std::reverse(reversed_str.begin(), reversed_str.end());
  return reversed_str;
}

int main() {
  std::string original = ""hello"";
  std::string reversed = reverseString(original);
  std::cout << ""Original: "" << original << std::endl;
  std::cout << ""Reversed: "" << reversed << std::endl;
  
  std::string another_string = ""world"";
  std::string reversed_another = reverseString(another_string);
  std::cout << ""Another Original: "" << another_string << std::endl;
  std::cout << ""Another Reversed: "" << reversed_another << std::endl;
  
  //Incorrect concatenation
  std::string combined = original + reversed;
  std::cout << ""Combined: "" << combined << std::endl;

  return 0;
}",std::string combined = original + reversed;
"#include <iostream>
#include <unordered_map>

int main() {
  std::unordered_map<std::string, int> counts;
  counts[""apple""] = 5;
  counts[""banana""] = 3;
  counts[""orange""] = 7;

  std::string fruit = ""grape"";
  int count = counts[fruit];
  std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

  return 0;
}",int count = counts[fruit];
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto const& [key, val] : myMap) {
        std::cout << ""Key: "" << key << "", Value: "" << val << std::endl;
    }

    // Incorrect iteration using an iterator with a modified map
    auto it = myMap.begin();
    while (it != myMap.end()) {
        std::cout << ""Key (iterator): "" << it->first << "", Value (iterator): "" << it->second << std::endl;
        myMap.erase(it++); // Erasing while iterating invalidates the iterator
    }

    std::cout << ""Map size after incorrect iteration: "" << myMap.size() << std::endl;

    return 0;
}",myMap.erase(it++);
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 10;

    std::vector<int> result;
    for (int num : nums) {
        if (target - num < 0) {
          result.push_back(num);
        }
    }

    // The logic is flawed. It should check if (target - num) exists in nums.
    // Currently it pushes back any number where the difference with target is negative

    std::cout << ""Numbers that do not lead to target: "";
    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",if (target - num < 0)
"#include <random>
#include <vector>
#include <iostream>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 10);

    std::vector<int> numbers(5);
    for (int i = 0; i < 5; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    
    // Incorrect comparison: should be sum > 20, but is sum == 20
    if (sum == 20) {
       std::cout << ""Sum is exactly 20."" << std::endl;
    } else {
        std::cout << ""Sum is not exactly 20."" << std::endl;
    }

    return 0;
}",if (sum == 20)
"#include <tuple>
#include <functional>

int main() {
    auto sum_and_product = std::make_tuple(0, 0);
    int x = 5;
    int y = 3;

    std::apply([](int& sum, int& product) {
        sum = x + y;
        product = x - y; //Fault: Should be x * y
    }, sum_and_product);

    int sum, product;
    std::tie(sum, product) = sum_and_product;

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Product: "" << product << std::endl;
    return 0;
}",product = x - y;
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

  // Incorrectly multiply the sum by 2 instead of adding a constant.
  int result = sum * 2;

  std::cout << ""Result: "" << result << std::endl;
  return 0;
}",int result = sum * 2;
"#include <fstream>
#include <string>

int main() {
    std::ofstream outfile(""data.txt"");
    if (outfile.is_open()) {
        std::string line = ""This is a test line"";
        outfile << line << std::endl;

        //Incorrectly uses string concatenation for appending.  String concatenation creates new string in each iteration.
        for (int i = 0; i < 5; ++i) {
            outfile << line + "" - iteration "" << i << std::endl; //Faulty line.
        }
        outfile.close();
    } else {
        std::cerr << ""Unable to open file"";
        return 1;
    }
    return 0;
}","outfile << line + "" - iteration "" << i << std::endl;"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <iomanip> 
#include <sstream> 
#include <limits> 

int main() { 
    double pi = 3.14159265358979323846; 
    int num_digits = 10; 

    std::stringstream ss;
    ss << std::fixed << std::setprecision(num_digits) << pi;
    std::string pi_str = ss.str();

    // Find the decimal point
    size_t decimal_pos = pi_str.find('.');

    // Ensure decimal point exists
    if (decimal_pos != std::string::npos) { 
        //Truncate after the decimal
        pi_str = pi_str.substr(0, decimal_pos + num_digits + 1);
    }

    std::cout << pi_str << std::endl;
    return 0;
}","pi_str = pi_str.substr(0, decimal_pos + num_digits + 1);"
"#include <chrono>
#include <thread>
#include <mutex>
#include <vector>
#include <algorithm>
#include <iostream>

std::mutex mtx;

void worker(int id, std::vector<int>& data) {
    for (int i = 0; i < 100; ++i) {
        std::lock_guard<std::mutex> lock(mtx);
        data[id] += 1; // Potential race condition
        std::this_thread::sleep_for(std::chrono::milliseconds(1));
    }
}

int main() {
    std::vector<int> shared_data(5, 0);
    std::vector<std::thread> threads;

    for (int i = 0; i < 5; ++i) {
        threads.emplace_back(worker, i, std::ref(shared_data));
    }

    for (auto& thread : threads) {
        thread.join();
    }

    std::cout << ""Final data: "";
    for (int value : shared_data) {
        std::cout << value << "" "";
    }
    std::cout << std::endl;

    return 0;
}",data[id] += 1;
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    ss >> number;
    if (ss.fail() || !ss.eof()) {
        std::cout << ""Invalid input format."" << std::endl;
        return 1;
    }
    std::cout << ""Number: "" << number << std::endl;
    
    double result = number * 2.0;
    std::cout << ""Result: "" << result << std::endl;
    
    return 0;
}",if (ss.fail() || !ss.eof())
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation correct!"" << std::endl;
    }

    // Incorrectly uses int instead of double for radius
    int radius_int = (int)radius;
    double area_int = M_PI * radius_int * radius_int;
    std::cout << ""Area with integer radius: "" << area_int << std::endl;

    return 0;
}",int radius_int = (int)radius;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <algorithm>
#include <array>

int main() {
    std::array<int, 5> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores; 
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total = 0;
    for (const auto& pair : scores) {
        total += pair.first; // Incorrect: Adding the key (string) instead of the value (int)
    }

    std::cout << ""Total score: "" << total << std::endl;
    return 0;
}",total += pair.first;
"#include <array>
#include <numeric>
#include <algorithm>
#include <iostream>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  std::for_each(data.begin(), data.end(), [&](int x) { sum += x; });

  if (sum == 15) {
    std::cout << ""Sum is 15\n"";
  } else {
    std::cout << ""Sum is not 15\n"";
  }

  return 0;
}","std::cout << ""Sum is 15\n"";"
"#include <queue>
#include <vector>
#include <iostream>

int main() {
    std::queue<int> q;
    std::vector<int> data = {1, 2, 3, 4, 5};

    for (int i = 0; i < data.size(); ++i) {
        q.push(data[i]);
    }

    int sum = 0;
    while (!q.empty()) {
        int val = q.front();
        q.pop();
        sum += val;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","int val = q.front();
        q.pop();
        sum += val;"
"#include <random>
#include <vector>
#include <iostream>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < numbers.size(); ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;

    //Incorrectly calculate average: using size() - 1 which leads to wrong average
    double average = static_cast<double>(sum) / (numbers.size() - 1);
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = static_cast<double>(sum) / (numbers.size() - 1);
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <limits>
#include <iostream>

int main() {
    long long sum = 0;
    for (int i = 0; i < 1000000; ++i) {
        sum += i;
    }
    
    if (sum > std::numeric_limits<int>::max()) {
        std::cout << ""Overflow detected!"" << std::endl;
    } else {
        std::cout << ""Sum: "" << sum << std::endl;
    }
    return 0;
}",sum += i;
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
  int product = 1;
  for (int num : numbers) {
    product *= num;
  }
  if (sum > product) {
    std::cout << ""Sum is greater than product."" << std::endl;
  } else {
    std::cout << ""Product is greater than or equal to sum."" << std::endl;
  }
  return 0;
}","if (sum > product) {
    std::cout << ""Sum is greater than product."" << std::endl;
  } else {
    std::cout << ""Product is greater than or equal to sum."" << std::endl;
  }"
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    ss >> number;
    if (ss.fail() || !ss.eof()) {
        std::cout << ""Invalid input"" << std::endl;
        return 1;
    }
    std::cout << ""Number: "" << number << std::endl;
    return 0;
}",if (ss.fail() || !ss.eof())
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area: "" << area << std::endl;

  double circumference = 2 * M_PI * radius;
  std::cout << ""Circumference: "" << circumference << std::endl;

  // Faulty Calculation: Integer division truncates the result.
  int num_segments = circumference / radius; 
  std::cout << ""Number of segments: "" << num_segments << std::endl;

  return 0;
}",int num_segments = circumference / radius;
"#include <set>
#include <iostream>

int main() {
    std::set<int> numbers = {1, 2, 3, 4, 5};
    
    for (int num : numbers) {
        if (num == 3) {
            break;
        } else {
            numbers.insert(num * 2);
        }
    }
    
    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",numbers.insert(num * 2);
"#include <algorithm>
#include <tuple>

int main() {
    std::tuple<int, int, int> my_tuple = std::make_tuple(1, 2, 3);
    int a = std::get<0>(my_tuple);
    int b = std::get<1>(my_tuple);
    int c = std::get<2>(my_tuple);

    if (a > b && b > c) {
        std::cout << ""Condition met!"" << std::endl;
    } else {
        std::cout << ""Condition not met."" << std::endl;
    }

    return 0;
}",if (a > b && b > c)
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) == ages.end()) {
        ages[name] = 20; // Intended age for David
    }

    std::cout << ""David's age: "" << ages[name] << std::endl;
    std::cout << ""Alice's age: "" << ages[""Alice""] << std::endl;
    return 0;
}",ages[name] = 20;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1 excludes the last element

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <iomanip>

int main() {
  double pi = 3.14159;
  double radius = 5.0;
  double area = pi * radius * radius;

  std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
  return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    std::seed_seq seed{seed_time.time_since_epoch().count()};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int numbers[10];
    for (int i = 0; i <= 10; ++i) { // Fault: Should be < 10
        numbers[i] = distribution(generator);
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",for (int i = 0; i <= 10; ++i)
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    // Incorrectly multiplying the sum by 2.  Should be added.
    sum = sum * 2;

    std::cout << ""The sum (incorrectly doubled) is: "" << sum << std::endl;
    return 0;
}",sum = sum * 2;
"#include <string>
#include <sstream>

std::string formatNumber(int num) {
    std::stringstream ss;
    ss << num;
    std::string str = ss.str();
    return str;
}

int main() {
    int number = 12345;
    std::string formattedNumber = formatNumber(number);
    int parsedNumber = std::stoi(formattedNumber, nullptr, 8); //Incorrect base
    std::cout << ""Parsed Number: "" << parsedNumber << std::endl;
    return 0;
}","std::stoi(formattedNumber, nullptr, 8)"
"#include <queue>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4, 7, 3, 6}; 
    std::priority_queue<int, std::vector<int>, std::greater<int>> min_heap(data.begin(), data.end());

    std::vector<int> sorted_data;
    while (!min_heap.empty()) {
        sorted_data.push_back(min_heap.top());
        min_heap.pop();
    }

    // Incorrectly iterate backwards to print sorted data.
    for (int i = sorted_data.size() - 1; i >= 0; --i) {
        std::cout << sorted_data[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}",for (int i = sorted_data.size() - 1; i >= 0; --i)
"#include <cmath>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    double circumference = 2 * M_PI * radius;
    circumference = circumference / 3.0; // Subtle fault: dividing circumference by 3
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

    return 0;
}",circumference = circumference / 3.0;
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Accessing non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1, not n.

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size(); // Potential integer division
    std::cout << ""Average score: "" << average_score << std::endl;

    return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <map>

int main() {
  std::map<std::string, int> ages; 
  ages[""Alice""] = 30; 
  ages[""Bob""] = 25; 
  ages[""Charlie""] = 40;

  std::string name = ""David"";
  int age = ages[name]; //Potential error: 'name' is not a key in the map.
  std::cout << ""David's age: "" << age << std::endl; 
  return 0;
}",int age = ages[name];
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores; 
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int totalScore = 0;
    for (const auto& pair : scores) {
        totalScore += pair.first; // Incorrect: adding the name (string) instead of the score (int)
    }

    std::cout << ""Total Score: "" << totalScore << std::endl;
    return 0;
}",totalScore += pair.first;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <random> 
#include <chrono>
#include <fstream>

int main() {
    std::ofstream outputFile(""output.txt"");
    if (!outputFile.is_open()) {
        return 1; // Handle file open failure
    }

    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    for (int i = 0; i < 10; ++i) {
        int randomNumber = distrib(gen);
        outputFile << randomNumber << "" "";
    }
    outputFile << std::endl; 

    outputFile.close();

    // Read the numbers back and sum them
    std::ifstream inputFile(""output.txt"");
    int sum = 0;
    int number;
    while (inputFile >> number) {
        sum += number;
    }
    inputFile.close();

    std::cout << ""Sum: "" << sum << std::endl; // Output the sum

    return 0;
}","std::uniform_int_distribution<> distrib(1, 100);"
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail() || !ss.eof()) {
        std::cout << ""Conversion failed."" << std::endl;
        return 1;
    }
    std::string remainder;
    getline(ss, remainder);
    if (!remainder.empty()) {
        std::cout << ""Remainder: "" << remainder << std::endl;
    }
    std::cout << ""Number: "" << num << std::endl;
    return 0;
}",if (!remainder.empty())
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",0.0
"#include <cmath>
#include <iomanip>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of circle with radius "" << radius << "" is: "" << std::fixed << std::setprecision(2) << area << std::endl;

    double circumference = 2 * 3.14159 * radius;
    std::cout << ""Circumference of circle with radius "" << radius << "" is: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

    double expected_area = M_PI * radius * radius;  // Use M_PI from cmath
    std::cout << ""Expected Area using M_PI: "" << std::fixed << std::setprecision(2) << expected_area << std::endl;

    return 0;
}",double area = 3.14159 * radius * radius;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Faulty loop condition
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <fstream>
#include <string>
#include <iostream>

int main() {
    std::ifstream inputFile(""data.txt"");
    std::string line;
    int sum = 0;

    if (inputFile.is_open()) {
        while (std::getline(inputFile, line)) {
            sum += std::stoi(line);
        }
        inputFile.close();
    } else {
        std::cerr << ""Unable to open file\n"";
        return 1;
    }

    std::cout << ""The sum is: "" << sum << std::endl;
    return 0;
}",sum += std::stoi(line);
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 3, 0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers.begin() + 3
"#include <iostream>
#include <iomanip>

int main() {
    double value = 123.456789;
    std::cout << std::fixed << std::setprecision(3) << value << std::endl;
    double truncatedValue = value; // Intentional truncation
    truncatedValue = (int)truncatedValue; // Implicit conversion truncates
    std::cout << std::fixed << std::setprecision(3) << truncatedValue << std::endl;
    return 0;
}",truncatedValue = (int)truncatedValue;
"#include <numeric>
#include <tuple>

int main() {
  std::tuple<int, int, int> my_tuple(1, 2, 3);
  int sum = 0;
  for (int i = 0; i <= 3; ++i) { // Fault: Should be i < 3
    sum += std::get<i>(my_tuple);
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= 3
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, World!"";
    int len = text.length();

    for (int i = 0; i <= len; ++i) { // Fault: Off-by-one error - should be i < len
        std::cout << text[i];
    }
    std::cout << std::endl;
    return 0;
}",i <= len
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    // Incorrectly assumes keys are consecutive
    for (int i = 1; i <= 4; ++i) {
        std::cout << myMap[i] << std::endl;
    }

    return 0;
}",myMap[i]
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    int sum = 0;
    while (!q.empty()) {
        int x = q.front();
        q.pop();
        sum += x * 2; // Incorrect calculation: should be x
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += x * 2;
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string rev_str = str;
    std::reverse(rev_str.begin(), rev_str.end());

    if (str == rev_str)
        std::cout << ""Palindrome!"" << std::endl;
    else
        std::cout << ""Not a palindrome."" << std::endl;

    return 0;
}",if (str == rev_str)
"#include <iomanip> 
#include <sstream> 

int main() { 
  std::stringstream ss;
  ss << std::fixed << std::setprecision(2) << 123.456789;
  double value;
  ss >> value; 
  
  if (value == 123.46) { 
    std::cout << ""Match found!"" << std::endl; 
  } else { 
    std::cout << ""No match."" << std::endl; 
  }
  
  return 0;
}",if (value == 123.46)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double circumference = 2 * M_PI * radius;
    double area = M_PI * radius * radius;

    std::cout << ""Circumference: "" << circumference << std::endl;
    std::cout << ""Area: "" << area << std::endl;

    // Incorrectly calculate volume of a sphere
    double volume = (4.0 / 3.0) * M_PI * radius * radius;
    std::cout << ""Volume of Sphere: "" << volume << std::endl;

    return 0;
}",double volume = (4.0 / 3.0) * M_PI * radius * radius;
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4};
  int target = 7;

  std::vector<int> result;
  std::copy_if(data.begin(), data.end(), std::back_inserter(result), [target](int x){ return x >= target; });

  for (int val : result) {
    std::cout << val << "" "";
  }
  std::cout << std::endl;
  return 0;
}",return x >= target;
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4};
  int target = 7;
  
  auto it = std::find(data.begin(), data.end(), target);
  
  if (it != data.end()) {
    std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
  } else {
    std::cout << ""Target not found.""
  }
  
  // Calculate the sum of elements within the vector.
  int sum = 0;
  for (int i = 0; i < data.size(); ++i) {
    sum += data[i];
  }

  std::cout << ""Sum of elements: "" << sum << std::endl;

  return 0;
}","std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;"
"#include <random> 
#include <chrono> 
#include <fstream> 
#include <string>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd()); 
    std::uniform_int_distribution<> distrib(1, 100); 

    std::ofstream outputFile(""numbers.txt"");
    if (outputFile.is_open()) {
        for (int i = 0; i < 10; ++i) {
            int number = distrib(gen);
            outputFile << number * 2 << std::endl; // Fault: Intended to output the number itself
        }
        outputFile.close();
    } else {
        std::cerr << ""Unable to open file!"" << std::endl;
        return 1;
    }
    return 0;
}",outputFile << number * 2 << std::endl;
"#include <array>
#include <limits>

int main() {
  std::array<int, 5> arr = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= arr.size(); ++i) {
    sum += arr[i];
  }
  
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= arr.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <complex>

int main() {
    double realPart = 2.0;
    double imagPart = 3.0;
    std::complex<double> c1(realPart, imagPart);

    std::complex<double> c2;

    if (c1.real() == 0.0) {
        c2 = c1 * 2.0;
    } else {
        c2 = c1;
    }

    std::cout << ""Real: "" << c2.real() << std::endl;
    std::cout << ""Imaginary: "" << c2.imag() << std::endl;
    return 0;
}","if (c1.real() == 0.0) {
        c2 = c1 * 2.0;
    }"
"#include <map>
#include <string>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Fault: Accessing a non-existent key.
    
    std::cout << ""David's age is: "" << age << std::endl;
    return 0;
}",ages[name]
"#include <chrono>
#include <thread>
#include <iostream>

int main() {
    std::cout << ""Starting..."";
    std::this_thread::sleep_for(std::chrono::seconds(2));

    int data[] = {1, 2, 3, 4, 5};
    int size = 6; // Fault: size is one greater than the actual array size

    for (int i = 0; i < size; ++i) {
        std::cout << data[i] << "" "";
    }
    std::cout << std::endl;

    std::cout << ""Finished!\n"";
    return 0;
}",int size = 6; // Fault: size is one greater than the actual array size
"#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 123.4567;
    std::string formatted_price = format_number(price);
    std::cout << ""The price is: "" << formatted_price << std::endl;
    double tax_rate = 0.075;
    double tax_amount = price * tax_rate;
    std::string formatted_tax_amount = format_number(tax_amount);
    std::cout << ""Tax amount: "" << formatted_tax_amount << std::endl;

    double total_price = price + tax_amount;
    std::string formatted_total_price = format_number(total_price);
    std::cout << ""Total price: "" << formatted_total_price << std::endl;
    
    return 0;
}",std::string formatted_total_price = format_number(total_price);
"#include <iostream>
#include <iomanip>

int main() {
    double price = 100.50;
    int quantity = 3;
    double discount_percentage = 0.15;

    double discount_amount = price * quantity * discount_percentage;
    double final_price = price * quantity - discount_amount;

    std::cout << ""Original Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    std::cout << ""Quantity: "" << quantity << std::endl;
    std::cout << ""Discount Percentage: "" << std::fixed << std::setprecision(2) << discount_percentage << std::endl;
    std::cout << ""Discount Amount: "" << std::fixed << std::setprecision(2) << discount_amount << std::endl;
    std::cout << ""Final Price: "" << std::fixed << std::setprecision(2) << final_price << std::endl;

    return 0;
}",double discount_amount = price * quantity * discount_percentage;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    // Incorrectly calculating diameter
    double diameter = radius / 2.0;
    std::cout << ""Diameter: "" << diameter << std::endl;
    
    return 0;
}",double diameter = radius / 2.0;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int target = 7;

    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found.""
    }

    // Incorrectly increments the iterator past the end.
    it++;

    if (it != numbers.end()) {
         std::cout << ""Element after target: "" << *it << std::endl;
    } else {
        std::cout << ""No element after target."" << std::endl;
    }
    
    return 0;
}",it++;
"#include <unordered_map>
#include <iostream>

int main() {
  std::unordered_map<std::string, int> counts;
  counts[""apple""] = 5;
  counts[""banana""] = 3;

  std::string fruit = ""orange"";
  int count = counts[fruit]; //Potential issue - default construction
  std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

  return 0;
}",int count = counts[fruit];
"#include <list>
#include <numeric>

int main() {
    std::list<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int number : numbers) {
        sum += number;
    }
    
    std::list<int> empty_list;
    int sum_empty = std::accumulate(empty_list.begin(), empty_list.end(), 0);
    
    if (sum_empty == 0) {
        std::cout << ""The sum of the empty list is 0."" << std::endl;
    } else {
        std::cout << ""The sum of the empty list is: "" << sum_empty << std::endl;
    }
    
    std::cout << ""The sum of the numbers is: "" << sum << std::endl;
    return 0;
}","int sum_empty = std::accumulate(empty_list.begin(), empty_list.end(), 0);"
"#include <fstream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    if (file.is_open()) {
        std::string line;
        int sum = 0;
        while (std::getline(file, line)) {
            try {
                sum += std::stoi(line) - 1;  //Potential integer overflow
            } catch (const std::invalid_argument& e) {
                std::cerr << ""Invalid argument: "" << e.what() << std::endl;
            } catch (const std::out_of_range& e) {
                std::cerr << ""Out of range: "" << e.what() << std::endl;
            }
        }
        file.close();
        std::cout << ""Sum: "" << sum << std::endl;
    } else {
        std::cerr << ""Unable to open file.""
        return 1;
    }
    return 0;
}",sum += std::stoi(line) - 1;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of squares of the first n elements
    int n = numbers.size();
    int sum_of_squares = 0;
    for (int i = 0; i < n; ++i) {
        sum_of_squares += numbers[i] * numbers[i];
    }
    
    // Incorrectly subtracting 1 from the sum instead of adding.
    sum_of_squares = sum_of_squares - 1;
    
    std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
    return 0;
}",sum_of_squares = sum_of_squares - 1;
"#include <array>
#include <numeric>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}","for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }"
"#include <random>
#include <numeric>
#include <algorithm>
#include <vector>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the product of all numbers in the vector.
    long long product = 1;
    for (int i = 0; i < numbers.size(); ++i) {
        product *= numbers[i];
    }

    // Display the product.
    std::cout << ""Product: "" << product << std::endl;

    return 0;
}",long long product = 1;
"#include <queue>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    vector<int> numbers = {5, 2, 8, 1, 9, 4};
    vector<int> sorted_numbers = numbers;
    sort(sorted_numbers.begin(), sorted_numbers.end(), greater<int>()); // Descending order

    priority_queue<int> pq(sorted_numbers.begin(), sorted_numbers.end());

    int count = 0;
    while (!pq.empty()) {
        count++;
        pq.pop();
    }

    if (count != numbers.size()) {
        cout << ""Error: Count mismatch!"" << endl;
    } else {
        cout << ""All elements processed correctly."" << endl;
    }

    return 0;
}","sort(sorted_numbers.begin(), sorted_numbers.end(), greater<int>());"
"#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double value = 123.4567;
    std::string formatted_value = format_number(value);
    std::cout << ""Formatted value: "" << formatted_value << std::endl;
    double parsed_value = std::stod(formatted_value); // Potential issue: precision loss
    std::cout << ""Parsed value: "" << parsed_value << std::endl;
    return 0;
}",double parsed_value = std::stod(formatted_value);
"#include <chrono>
#include <thread>
#include <mutex>
#include <iostream>

std::mutex mtx;

void worker(int id) {
    for (int i = 0; i < 10; ++i) {
        std::lock_guard<std::mutex> lock(mtx);
        std::cout << ""Worker "" << id << "": "" << i << std::endl;
    }
}

int main() {
    std::thread t1(worker, 1);
    std::thread t2(worker, 2);

    t1.join();
    t2.join();

    std::cout << ""All workers finished."" << std::endl;
    return 0;
}","std::cout << ""Worker "" << id << "": "" << i << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    double fake_area = radius * radius; // Incorrect calculation, should be M_PI * radius * radius
    std::cout << ""Fake Area: "" << fake_area << std::endl;

    return 0;
}",double fake_area = radius * radius;
"#include <algorithm>
#include <numeric>
#include <tuple>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    // Calculate the product of all elements
    long long product = 1;
    for (int i = 0; i < n; ++i) {
        product *= arr[i];
    }

    // Attempt to store the product in an int - potential overflow
    int result = (int)product; 

    std::cout << ""Product: "" << result << std::endl;
    
    return 0;
}",int result = (int)product;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->second << std::endl;
    }

    // Incorrectly access a key that doesn't exist
    std::cout << myMap[4] << std::endl; 

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    // Calculate circumference
    double circumference = 2 * pi * radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;

    return 0;
}","std::cout << ""Circumference of the circle: "" << circumference << std::endl;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <iomanip> 
#include <sstream> 
#include <limits> 

int main() {
    double pi = 3.14159265358979323846;
    std::stringstream ss;
    ss << std::fixed << std::setprecision(20) << pi;
    std::string pi_str = ss.str();

    double pi_reconstructed = std::stod(pi_str);
    if (pi_reconstructed != pi) {
        std::cout << ""Reconstruction failed!"" << std::endl;
    }
    else {
        std::cout << ""Reconstruction successful!"" << std::endl;
    }

    // Potential Issue: Floating-point precision and rounding errors
    double x = 1.0;
    double y = 0.1;
    int iterations = 100;
    double sum = 0.0;
    for (int i = 0; i < iterations; ++i) {
        sum += y;
    }
    if (sum != x) {
        std::cout << ""Floating-point error detected! Sum: "" << sum << std::endl;
    } else {
        std::cout << ""Floating-point calculation OK! Sum: "" << sum << std::endl;
    }

    return 0;
}","double x = 1.0;
    double y = 0.1;
    int iterations = 100;
    double sum = 0.0;
    for (int i = 0; i < iterations; ++i) {
        sum += y;
    }"
"#include <array>
#include <numeric>
#include <limits>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <fstream>
#include <iostream>
#include <string>

int main() {
  std::fstream file(""data.txt"", std::ios::out);
  if (file.is_open()) {
    std::string line = ""This is a line of text"";
    file << line << std::endl;
    file.close();
  } else {
    std::cerr << ""Unable to open file!"" << std::endl;
    return 1;
  }

  std::fstream inputFile(""data.txt"", std::ios::in);
  if (inputFile.is_open()) {
    std::string readLine;
    std::getline(inputFile, readLine);
    std::cout << ""Read from file: "" << readLine << std::endl;
    inputFile.close();
  } else {
    std::cerr << ""Unable to open file for reading!"" << std::endl;
    return 1;
  }
  return 0;
}",std::string readLine;
"#include <random>
#include <numeric>
#include <limits>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    std::generate(numbers.begin(), numbers.end(), [&]() { return distrib(gen); });

    long long sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << static_cast<double>(sum) / numbers.size() << std::endl;

    return 0;
}",static_cast<double>(sum) / numbers.size()
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    if (str == reversed_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == reversed_str)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    
    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!\n"";
    } else {
        std::cout << ""Area calculation is correct!\n"";
    }

    // Demonstrating an off-by-one error in a loop
    int numbers[] = {1, 2, 3, 4, 5};
    int array_size = sizeof(numbers) / sizeof(numbers[0]);
    
    for (int i = 0; i <= array_size; ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}",i <= array_size
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string name = ""David"";
    if (scores.count(name) == 0) {
        scores[name] = 60; // Assign default score if not found
    }

    std::cout << ""David's score: "" << scores[name] << std::endl;
    std::cout << ""Alice's score: "" << scores[""Alice""] << std::endl;

    return 0;
}",scores[name] = 60; // Assign default score if not found
"#include <iostream>
#include <chrono>
#include <thread>

int main() {
    std::cout << ""Starting program..."" << std::endl;
    std::this_thread::sleep_for(std::chrono::seconds(2));

    int total_sum = 0;
    for (int i = 0; i < 10; ++i) {
        total_sum += i;
    }

    std::cout << ""Total sum: "" << total_sum << std::endl;

    std::cout << ""Ending program..."" << std::endl;
    return 0;
}",total_sum += i;
"#include <deque>
#include <iostream>

int main() {
    std::deque<int> myDeque;
    myDeque.push_back(1);
    myDeque.push_back(2);
    myDeque.push_back(3);

    for (int i = 0; i <= myDeque.size(); ++i) {
        std::cout << myDeque[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}",i <= myDeque.size()
"#include <numeric>
#include <functional>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    std::for_each(numbers.begin(), numbers.end(), [&](int n) { sum += n; });

    if (sum == 10) {
        std::cout << ""Sum is 10"" << std::endl;
    } else {
        std::cout << ""Sum is not 10"" << std::endl;
    }

    return 0;
}",if (sum == 10)
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int num : nums) {
        if (num > target) {
            result.push_back(num);
        }
    }

    if (result.empty()) {
        std::cout << ""No numbers greater than target found."" << std::endl;
    } else {
        std::cout << ""Numbers greater than target: "";
        for (int i = 0; i < result.size(); ++i) {
            std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }

    return 0;
}",if (num > target) {
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::fstream file(""data.txt"", std::ios::out);
    if (file.is_open()) {
        std::string line = ""This is a test"";
        file << line << std::endl;
        file.close();
    } else {
        std::cerr << ""Unable to open file!"" << std::endl;
        return 1;
    }

    std::fstream inputFile(""data.txt"");
    std::string readLine;
    if (inputFile.is_open()) {
        std::getline(inputFile, readLine);
        std::cout << readLine << std::endl;
        inputFile.close();
    } else {
        std::cerr << ""Unable to open input file!"" << std::endl;
        return 1;
    }

    std::string upperCaseLine = readLine;
    for (char &c : upperCaseLine) {
        c = c;
    }
    std::cout << upperCaseLine << std::endl;
    
    return 0;
}",c = c;
"#include <random>
#include <chrono>
#include <thread>
#include <algorithm>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the sum of numbers.
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }

    // Find the maximum value. This is the bug.
    int max_val = numbers[0];
    for (int i = 1; i <= numbers.size(); ++i) {  // Bug: Index out of bounds
        if (numbers[i] > max_val) {
            max_val = numbers[i];
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Max: "" << max_val << std::endl;

    return 0;
}",for (int i = 1; i <= numbers.size(); ++i)
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    ss >> number;
    if (ss.fail()) {
        std::cout << ""Invalid input format"" << std::endl;
        return 1;
    }
    double result = number * 2;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",    double result = number * 2;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area > expected_area + 0.1) {
        std::cout << ""Area is greater than expected."" << std::endl;
    } else if (area < expected_area - 0.1) {
        std::cout << ""Area is less than expected."" << std::endl;
    } else {
        std::cout << ""Area is as expected."" << std::endl;
    }
    return 0;
}",area > expected_area + 0.1
"#include <algorithm>
#include <tuple>

int main() {
    std::tuple<int, double, std::string> data(10, 3.14, ""hello"");
    int int_val = std::get<0>(data);
    double double_val = std::get<1>(data);
    std::string string_val = std::get<2>(data);

    if (int_val > 5 && double_val < 3.0) {
        std::cout << ""Condition met!"" << std::endl;
    } else {
        std::cout << ""Condition not met."" << std::endl;
    }

    return 0;
}",double_val < 3.0
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto const& [key, val] : myMap) {
        std::cout << key << "": "" << val << std::endl;
    }

    myMap.erase(2);

    std::cout << ""After erasing key 2:\n"";
    for (auto const& [key, val] : myMap) {
        std::cout << key << "": "" << val << std::endl;
    }

    // Incorrect iteration - trying to access a non-existent element
    std::cout << ""Accessing element with key 4:\n"";
    std::cout << myMap[4] << std::endl; // This will default construct a string.

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        if (it->first == 2) {
           it = myMap.erase(it);
        }
        std::cout << it->first << "": "" << it->second << std::endl;
    }

    return 0;
}",it = myMap.erase(it);
"#include <iomanip> 
#include <sstream> 

int main() {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << 123.4567;
    double value;
    ss >> value;
    if (value > 123.45) {
        std::cout << ""Value is greater than 123.45\n"";
    } else {
        std::cout << ""Value is not greater than 123.45\n"";
    }
    return 0;
}",if (value > 123.45)
"#include <iostream>
#include <string>

int main() {
  std::string text = ""Hello, world!\n"";
  size_t pos = text.find(""world!"");
  if (pos != std::string::npos) {
    text.erase(pos, 5);
  }
  std::cout << text << std::endl;
  return 0;
}","text.erase(pos, 5);"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.end(), 0);
    
    // Intentionally incorrect calculation
    int incorrect_result = sum * 0.5;
    
    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Incorrect Result: "" << incorrect_result << std::endl;
    
    return 0;
}",int incorrect_result = sum * 0.5;
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << ""Error opening file: "" << filename << std::endl;
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(file, line)) {
        try {
            int number = std::stoi(line);
            sum += number;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << line << std::endl;
            return 1;
        } catch (const std::out_of_range& e) {
            std::cerr << ""Out of range: "" << line << std::endl;
            return 1;
        }
    }

    file.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int number = std::stoi(line);
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int number = distrib(gen);
        if (number % 2 == 0) {
            sum += number;
        } else {
            sum -= number; // Fault: Subtracting odd numbers instead of adding
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= number;
"#include <string>
#include <sstream>

std::string formatNumber(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 1234.56789;
    std::string formattedPrice = formatNumber(price);
    std::cout << ""The price is: "" << formattedPrice << std::endl;
    
    // Incorrect use of std::string::size() to check length
    if (formattedPrice.size() < 10) {
        std::cout << ""Price is short!"" << std::endl;
    } else {
        std::cout << ""Price is long enough."" << std::endl;
    }
    
    return 0;
}",if (formattedPrice.size() < 10)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <complex>
#include <cmath>

int main() {
    double x = 2.0;
    double y = 3.0;
    std::complex<double> z(x, y);
    double magnitude = std::sqrt(std::pow(z.real(), 2.0) + std::pow(z.imag(), 2.0));
    std::cout << ""Magnitude: "" << magnitude << std::endl;
    
    // Incorrect calculation of angle (phase) in degrees.
    double angle_rad = std::atan2(z.imag(), z.real());
    double angle_deg = angle_rad * 180.0 / M_PI;

    std::cout << ""Angle (degrees): "" << angle_deg << std::endl;
    
    return 0;
}","double angle_rad = std::atan2(z.imag(), z.real());"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> results;
    for (int x : data) {
        if (x > target) {
            results.push_back(x);
        }
    }

    if (results.empty()) {
        std::cout << ""No elements greater than target found."" << std::endl;
    } else {
        std::cout << ""Elements greater than target: "";
        for (int i = 0; i < results.size(); ++i) {
            std::cout << results[i] << (i == results.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }

    return 0;
}",if (x > target) {
"#include <tuple>
#include <cmath>

int main() {
    std::tuple<int, double, std::string> myTuple = std::make_tuple(5, 3.14, ""Hello"");
    int intValue = std::get<0>(myTuple);
    double doubleValue = std::get<1>(myTuple);
    std::string stringValue = std::get<2>(myTuple);

    double result = std::sqrt(intValue) + doubleValue;
    std::cout << std::fixed << std::setprecision(2) << result << std::endl;

    return 0;
}",std::sqrt(intValue)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area != expected_area) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
        std::cout << ""Calculated area: "" << area << std::endl;
        std::cout << ""Expected area: "" << expected_area << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
        std::cout << ""Area: "" << area << std::endl;
    }
    return 0;
}",if (area != expected_area) {
"#include <map>
#include <iostream>

int main() {
  std::map<std::string, int> counts;
  counts[""apple""] = 5;
  counts[""banana""] = 3;

  auto it = counts.find(""orange"");
  if (it != counts.end()) {
    std::cout << it->second << std::endl;
  } else {
    std::cout << 0 << std::endl; // Should print 0, but mistakenly uses counts[""orange""].
    std::cout << counts[""orange""] << std::endl;
  }

  return 0;
}","std::cout << counts[""orange""] << std::endl;"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    // Incorrectly decrement sum instead of incrementing to find the average.
    sum--;
    double average = static_cast<double>(sum) / numbers.size();
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",sum--;
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl; // Should display 123.46
    double discounted_price = price * 0.9;
    std::cout << std::fixed << std::setprecision(2) << discounted_price << std::endl; // Incorrect precision
    return 0;
}",std::cout << std::fixed << std::setprecision(2) << discounted_price << std::endl;
"#include <fstream>
#include <string>
#include <algorithm>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }
    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            sum += std::stoi(line); // Potential overflow.
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << e.what() << '\n';
        }
    }
    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += std::stoi(line);
"#include <string>
#include <sstream>
#include <algorithm>

int main() {
    std::string input = ""123abc456"";
    std::stringstream ss(input);
    int number;
    ss >> number; // Reads only the initial number
    std::cout << ""Number: "" << number << std::endl;
    std::string remaining = input.substr(ss.tellg());
    std::cout << ""Remaining string: "" << remaining << std::endl;
    return 0;
}",ss >> number;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) { // Fault: Should be i < data.size()
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <random> 
#include <ctime>
#include <iostream>

int main() {
    std::srand(std::time(nullptr));
    int arr[5];
    for (int i = 0; i <= 5; ++i) { // Faulty loop condition
        arr[i] = std::rand() % 100;
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",i <= 5
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Loop condition error
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <array>
#include <numeric>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <deque>
#include <iostream>
#include <numeric>

int main() {
    std::deque<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) { // Fault: i <= data.size()
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <unordered_map>
#include <iostream>

int main() {
  std::unordered_map<std::string, int> counts;
  counts[""apple""] = 5;
  counts[""banana""] = 3;

  if (counts.find(""orange"") != counts.end()) {
    std::cout << ""Orange count: "" << counts[""orange""] << std::endl;
  } else {
    std::cout << ""Orange not found."" << std::endl;
  }

  return 0;
}","if (counts.find(""orange"") != counts.end())"
"#include <complex>
#include <cmath>

int main() {
    double angle = 3.14159265358979323846;
    std::complex<double> z(1.0, 0.0);
    
    // Calculate z^angle (Euler's formula)
    std::complex<double> result = std::exp(std::complex<double>(angle, 0.0)) * z;

    // Expected value for z^angle should be approximately 1 + 0i
    double realPart = result.real();
    double imaginaryPart = result.imag();

    // Check if the real part is close to 1, but using an incorrect comparison.
    if (realPart != 1.0) {
        std::cout << ""Error: Incorrect result!\n"";
    } else {
        std::cout << ""Result is correct!\n"";
    }

    return 0;
}",if (realPart != 1.0)
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    int total = 0;
    for (const auto& pair : counts) {
        total += pair.second;
    }

    std::cout << ""Total count: "" << total << std::endl;

    counts.erase(""banana"");
    
    std::cout << ""Count of banana after erase: "" << counts[""banana""] << std::endl;
    
    return 0;
}","std::cout << ""Count of banana after erase: "" << counts[""banana""] << std::endl;"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};

    // Calculate the sum of elements using std::accumulate
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    // Incorrectly double the sum instead of printing it
    sum = sum * 2;

    // Print the incorrect doubled sum
    std::cout << ""The sum is: "" << sum << std::endl;
    return 0;
}",sum = sum * 2;
"#include <numeric>
#include <tuple>
#include <functional>

int main() {
  std::tuple<int, int, int> my_tuple(1, 2, 3);
  int sum = 0;
  std::apply([&](int a, int b, int c) {
    sum = std::accumulate(std::tuple_cat(std::make_tuple(a), std::make_tuple(b), std::make_tuple(c)), 0, std::plus<int>());
  }, my_tuple);
  
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}","std::accumulate(std::tuple_cat(std::make_tuple(a), std::make_tuple(b), std::make_tuple(c)), 0, std::plus<int>())"
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    if (ss >> num) {
        std::cout << ""Conversion successful: "" << num << std::endl;
    } else {
        std::cout << ""Conversion failed."" << std::endl;
    }
    
    std::string input2 = ""abc"";
    std::stringstream ss2(input2);
    double num2;
    if (ss2 >> num2) {
        std::cout << ""Conversion successful: "" << num2 << std::endl;
    } else {
        std::cout << ""Conversion failed."" << std::endl;
    }

    return 0;
}",if (ss2 >> num2)
"#include <tuple>
#include <functional>
#include <limits>

int main() {
  auto my_func = std::bind([](int a, int b) { return a * b; }, std::placeholders::_1, std::placeholders::_2);
  
  std::tuple<int, int, int> data = std::make_tuple(5, 3, 10);
  
  int result = my_func(std::get<0>(data), std::get<1>(data));
  std::cout << result << std::endl; // Expect 15, prints 0

  return 0;
}","std::tuple<int, int, int> data = std::make_tuple(5, 3, 10);"
"#include <random>
#include <ctime>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distrib(gen);
        if (randomNumber % 2 == 0) {
            sum += randomNumber;
        } else {
            sum -= randomNumber; // Fault: Should be sum *= randomNumber
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= randomNumber;
"#include <algorithm>
#include <memory>

struct Point {
    double x, y;
};

int main() {
    std::vector<Point> points = {{1.0, 2.0}, {3.0, 4.0}, {5.0, 6.0}, {7.0, 8.0}, {9.0, 10.0}};

    // Find the point with the largest y-coordinate
    auto max_y_it = std::max_element(points.begin(), points.end(), [](const Point& a, const Point& b) {
        return a.y < b.y; // Fault: Should be a.y > b.y
    });

    if (max_y_it != points.end()) {
        std::cout << ""Point with largest y: ("" << max_y_it->x << "", "" << max_y_it->y << "")"" << std::endl;
    } else {
        std::cout << ""No points in the vector."" << std::endl;
    }

    return 0;
}",return a.y < b.y;
"#include <array>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  std::sort(data.begin(), data.end(), [](int a, int b) { return a > b; });
  for (int i = 0; i < data.size(); ++i) {
    std::cout << data[i] << ' '; 
  }
  std::cout << std::endl;
  return 0;
}",return a > b;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""The area of the circle is: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""The circumference of the circle is: "" << circumference << std::endl;

    // Incorrect calculation of diameter
    double diameter = circumference / M_PI;
    std::cout << ""The diameter of the circle is: "" << diameter << std::endl;

    return 0;
}",double diameter = circumference / M_PI;
"#include <unordered_map>
#include <vector>
#include <algorithm>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    std::vector<int> keys = {1, 2, 4}; //4 is not a key

    for (int key : keys) {
        std::cout << myMap[key] << std::endl;
    }

    return 0;
}","std::vector<int> keys = {1, 2, 4};"
"#include <deque>
#include <iostream>
#include <limits>

int main() {
    std::deque<int> dq;
    dq.push_back(1);
    dq.push_back(2);
    dq.push_back(3);

    int sum = 0;
    for (int i = 0; i <= dq.size(); ++i) {  // Fault: Loop condition should be i < dq.size()
        if (i < dq.size()) {
            sum += dq[i];
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= dq.size()
"#include <iostream>
#include <iomanip>

int main() {
  double price = 123.456789;
  std::cout << std::fixed << std::setprecision(3) << price << std::endl;
  double tax_rate = 0.0725;
  double tax_amount = price * tax_rate;
  std::cout << ""Tax Amount: "" << std::fixed << std::setprecision(2) << tax_amount << std::endl;
  double total_cost = price + tax_amount;
  std::cout << ""Total Cost: "" << std::fixed << std::setprecision(2) << total_cost << std::endl;

  // Example of integer division error
  int numerator = 10;
  int denominator = 3;
  double expected_result = 3.3333333333333335;
  double calculated_result = static_cast<double>(numerator) / denominator;  // Potential precision loss.  Intended to check against expected_result but won't due to precision issues.
  std::cout << ""Calculated Result: "" << std::fixed << std::setprecision(10) << calculated_result << std::endl;
  
  if (calculated_result == expected_result) {
      std::cout << ""Test passed!"" << std::endl;
  } else {
      std::cout << ""Test failed! Expected: "" << expected_result << "", Calculated: "" << calculated_result << std::endl;
  }

  return 0;
}",if (calculated_result == expected_result)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <numeric>
#include <limits>

int main() {
    long long sum = 0;
    long long numbers[] = {1, 2, 4626764666797970000, 8, 10, 12, 14, 16, 18, 20};
    int n = sizeof(numbers) / sizeof(numbers[0]);

    for (int i = 0; i < n; ++i) {
        sum += numbers[i];
    }

    if (sum > std::numeric_limits<long long>::max() / 2) {
        std::cout << ""Overflow detected! Sum is too large."" << std::endl;
    } else {
        std::cout << ""Sum: "" << sum << std::endl;
    }

    return 0;
}",sum > std::numeric_limits<long long>::max() / 2
"#include <string>
#include <sstream>

std::string formatNumber(int num) {
    std::stringstream ss;
    ss << num;
    return ss.str();
}

int main() {
    int value = 12345;
    std::string formattedValue = formatNumber(value);
    
    // Intended to convert the formatted string back to an integer
    int parsedValue = formattedValue;
    
    // Incorrect conversion: Uses std::stoi without error handling, leading to potential crashes on invalid input.
    // int parsedValue = std::stoi(formattedValue, nullptr, 10);
    
    std::cout << ""Original Value: "" << value << std::endl;
    std::cout << ""Formatted Value: "" << formattedValue << std::endl;
    std::cout << ""Parsed Value: "" << parsedValue << std::endl;
    return 0;
}",int parsedValue = formattedValue;
"#include <tuple>
#include <utility>
#include <algorithm>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(1, 2.5, ""hello"");
    int int_val = std::get<0>(data);
    double double_val = std::get<1>(data);
    std::string string_val = std::get<2>(data);

    // Incorrectly assumes the second element is an integer.
    int incorrect_val = std::get<1>(data);
    std::cout << incorrect_val << std::endl;
    return 0;
}",int incorrect_val = std::get<1>(data);
"#include <bitset>
#include <limits>

int main() {
    std::bitset<32> bs;
    unsigned int val = 0xFFFFFFFF;
    bs = val;
    unsigned int restored_val = bs.to_ulong();
    
    if (restored_val != val) {
        std::cout << ""Conversion failed!\n"";
    } else {
        std::cout << ""Conversion successful!\n"";
    }
    
    return 0;
}",bs = val;
"#include <algorithm>
#include <list>
#include <iostream>

int main() {
  std::list<int> numbers = {1, 2, 3, 4, 5};
  int target = 3;

  std::list<int>::iterator it = std::find(numbers.begin(), numbers.end(), target);

  if (it != numbers.end()) {
    numbers.erase(it++); // Increment before erasing, leading to skipping an element
  }

  std::cout << ""Numbers after modification: "";
  for (int num : numbers) {
    std::cout << num << "" "";
  }
  std::cout << std::endl;

  return 0;
}",numbers.erase(it++);
"#include <fstream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(file, line)) {
        sum += std::stoi(line); // Potential conversion error if line isn't a number
    }

    file.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += std::stoi(line);
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    // Calculate circumference with an incorrect formula
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    // A minor mathematical error.
    double expected_circumference = 2 * 3.14159 * radius; 
    std::cout << ""Expected Circumference: "" << expected_circumference << std::endl;

    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <map>
#include <string>

int main() {
  std::map<std::string, int> counts;
  counts[""apple""] = 5;
  counts[""banana""] = 3;

  int total = 0;
  for (auto const& [key, val] : counts) {
    total += val;
  }

  if (total == 8) {
    std::cout << ""Total is 8!"" << std::endl;
  } else {
    std::cout << ""Total is not 8."" << std::endl;
  }

  return 0;
}",if (total == 8)
"#include <array>
#include <algorithm>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    std::array<int, 5> sorted_data = data;
    
    std::sort(sorted_data.begin(), sorted_data.end(), std::greater<int>());
    
    for (int i = 0; i < sorted_data.size(); ++i) {
        std::cout << sorted_data[i] << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}",std::greater<int>()
"#include <complex>
#include <iostream>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> w = z * z;
    std::cout << ""w = "" << w << std::endl;
    
    std::complex<double> a(2.0, 3.0);
    std::complex<double> b(1.0, -1.0);
    std::complex<double> c = a + b;
    std::cout << ""c = "" << c << std::endl;

    double real_part = c.real();
    double imag_part = c.imag();
    std::cout << ""Real part: "" << real_part << std::endl;
    std::cout << ""Imaginary part: "" << imag_part << std::endl;
    
    std::cout << ""The square root of a complex number: "" << std::sqrt(c) << std::endl;

    return 0;
}","std::cout << ""The square root of a complex number: "" << std::sqrt(c) << std::endl;"
"#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
            sum += num;
        } else {
            sum -= num; // Fault: Should add even numbers only
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= num;
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    ss >> number;
    if (ss.fail()) {
        std::cerr << ""Conversion failed!"" << std::endl;
        return 1;
    }
    
    std::cout << ""Number: "" << number << std::endl;
    
    double result = number * 2.0;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",    double result = number * 2.0;
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iomanip> #include <queue> #include <limits>

int main() {
    std::priority_queue<int, std::vector<int>, std::greater<int>> minHeap;
    minHeap.push(5);
    minHeap.push(2);
    minHeap.push(8);
    minHeap.push(1);

    int sum = 0;
    while (!minHeap.empty()) {
        int top = minHeap.top();
        minHeap.pop();
        sum += top;
    }
    std::cout << std::fixed << std::setprecision(2) << sum << std::endl;
    return 0;
}",std::greater<int>
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <fstream>
#include <sstream>
#include <iostream>

int main() {
    std::ifstream file(""data.txt"");
    std::stringstream buffer;
    buffer << file.rdbuf();
    std::string content = buffer.str();

    size_t pos = content.find(""Error!"");
    if (pos != std::string::npos) {
        std::cout << ""Error found!"" << std::endl;
    } else {
        std::cout << ""No error found."" << std::endl;
    }
    return 0;
}","if (pos != std::string::npos) {
        std::cout << ""Error found!"" << std::endl;
    } else {
        std::cout << ""No error found."" << std::endl;
    }"
"#include <unordered_map>
#include <iostream>

int main() {
  std::unordered_map<int, std::string> myMap;
  myMap[1] = ""apple"";
  myMap[2] = ""banana"";
  myMap[3] = ""cherry"";

  int key = 4;  // Should be 3 to access 'cherry'
  std::string value = myMap[key];
  std::cout << ""Value for key "" << key << "": "" << value << std::endl;

  return 0;
}",int key = 4;
"#include <numeric>
#include <tuple>

int main() {
    std::tuple<int, int, int> my_tuple = std::make_tuple(1, 2, 3);
    int sum = 0;
    for (int i = 0; i < std::get<2>(my_tuple); ++i) {
        sum += std::get<0>(my_tuple);
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += std::get<0>(my_tuple);
"#include <iostream>
#include <string>

int main() {
    std::string text = ""This is a test string"";
    size_t len = text.length();
    std::string reversed_text = """";

    for (size_t i = 0; i < len; ++i) {
        reversed_text += text[len - i - 1];
    }

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",reversed_text += text[len - i - 1];
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::sort(data.begin(), data.end(), std::greater<int>());
    
    std::cout << ""Sorted in descending order: "";
    for (size_t i = 0; i < data.size(); ++i) {
        std::cout << data[i] << (i == data.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
    
    int sum = 0;
    for (int value : data) {
        sum += value;
    }
    
    std::cout << ""Sum of elements: "" << sum << std::endl;
    return 0;
}",std::greater<int>()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""The area of the circle is: "" << area << std::endl;
    
    // Incorrectly calculating circumference
    double circumference = 2 * M_PI * radius;
    circumference = circumference / 2.0; // Fault: Division by 2 is incorrect
    
    std::cout << ""The circumference of the circle is: "" << circumference << std::endl;
    
    return 0;
}",circumference = circumference / 2.0;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    
    // Find the largest element.
    auto it = std::max_element(data.begin(), data.end());
    
    // Print the index of the largest element, but we are off by one.
    std::cout << ""Index of largest element: "" << it - data.begin() + 1 << std::endl;
    
    return 0;
}",it - data.begin() + 1
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int length = text.size();
    for (int i = 0; i <= length; ++i) { // Fault: Should be i < length
        std::cout << text[i];
    }
    std::cout << std::endl;
    return 0;
}",i <= length
"#include <queue>
#include <vector>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    std::vector<int> v;
    while (!q.empty()) {
        v.push_back(q.front());
        q.pop();
    }

    // Incorrectly access element beyond the vector's bounds.
    std::cout << v[v.size()] << std::endl; 
    return 0;
}",std::cout << v[v.size()] << std::endl;
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4};
  int target = 7;

  std::vector<int> result;
  std::copy_if(data.begin(), data.end(), std::back_inserter(result), [target](int x){ return x >= target; });

  for (int val : result) {
    std::cout << val << "" "";
  }
  std::cout << std::endl;

  return 0;
}",return x >= target;
"#include <fstream>
#include <string>

int main() {
    std::ofstream outfile(""data.txt"");
    if (outfile.is_open()) {
        outfile << ""This is some data.\n"";
        outfile << ""More data here.""; //Missing newline
        outfile.close();
    }
    else {
        std::cerr << ""Unable to open file."";
        return 1;
    }
    return 0;
}","outfile << ""More data here.""; //Missing newline"
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto const& [key, val] : myMap) {
        std::cout << key << "" : "" << val << std::endl;
    }

    myMap.erase(2);

    std::cout << ""After erasing key 2:\n"";
    for (auto const& [key, val] : myMap) {
        std::cout << key << "" : "" << val << std::endl;
    }

    std::cout << ""Trying to access key 2 after erasing:"";
    std::cout << myMap[2] << std::endl; //potential crash

    return 0;
}",std::cout << myMap[2] << std::endl;
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    double circumference = 2 * 3.14159 * radius;
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

    return 0;
}",double area = 3.14159 * radius * radius;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    
    // Find the maximum number
    auto max_it = std::max_element(numbers.begin(), numbers.end());
    
    //Incorrectly increment the iterator to access the next element
    //This will result in reading past the end of the vector
    auto next_it = max_it++;
    
    if (next_it != numbers.end()) {
      std::cout << ""Next element after max: "" << *next_it << std::endl;
    } else {
      std::cout << ""No next element."" << std::endl;
    }

    return 0;
}",auto next_it = max_it++;
"#include <random>
#include <iostream>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distrib(gen);
        if (randomNumber % 2 == 0) {
            sum += randomNumber * 2;
        } else {
            sum -= randomNumber; //Fault: Should be sum += randomNumber;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= randomNumber;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""Area of the circle: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    circumference = circumference / 0.0;  //Potential division by zero
    
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;
    
    return 0;
}",circumference = circumference / 0.0;
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123abc456"";
    std::stringstream ss(input);
    int num;
    ss >> num; // Extracts only the first integer part.
    std::cout << ""Extracted number: "" << num << std::endl;
    return 0;
}",ss >> num;
"#include <ctime>
#include <iomanip>

int main() {
    std::srand(std::time(nullptr));
    
    int arr[5] = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= 5; ++i) { // Fault: Loop iterates one element too far.
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;

    return 0;
}",i <= 5
"#include <array>
#include <numeric>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};

    // Calculate the sum of elements using std::accumulate
    int sum = std::accumulate(data.begin(), data.end(), 0);

    // Introduce a subtle error: only sum the first 3 elements.
    int partial_sum = std::accumulate(data.begin(), data.begin() + 3, 0);

    // Print the results
    std::cout << ""Full Sum: "" << sum << std::endl;
    std::cout << ""Partial Sum: "" << partial_sum << std::endl;

    return 0;
}","std::accumulate(data.begin(), data.begin() + 3, 0);"
"#include <numeric>
#include <tuple>

int main() {
  std::tuple<int, int, int> my_tuple = std::make_tuple(1, 2, 3);
  int sum = std::accumulate(std::get<0>(my_tuple), std::get<1>(my_tuple), 0);
  std::cout << sum << std::endl;
  return 0;
}","std::accumulate(std::get<0>(my_tuple), std::get<1>(my_tuple), 0);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int x : data) {
        if (x < target) {
            result.push_back(x);
        }
    }

    //The below line contains the subtle fault.
    std::sort(result.begin(), result.begin() + result.size()-1); 

    for (int x : result) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::sort(result.begin(), result.begin() + result.size()-1);"
"#include <tuple>
#include <functional>
#include <iostream>

int main() {
    auto sum = std::bind([](int x, int y) { return x - y; }, std::placeholders::_1, std::placeholders::_2);
    std::cout << sum(5, 3) << std::endl;
    return 0;
}",return x - y;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30; 
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; //Potential issue: Accessing non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <map>
#include <string>
#include <iostream>

int main() {
  std::map<std::string, int> counts;
  counts[""apple""] = 5;
  counts[""banana""] = 3;
  counts[""cherry""] = 7;

  std::string fruit = ""grape"";
  int count = counts[fruit];
  std::cout << ""Count of "" << fruit << "": "" << count << std::endl;
  return 0;
}",int count = counts[fruit];
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Find the index of the first element greater than 3
    auto it = std::find_if(numbers.begin(), numbers.end(), [](int x){ return x > 3; });
    
    if (it != numbers.end()) {
        // Incorrectly subtract 1 from the iterator to get the index.
        int index = std::distance(numbers.begin(), it) - 1;
        std::cout << ""Element greater than 3 found at index: "" << index << std::endl;
    } else {
        std::cout << ""No element greater than 3 found."" << std::endl;
    }
    
    return 0;
}","int index = std::distance(numbers.begin(), it) - 1;"
"#include <random>
#include <limits>
#include <thread>
#include <chrono>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(0, 100);

    int count = 0;
    while (true) {
        int randomNumber = distrib(gen);
        if (randomNumber == 0) {
            count++;
            if (count > 10) {
                break; // Prevent infinite loop
            }
        } else {
            count = 0; // Reset count when the number isn't 0
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(10));
    }
    std::cout << ""Zero count: "" << count << std::endl;
    return 0;
}","if (count > 10) {
                break; // Prevent infinite loop
            }"
"#include <bitset>
#include <iostream>

int main() {
    std::bitset<8> bits(""10110010"");
    std::cout << ""Original bits: "" << bits << std::endl;

    // Incorrect bit manipulation - should be bits >> 1, not bits >> 0
    std::bitset<8> shifted_bits = bits >> 0;
    std::cout << ""Shifted bits: "" << shifted_bits << std::endl;

    return 0;
}",std::bitset<8> shifted_bits = bits >> 0;
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cout << ""Conversion failed!"" << std::endl;
        return 1;
    }
    
    std::string extra;
    ss >> extra; // Attempt to read extra characters after the number

    if (!extra.empty()) {
        std::cout << ""Extra characters found: "" << extra << std::endl;
    } else {
        std::cout << ""Number: "" << num << std::endl;
    }
    return 0;
}",ss >> extra;
"#include <set>
#include <iostream>

int main() {
    std::set<int> numbers = {1, 2, 3, 4, 5};
    
    for (int num : numbers) {
        if (num == 4) {
            break;
        }
        numbers.insert(num * 2);
    }
    
    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}",numbers.insert(num * 2);
"#include <cmath>
#include <iomanip>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << std::fixed << std::setprecision(2) << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

    // Incorrect calculation of the diameter
    double diameter = radius / 2.0;
    std::cout << ""Diameter: "" << std::fixed << std::setprecision(2) << diameter << std::endl;

    // Calculate the area of a square with side equal to the radius
    double squareArea = diameter * diameter;
    std::cout << ""Square Area (side = radius): "" << std::fixed << std::setprecision(2) << squareArea << std::endl;

    return 0;
}",double squareArea = diameter * diameter;
"#include <array>
#include <numeric>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> transformed_data(data.size());

    std::transform(data.begin(), data.end(), transformed_data.begin(), [](int x){ return x * 2; });

    // Incorrectly calculating the sum.  Should be std::accumulate(transformed_data.begin(), transformed_data.end(), 0);
    int sum = 0;
    for (size_t i = 0; i < transformed_data.size(); ++i) {
        sum += transformed_data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","    int sum = 0;
    for (size_t i = 0; i < transformed_data.size(); ++i) {
        sum += transformed_data[i];
    }"
"#include <iostream>
#include <queue>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int x = q.front();
        q.pop();
        if (x == 2) {
            // Incorrectly remove all elements after 2
            while (!q.empty()) {
                q.pop();
            }
        }
        std::cout << x << "" "";
    }
    std::cout << std::endl;
    return 0;
}",while (!q.empty()) {q.pop();}
"#include <tuple>
#include <functional>

int main() {
    auto sum_product = [](int x, int y) { return std::make_tuple(x + y, x * y); };
    
    auto [sum, product] = sum_product(5, 3);
    
    if (product == 15) {
        std::cout << ""Product is 15\n"";
    } else {
        std::cout << ""Product is not 15\n"";
    }
    
    return 0;
}",product == 15
"#include <map>
#include <string>
#include <iostream>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;

    std::string fruit = ""orange"";
    std::cout << ""Number of "" << fruit << "": "" << counts[fruit] << std::endl;
    return 0;
}",counts[fruit]
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    // Incorrectly attempt to multiply the sum by the number of elements
    int result = sum * numbers.size();

    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",int result = sum * numbers.size();
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        if (current == 2) {
            break; // Early exit - incorrect logic
        }
        std::cout << current << "" "";
    }
    std::cout << std::endl;
    return 0;
}","if (current == 2) {
            break; // Early exit - incorrect logic
        }"
"#include <random> 
#include <chrono> 
#include <limits>

int main() {
    std::chrono::system_clock::time_point now = std::chrono::system_clock::now();
    std::time_t current_time = std::chrono::system_clock::to_time_t(now);
    std::random_device rd; 
    std::mt19937 gen(current_time);
    std::uniform_int_distribution<> distrib(1, 100);

    int random_number = distrib(gen);
    long long sum = 0;

    for (int i = 0; i <= random_number; ++i) {
        sum += i;
    }

    std::cout << ""Sum of numbers from 0 to "" << random_number << "" is: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= random_number; ++i)
"#include <string>
#include <sstream>

int main() {
    std::string input = ""12.34"";
    std::stringstream ss(input);
    double number;
    ss >> number;
    if (ss.fail()) {
        std::cout << ""Conversion failed."" << std::endl;
        return 1;
    }

    std::cout << ""Number: "" << number << std::endl;
    
    double result = number * 2.0;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",if (ss.fail())
"#include <chrono>
#include <thread>
#include <mutex>
#include <iostream>

std::mutex mtx;

void worker(int id) {
    for (int i = 0; i < 10; ++i) {
        std::lock_guard<std::mutex> lock(mtx);
        std::cout << ""Worker "" << id << "": "" << i << std::endl;
        std::this_thread::sleep_for(std::chrono::milliseconds(10));
    }
}

int main() {
    std::thread t1(worker, 1);
    std::thread t2(worker, 2);

    t1.join();
    t2.join();

    // Incorrect use of join: joining only once
    if (t1.joinable()){
        t1.join();
    }
    if (t2.joinable()){
        t2.join();
    }

    return 0;
}","if (t1.joinable()){
t        t1.join();
    }
    if (t2.joinable()){
        t2.join();
    }"
"#include <numeric>
#include <functional>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0); // Initial complex number
    std::function<std::complex<double>(std::complex<double>)> f = [](std::complex<double> x) { return x * x + 2.0 * x - 1.0; };

    std::complex<double> result = z; 
    for (int i = 0; i < 5; ++i) {
        result = f(result); 
    }

    // The expected result after 5 iterations is approximately (1+i)^5 = 4+4i
    // However, we are using a double-precision complex number, so there will be some floating-point errors.
    
    // Intentionally introduce an error in the last iteration.
    result = f(result + 1.0i);  // Should be z = f(result), this adds 1.0i instead 

    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",result = f(result + 1.0i);
"#include <cmath>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    
    // Calculate circumference
    double circumference = 2 * M_PI * radius; // Incorrect: Should be 2 * M_PI * radius
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <algorithm>
#include <array>
#include <iostream>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int target = 7;

  auto it = std::find(data.begin(), data.end(), target);

  if (it != data.end()) {
    std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
  } else {
    std::cout << ""Target not found."" << std::endl;
  }

  // Demonstrating another operation with the array
  for (int i = 0; i < data.size(); ++i) {
    data[i] *= 2;
  }

  for (int val : data) {
      std::cout << val << "" "";
  }
  std::cout << std::endl;

  return 0;
}",int target = 7;
"#include <array>
#include <iomanip>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {  // Fault: should be i < data.size()
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto const& [key, val] : myMap) {
        std::cout << key << "": "" << val << std::endl;
    }

    // Intentionally incorrect usage.  The loop expects iterator, not a reference.
    for (int i = 0; i < myMap.size(); ++i) {
        auto it = myMap.begin();
        std::cout << it->first << "" - "" << it->second << std::endl;
    }

    return 0;
}","for (int i = 0; i < myMap.size(); ++i) {
        auto it = myMap.begin();"
"#include <vector>
#include <limits>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {  // Fault: Loop iterates one element too far
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iomanip> #include <fstream> #include <sstream> #include <limits> #include <tuple> 

int main() {
    std::ofstream outfile(""output.txt"");
    if (!outfile.is_open()) {
        std::cerr << ""Error opening output file!"" << std::endl;
        return 1;
    }

    double sum = 0.0;
    int num_values = 5;
    double values[num_values];

    for (int i = 0; i < num_values; ++i) {
        values[i] = static_cast<double>(i + 1) * 2.5; // Calculate values
    }

    for (int i = 0; i <= num_values; ++i) { // Fault: Should be i < num_values
        sum += values[i];
    }

    outfile << std::fixed << std::setprecision(2) << ""Sum: "" << sum << std::endl;
    outfile.close();

    return 0;
}",for (int i = 0; i <= num_values; ++i)
"#include <random>
#include <algorithm>
#include <vector>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average
    double sum = 0.0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    double average = sum / numbers.size();

    // Find the element closest to the average
    int closest_index = 0;
    double min_difference = std::abs(numbers[0] - average);

    for (int i = 1; i < numbers.size(); ++i) {
        if (std::abs(numbers[i] - average) < min_difference) {
            min_difference = std::abs(numbers[i] - average);
            closest_index = i;
        }
    }

    std::cout << ""The closest number to the average is: "" << numbers[closest_index] << std::endl;
    return 0;
}",double average = sum / numbers.size();
"#include <string>
#include <sstream>
#include <algorithm>

std::string formatString(int number) {
    std::stringstream ss;
    ss << number;
    std::string str = ss.str();
    return str;
}

int main() {
    int num = 12345;
    std::string formattedNum = formatString(num);
    
    // Incorrectly trying to compare a string to an integer directly.
    if (formattedNum < ""9999"") {
        std::cout << ""Number is less than 9999"" << std::endl;
    } else {
        std::cout << ""Number is greater than or equal to 9999"" << std::endl;
    }

    return 0;
}","if (formattedNum < ""9999"")"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <unordered_map>
#include <string>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""cherry""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // Fault: Accessing non-existent key returns default-constructed int (0)
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl;

    return 0;
}",counts[fruit]
"#include <cmath> 
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  
  std::cout << ""Area of circle with radius "" << radius << "" is: "" << area << std::endl;
  
  double circumference = 2 * M_PI * radius;
  std::cout << ""Circumference of circle with radius "" << radius << "" is: "" << circumference << std::endl;
  
  double new_radius = circumference / (2 * M_PI);
  std::cout << ""Calculated radius from circumference: "" << new_radius << std::endl;
  
  if (new_radius == radius) {
    std::cout << ""Radius calculation is correct."" << std::endl;
  } else {
    std::cout << ""Radius calculation is incorrect."" << std::endl;
  }
  
  return 0;
}",if (new_radius == radius) {
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}","for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: sorting only up to n-1, leading to out-of-bounds access

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly calculating average
    double average = sum / numbers.size();
    
    std::cout << ""The sum is: "" << sum << std::endl;
    std::cout << ""The average is: "" << average << std::endl;
    
    return 0;
}",double average = sum / numbers.size();
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    int sum = 0;
    for (int i = 0; i <= n; ++i) {  // Fault: Loop goes one element beyond the array bounds
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= n
"#include <iomanip> #include <sstream> #include <string> #include <algorithm> #include <vector> #include <limits>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(6) << num;
    return ss.str();
}

int main() {
    double pi = 3.14159265358979323846;
    double e = 2.71828182845904523536;
    std::vector<double> numbers = {pi, e, 1.0/3.0, std::sqrt(2), std::pow(2, 10)};

    for (double number : numbers) {
        std::string formatted_num = format_number(number);
        if (formatted_num.length() > 10) {
            formatted_num = formatted_num.substr(0, 10);
        }
        std::cout << formatted_num << std::endl;
    }

    double large_number = std::numeric_limits<double>::max();
    std::string formatted_large = format_number(large_number);
    std::cout << formatted_large << std::endl;
    return 0;
}","if (formatted_num.length() > 10) {
            formatted_num = formatted_num.substr(0, 10);"
"#include <string>
#include <sstream>
#include <vector>

std::string format_vector(const std::vector<int>& data) {
    std::stringstream ss;
    ss << ""["";
    for (size_t i = 0; i < data.size(); ++i) {
        ss << data[i];
        if (i < data.size() - 1) {
            ss << "", "";
        }
    }
    ss << ""]"";
    return ss.str();
}

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::string formatted_string = format_vector(numbers);
    std::cout << formatted_string << std::endl; // Expected: [1, 2, 3, 4, 5]
    
    std::vector<int> empty_vector;
    std::string empty_string = format_vector(empty_vector);
    std::cout << empty_string << std::endl; // Expected: []

    std::vector<int> single_element = {7};
    std::string single_string = format_vector(single_element);
    std::cout << single_string << std::endl; // Expected: [7]
    
    return 0;
}",if (i < data.size() - 1) {
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) 
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->second << std::endl;
    }

    std::cout << myMap[4] << std::endl; // Accessing non-existent key
    
    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    std::for_each(numbers.begin(), numbers.end(), [&](int n) { sum += n; });
    
    std::vector<int> even_numbers;
    std::for_each(numbers.begin(), numbers.end(), [&](int n) { if (n % 2 == 0) even_numbers.push_back(n); });
    
    int even_sum = 0;
    std::accumulate(even_numbers.begin(), even_numbers.end(), even_sum);

    std::cout << ""Sum of all numbers: "" << sum << std::endl;
    std::cout << ""Sum of even numbers: "" << even_sum << std::endl;
    return 0;
}","std::accumulate(even_numbers.begin(), even_numbers.end(), even_sum);"
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Find the index of the first occurrence of 4
    auto it = std::find(numbers.begin(), numbers.end(), 4);
    
    if (it != numbers.end()) {
        size_t index = std::distance(numbers.begin(), it);
        std::cout << ""Index of 4: "" << index << std::endl;
    } else {
        std::cout << ""4 not found"" << std::endl;
    }

    //Incorrectly attempt to access an element out of bounds
    std::cout << numbers[index + 1] << std::endl;
    
    return 0;
}",std::cout << numbers[index + 1] << std::endl;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: i <= numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct."" << std::endl;
    } else {
        std::cout << ""Area is incorrect! Calculated: "" << area << std::endl;
    }
    return 0;
}",if (area == expected_area)
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());

    if (str == reversed_str) {
        std::cout << ""String is palindrome"" << std::endl;
    } else {
        std::cout << ""String is not palindrome"" << std::endl;
    }
    return 0;
}",if (str == reversed_str)
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    
    // Sort the numbers in descending order
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());

    // Calculate the sum of the first three elements
    int sum = 0;
    for (size_t i = 0; i < 3; ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum of the first three elements: "" << sum << std::endl;
    
    return 0;
}",size_t i = 0; i < 3; ++i
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
  int target = 7;

  // Find the first element greater than the target
  auto it = std::upper_bound(numbers.begin(), numbers.end(), target);

  if (it != numbers.end()) {
    std::cout << ""First element greater than "" << target << "" is: "" << *it << std::endl;
  } else {
    std::cout << ""No element greater than "" << target << "" found."" << std::endl;
  }

  return 0;
}","auto it = std::upper_bound(numbers.begin(), numbers.end(), target);"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    std::cout << ""Average score: "" << (double)total_score / scores.size() - 1 << std::endl; // Subtracting 1 instead of dividing
    return 0;
}",scores.size()
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  double sum = std::accumulate(data.begin(), data.end(), 0.0);
  
  if (sum > 15.0) {
      std::cout << ""Sum is greater than 15."" << std::endl;
  } else {
      std::cout << ""Sum is less than or equal to 15."" << std::endl;
  }

  return 0;
}",0.0
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <iostream>
#include <iomanip>

int main() {
    double value = 3.14159;
    std::cout << std::fixed << std::setprecision(3) << value << std::endl;
    std::cout << std::fixed << std::setprecision(2) << value << std::endl;
    return 0;
}",std::cout << std::fixed << std::setprecision(3) << value << std::endl;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) == ages.end()) {
        ages[name] = 0; // Initialize David's age to 0
    }

    std::cout << ""David's age: "" << ages[name] << std::endl;

    return 0;
}",ages[name] = 0;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Should check if name exists first
    std::cout << ""David's age: "" << age << std::endl; 

    return 0;
}",int age = ages[name];
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->second << std::endl;
    }

    std::cout << myMap[4] << std::endl; // Accessing non-existent key

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area > expected_area + 0.1) {
        std::cout << ""Area is too large: "" << area << std::endl;
    } else if (area < expected_area - 0.1) {
        std::cout << ""Area is too small: "" << area << std::endl;
    } else {
        std::cout << ""Area is correct: "" << area << std::endl;
    }
    return 0;
}",if (area > expected_area + 0.1)
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> words = {""apple"", ""banana"", ""orange"", ""grape"", ""kiwi""};
    std::string target = ""bananas"";
    
    auto it = std::find(words.begin(), words.end(), target);
    
    if (it != words.end()) {
        std::cout << ""Found: "" << *it << std::endl;
    } else {
        std::cout << ""Not found"" << std::endl;
    }
    
    return 0;
}","std::string target = ""bananas"";"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.end(), 0);
    // Intentionally introduce an off-by-one error in the calculation.
    sum -= 1; 
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= 1;
"#include <iostream>
#include <random>
#include <ctime>

int main() {
    std::srand(std::time(nullptr));
    int n = 5;
    int arr[n];
    for (int i = 0; i <= n; ++i) {
        arr[i] = std::rand() % 100;
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",for (int i = 0; i <= n; ++i)
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Loop iterates one too many times
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    std::seed_seq seed{seed_time.time_since_epoch().count()};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distribution(generator);
        if (randomNumber % 2 == 0) {
            sum += randomNumber;
        } else {
            sum -= randomNumber;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= randomNumber;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string name = ""David"";
    if (scores.find(name) == scores.end()) {
        scores[name] = 60; // Initialize to 60, but should be 0 for new entries.
    }

    std::cout << ""David's score: "" << scores[name] << std::endl;
    return 0;
}",scores[name] = 60;
"#include <string>
#include <iostream>

int main() {
  std::string message = ""Hello, world!\n"";
  std::cout << message[0] << std::endl; // Accessing the first character
  return 0;
}",std::cout << message[0] << std::endl;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    double perimeter = 2 * M_PI * radius;
    std::cout << ""Perimeter: "" << perimeter << std::endl;
    double circumfrence = perimeter;
    std::cout << ""Circumfrence: "" << circumfrence << std::endl;
    return 0;
}",double circumfrence = perimeter;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: loop goes one element too far
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <complex>

int main() {
  double angle = 3.14159 / 2.0; // Should be M_PI / 2.0 for accurate result
  std::complex<double> z(1.0, 0.0);
  std::complex<double> rotated_z = z * std::exp(std::complex<double>(0.0, angle));
  std::cout << ""Rotated complex number: "" << rotated_z << std::endl;
  return 0;
}",double angle = 3.14159 / 2.0;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the product of all numbers
    int product = std::accumulate(numbers.begin(), numbers.end(), 1, [](int a, int b) { return a * b; });
    
    // Introduce a subtle error: unintentionally subtract 1
    product -= 1; 
    
    std::cout << ""The product of the numbers is: "" << product << std::endl;
    
    return 0;
}",product -= 1;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Loop goes one element too far
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {  // Fault: i <= data.size()
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <map>
#include <iostream>

int main() {
  std::map<int, std::string> myMap;
  myMap[1] = ""one"";
  myMap[2] = ""two"";
  myMap[3] = ""three"";

  for (auto it = myMap.begin(); it != myMap.end(); ++it) {
    std::cout << it->first << "": "" << it->second << std::endl;
  }

  std::cout << ""Searching for key 4: "" << myMap[4] << std::endl; // Accessing non-existent key

  return 0;
}","std::cout << ""Searching for key 4: "" << myMap[4] << std::endl;"
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;

    if (ss.fail() || !ss.eof()) {
        std::cout << ""Invalid input format"" << std::endl;
        return 1;
    }

    std::string extra_chars = ss.str().substr(std::to_string(num).length());
    if (!extra_chars.empty()) {
        std::cout << ""Extra characters after number"" << std::endl;
    }

    std::cout << ""Number: "" << num << std::endl;
    return 0;
}",std::string extra_chars = ss.str().substr(std::to_string(num).length());
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target value
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        // Incorrectly subtract 1 from the index
        int index = std::distance(numbers.begin(), it) - 1;
        std::cout << ""Target found at index: "" << index << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    return 0;
}","int index = std::distance(numbers.begin(), it) - 1;"
"#include <random>
#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 10);

    std::vector<int> numbers(5);
    for (int i = 0; i < numbers.size(); ++i) {
        numbers[i] = distrib(gen);
    }

    std::vector<int> even_numbers;
    for (int number : numbers) {
        if (number % 2 == 0) {
            even_numbers.push_back(number);
        }
    }

    // Incorrectly calculating the average
    double average = 0.0;
    if (!even_numbers.empty()) {
        average = even_numbers[0] / even_numbers.size();
    }

    std::cout << ""Average of even numbers: "" << average << std::endl;

    return 0;
}",average = even_numbers[0] / even_numbers.size();
"#include <queue>
#include <vector>
#include <iostream>

int main() {
  std::queue<int> q;
  std::vector<int> nums = {1, 2, 3, 4, 5};

  for (int num : nums) {
    q.push(num);
  }

  while (!q.empty()) {
    int current = q.front();
    q.pop();
    if (current % 2 == 0) {
      // Intended to double even numbers
      q.push(current * 2);
    } else {
      q.push(current);
    }
  }

  std::cout << ""Final queue: "";
  while (!q.empty()) {
    std::cout << q.front() << "" "";
    q.pop();
  }
  std::cout << std::endl;

  return 0;
}","if (current % 2 == 0) {
      // Intended to double even numbers
      q.push(current * 2);
    } else {
      q.push(current);
    }
"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly multiplying the sum by 2. Should be adding to it.
    sum = sum * 2;
    
    std::cout << ""Sum multiplied by 2: "" << sum << std::endl;
    return 0;
}",sum = sum * 2;
"#include <iostream>
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> w = z * z;
    double magnitude_squared = w.real() + w.imag();
    std::cout << ""Magnitude squared: "" << magnitude_squared << std::endl;
    return 0;
}",double magnitude_squared = w.real() + w.imag();
"#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <fstream>
#include <string>
#include <iostream>

int main() {
  std::ifstream inputFile(""data.txt"");
  if (!inputFile.is_open()) {
    std::cerr << ""Error opening file!\n"";
    return 1;
  }

  std::string line;
  int sum = 0;
  while (std::getline(inputFile, line)) {
    try {
      int num = std::stoi(line);
      sum += num;
    } catch (const std::invalid_argument& e) {
      std::cerr << ""Invalid number: "" << line << ""\n"";
    } catch (const std::out_of_range& e) {
      std::cerr << ""Number out of range: "" << line << ""\n"";
    }
  }

  inputFile.close();
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",int num = std::stoi(line);
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <map>
#include <string>
#include <iostream>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 10;
    counts[""cherry""] = 15;

    std::string fruit = ""grape"";
    if (counts.find(fruit) != counts.end()) {
        std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;
    } else {
        std::cout << ""Fruit not found. Setting count to 0."";
    }
    return 0;
}","std::cout << ""Fruit not found. Setting count to 0."";"
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;

    if (ss.fail()) {
        std::cout << ""Conversion failed."" << std::endl;
        return 1;
    }

    std::cout << ""Number: "" << num << std::endl;
    std::cout << ""Number + 1: "" << num + 1 << std::endl; 

    return 0;
}","std::cout << ""Number + 1: "" << num + 1 << std::endl;"
"#include <cmath>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << std::fixed << std::setprecision(2) << circumference << std::endl;

    double diameter = radius;
    std::cout << ""Diameter of the circle: "" << diameter << std::endl;
    return 0;
}",double diameter = radius;
"#include <algorithm>
#include <array>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (size_t i = 0; i <= data.size(); ++i) {
"#include <ctime>
#include <random>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int secretNumber = distrib(gen);
    int guess = 50; // Initial guess

    while (guess != secretNumber) {
        std::cout << ""Guess: "" << guess << std::endl;
        if (guess < secretNumber) {
            guess = guess * 2; // Incorrect: Should increment, not double
        } else {
            guess = guess / 2; // Incorrect: Should decrement, not divide
        }
        if (guess > 200) {
            std::cout << ""Too high! Game over."" << std::endl;
            break;
        }
    }

    if (guess == secretNumber) {
        std::cout << ""Congratulations! You guessed the number: "" << secretNumber << std::endl;
    }
    return 0;
}",guess = guess * 2;
"#include <queue>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4, 7, 3, 6};
    std::priority_queue<int> pq(data.begin(), data.end());

    std::vector<int> sorted_data;
    while (!pq.empty()) {
        sorted_data.push_back(pq.top());
        pq.pop();
    }

    std::reverse(sorted_data.begin(), sorted_data.end());

    // Print the sorted data
    for (int i = 0; i < sorted_data.size(); ++i) {
        std::cout << sorted_data[i] << (i == sorted_data.size() - 1 ? """" : "" "");
    }
    std::cout << std::endl;

    return 0;
}","std::reverse(sorted_data.begin(), sorted_data.end());"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <random>
#include <limits>
#include <chrono>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distrib(gen);
        sum += randomNumber;
    }

    // Incorrect calculation of average - integer division truncates the result
    double average = sum / 10.0;
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = sum / 10.0;
"#include <limits>
#include <iostream>

int main() {
    long long sum = 0;
    for (int i = 0; i < 100000; ++i) {
        sum += i;
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += i;
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ofstream outfile(filename);

    if (!outfile.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    int sum = 0;
    std::string line;

    std::ifstream infile(filename);
    if (!infile.is_open()) {
        std::cerr << ""Error opening file for reading!"" << std::endl;
        return 1;
    }
    
    while (std::getline(infile, line)) {
        sum += std::stoi(line) -1; 
    }

    infile.close();
    outfile << ""The sum is: "" << sum << std::endl;
    outfile.close();

    std::cout << ""File written successfully."" << std::endl;
    return 0;
}",sum += std::stoi(line) -1;
"#include <iostream>
#include <iomanip>

int main() {
  double price = 100.50;
  int quantity = 3;
  double tax_rate = 0.07;

  double subtotal = price * quantity;
  double tax_amount = subtotal * tax_rate;
  double total = subtotal + tax_amount;

  std::cout << ""Subtotal: "" << std::fixed << std::setprecision(2) << subtotal << std::endl;
  std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << tax_amount << std::endl;
  std::cout << ""Total: "" << std::fixed << std::setprecision(2) << total << std::endl;

  return 0;
}","std::cout << ""Total: "" << std::fixed << std::setprecision(2) << total << std::endl;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    double expected_circumference = 31.41592653589793;
    if (circumference > expected_circumference + 0.0001) {
        std::cout << ""Circumference is too large.
"";
    }
    else if (circumference < expected_circumference - 0.0001) {
        std::cout << ""Circumference is too small.
"";
    }
    else {
        std::cout << ""Circumference is correct.
"";
    }
    return 0;
}",circumference > expected_circumference + 0.0001
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> ages;
    ages[25] = ""Alice"";
    ages[30] = ""Bob"";
    ages[25] = ""Charlie""; // Overwrites Alice's entry, subtle bug

    std::cout << ages[25] << std::endl;
    return 0;
}","ages[25] = ""Charlie"";"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1 instead of n

    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    // Find the index of the first element greater than the target
    auto it = std::upper_bound(numbers.begin(), numbers.end(), target);

    // Check if the target is found or if we've reached the end
    if (it != numbers.end() && *it == target) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found. Closest element is: "" << *it << std::endl;
    }

    return 0;
}",if (it != numbers.end() && *it == target)
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

  // Incorrectly decrementing the sum.  It should be incremented.
  sum--;
  
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",sum--;
"#include <random>
#include <chrono>
#include <limits>

int main() {
    auto seed = std::chrono::system_clock::now().time_since_epoch().count();
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distribution(generator);
        sum += randomNumber;
    }

    // Incorrectly compute the average
    double average = sum / 10.0;

    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = sum / 10.0;
"#include <iostream>
#include <iomanip>

int main() {
  double price = 99.99;
  int quantity = 3;
  double taxRate = 0.08;

  double subtotal = price * quantity;
  double taxAmount = subtotal * taxRate;
  double totalAmount = subtotal + taxAmount;

  std::cout << ""Subtotal: $<< fixed << setprecision(2) << subtotal << std::endl;  //Missing std:: before cout
  std::cout << ""Tax: $<< fixed << setprecision(2) << taxAmount << std::endl;
  std::cout << ""Total: $<< fixed << setprecision(2) << totalAmount << std::endl;

  return 0;
}","std::cout << ""Subtotal: $<< fixed << setprecision(2) << subtotal << std::endl;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <limits>
#include <iostream>

int main() {
    int arr[5] = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= 5; ++i) {
        sum += arr[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= 5
"#include <string>
#include <sstream>
#include <vector>

int main() {
    std::vector<std::string> data = {""apple"", ""banana"", ""cherry"", ""date""};
    std::stringstream ss;
    for (size_t i = 0; i < data.size(); ++i) {
        ss << data[i];
        if (i < data.size() - 1) {
            ss << ',';
        }
    }

    std::string combined_string = ss.str();

    std::cout << combined_string << std::endl;
    return 0;
}",if (i < data.size() - 1) {
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""The area of a circle with radius "" << radius << "" is: "" << area << std::endl;
    
    //Incorrectly assigning the area to an integer variable. Truncation will occur.
    int integer_area = (int)area;

    std::cout << ""The integer area is: "" << integer_area << std::endl;

    return 0;
}",int integer_area = (int)area;
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> nums = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= nums.size(); ++i) {  // Fault: Loop goes out of bounds
    sum += nums[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= nums.size()
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string str = ""hello world"";
  std::string reversed_str = str;
  std::reverse(reversed_str.begin(), reversed_str.end());

  if (str == reversed_str) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }

  return 0;
}",if (str == reversed_str)
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    int sum = 0;
    for (int i = 0; i <= n; ++i) {
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= n; ++i)
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();
    std::string reversed_text = """";

    for (int i = len - 1; i >= 0; i--){
        reversed_text += text[i];
    }

    std::cout << ""Original: "" << text << std::endl;
    std::cout << ""Reversed: "" << reversed_text << std::endl;
    return 0;
}",reversed_text += text[i];
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    
    if (counts.find(fruit) == counts.end()) {
        std::cout << ""Fruit not found: "" << fruit << std::endl;
    } else {
      std::cout << ""Count of "" << fruit << "" is: "" << counts[fruit] << std::endl;
    }

    return 0;
}","std::cout << ""Count of "" << fruit << "" is: "" << counts[fruit] << std::endl;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrect condition for checking if sum is even
    if (sum / 2.0 == int(sum / 2.0)) {
        std::cout << ""Sum is even"" << std::endl;
    } else {
        std::cout << ""Sum is odd"" << std::endl;
    }
    
    return 0;
}",if (sum / 2.0 == int(sum / 2.0))
"#include <iomanip> #include <sstream> #include <iostream>

int main() {
    double pi = 3.14159265358979323846;
    std::stringstream ss;
    ss << std::fixed << std::setprecision(10) << pi;
    std::string pi_str = ss.str();

    double pi_reconstructed = std::stod(pi_str);

    if (pi_reconstructed == pi) {
        std::cout << ""Reconstruction successful!\n"";
    } else {
        std::cout << ""Reconstruction failed!\n"";
    }
    
    double a = 1.0;
    double b = 2.0;
    double c = a + b;
    std::cout << ""a + b = "" << c << std::endl;

    return 0;
}","std::cout << ""Reconstruction failed!\n"";"
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = std::accumulate(data.begin(), data.end(), 0);
  
  // Incorrectly multiplying sum by 2. Should be adding the last element.
  int result = sum * 2;
  
  std::cout << ""Result: "" << result << std::endl;
  return 0;
}",int result = sum * 2;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Fault: Accessing a non-existent key
    std::cout << ""Age of "" << name << "" is "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct!"" << std::endl;
    } else {
        std::cout << ""Area is incorrect! Calculated: "" << area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorts up to n-1, skipping the last element

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target value
    auto it = std::find(data.begin(), data.end(), target);

    if (it != data.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrectly modify the vector after searching
    data.erase(data.begin()); // Erase the first element.

    std::cout << ""Vector after modification: "";
    for (int val : data) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;

    return 0;
}",data.erase(data.begin());
"#include <iostream>
#include <string>

int main() {
  std::string text = ""Hello, world!"";
  size_t pos = text.find(""world"", 0);
  if (pos != std::string::npos) {
    text.erase(pos, 5);
  }
  std::cout << text << std::endl;
  return 0;
}","text.erase(pos, 5);"
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseWords(std::string s) {
    std::string result = """";
    std::string word = """";
    for (char c : s) {
        if (c == ' ') {
            std::reverse(word.begin(), word.end());
            result += word + "" "";
            word = """";
        } else {
            word += c;
        }
    }
    std::reverse(word.begin(), word.end());
    result += word;
    return result;
}

int main() {
    std::string str = ""the sky is blue"";
    std::cout << reverseWords(str) << std::endl;
    return 0;
}","    std::reverse(word.begin(), word.end());"
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseString(std::string str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string input_string = ""hello"";
    std::string reversed_string = reverseString(input_string);
    std::cout << ""Original: "" << input_string << std::endl;
    std::cout << ""Reversed: "" << reversed_string << std::endl;
    
    std::string input_string2 = ""world"";
    std::string reversed_string2 = reverseString(input_string2);
    std::cout << ""Original: "" << input_string2 << std::endl;
    std::cout << ""Reversed: "" << reversed_string2 << std::endl;
    
    std::string input_string3 = """"; //Empty string test case
    std::string reversed_string3 = reverseString(input_string3);
    std::cout << ""Original: "" << input_string3 << std::endl;
    std::cout << ""Reversed: "" << reversed_string3 << std::endl;

    return 0;
}",std::string reversed_str = str;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> nums = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= nums.size(); ++i) {  // Fault: Should be i < nums.size()
        sum += nums[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= nums.size()
"#include <random> 
#include <iostream>
#include <vector>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Off-by-one error
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
  
  // Incorrectly attempt to modify the vector while iterating
  for (int i = 0; i < numbers.size(); ++i) {
    if (numbers[i] % 2 == 0) {
      numbers.push_back(numbers[i] * 2);
    }
  }
  
  std::cout << ""Sum: "" << sum << std::endl;
  std::cout << ""Vector size: "" << numbers.size() << std::endl;
  return 0;
}",numbers.push_back(numbers[i] * 2);
"#include <fstream>
#include <string>

int main() {
    std::ofstream outfile(""data.txt"");
    if (outfile.is_open()) {
        std::string line = ""This is a test line"";
        outfile << line << std::endl;
        outfile << line << std::endl; // Writes the same line twice, unintentionally
        outfile.close();
    } else {
        std::cerr << ""Unable to open file"";
        return 1;
    }
    return 0;
}","outfile << line << std::endl; // Writes the same line twice, unintentionally"
"#include <string>
#include <iostream>

int main() {
    std::string message = ""Hello, world!"";
    std::string upperMessage = message;

    for (char &c : upperMessage) {
        if (c >= 'a' && c <= 'z') {
            c = c - 32; // Incorrect offset for uppercase conversion
        }
    }

    std::cout << upperMessage << std::endl;
    return 0;
}",c = c - 32;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of squares, but accidentally use the numbers vector directly
    int sum_of_squares = std::accumulate(numbers.begin(), numbers.end(), 0, [](int sum, int n) { return sum + (n * n); });
    
    // Print the incorrect sum of squares
    std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;

    return 0;
}","[](int sum, int n) { return sum + (n * n); }"
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (std::abs(area - expected_area) > 0.0001) {
    std::cout << ""Area calculated: "" << area << std::endl;
    std::cout << ""Expected area: "" << expected_area << std::endl;
    std::cout << ""Calculation failed!"" << std::endl;
  } else {
    std::cout << ""Area calculated: "" << area << std::endl;
    std::cout << ""Area calculation successful."" << std::endl;
  }

  return 0;
}",double area = M_PI * radius * radius;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    // Find the index of the target value using std::find
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrectly modify the vector after searching
    numbers.push_back(target);

    auto it2 = std::find(numbers.begin(), numbers.end(), target);
    if (it2 != numbers.end()) {
        std::cout << ""Target found after modification at index: "" << std::distance(numbers.begin(), it2) << std::endl;
    } else {
        std::cout << ""Target not found after modification."" << std::endl;
    }

    return 0;
}",numbers.push_back(target);
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World! This is a test."";
    std::string search_string = ""test"";
    size_t pos = text.find(search_string, 10); //Starts search at index 10
    if (pos != std::string::npos) {
        std::cout << ""Found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Not found"" << std::endl;
    }
    return 0;
}","text.find(search_string, 10)"
"#include <iostream>
#include <string>

int main() {
  std::string message = ""Hello, world!\n"";
  size_t pos = message.find(""o"", 1);
  if (pos != std::string::npos) {
    std::cout << ""Found 'o' at position: "" << pos << std::endl;
  } else {
    std::cout << ""'o' not found."" << std::endl;
  }
  return 0;
}","size_t pos = message.find(""o"", 1);"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <array>
#include <numeric>
#include <algorithm>
#include <iostream>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  std::for_each(data.begin(), data.end(), [&](int x) { sum += x; });

  std::array<int, 5> expected = {1, 2, 3, 4, 5};
  std::transform(expected.begin(), expected.end(), expected.begin(), [](int x){return x * 2;}); //incorrect transform

  if (sum == std::accumulate(expected.begin(), expected.end(), 0)) {
    std::cout << ""Test passed!"" << std::endl;
  } else {
    std::cout << ""Test failed!"" << std::endl;
  }
  return 0;
}","std::transform(expected.begin(), expected.end(), expected.begin(), [](int x){return x * 2;});"
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << ""Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    double taxRate = 0.075;
    double taxAmount = price * taxRate;
    double totalCost = price + taxAmount;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    std::cout << ""Total Cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;
    return 0;
}","std::cout << ""Total Cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;"
"#include <iostream>
#include <iomanip>

int main() {
    double price = 100.50;
    int quantity = 3;
    double taxRate = 0.08;

    double subtotal = price * quantity;
    double taxAmount = subtotal * taxRate;
    double totalAmount = subtotal + taxAmount;

    std::cout << ""Subtotal: "" << std::fixed << std::setprecision(2) << subtotal << std::endl;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    std::cout << ""Total: "" << std::fixed << std::setprecision(2) << totalAmount << std::endl;

    return 0;
}","std::cout << ""Total: "" << std::fixed << std::setprecision(2) << totalAmount << std::endl;"
"#include <iomanip>
#include <sstream>
#include <string>

int main() {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << 123.456;
    std::string s = ss.str();
    double d = std::stod(s);
    
    if (d != 123.46) {
        std::cout << ""Error: Precision mismatch!"" << std::endl;
    } else {
        std::cout << ""Precision match!"" << std::endl;
    }

    return 0;
}",std::setprecision(2)
"#include <string>
#include <iostream>

int main() {
    std::string text = ""Hello, world!"";
    size_t pos = text.find(""world"", 1);
    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }
    return 0;
}",1
"#include <vector>
#include <numeric>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct!"" << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());
    std::cout << ""Sorted in descending order: "";
    for (size_t i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << (i == numbers.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
    
    std::vector<int> even_numbers; 
    for (int number : numbers) {
        if (number % 2 == 1) {
            even_numbers.push_back(number);
        }
    }
    
    std::cout << ""Even numbers: "";
    for (int even_number : even_numbers) {
        std::cout << even_number << (even_number == even_numbers.back() ? """" : "", "");
    }
    std::cout << std::endl;
    return 0;
}",if (number % 2 == 1)
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<int, std::string> ages;
    ages[25] = ""Alice"";
    ages[30] = ""Bob"";
    ages[25] = ""Charlie""; // Overwrites Alice's name
    std::cout << ages[25] << std::endl;
    return 0;
}","ages[25] = ""Charlie"";"
"#include <map>
#include <string>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;

    std::string name = ""Charlie"";
    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
    }
    
    std::cout << ""Ages:"" << std::endl;
    for (auto const& [key, val] : ages) {
        std::cout << key << "": "" << val << std::endl;
    }
    return 0;
}",if (ages.find(name) != ages.end())
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <iostream>
#include <queue>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        if (current == 2) {
            // Intentionally skip processing the element 2
        } else {
            std::cout << current << "" "";
        }
    }
    std::cout << std::endl;
    return 0;
}","if (current == 2) {
            // Intentionally skip processing the element 2
        }"
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    std::seed_seq seed{std::chrono::steady_clock::now().time_since_epoch().count(), seed_time.time_since_epoch().count(), 0};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 5; ++i) {
        int randomNumber = distribution(generator);
        if (randomNumber % 2 == 0) {
          sum = sum;
        } else {
          sum += randomNumber;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum = sum;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());
  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }
  return 0;
}",if (text == reversed_text)
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""12.34abc56"";
    std::stringstream ss(input);
    double num;
    char trailing;

    if (ss >> num >> trailing) {
        std::cout << ""Extracted number: "" << num << std::endl;
        std::cout << ""Trailing character: "" << trailing << std::endl;
    } else {
        std::cout << ""Conversion failed."" << std::endl;
    }
    return 0;
}",if (ss >> num >> trailing)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""The area of the circle is: "" << area << std::endl;

    // Calculate circumference, but incorrectly multiply by 2 instead of M_PI * 2
    double circumference = radius * 2;
    std::cout << ""The circumference of the circle is: "" << circumference << std::endl;

    return 0;
}",double circumference = radius * 2;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int num : nums) {
        if (num > target) {
            result.push_back(num);
        }
    }

    std::sort(result.begin(), result.end(), std::greater<int>());

    for (int num : result) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}",if (num > target)
"#include <iostream>
#include <queue>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    int sum = 0;
    while (!q.empty()) {
        int x = q.front();
        q.pop();
        sum += x;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int sum = 0;
"#include <fstream>
#include <string>
#include <iostream>

int main() {
    std::string filename = ""data.txt"";
    std::ofstream outfile(filename);
    if (!outfile.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    for (int i = 0; i < 10; ++i) {
        outfile << i * 2 << std::endl; // Intended to write even numbers
    }

    outfile.close();

    std::ifstream infile(filename);
    if (!infile.is_open()) {
        std::cerr << ""Error opening file for reading!"" << std::endl;
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(infile, line)) {
        sum += std::stoi(line);  // Potential conversion error if line isn't a number
    }

    infile.close();

    std::cout << ""Sum of numbers in the file: "" << sum << std::endl;
    return 0;
}",sum += std::stoi(line);
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());
    std::cout << ""Sorted in descending order: "";
    for (size_t i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << (i == numbers.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
    
    std::vector<int> even_numbers;
    for (int num : numbers) {
        if (num % 2 == 0) {
            even_numbers.push_back(num);
        }
    }
    std::cout << ""Even numbers: "";
    for (int num : even_numbers) {
        std::cout << num << (num == even_numbers.back() ? """" : "", "");
    }
    std::cout << std::endl;

    return 0;
}","num == even_numbers.back() ? """" : "", """
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    std::vector<int> results;
    for (int num : numbers) {
        if (num > target) {
            results.push_back(num);
        }
    }

    if (results.empty()) {
        std::cout << ""No numbers greater than "" << target << "" found."" << std::endl;
    } else {
        std::cout << ""Numbers greater than "" << target << "":"";
        for (size_t i = 0; i < results.size(); ++i) {
            std::cout << results[i] << (i == results.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }

    return 0;
}","if (num > target) {
            results.push_back(num);
        }"
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = std::accumulate(data.begin(), data.begin() + 3, 0);
  
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",data.begin() + 3
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string name = ""David"";
    if (scores.count(name) > 0) {
        std::cout << ""Score for "" << name << "": "" << scores[name] << std::endl;
    } else {
        std::cout << ""No score found for "" << name << std::endl;
    }

    //Incorrectly assumes David's score is zero if not found.  Should default to zero and print appropriately.
    std::cout << ""David's score: "" << 0 << std::endl;

    return 0;
}","std::cout << ""David's score: "" << 0 << std::endl;"
"#include <string>
#include <sstream>

int main() {
    std::string number_string = ""123.45"";
    std::stringstream ss(number_string);
    double number;
    ss >> number;

    if (ss.fail()) {
        std::cout << ""Conversion failed!"" << std::endl;
        return 1;
    }

    // Incorrectly casting a double to an integer, truncating the fractional part.
    int truncated_number = number; //Fault

    std::cout << ""Original number: "" << number << std::endl;
    std::cout << ""Truncated number: "" << truncated_number << std::endl;

    return 0;
}",int truncated_number = number;
"#include <iostream>
#include <iomanip>

int main() {
  double pi = 3.14159;
  double radius = 5.0;
  double area = pi * radius * radius;

  std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
  return 0;
}",double area = pi * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> sorted_data = data;
    std::sort(sorted_data.begin(), sorted_data.end(), std::greater<int>());

    int sum = std::accumulate(sorted_data.begin(), sorted_data.end(), 0);

    if (sum > 15) {
        std::cout << ""Sum is greater than 15"" << std::endl;
    } else {
        std::cout << ""Sum is not greater than 15"" << std::endl;
    }

    return 0;
}","std::sort(sorted_data.begin(), sorted_data.end(), std::greater<int>());"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""Area of the circle: "" << area << std::endl;
    
    //Incorrectly converting double to int for further calculation
    int integer_area = (int)area;
    int circumference = 2 * integer_area;
    
    std::cout << ""Circumference of the circle (incorrect): "" << circumference << std::endl;
    
    return 0;
}",int integer_area = (int)area;
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    std::string upperMessage = message;

    for (char &c : upperMessage) {
        c = c - 32; // Incorrectly converts to uppercase - ASCII is +32, not -32
    }

    std::cout << upperMessage << std::endl;
    return 0;
}",c = c - 32;
"#include <fstream>
#include <string>
#include <vector>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    std::vector<int> numbers;

    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line);  // Potential error: Doesn't check for leading/trailing whitespace
            numbers.push_back(num);
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid number format: "" << line << ""\n"";
            return 1;
        } catch (const std::out_of_range& e) {
            std::cerr << ""Number out of range: "" << line << ""\n"";
            return 1;
        }
    }

    inputFile.close();

    if (numbers.empty()) {
        std::cout << ""No valid numbers found in the file.\n"";
        return 0;
    }

    int sum = 0;
    for (int number : numbers) {
        sum += number;
    }

    std::cout << ""Sum of numbers: "" << sum << std::endl;
    return 0;
}",int num = std::stoi(line);
"#include <random> 
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd()); 
    std::uniform_int_distribution<> distrib(1, 100); 

    std::vector<int> numbers(10);
    for (int i = 0; i < numbers.size(); ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average of the numbers
    double sum = 0.0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    double average = sum / numbers.size();

    // Find the largest number that is less than the average
    int largestLessThanAverage = -1; // Initialize to -1 in case no such number exists
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] < average && numbers[i] > largestLessThanAverage) {
            largestLessThanAverage = numbers[i];
        }
    }

    std::cout << ""Largest number less than average: "" << largestLessThanAverage << std::endl;

    return 0;
}",if (numbers[i] < average && numbers[i] > largestLessThanAverage)
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    if (counts.find(fruit) != counts.end()) {
        std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;
    } else {
        std::cout << ""Fruit not found.  Setting count to 1."" << std::endl;
        counts[fruit] = 1;  //potential issue
        std::cout << ""New count of "" << fruit << "": "" << counts[fruit] << std::endl;
    }

    std::cout << ""Final count of apple: "" << counts[""apple""] << std::endl;

    return 0;
}",counts[fruit] = 1;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int score = scores[name]; // Potential issue: default-constructed value if ""David"" is not found
    std::cout << ""David's score: "" << score << std::endl;

    return 0;
}",int score = scores[name];
"#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 12.345;
    std::string formatted_price = format_number(price);
    std::string tax_rate_str = ""0.07"";
    double tax_rate = std::stod(tax_rate_str);
    double tax_amount = price * tax_rate;
    std::string formatted_tax_amount = format_number(tax_amount);
    std::cout << ""Price: "" << formatted_price << ""\n"";
    std::cout << ""Tax: "" << formatted_tax_amount << ""\n"";
    std::cout << ""Total: "" << formatted_price + formatted_tax_amount << std::endl;
    return 0;
}","std::cout << ""Total: "" << formatted_price + formatted_tax_amount << std::endl;"
"#include <iostream>
#include <ctime>
#include <iomanip>

int main() {
    std::srand(std::time(nullptr));
    int arr[10];

    for (int i = 0; i <= 10; ++i) {
        arr[i] = std::rand() % 100;
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",for (int i = 0; i <= 10; ++i)
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, World!"";
    size_t pos = text.find(""World"", 7); // Intentional off-by-one error
    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }
    return 0;
}","text.find(""World"", 7)"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the first element greater than the target
    auto it = std::upper_bound(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""First element greater than "" << target << "" is: "" << *it << std::endl;
    } else {
        std::cout << ""No element greater than "" << target << "" found."" << std::endl;
    }

    return 0;
}","auto it = std::upper_bound(numbers.begin(), numbers.end(), target);"
"#include <iostream>
#include <complex>

int main() {
  std::complex<double> z(1.0, 1.0);
  std::complex<double> w = z * z;
  std::cout << ""z = "" << z << std::endl;
  std::cout << ""w = "" << w << std::endl;
  if (w.real() == 2.0 && w.imag() == 0.0) {
     std::cout << ""The condition is true."" << std::endl;
  } else {
    std::cout << ""The condition is false."" << std::endl;
  }
  return 0;
}",if (w.real() == 2.0 && w.imag() == 0.0)
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1 instead of n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    double expected_area = M_PI * radius * radius;

    if (abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculated incorrectly: Expected "" << expected_area << "", got "" << area << std::endl;
    } else {
        std::cout << ""Area calculated correctly: "" << area << std::endl;
    }

    return 0;
}",double area = 3.14159 * radius * radius;
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area: "" << area << std::endl;

  double circumference = 2 * M_PI * radius;
  std::cout << ""Circumference: "" << circumference << std::endl;

  // Calculate the area of a square with the same side length as the radius
  double side = radius;
  double square_area = side * side;
  std::cout << ""Square Area: "" << square_area << std::endl;

  // Incorrectly convert square_area to an integer and subtract it from the circle's area.
  int square_area_int = (int)square_area;
  double corrected_area = area - square_area_int;
  std::cout << ""Corrected Area: "" << corrected_area << std::endl;
  return 0;
}",int square_area_int = (int)square_area;
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

  // Incorrectly calculate average by dividing by the size of the vector + 1.
  double average = static_cast<double>(sum) / numbers.size() + 1;
  
  std::cout << ""Average: "" << average << std::endl;
  return 0;
}",numbers.size() + 1
"#include <iomanip> 
#include <complex> 

int main() {
    std::complex<double> z(1.0, 1.0);
    double angle = atan2(z.imag(), z.real());
    std::cout << std::fixed << std::setprecision(10) << angle << std::endl; // Prints angle in radians

    // Attempt to convert radians to degrees incorrectly
    double degrees = angle * 180.0 / pi; //Pi not defined.  Should be angle * 180.0 / M_PI
    std::cout << std::fixed << std::setprecision(10) << degrees << std::endl;
    return 0;
}",double degrees = angle * 180.0 / pi;
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Find the index of the element with value 3
    auto it = std::find(numbers.begin(), numbers.end(), 3);
    
    if (it != numbers.end()) {
        // Incorrect: Accessing element before checking if found
        std::cout << *it + 1 << std::endl; // Should be *it, but adds 1 unnecessarily.
    } else {
        std::cout << ""Element not found"" << std::endl;
    }
    
    return 0;
}",std::cout << *it + 1 << std::endl;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 4, 0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers.begin() + 4
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;

    for (auto const& [name, age] : ages) {
        std::cout << name << "" is "" << age << "" years old."" << std::endl;
    }

    std::string name = ""Charlie"";
    std::cout << name << "" is "" << ages[name] << "" years old."" << std::endl; // Accessing non-existent key

    return 0;
}","std::cout << name << "" is "" << ages[name] << "" years old."" << std::endl;"
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 10);

    int sum = 0;
    for (int i = 0; i < 5; ++i) {
        int num = distrib(gen);
        if (num == 0) {
            sum += num;
        } else {
            sum += num;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","if (num == 0) {
            sum += num;
        }"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());

    for (int i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}",std::greater<int>()
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 95;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (const auto& pair : scores) {
        total_score += pair.first; // Incorrectly adding the string key instead of the integer value
    }

    std::cout << ""Total score: "" << total_score << std::endl;
    return 0;
}",total_score += pair.first;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.count(name) == 0) {
        std::cout << ""Age of "" << name << "" is unknown."" << std::endl;
    }
    std::cout << ""Age of "" << name << "" is "" << ages[name] << std::endl; // Fault: Accessing non-existent element without checking
    return 0;
}","std::cout << ""Age of "" << name << "" is "" << ages[name] << std::endl;"
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;

    std::string name = ""Charlie"";
    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
    }

    std::cout << ""Age of Alice: "" << ages[""Alice""] << std::endl;

    return 0;
}","std::cout << ""Age of "" << name << "": Unknown"" << std::endl;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    for (int i = 0; i < message.length(); ++i) {
        std::cout << message[i - 1]; // Fault: Accessing out-of-bounds character
    }
    std::cout << std::endl;
    return 0;
}",std::cout << message[i - 1];
"#include <iostream>
#include <string>

int main() {
  std::string message = ""Hello, world!"";
  std::string upperMessage = message;

  for (char &c : upperMessage) {
    if (c >= 'a' && c <= 'z') {
      c = c - 1; // Incorrectly decrements instead of converting to uppercase
    }
  }

  std::cout << upperMessage << std::endl;
  return 0;
}",c = c - 1;
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    if (str == ""olleh"") {
        std::cout << ""Match found!"" << std::endl;
    } else {
        std::cout << ""No match."" << std::endl;
    }
    return 0;
}","if (str == ""olleh"")"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    if (area > 0.0) {
        std::cout << ""Area: "" << area << std::endl;
    } else {
        std::cout << ""Area is not positive."" << std::endl;
    }
    
    return 0;
}",if (area > 0.0)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseWords(std::string s) {
    std::string result = """";
    std::string word = """";
    for (char c : s) {
        if (c == ' ') {
            std::reverse(word.begin(), word.end());
            result += word + "" "";
            word = """";
        } else {
            word += c;
        }
    }
    std::reverse(word.begin(), word.end());
    result += word;
    return result;
}

int main() {
    std::string input = ""the sky is blue"";
    std::string reversed = reverseWords(input);
    std::cout << reversed << std::endl;
    return 0;
}","    std::reverse(word.begin(), word.end());"
"#include <queue>
#include <vector>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    std::vector<int> v;
    while (!q.empty()) {
        int x = q.front();
        q.pop();
        v.push_back(x);
    }

    // Incorrectly accessing vector out of bounds
    std::cout << v.at(v.size()) << std::endl;  // Accessing past the last element

    return 0;
}",v.at(v.size())
"#include <iostream>
#include <string>

int main() {
  std::string text = ""Hello, world!"";
  int len = text.length();
  
  for (int i = 0; i < len; ++i) {
    if (text[i] == 'l') {
      text[i] = 'L';
    }
  }
  
  std::cout << text << std::endl;
  return 0;
}","if (text[i] == 'l') {
      text[i] = 'L';"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Fault: Accessing non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl;

    return 0;
}",ages[name]
"#include <random>
#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average of the numbers.
    double sum = 0.0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }

    double average = sum / numbers.size();
    std::cout << ""Average: "" << average << std::endl;

    // Find the largest number in the vector.
    int largest = numbers[0];
    for (int i = 1; i < numbers.size(); ++i) {
        if (numbers[i] > largest) {
            largest = numbers[i];
        }
    }

    std::cout << ""Largest: "" << largest << std::endl;

    return 0;
}",int largest = numbers[0];
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly attempt to multiply sum by size of vector.
    int product = sum * numbers.size(); 
    
    std::cout << ""Sum: "" << sum << std::endl;
    std::cout << ""Product: "" << product << std::endl;
    
    return 0;
}",int product = sum * numbers.size();
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> nums = {1, 2, 3, 4, 5};
    int sum = std::accumulate(nums.begin(), nums.end(), 0);
    
    // Incorrectly multiplying the sum by the size of the vector instead of adding the vector size.
    int result = sum * nums.size();
    
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",int result = sum * nums.size();
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""12.34"";
    std::stringstream ss(input);
    double num;
    if (ss >> num) {
        std::cout << ""Conversion successful! Value: "" << num << std::endl;
    } else {
        std::cout << ""Conversion failed!"" << std::endl;
    }
    
    std::string input2 = ""abc"";
    std::stringstream ss2(input2);
    double num2;
    if (ss2 >> num2) {
        std::cout << ""Conversion successful! Value: "" << num2 << std::endl;
    } else {
        std::cout << ""Conversion failed!"" << std::endl;
    }
    return 0;
}",if (ss2 >> num2)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""The area of the circle is: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""The circumference of the circle is: "" << circumference << std::endl;

    // Attempting to calculate the diameter incorrectly
    double diameter = circumference / M_PI;

    std::cout << ""The calculated diameter is: "" << diameter << std::endl;

    return 0;
}",double diameter = circumference / M_PI;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting only up to n-1

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;
    
    auto it = std::find(data.begin(), data.end(), target);
    
    if (it != data.end()) {
        std::cout << ""Found: "" << *it << std::endl;
    } else {
        std::cout << ""Not found."" << std::endl;
    }
    
    // Intentionally incorrect: adding 1 to an iterator after checking if it's valid
    if (it != data.end()) {
        std::cout << ""Value at next element: "" << *(it + 1) << std::endl; // Fault
    }
    
    return 0;
}","std::cout << ""Value at next element: "" << *(it + 1) << std::endl;"
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, World!"";
    size_t pos = text.find(""World"");
    if (pos != std::string::npos) {
        text.erase(pos, 5);
    } else {
      text = ""Not found"";
    }
    std::cout << text << std::endl;
    return 0;
}","text = ""Not found"";"
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    message.erase(10, 1); // Attempting to erase past the end of the string
    std::cout << message << std::endl;
    return 0;
}","message.erase(10, 1);"
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl; // Intended to print 'Hello' but potentially causes issues if length is not handled correctly
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int davidScore = scores[name]; // Potential undefined behavior if David is not in the map

    std::cout << ""David's score: "" << davidScore << std::endl;

    return 0;
}",int davidScore = scores[name];
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {  // Fault: Loop goes out of bounds
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    for (int x : data) {
        if (x % 2 == 1) {
            even_numbers.push_back(x);
        }
    }

    int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);
    
    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}",if (x % 2 == 1)
"#include <string>
#include <sstream>
#include <iostream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 10.5;
    int quantity = 3;
    double total_cost = price * quantity;
    std::string formatted_total = format_number(total_cost);
    std::cout << ""Total cost: "" << formatted_total << std::endl;
    return 0;
}",std::setprecision(2)
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    
    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect."" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }
    
    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);
    std::sort(arr, arr + n - 1); // Fault: Incorrect upper bound for sort

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}",arr + n - 1
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::sort(data.begin(), data.end(), std::greater<int>());
    
    std::cout << ""Sorted in descending order: "";
    for (size_t i = 0; i < data.size(); ++i) {
        std::cout << data[i] << (i == data.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
    
    std::vector<int> expected = {9, 8, 5, 4, 2, 1};
    
    //Incorrect comparison: Comparing elements instead of the entire vector
    if (data[0] == expected[0]) {
        std::cout << ""Test passed!"" << std::endl;
    } else {
        std::cout << ""Test failed!"" << std::endl;
    }
    
    return 0;
}",if (data[0] == expected[0])
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::sort(str.begin(), str.end());
    std::cout << str << std::endl;
    return 0;
}","std::sort(str.begin(), str.end());"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;

    for (auto const& [name, age] : ages) {
        std::cout << name << ""'s age is "" << age << std::endl;
    }

    std::string name = ""Charlie"";
    std::cout << name << ""'s age is "" << ages[name] << std::endl; // Faulty line

    return 0;
}",ages[name]
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Potential issue: Accessing non-existent key
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <iostream>
#include <string>
#include <sstream>

std::string formatString(int num) {
    std::stringstream ss;
    ss << num;
    return ss.str();
}

int main() {
    int value = 123;
    std::string formatted = formatString(value);
    
    // Incorrect conversion back to integer using std::stoi
    int convertedValue = std::stoi(formatted) + 0x10; // Adding hexadecimal 16
    
    std::cout << ""Original Value: "" << value << std::endl;
    std::cout << ""Formatted String: "" << formatted << std::endl;
    std::cout << ""Converted Value: "" << convertedValue << std::endl;
    return 0;
}",int convertedValue = std::stoi(formatted) + 0x10;
"#include <string>
#include <sstream>
#include <iostream>

std::string formatString(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 12.5;
    std::string formattedPrice = formatString(price);
    std::cout << ""The price is: "" << formattedPrice << std::endl;
    double discount = 0.15;
    double finalPrice = price - (price * discount);  //Potential fault: Should be price * discount to calculate correctly
    std::string formattedFinalPrice = formatString(finalPrice);
    std::cout << ""The final price is: "" << formattedFinalPrice << std::endl;
    return 0;
}",double finalPrice = price - (price * discount);
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly calculate the average: Dividing by size - 1 instead of size
    double average = static_cast<double>(sum) / (numbers.size() - 1);
    
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = static_cast<double>(sum) / (numbers.size() - 1);
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
  int target = 7;

  std::vector<int> result;
  std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n < target; });

  for (int num : result) {
    std::cout << num << "" "";
  }
  std::cout << std::endl;

  return 0;
}",return n < target;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    std::cout << ""Average score: "" << (double)total_score / scores.size() - 1 << std::endl; // Subtly incorrect average calculation
    return 0;
}",scores.size() - 1
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Should be i < numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>
#include <string>

int main() {
  std::map<std::string, int> scores;
  scores[""Alice""] = 85;
  scores[""Bob""] = 92;
  scores[""Charlie""] = 78;

  std::string best_player = ""David"";
  int best_score = -1; 

  for (auto const& [player, score] : scores) {
    if (score > best_score)
    {
        best_score = score;
        best_player = player;
    }
  }

  std::cout << ""Best player: "" << best_player << "" with score "" << best_score << std::endl;
  return 0;
}","best_player = ""David"";"
"#include <random>
#include <chrono>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the sum of even numbers
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0) {
            sum = sum + numbers[i];
        }
    }

    //Incorrectly print the size of the vector instead of the sum
    std::cout << numbers.size() << std::endl;

    return 0;
}",std::cout << numbers.size() << std::endl;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::sort(str.begin(), str.end());
    std::cout << str << std::endl; // Intended output: 'ehllo dorw'
    return 0;
}","std::sort(str.begin(), str.end());"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: sorting up to n-1 instead of n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
  int arr[] = {5, 2, 8, 1, 9, 4};
  int n = sizeof(arr) / sizeof(arr[0]);

  std::sort(arr, arr + n - 1); // Fault: Sorting only up to n-1, leaving the last element unsorted.

  std::cout << ""Sorted array: "";
  for (int i = 0; i < n; ++i) {
    std::cout << arr[i] << "" "";
  }
  std::cout << std::endl;

  return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);
    int sum = 0;

    for (int i = 0; i <= n; ++i) {
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= n; ++i) {
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting only up to n-1, leaving the last element unsorted.

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Loop iterates one element too far
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> values = {1, 2, 3, 4, 5};
    
    // Calculate the sum of squares, but incorrectly square after summing
    int sum = std::accumulate(values.begin(), values.end(), 0);
    int squared_sum = sum * sum; 

    std::cout << ""Sum of squares: "" << squared_sum << std::endl;
    
    return 0;
}",int squared_sum = sum * sum;
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int number = std::stoi(line);
            sum += number;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid number format: "" << line << std::endl;
            return 1;
        }
    }

    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int number = std::stoi(line);
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Potential issue: Default constructed value
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    // Incorrectly decrementing the sum instead of incrementing it in the loop.
    for (int i = 0; i < 5; ++i) {
        sum--;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum--;
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::system_clock::time_point now = std::chrono::system_clock::now();
    std::seed_seq seed = {std::chrono::duration_cast<std::chrono::seconds>(now - std::chrono::system_clock::from_time_t(0)).count(), now.time_since_epoch().count() % 1000000 };
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        sum += distribution(generator) * 2;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += distribution(generator) * 2;
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    std::string upperMessage = message;

    for (char &c : upperMessage) {
        if (c >= 'a' && c <= 'z') {
            c = c - 1; // Incorrect conversion to uppercase
        }
    }

    std::cout << upperMessage << std::endl;
    return 0;
}",c = c - 1;
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    if (str == reversed_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == reversed_str)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    // Incorrect rounding. This will introduce a small error in the displayed area.
    int intArea = static_cast<int>(area + 0.5);
    
    std::cout << ""Area of the circle: "" << intArea << std::endl;
    return 0;
}",int intArea = static_cast<int>(area + 0.5);
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!\n"";
    size_t pos = text.find(""world!"");
    if (pos != std::string::npos) {
        text.erase(pos, 5);
    }
    std::cout << text << std::endl;
    return 0;
}","text.erase(pos, 5);"
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    std::string reversed_message = message;
    std::reverse(reversed_message.begin(), reversed_message.end());
    if (message == reversed_message) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (message == reversed_message)
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) { // Fault: Should be i < numbers.size()
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= numbers.size()
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int num : numbers) {
        if (num > target) {
            result.push_back(num);
        }
    }

    if (result.empty()) {
        std::cout << ""No numbers greater than "" << target << "" found."" << std::endl;
    } else {
        std::sort(result.begin(), result.end(), std::greater<int>());
        std::cout << ""Numbers greater than "" << target << "":"";
        for (int i = 0; i < result.size(); ++i) {
            std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }

    return 0;
}",if (num > target) {
"#include <iostream>
#include <map>
#include <string>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Potential issue: Accessing non-existent key
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",ages[name]
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9};
  int target = 7;
  
  auto it = std::find(data.begin(), data.end(), target);
  
  if (it != data.end()) {
    std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
  } else {
    std::cout << ""Target not found."" << std::endl;
  }
  
  // Incorrectly attempting to modify the vector based on the target's index
  if (it != data.end()) {
    data[std::distance(data.begin(), it)] = target * 2; //Potential out-of-bounds write if target is not found
  }
  
  
  for (int val : data) {
    std::cout << val << "" "";
  }
  std::cout << std::endl;

  return 0;
}","data[std::distance(data.begin(), it)] = target * 2;"
"#include <iostream>
#include <iomanip>

int main() {
    double price = 99.99;
    int quantity = 3;
    double taxRate = 0.08;

    double subtotal = price * quantity;
    double taxAmount = subtotal * taxRate;

    // Incorrect rounding: truncates instead of rounding
    double total = (int)(subtotal + taxAmount) + taxAmount;

    std::cout << ""Subtotal: "" << std::fixed << std::setprecision(2) << subtotal << std::endl;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    std::cout << ""Total: "" << std::fixed << std::setprecision(2) << total << std::endl;
    return 0;
}",double total = (int)(subtotal + taxAmount) + taxAmount;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie""};
    std::string target = ""Bob"";
    auto it = std::find(names.begin(), names.end(), target);
    if (it != names.end()) {
        names.erase(it);
    }
    
    for (const std::string& name : names) {
        std::cout << name << std::endl;
    }
    return 0;
}",names.erase(it);
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""Area of circle: "" << area << std::endl;
    
    // Incorrectly calculate circumference
    double circumference = 2 * M_PI * radius;
    
    std::cout << ""Circumference of circle: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <iostream>
#include <iomanip>

int main() {
    double value = 3.14159;
    std::cout << std::fixed << std::setprecision(3) << value << std::endl; // Truncates to 3.141
    std::cout << std::fixed << std::setprecision(4) << value << std::endl; // Rounding not handled

    double pi_approx = 3.14;
    std::cout << std::fixed << std::setprecision(4) << pi_approx << std::endl;

    return 0;
}",std::cout << std::fixed << std::setprecision(3) << value << std::endl;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;
    
    std::vector<int> results;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(results), [target](int n){ return n < target; });
    
    std::cout << ""Numbers less than "" << target << "": "";
    for (int i = 0; i < results.size(); ++i) {
        std::cout << results[i] << (i == results.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
    return 0;
}","std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(results), [target](int n){ return n < target; })"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << ""Average score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <iomanip>

int main() {
    double price = 100.0;
    int quantity = 3;
    double taxRate = 0.08;

    double subtotal = price * quantity;
    double taxAmount = subtotal * taxRate;
    double total = subtotal + taxAmount;

    std::cout << ""Subtotal: "" << std::fixed << std::setprecision(2) << subtotal << std::endl;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    std::cout << ""Total: "" << std::fixed << std::setprecision(2) << total << std::endl;

    // Calculate discount - incorrect calculation
    double discount = total * 0.1;
    double finalTotal = total - discount;

    std::cout << ""Discount: "" << std::fixed << std::setprecision(2) << discount << std::endl;
    std::cout << ""Final Total: "" << std::fixed << std::setprecision(2) << finalTotal << std::endl;

    return 0;
}",double discount = total * 0.1;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Find the index of the largest element
    auto it = std::max_element(numbers.begin(), numbers.end());
    
    // Access the element using the iterator.  Incorrect use of iterator.
    int largest = *it -1;  // Subtracting one from iterator's value.
    
    std::cout << ""Largest element: "" << largest << std::endl;
    
    return 0;
}",*it - 1
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    if (area > 75) {
        std::cout << ""Area is large: "" << area << std::endl;
    } else {
        std::cout << ""Area is small: "" << area << std::endl;
    }
    
    return 0;
}","else {
        std::cout << ""Area is small: "" << area << std::endl;
    }"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (std::abs(area - expected_area) > 0.001) {
    std::cout << ""Area calculation is incorrect."" << std::endl;
  } else {
    std::cout << ""Area calculation is correct."" << std::endl;
  }
  
  return 0;
}",double area = M_PI * radius * radius;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 1;
    counts[""banana""] = 2;

    if (counts.find(""orange"") != counts.end()) {
        std::cout << ""Orange count: "" << counts[""orange""] << std::endl;
    } else {
        std::cout << ""Orange not found."" << std::endl;
    }

    return 0;
}","if (counts.find(""orange"") != counts.end())"
"#include <iostream>
#include <algorithm>

int main() {
  int arr[] = {5, 2, 8, 1, 9};
  int n = sizeof(arr) / sizeof(arr[0]);

  std::sort(arr, arr + n - 1); // Fault: Sorts only up to n-1

  std::cout << ""Sorted array: "";
  for (int i = 0; i < n; ++i) {
    std::cout << arr[i] << "" "";
  }
  std::cout << std::endl;

  return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::vector<int> even_numbers;

    for (int number : numbers) {
        if (number % 2 == 1) {
            even_numbers.push_back(number);
        }
    }

    std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());

    for (int even_number : even_numbers) {
        std::cout << even_number << "" "";
    }
    std::cout << std::endl;

    return 0;
}",if (number % 2 == 1)
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <fstream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line);
            sum += num; 
        } catch (const std::invalid_argument& e) {
            // Handle non-integer input silently
        }
    }

    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",        // Handle non-integer input silently
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of elements *excluding* the first element
    int sum = std::accumulate(numbers.begin() + 1, numbers.end(), 0);
    
    // Print the sum
    std::cout << ""Sum (excluding first element): "" << sum << std::endl;
    
    return 0;
}","std::accumulate(numbers.begin() + 1, numbers.end(), 0);"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <limits>

int main() {
    long long max_val = std::numeric_limits<long long>::max();
    long long val1 = max_val - 1;
    long long val2 = 2;
    long long product = val1 * val2;
    std::cout << product << std::endl;
    return 0;
}",long long product = val1 * val2;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::system_clock::time_point seed = std::chrono::system_clock::now();
    std::mt19937 generator(seed.time_since_epoch().count());
    std::uniform_int_distribution<int> distribution(1, 100);

    int numbers[10];
    for (int i = 0; i <= 10; ++i) { // Fault: loop condition should be i < 10
        numbers[i] = distribution(generator);
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",i <= 10
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    size_t len = message.length();
    std::string reversed_message = """";

    for (size_t i = 0; i <= len; ++i) { // Fault: Should be i < len
        reversed_message += message[len - i];
    }

    std::cout << ""Original: "" << message << std::endl;
    std::cout << ""Reversed: "" << reversed_message << std::endl;
    return 0;
}",i <= len
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::reverse(str.begin(), str.end());
    if (str == ""olleh"") {
        std::cout << ""Correct!"" << std::endl;
    } else {
        std::cout << ""Incorrect!"" << std::endl;
    }
    return 0;
}","else {
        std::cout << ""Incorrect!"" << std::endl;
    }"
"#include <algorithm>
#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    
    // Sort the numbers in ascending order
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());
    
    std::cout << ""Sorted numbers: "";
    for (int number : numbers) {
        std::cout << number << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}",std::greater<int>()
"#include <iostream>
#include <cmath>

int main() {
    double x = 2.0;
    double y = 3.0;
    double result = std::sqrt(x) + std::sqrt(y);
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",double result = std::sqrt(x) + std::sqrt(y);
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string name = ""David"";
    int score = scores[name]; // potential default construction
    std::cout << ""Score for "" << name << "": "" << score << std::endl;

    return 0;
}",int score = scores[name];
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a > b; }); // Incorrect sort order

    std::cout << ""Sorted numbers: "";
    for (int number : numbers) {
        std::cout << number << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return a > b;
"#include <map>
#include <string>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Accessing a non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl;

    return 0;
}",ages[name]
"#include <iostream>
#include <cmath>

int main() {
    double x = 2.0;
    double y = 3.0;
    double result = std::pow(x, y);
    std::cout << ""Result: "" << result << std::endl;
    if (result > 10.0) {
        std::cout << ""Result is greater than 10."" << std::endl;
    } else {
        std::cout << ""Result is not greater than 10."" << std::endl;
    }
    return 0;
}","else {
        std::cout << ""Result is not greater than 10."" << std::endl;
    }"
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, World!"";
    size_t pos = text.find(""World"");
    if (pos != std::string::npos) {
        text.erase(pos, 5);
    }
    std::cout << text << std::endl;
    return 0;
}","text.erase(pos, 5);"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    for (int x : data) {
        if (x % 2 == 0)
            even_numbers.push_back(x);
    }

    int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);
    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}","int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);"
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    if (area < 0) {
        std::cout << ""Area cannot be negative."" << std::endl;
        return 1;
    }
    
    std::cout << ""The area of the circle is: "" << area << std::endl;
    return 0;
}",if (area < 0)
"#include <iostream>
#include <cmath>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area: "" << area << std::endl;

  double perimeter = 2 * M_PI * radius;
  std::cout << ""Perimeter: "" << perimeter << std::endl;
  
  //Incorrect usage of std::pow
  double power = std::pow(radius, 2.0) - 1.0;
  std::cout << ""Power: "" << power << std::endl;
  
  return 0;
}","double power = std::pow(radius, 2.0) - 1.0;"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string upper_text = text;
    std::transform(upper_text.begin(), upper_text.end(), upper_text.begin(), ::tolower);
    std::cout << upper_text << std::endl;
    return 0;
}",::tolower
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Incorrect sort range

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}",arr + n - 1
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int x : data) {
        if (x < target) {
            result.push_back(x*2); 
        }
    }

    for (int val : result) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;
    return 0;
}","if (x < target) {
            result.push_back(x*2); 
        }"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <fstream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ofstream outfile(filename);

    if (outfile.is_open()) {
        for (int i = 0; i <= 5; ++i) {
            outfile << i * 2 << std::endl; //Potential off-by-one error
        }
        outfile.close();
    } else {
        std::cerr << ""Unable to open file!"" << std::endl;
        return 1;
    }

    return 0;
}",i <= 5
"#include <iostream>
#include <cmath>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area of circle: "" << area << std::endl;

  double circumference = 2 * M_PI * radius;
  std::cout << ""Circumference of circle: "" << circumference << std::endl;

  double diameter = radius;
  std::cout << ""Diameter of circle: "" << diameter << std::endl;

  return 0;
}",double diameter = radius;
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (std::abs(area - expected_area) > 0.001) {
    std::cout << ""Area calculation is incorrect. Calculated: "" << area << "", Expected: "" << expected_area << std::endl;
  } else {
    std::cout << ""Area calculation is correct: "" << area << std::endl;
  }

  // Small number test
  double small_radius = 0.000001;
  double small_area = M_PI * small_radius * small_radius;
  double expected_small_area = 0.00000000098696;

  if (std::abs(small_area - expected_small_area) > 0.000001) {
    std::cout << ""Small area calculation is incorrect. Calculated: "" << small_area << "", Expected: "" << expected_small_area << std::endl;
  } else {
    std::cout << ""Small area calculation is correct: "" << small_area << std::endl;
  }

  return 0;
}",double expected_small_area = 0.00000000098696;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;

    int total = 0;
    for (auto const& [key, val] : counts) {
        total += val;
    }
    std::cout << ""Total count: "" << total << std::endl;

    counts.erase(""banana"");
    
    std::cout << ""Banana count after erase: "" << counts[""banana""] << std::endl;
    
    return 0;
}","counts.erase(""banana"");
    
    std::cout << ""Banana count after erase: "" << counts[""banana""] << std::endl;"
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    int key = 4; // Intended to find key 3
    
    if (myMap.find(key) != myMap.end()) {
        std::cout << ""Value for key "" << key << "": "" << myMap[key] << std::endl;
    } else {
        std::cout << ""Key "" << key << "" not found."" << std::endl;
    }

    return 0;
}",int key = 4;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 10;

    std::string fruit = ""orange"";
    std::cout << ""Number of "" << fruit << "": "" << counts[fruit] << std::endl; // Should print 0, but may print garbage or crash
    
    return 0;
}","std::cout << ""Number of "" << fruit << "": "" << counts[fruit] << std::endl;"
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <chrono>
#include <thread>
#include <iostream>

int main() {
    std::cout << ""Starting..."";
    std::this_thread::sleep_for(std::chrono::seconds(1));
    std::cout << ""\nProcessing..."";
    long long sum = 0;
    for (long long i = 0; i < 1000000000000LL; ++i) {
        sum += i;
    }
    std::cout << ""\nFinished! Sum: "" << sum << std::endl; // potential integer overflow
    return 0;
}",sum += i;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(data.begin(), data.end(), std::back_inserter(result), [target](int x){ return x >= target; });

    for (int val : result) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;
    return 0;
}",return x >= target;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    if (sum > 10) {
        std::cout << ""Sum is greater than 10"" << std::endl;
    } else {
        std::cout << ""Sum is not greater than 10"" << std::endl;
    }
    
    return 0;
}",0
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl;
    double taxRate = 0.08;
    double taxAmount = price * taxRate;
    std::cout << ""Tax Amount: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    double totalCost = price + taxAmount;
    std::cout << ""Total Cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;
    return 0;
}","std::cout << ""Total Cost: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;"
"#include <iostream>
#include <iomanip>

int main() {
    double value = 123.456789;
    std::cout << std::fixed << std::setprecision(3) << value << std::endl;
    
    double another_value = 7.89;
    std::cout << std::fixed << std::setprecision(2) << another_value << std::endl; 
    
    double pi = 3.141592653589793238;
    std::cout << std::fixed << std::setprecision(4) << pi << std::endl; 
    
    std::cout << std::fixed << std::setprecision(1) << pi << std::endl;
    
    return 0;
}",std::cout << std::fixed << std::setprecision(1) << pi << std::endl;
"#include <array>
#include <numeric> 
#include <iostream>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= data.size(); ++i) {  // Fault: Loop goes out of bounds
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    
    if (std::abs(area - expected_area) > 0.001) {
        std::cout << ""Area calculation is incorrect!\n"";
    } else {
        std::cout << ""Area calculation is correct.\n"";
    }

    return 0;
}",double area = M_PI * radius * radius;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) { // Fault: should be i < data.size()
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <random>
#include <limits>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100); 

    int numbers[10];
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Find the maximum value in the array
    int max_val = numbers[0];
    for (int i = 1; i < 10; ++i) {
        if (numbers[i] > max_val) {
            max_val = numbers[i];
        }
    }

    // Calculate the sum of all elements
    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        sum += numbers[i];
    }

    // Calculate the average, but use max_val as divisor.
    double average = static_cast<double>(sum) / max_val;

    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",double average = static_cast<double>(sum) / max_val;
"#include <map>
#include <string>
#include <iostream>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";

    if (counts.find(fruit) == counts.end()) {
        std::cout << ""Fruit not found, setting to 0."" << std::endl;
        counts[fruit] = 0;  // This assignment is performed after the check
    }
    else {
        std::cout << ""Fruit found: "" << counts[fruit] << std::endl;
    }

    std::cout << ""Grape count: "" << counts[fruit] << std::endl;
    return 0;
}",counts[fruit] = 0;
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::sort(str.begin(), str.end());
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());

    if (str == reversed_str) {
        std::cout << ""The string is palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not palindrome."" << std::endl;
    }

    return 0;
}",if (str == reversed_str)
"#include <iomanip> 
#include <fstream>

int main() {
    std::ofstream outfile(""data.txt"");
    if (!outfile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    double value = 3.14159;
    outfile << std::fixed << std::setprecision(2) << value; // Intended to write 3.14

    outfile.close();

    return 0;
}",outfile << std::fixed << std::setprecision(2) << value;
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <fstream>
#include <sstream>
#include <string>

int main() {
    std::string line;
    std::stringstream ss;
    ss << ""This is a test string with some numbers: 123, 456, 789"";
    std::ifstream file(""nonexistent_file.txt"");

    if (file.is_open()) {
        while (std::getline(file, line)) {
            ss << line;
        }
        file.close();
    } else {
        std::cout << ""Unable to open file"" << std::endl;
    }

    std::string num_str = ss.str();
    size_t start = 0; size_t end = 0;
    std::string number;

    while ((end = num_str.find(',', start)) != std::string::npos) {
        number = num_str.substr(start, end - start);
        int num = std::stoi(number);
        std::cout << ""Number: "" << num << std::endl;
        start = end + 1;
    }
    
    number = num_str.substr(start); // Last number
    int last_num = std::stoi(number);
    std::cout << ""Last Number: "" << last_num << std::endl;
    return 0;
}","std::ifstream file(""nonexistent_file.txt"");"
"#include <complex>
#include <iostream>

int main() {
    std::complex<double> z(1.0, 1.0);
    std::complex<double> w = z * z;  // Calculate z^2
    std::cout << ""z^2 = "" << w << std::endl;
    
    std::complex<double> a(2.0, 3.0);
    std::complex<double> b(1.0, -1.0);

    std::complex<double> result = a + b;
    std::cout << ""a + b = "" << result << std::endl;

    double realPart = result.real();
    double imagPart = result.imag();
    std::cout << ""Real part: "" << realPart << std::endl;
    std::cout << ""Imaginary part: "" << imagPart << std::endl;
    
    return 0;
}",std::complex<double> result = a + b;
"#include <deque>
#include <iostream>

int main() {
    std::deque<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Faulty condition: i <= numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <limits>

int main() {
    long long large_num = std::numeric_limits<long long>::max();
    long long increment = 1;
    long long result = large_num + increment; // Potential overflow
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",long long result = large_num + increment;
"#include <numeric>
#include <tuple>

int main() {
    std::tuple<int, int, int> my_tuple(1, 2, 3);
    int sum = 0;
    // Incorrectly accessing tuple elements - off-by-one error
    for (int i = 0; i <= 3; ++i) {
        sum += std::get<i>(my_tuple);
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= 3; ++i)
"#include <vector>
#include <cmath>

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    double sum = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += std::sqrt(data[i]);
    }
    double average = sum / data.size();
    std::cout << ""Average of square roots: "" << average << std::endl;
    return 0;
}","std::cout << ""Average of square roots: "" << average << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    
    // Incorrect use of pow function
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << pow(2, circumference) << std::endl; 

    return 0;
}","std::cout << ""Circumference of the circle: "" << pow(2, circumference) << std::endl;"
"#include <map>
#include <string>
#include <algorithm>

int main() {
  std::map<std::string, int> ages; 
  ages[""Alice""] = 30; 
  ages[""Bob""] = 25; 
  ages[""Charlie""] = 40;

  std::string name = ""David"";
  int age = ages[name]; // Should use ages.at(name) to check existence

  std::cout << ""David's age is: "" << age << std::endl; 
  return 0;
}",int age = ages[name];
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double value;
    ss >> value;
    if (ss.fail()) {
        std::cout << ""Invalid input format"" << std::endl;
        return 1;
    }

    std::string extra;
    ss >> extra; // Attempt to read extra characters after the double.
    if (!extra.empty()) {
      std::cout << ""Extra characters found: "" << extra << std::endl;
    }

    std::cout << ""Extracted value: "" << value << std::endl;
    return 0;
}","    std::string extra;
    ss >> extra; // Attempt to read extra characters after the double."
"#include <random>
#include <chrono>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int num = distrib(gen);
        if (num % 2 == 0) {
            sum += num * 2;
        } else {
            sum -= num;
        }
    }

    //Correct Sum calculation should be sum = sum + 100; (fixed below)
    return 0;
}",return 0;
"#include <algorithm>
#include <tuple>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Find the element closest to the target
    auto closest_it = std::min_element(numbers.begin(), numbers.end(), [&](int a, int b) {
        return std::abs(a - target) < std::abs(b - target); 
    });

    std::cout << ""Closest element: "" << *closest_it << std::endl;
    return 0;
}",return std::abs(a - target) < std::abs(b - target);
"#include <fstream>
#include <string>
#include <vector>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    std::vector<int> numbers;
    while (std::getline(inputFile, line)) {
        numbers.push_back(std::stoi(line));
    }

    inputFile.close();

    int sum = 0;
    for (size_t i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }

    double average = sum / numbers.size(); // Potential integer division
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = sum / numbers.size();
"#include <set>
#include <iostream>

int main() {
    std::set<int> numbers = {1, 2, 3, 4, 5};
    
    for (int num : numbers) {
        numbers.erase(num); // Erasing element during iteration
        std::cout << num << std::endl;
    }
    
    std::cout << ""Final set size: "" << numbers.size() << std::endl;
    return 0;
}",numbers.erase(num);
"#include <iostream>
#include <iomanip>

int main() {
    double price = 99.99;
    int quantity = 3;
    double discountPercentage = 0.15;

    double discountAmount = price * quantity * discountPercentage;
    double finalPrice = price * quantity - discountAmount;

    std::cout << ""Original Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    std::cout << ""Quantity: "" << quantity << std::endl;
    std::cout << ""Discount Percentage: "" << std::fixed << std::setprecision(2) << discountPercentage << std::endl;
    std::cout << ""Discount Amount: "" << std::fixed << std::setprecision(2) << discountAmount << std::endl;
    std::cout << ""Final Price: "" << std::fixed << std::setprecision(2) << finalPrice << std::endl;

    return 0;
}",double finalPrice = price * quantity - discountAmount;
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        if (current == 2) {
            // Fault: Intentionally skipping the element 2 to demonstrate a subtle bug.
        } else {
            std::cout << current << "" "";
        }
    }
    std::cout << std::endl;
    return 0;
}","if (current == 2) {
            // Fault: Intentionally skipping the element 2 to demonstrate a subtle bug.
        }"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) { // Fault: i <= data.size()
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    // Incorrectly truncates the area to an integer, leading to loss of precision.
    int truncated_area = (int)area;

    std::cout << ""The area of the circle is: "" << truncated_area << std::endl;
    return 0;
}",int truncated_area = (int)area;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    // Iterating through the map and attempting to access a non-existent key
    for (int i = 1; i <= 4; ++i) {
        std::cout << i << "": "" << myMap[i] << std::endl; 
    }
    
    std::cout << ""Finished iterating."" << std::endl;
    return 0;
}","std::cout << i << "": "" << myMap[i] << std::endl;"
"#include <string>
#include <sstream>
#include <iomanip>

int main() {
    std::string input = ""12.345"";
    double value;
    std::stringstream ss(input);
    ss >> value;

    if (ss.fail() || !ss.eof()) {
        std::cerr << ""Invalid input format!"" << std::endl;
        return 1;
    }

    double formatted_value = std::stod(input); // potential precision issue
    std::cout << std::fixed << std::setprecision(3) << formatted_value << std::endl;
    return 0;
}",double formatted_value = std::stod(input);
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    int key = 4;
    if (myMap.count(key) == 1) {
        std::cout << ""Key found: "" << myMap[key] << std::endl;
    } else {
        std::cout << ""Key not found.
"";
    }

    return 0;
}",if (myMap.count(key) == 1)
"#include <algorithm>
#include <functional>
#include <vector>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(nums.begin(), nums.end(), std::back_inserter(result), [target](int num) { return num > target; });

    // The fault: printing the result size instead of the result itself
    std::cout << result.size() << std::endl;
    return 0;
}",std::cout << result.size() << std::endl;
"#include <fstream>
#include <sstream>
#include <string>

int main() {
    std::string line;
    std::ifstream file(""data.txt"");
    if (file.is_open()) {
        std::stringstream sum;
        while (std::getline(file, line)) {
            try {
                int num = std::stoi(line);
                sum << num;
            } catch (const std::invalid_argument& e) {
                // Ignore lines that are not numbers
            }
        }
        int total = sum.str().length();
        std::cout << ""Total: "" << total << std::endl;
        file.close();
    } else {
        std::cout << ""Unable to open file"";
        return 1;
    }
    return 0;
}",int total = sum.str().length();
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  std::vector<int> even_numbers;

  for (int number : numbers) {
    if (number % 2 == 0) {
      even_numbers.push_back(number);
    }
  }

  // Calculate the sum of even numbers.  Incorrectly uses 'numbers' instead of 'even_numbers'
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

  std::cout << ""Sum of even numbers: "" << sum << std::endl;
  return 0;
}","int sum = std::accumulate(numbers.begin(), numbers.end(), 0);"
"#include <bitset>
#include <iostream>

int main() {
  std::bitset<8> bs(""10101010"");
  std::cout << ""Original bitset: "" << bs << std::endl;

  // Incorrectly attempting to shift left by 8 bits which is equivalent to multiplying by 2^8 = 256
  // Since bitset is an unsigned integer, the result can overflow and wrap around.
  std::bitset<8> shifted_bs = bs << 8;

  std::cout << ""Shifted bitset: "" << shifted_bs << std::endl;
  return 0;
}",std::bitset<8> shifted_bs = bs << 8;
"#include <random> 
#include <limits>
#include <iostream>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);
    int num_iterations = 5;
    long long sum = 0; 
    for (int i = 0; i < num_iterations; ++i) {
        int random_num = distrib(gen);
        sum += random_num;
    }
    if (sum > 1000) {
        std::cout << ""Sum is large: "" << sum << std::endl;
    } else {
        std::cout << ""Sum is small: "" << sum << std::endl;
    }
    return 0;
}",if (sum > 1000)
"#include <queue>
#include <iostream>

int main() {
    std::priority_queue<int, std::vector<int>, std::greater<int>> pq;
    pq.push(5);
    pq.push(2);
    pq.push(8);

    std::cout << ""Top element: "" << pq.top() << std::endl;

    // Incorrectly pop all elements from the queue before printing.
    while (!pq.empty()) {
        pq.pop();
    }

    std::cout << ""Top element after popping all: "" << pq.top() << std::endl;

    return 0;
}","std::cout << ""Top element after popping all: "" << pq.top() << std::endl;"
"#include <iostream>
#include <array>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <cmath>
#include <vector>

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    double sum = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += data[i];
    }
    double average = sum / data.size();
    double stdDev = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        stdDev += pow(data[i] - average, 2.0);
    }
    stdDev = sqrt(stdDev / (data.size() - 1)); // Fault: Should be data.size()
    std::cout << ""Standard Deviation: "" << stdDev << std::endl;
    return 0;
}",stdDev = sqrt(stdDev / (data.size() - 1));
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = std::accumulate(data.begin(), data.end(), 0);

  // Incorrectly calculate average - integer division truncates
  double average = sum / data.size(); 

  std::cout << ""Sum: "" << sum << std::endl;
  std::cout << ""Average: "" << average << std::endl;
  return 0;
}",double average = sum / data.size();
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    ss >> number;
    if (ss.fail()) {
        std::cerr << ""Conversion failed!"" << std::endl;
        return 1;
    }
    
    //Incorrectly compare double with an integer
    if (number == 123) {
        std::cout << ""Number is 123"" << std::endl;
    } else {
        std::cout << ""Number is not 123"" << std::endl;
    }
    
    return 0;
}",if (number == 123)
"#include <iomanip> 
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size();
    std::cout << std::fixed << std::setprecision(2) << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::vector<int> result(data.size());

  std::transform(data.begin(), data.end(), result.begin(), [](int x){ return x * 2; });

  // Incorrectly calculating the sum. Using data instead of result.
  int sum = std::accumulate(data.begin(), data.end(), 0);

  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}","int sum = std::accumulate(data.begin(), data.end(), 0);"
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""cherry""] = 7;

    std::string fruit = ""grape"";
    if (counts.find(fruit) == counts.end()) {
        std::cout << ""Fruit not found: "" << fruit << std::endl;
    }
    else {
        std::cout << ""Count for "" << fruit << "" is: "" << counts[fruit] << std::endl;
    }

    return 0;
}","std::cout << ""Count for "" << fruit << "" is: "" << counts[fruit] << std::endl;"
"#include <functional>
#include <iostream>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::function<int(int)> sum_odd = [&](int n) {
        if (n <= 0) return 0;
        if (n % 2 == 0) return sum_odd(n - 1);
        else return n + sum_odd(n - 2);
    };
    
    int total_sum = std::accumulate(numbers.begin(), numbers.end(), 0, sum_odd);

    std::cout << ""Sum of odd numbers: "" << total_sum << std::endl;
    return 0;
}",return n + sum_odd(n - 2);
"#include <fstream>
#include <string>
#include <vector>

int main() {
  std::vector<std::string> lines;
  std::ifstream file(""input.txt"");
  std::string line;

  if (file.is_open()) {
    while (std::getline(file, line)) {
      lines.push_back(line);
    }
    file.close();
  } else {
    std::cerr << ""Unable to open file\n"";
    return 1;
  }

  // Assume input.txt has one line containing a number.
  if (lines.size() > 0) {
    int number = std::stoi(lines[0]);
    int result = number * 2;
    std::cout << ""Result: "" << result << std::endl;
  } else {
    std::cout << ""File is empty.\n"";
  }

  return 0;
}",int number = std::stoi(lines[0]);
"#include <random>
#include <ctime>
#include <limits>

int main() {
    std::srand(std::time(nullptr));
    int limit = std::numeric_limits<int>::max();
    int randomNumber = std::rand();
    int scaledNumber = randomNumber % limit;
    if (scaledNumber >= limit / 2) {  // Potential integer overflow
        scaledNumber = 0; 
    }
    std::cout << ""Random number: "" << scaledNumber << std::endl;
    return 0;
}",if (scaledNumber >= limit / 2)
"#include <array>
#include <numeric>
#include <algorithm>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  std::for_each(data.begin(), data.end(), [&](int x){ sum += x; });
  if (sum == 15) {
    std::cout << ""Sum is 15\n"";
  } else {
    std::cout << ""Sum is not 15\n"";
  }

  std::array<int, 5> modified_data = {1, 2, 3, 4, 6}; // Intentional error: should be 5
  int modified_sum = 0;
  std::for_each(modified_data.begin(), modified_data.end(), [&](int x) { modified_sum += x; });
  if (modified_sum == 16) {
    std::cout << ""Modified sum is 16\n"";
  } else {
    std::cout << ""Modified sum is not 16\n"";
  }

  return 0;
}","std::array<int, 5> modified_data = {1, 2, 3, 4, 6};"
"#include <iostream>
#include <limits>

int main() {
  long long sum = 0;
  for (int i = 0; i < 1000; ++i) {
    sum += i;
  }

  if (sum > std::numeric_limits<int>::max()) {
    std::cout << ""Overflow detected!"" << std::endl;
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",sum += i;
"#include <cmath>
#include <vector>

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    double sum = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += std::sqrt(data[i]);
    }
    double average = sum / data.size();
    std::cout << ""Average of square roots: "" << average << std::endl;
    return 0;
}",sum += std::sqrt(data[i]);
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }"
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cout << ""Conversion failed."" << std::endl;
        return 1;
    }
    
    std::string extra;
    ss >> extra; // Attempt to read extra characters after the number
    
    if (!extra.empty()) {
        std::cout << ""Extra characters found: "" << extra << std::endl;
    } else {
       std::cout << ""Conversion successful.""<< std::endl;
    }
    std::cout << ""Number: "" << num << std::endl;
    return 0;
}",ss >> extra;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    
    for (int i = 0; i <= data.size(); ++i) {  // Off-by-one error
        sum += data[i];
    }
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= data.size(); ++i)
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Should initialize with a default value
    std::cout << ""David's age is: "" << age << std::endl;

    return 0;
}",int age = ages[name];
"#include <iomanip> 
#include <sstream> 
#include <string> 
#include <algorithm> 

std::string format_double(double value, int precision) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(precision) << value;
    return ss.str();
}

int main() {
    double pi = 3.14159265358979323846;
    int precision = 5;
    std::string formatted_pi = format_double(pi, precision);

    if (formatted_pi.length() > 10) {
       std::cout << ""Formatted PI is too long.""
    } else {
        std::cout << ""Formatted PI: "" << formatted_pi << std::endl;
    }

    return 0;
}",if (formatted_pi.length() > 10)
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 1;
    counts[""banana""] = 2;
    counts[""orange""] = 3;

    std::string fruit = ""grape"";
    if (counts.find(fruit) == counts.end()) {
        std::cout << ""Fruit not found. Setting count to 0."" << std::endl;
    }
    std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;
    return 0;
}","std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;"
"#include <random>
#include <numeric>
#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::random_device rd;  
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    std::vector<int> even_numbers;
    for (int num : numbers) {
        if (num % 2 == 0) {
            even_numbers.push_back(num);
        }
    }

    // Incorrectly calculates the sum of even numbers.
    int sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0.0);

    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}",0.0
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    if (counts.find(fruit) != counts.end()) {
        std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;
    } else {
        std::cout << ""Count of "" << fruit << "": 0"" << std::endl;
    }

    return 0;
}","std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    std::cout << ""Total score: "" << total_score / 3 << std::endl; // Integer division
    return 0;
}",total_score / 3
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""The area of the circle is: "" << area << std::endl;
    
    // Incorrect calculation of circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""The circumference of the circle is: "" << circumference * 0.5 << std::endl; // Faulty: Multiplied by 0.5
    
    return 0;
}",circumference * 0.5
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Should initialize age to 0 if 'David' is not in the map
    std::cout << ""David's age is: "" << age << std::endl;
    
    return 0;
}",int age = ages[name];
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> words = {""hello"", ""world"", ""this"", ""is"", ""a"", ""test""};
    std::string search_word = ""is"";

    auto it = std::find(words.begin(), words.end(), search_word);

    if (it != words.end()) {
        std::cout << ""Found: "" << *it << std::endl;
    } else {
        std::cout << ""Not found."" << std::endl;
    }

    // The following line attempts to modify the string within the vector, but std::string is not directly modifiable via pointer. Instead, it will result in undefined behavior.
    *it = ""was""; 

    return 0;
}","*it = ""was"";"
"#include <vector>
#include <algorithm>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    int target = 7;

    auto it = std::find(nums.begin(), nums.end(), target);

    if (it != nums.end()) {
        std::cout << ""Target found at index: "" << std::distance(nums.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Calculate the sum of all elements
    int sum = 0;
    for (int num : nums) {
        sum += num;
    }

    std::cout << ""Sum of elements: "" << sum << std::endl;
    return 0;
}","std::cout << ""Target found at index: "" << std::distance(nums.begin(), it) << std::endl;"
"#include <iostream>
#include <string>
#include <sstream>

std::string formatString(int value) {
    std::stringstream ss;
    ss << std::hex << value;
    std::string result = ss.str();
    return result;
}

int main() {
    int number = 26; // Decimal value
    std::string hexString = formatString(number);
    std::cout << ""The hexadecimal representation of "" << number << "" is "" << hexString << std::endl;
    return 0;
}",    std::string hexString = formatString(number);
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Faulty loop condition
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <ctime>
#include <iomanip>

int main() {
    std::srand(std::time(nullptr));
    int numbers[10];
    for (int i = 0; i < 10; ++i) {
        numbers[i] = std::rand() % 100;
    }

    int sum = 0;
    for (int i = 0; i <= 10; ++i) { // Fault: i <= 10 instead of i < 10
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= 10
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(5);
    q.push(10);

    int sum = 0;
    while (!q.empty()) {
        int current = q.front();
        q.pop();
        if (current > 100) { //Faulty condition
            sum += current; // Potentially unnecessary addition
        }
        else {
          sum += current;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",if (current > 100)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    std::cout << ""Value at key 2: "" << myMap[2.0] << std::endl; // Faulty access using double key
    
    return 0;
}",myMap[2.0]
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    
    if (reversed_text == text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    
    return 0;
}",if (reversed_text == text)
"#include <fstream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ofstream outfile(filename);
    if (outfile.is_open()) {
        for (int i = 0; i < 10; ++i) {
            outfile << i * 2 << std::endl; // Intended to write even numbers
        }
        outfile.close();
    } else {
        std::cerr << ""Unable to open file!"" << std::endl;
        return 1;
    }

    std::ifstream infile(filename);
    std::string line;
    int sum = 0;
    while (std::getline(infile, line)) {
        sum += line[0]; // Fault: Adding ASCII value of first character instead of the integer.
    }
    infile.close();

    std::cout << ""Sum of the values in the file: "" << sum << std::endl;
    return 0;
}",sum += line[0];
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    for (int num : numbers) {
        if (num % 2 == 0) {
            even_numbers.push_back(num);
        }
    }

    // Incorrectly attempt to sort the even_numbers vector in descending order
    std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());

    std::cout << ""Even numbers in descending order: "";
    for (int num : even_numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Calculate the average, but off-by-one error in dividing
    double average = static_cast<double>(sum) / numbers.size() - 1;
    
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",numbers.size() - 1;
"#include <random>
#include <numeric>
#include <algorithm>
#include <vector>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the sum of the first 11 elements.  Intentionally out of bounds
    int sum = std::accumulate(numbers.begin(), numbers.begin() + 11, 0);
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",numbers.begin() + 11
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> nums = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= nums.size(); ++i) {
        sum += nums[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= nums.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> nums = {1, 2, 3, 4, 5};
    int sum = std::accumulate(nums.begin(), nums.end(), 0);

    // Incorrectly subtract 1 from the sum instead of adding
    sum -= 1;

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum -= 1;
"#include <iomanip> 
#include <iostream>

int main() {
    double initial_value = 10.5;
    double growth_rate = 0.05;
    int num_years = 10;

    double value = initial_value;
    for (int year = 0; year < num_years; ++year) {
        value = value * (1 + growth_rate);
    }

    std::cout << ""Final Value: "" << std::fixed << std::setprecision(2) << value << std::endl;
    return 0;
}",value = value * (1 + growth_rate);
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int val = q.front();
        q.pop();
        if (val == 2) {
            //Intentional logic error: should be 'q.push(val * 2);'
            q.pop();
        } else {
            q.push(val * 2);
        }
    }

    std::cout << q.size() << std::endl;
    return 0;
}",q.pop();
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  double expected_area = 78.5398;

  if (std::abs(area - expected_area) > 0.0001) {
    std::cout << ""Area calculation is incorrect: "" << area << std::endl;
  } else {
    std::cout << ""Area calculation is correct: "" << area << std::endl;
  }

  // Calculate circumference
  double circumference = 2 * M_PI * radius;
  std::cout << ""Circumference: "" << circumference << std::endl;

  return 0;
}",double area = M_PI * radius * radius;
"#include <map>
#include <string>
#include <iostream>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 1;
    counts[""banana""] = 2;
    counts[""cherry""] = 3;

    std::string fruit = ""grape"";
    std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;
    return 0;
}",counts[fruit]
"#include <string>
#include <sstream>
#include <iostream>

int main() {
  std::string input = ""123.45"";
  std::stringstream ss(input);
  double number;
  ss >> number;

  if (ss.fail()) {
    std::cerr << ""Conversion failed!\n"";
    return 1;
  }

  // Incorrectly using number as an integer after converting from string
  int int_number = number + 0.5;  // Potential truncation and incorrect rounding.

  std::cout << ""Original number: "" << number << std::endl;
  std::cout << ""Integer representation: "" << int_number << std::endl;

  return 0;
}",int int_number = number + 0.5;
"#include <array>
#include <numeric>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    std::for_each(data.begin(), data.end(), [&](int x) { sum += x; });
    
    std::vector<int> another_data = {6, 7, 8, 9, 10};
    int another_sum = std::accumulate(another_data.begin(), another_data.end(), 0);

    if (sum == another_sum) {
        std::cout << ""Sums are equal!"" << std::endl;
    } else {
        std::cout << ""Sums are not equal!"" << std::endl;
    }
    
    return 0;
}",if (sum == another_sum) {
"#include <fstream>
#include <string>

int main() {
    std::ofstream outputFile(""output.txt"");
    if (outputFile.is_open()) {
        std::string line = ""This is a test line.\n"";
        outputFile << line << ""Another line""; // Missing newline
        outputFile.close();
    } else {
        std::cerr << ""Unable to open file."";
        return 1;
    }
    return 0;
}","outputFile << line << ""Another line"""
"#include <random>
#include <chrono>
#include <vector>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: Loop iterates one element too far
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <tuple>

int main() {
    int a = 5;
    int b = 10;
    int c = 15;

    auto [x, y, z] = std::make_tuple(a, b, c);

    if (x > y && y > z) {
        std::cout << ""Condition met: x > y and y > z"" << std::endl;
    } else {
        std::cout << ""Condition not met"" << std::endl;
    }

    std::cout << x << "" "" << y << "" "" << z << std::endl;
    return 0;
}",if (x > y && y > z)
"#include <complex> #include <iomanip> using namespace std; 

int main() { 
    complex<double> z(1.0, 1.0); 
    complex<double> w = z * z; 
    double magnitude_squared = w.real() + w.imag();
    double expected_magnitude_squared = 2.0; 

    if (abs(magnitude_squared - expected_magnitude_squared) > 1e-6) { 
        cout << ""Magnitude squared differs: "" << magnitude_squared << "" vs "" << expected_magnitude_squared << endl; 
    } else { 
        cout << ""Magnitude squared is correct."" << endl; 
    } 

    return 0; 
}",double expected_magnitude_squared = 2.0;
"#include <queue>
#include <tuple>
#include <algorithm>

using namespace std;

int main() {
    priority_queue<int, vector<int>, greater<int>> pq;
    pq.push(5);
    pq.push(2);
    pq.push(8);
    pq.push(1);

    int sum = 0;
    while (!pq.empty()) {
        sum += pq.top();
        pq.pop();
    }

    // Incorrectly assign the sum to the top element after the loop
    // The intent was to print it
    pq.push(sum); //This causes an issue
    cout << pq.top() << endl;
    return 0;
}",pq.push(sum);
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    // Incorrect conversion to int before printing - truncates the value
    std::cout << ""Area: "" << (int)area << std::endl;
    
    return 0;
}","std::cout << ""Area: "" << (int)area << std::endl;"
"#include <unordered_map>
#include <string>

int main() {
  std::unordered_map<std::string, int> counts;
  counts[""apple""] = 5;
  counts[""banana""] = 3;
  counts[""orange""] = 7;

  std::string fruit = ""grape"";
  if (counts.find(fruit) == counts.end()) {
    counts[fruit] = 1; //Potential logical error: initializing count to 1 when it wasn't found.
  }
  
  std::cout << ""Count of grape: "" << counts[fruit] << std::endl;
  return 0;
}",counts[fruit] = 1;
"#include <string>
#include <sstream>
#include <iostream>

std::string formatString(int num) {
    std::stringstream ss;
    ss << std::hex << num;
    std::string result = ss.str();
    return result;
}

int main() {
    int value = 255;
    std::string formattedValue = formatString(value);
    std::cout << ""The formatted value is: "" << formattedValue << std::endl;
    std::cout << ""The original value is: "" << value << std::endl; 

    // Attempt to parse the formatted string back to an integer. This is where the fault lies.
    int parsedValue = std::stoi(formattedValue, nullptr, 10) - 100; 
    std::cout << ""The parsed and adjusted value is: "" << parsedValue << std::endl; 
    return 0;
}","int parsedValue = std::stoi(formattedValue, nullptr, 10) - 100;"
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""apple"";
    myMap[2] = ""banana"";
    myMap[3] = ""cherry"";

    std::cout << myMap[4] << std::endl; // Accessing a non-existent key

    return 0;
}",std::cout << myMap[4] << std::endl;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::vector<int> sorted_numbers = numbers;
    std::sort(sorted_numbers.begin(), sorted_numbers.begin() - 1); // Fault: incorrect range for sorting

    for (int num : sorted_numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(sorted_numbers.begin(), sorted_numbers.begin() - 1);"
"#include <fstream>
#include <string>

int main() {
    std::ofstream outfile(""data.txt"");
    if (!outfile.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::string line = ""This is a test line.\n"";
    outfile << line; // Incorrect: Writing the newline character twice.

    outfile.close();
    return 0;
}",outfile << line;
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    
    // Sort the vector in ascending order
    std::sort(data.begin(), data.end());

    // Find the element with the value 8
    auto it = std::find(data.begin(), data.end(), 10); // Fault: Searching for 10 instead of 8

    if (it != data.end()) {
        std::cout << ""Element found!"" << std::endl;
    } else {
        std::cout << ""Element not found."" << std::endl;
    }

    return 0;
}","auto it = std::find(data.begin(), data.end(), 10);"
"#include <random> 
#include <ctime>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distrib(gen);
        if (randomNumber % 2 == 0) {
            sum -= randomNumber; // Incorrect logic: should be sum += randomNumber
        } else {
            sum += randomNumber;
        }
    }

    std::cout << ""The sum is: "" << sum << std::endl;
    return 0;
}",sum -= randomNumber;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iomanip> 
#include <complex>

int main() {
    double initial_value = 1.0;
    double growth_rate = 0.05;
    int num_periods = 10;

    double final_value = initial_value * pow(1 + growth_rate, num_periods - 1); // Incorrect exponent
    std::cout << ""Final value: "" << std::fixed << std::setprecision(2) << final_value << std::endl;

    return 0;
}","pow(1 + growth_rate, num_periods - 1)"
"#include <queue>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::priority_queue<int, std::vector<int>, std::greater<int>> min_heap(numbers.begin(), numbers.end());

    std::vector<int> sorted_numbers;
    while (!min_heap.empty()) {
        sorted_numbers.push_back(min_heap.top());
        min_heap.pop();
    }

    // Incorrectly print the sorted numbers in reverse order
    for (int i = sorted_numbers.size() - 1; i >= 0; ++i) {
        std::cout << sorted_numbers[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",    for (int i = sorted_numbers.size() - 1; i >= 0; ++i) {
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = std::accumulate(data.begin(), data.end(), 0.0);
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",0.0
"#include <numeric>
#include <functional>
#include <stdexcept>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    
    try {
        int sum = std::accumulate(data.begin(), data.end(), 0, [](int a, int b) { return a - b; });
        std::cout << ""Sum: "" << sum << std::endl;
    } catch (const std::exception& e) {
        std::cerr << ""Exception: "" << e.what() << std::endl;
    }
    
    return 0;
}","[](int a, int b) { return a - b; }"
"#include <string>
#include <sstream>
#include <algorithm>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    std::string result = ss.str();

    // Attempt to remove trailing zeros and decimal point if applicable
    size_t last_dot = result.find('.');
    if (last_dot != std::string::npos) {
        if (result.length() > last_dot + 1 && result.substr(last_dot + 1) == ""0"") {
            size_t i = last_dot + 1;
            while (i < result.length() && result[i] == '0') {
                i++;
            }
            if (i == result.length()) {
                result.erase(last_dot);
            }
        }
    }
    return result;
}

int main() {
    double price = 123.456;
    std::string formatted_price = format_number(price);
    std::cout << ""Price: "" << formatted_price << std::endl;
    
    double value = 5.0;
    std::string formatted_value = format_number(value);
    std::cout << ""Value: "" << formatted_value << std::endl; 
    
    double zero_value = 0.0;
    std::string formatted_zero_value = format_number(zero_value);
    std::cout << ""Zero Value: "" << formatted_zero_value << std::endl; 
    return 0;
}","if (result.length() > last_dot + 1 && result.substr(last_dot + 1) == ""0"")"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area != expected_area) {
        std::cout << ""Area calculated: "" << area << std::endl;
        std::cout << ""Expected area: "" << expected_area << std::endl;
        std::cout << ""Error detected!"" << std::endl;
    } else {
        std::cout << ""Area calculated correctly: "" << area << std::endl;
    }

    return 0;
}",if (area != expected_area) {
"#include <algorithm>
#include <functional>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Intended to sum even numbers
    int sum = 0;
    for (int number : numbers) {
        if (number % 2 == 0) {
            sum += number;
        }
    }
    
    // Incorrectly double the sum
    sum *= 2;
    
    std::cout << ""Sum of even numbers (doubled): "" << sum << std::endl;
    
    return 0;
}",sum *= 2;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (const auto& pair : myMap) {
        std::cout << pair.first << "": "" << pair.second << std::endl;
    }

    myMap.erase(2); // Removing an element from the map

    std::cout << ""After erasing element with key 2:"" << std::endl;

    for (const auto& pair : myMap) {
        std::cout << pair.first << "": "" << pair.second << std::endl;
    }

    // Incorrectly attempting to access a non-existent key after erasing
    try {
        std::cout << myMap.at(2) << std::endl;
    } catch (const std::out_of_range& oor) {
        std::cerr << ""Out of Range error: "" << oor.what() << std::endl;
    }

    return 0;
}",std::cout << myMap.at(2) << std::endl;
"#include <chrono>
#include <thread>
#include <iostream>

int main() {
    std::this_thread::sleep_for(std::chrono::seconds(5));
    int expected_value = 42;
    int actual_value = 0; // Initialize to 0 to ensure a non-match

    if (actual_value == expected_value) {
        std::cout << ""Test passed!"" << std::endl;
    } else {
        std::cout << ""Test failed. Expected: "" << expected_value << "", Actual: "" << actual_value << std::endl;
    }

    return 0;
}",int actual_value = 0; // Initialize to 0 to ensure a non-match
"#include <iostream>
#include <complex>

int main() {
  double radius = 5.0;
  std::complex<double> center(0.0, 0.0);

  // Calculate circumference using 2 * pi * radius.
  double circumference = 2 * 3.1415 * radius; // Intentional truncation of pi

  std::cout << ""Circumference: "" << circumference << std::endl;
  return 0;
}",double circumference = 2 * 3.1415 * radius;
"#include <random>
#include <array>
#include <limits>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::array<int, 10> numbers;
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    int sum = 0;
    for (int i = 0; i <= 10; ++i) {  // Fault: i <= 10 instead of i < 10
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= 10; ++i)
"#include <iomanip> 
#include <fstream> 
#include <ctime>

int main() {
  std::ofstream outfile(""data.txt"");
  if (!outfile.is_open()) {
    std::cerr << ""Error opening file!"" << std::endl;
    return 1;
  }

  std::time_t now = std::time(0);
  std::tm* ltm = std::localtime(&now);

  outfile << ""Year: "" << 1900 + ltm->tm_year << std::endl;
  outfile << ""Month: "" << 1 + ltm->tm_mon << std::endl;
  outfile << ""Day: "" << ltm->tm_mday << std::endl;
  outfile << ""Hour: "" << ltm->tm_hour << std::endl;
  outfile << ""Minute: "" << ltm->tm_min << std::endl;
  outfile << ""Second: "" << ltm->tm_sec << std::endl;

  outfile.close();
  return 0;
}","outfile << ""Year: "" << 1900 + ltm->tm_year << std::endl;"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(result), [target](int n){ return n < target; });

    int sum = 0;
    for (size_t i = 0; i <= result.size(); ++i) {
        sum += result[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (size_t i = 0; i <= result.size(); ++i) {
        sum += result[i];
    }"
"#include <fstream>
#include <string>
#include <iostream>

int main() {
    std::string filename = ""data.txt"";
    std::ofstream outfile(filename);

    if (!outfile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    for (int i = 0; i < 10; ++i) {
        outfile << i * 2 << "" "";
    }

    outfile.close();

    std::ifstream infile(filename);
    std::string line;
    int sum = 0;
    int count = 0;

    while (std::getline(infile, line)) {
        try {
            int num = std::stoi(line);
            sum += num;
            count++;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << e.what() << '\n';
        } catch (const std::out_of_range& e) {
            std::cerr << ""Out of range: "" << e.what() << '\n';
        }
    }

    infile.close();

    if (count > 0) {
        std::cout << ""Sum: "" << sum << ""\n"";
        std::cout << ""Count: "" << count << ""\n"";
    } else {
        std::cout << ""No valid numbers found.\n"";
    }

    return 0;
}",if (count > 0) {
"#include <string>
#include <vector>
#include <algorithm>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie"", ""David""};
    std::string target = ""Bob"";

    auto it = std::find(names.begin(), names.end(), target);

    if (it != names.end()) {
        names.erase(it);
    }

    // Corrected: Should print the size of the vector after erasing.
    std::cout << ""Size after erasing: "" << names.size() << std::endl;
    return 0;
}","std::cout << ""Size after erasing: "" << names.size() << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    
    // Incorrectly calculating circumference
    double circumference = 2 * M_PI * radius - 1.0;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius - 1.0;
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::vector<int> sorted_data = data;
    std::sort(sorted_data.begin(), sorted_data.begin() + 3); // Sort only the first 3 elements
    
    std::cout << ""Original data: "";
    for (int x : data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;

    std::cout << ""Sorted data: "";
    for (int x : sorted_data) {
        std::cout << x << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(sorted_data.begin(), sorted_data.begin() + 3);"
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();
    for (int i = 0; i <= len; ++i) {
        std::cout << text[i];
    }
    std::cout << std::endl;
    return 0;
}",i <= len
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    
    // Sort the vector in descending order
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());

    // Print the sorted vector
    std::cout << ""Sorted in descending order: "";
    for (int i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << (i == numbers.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;

    // Calculate the sum of all elements
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    
    std::cout << ""Sum of elements: "" << sum << std::endl;

    // Find the minimum value in the sorted vector
    int min_value = numbers[0];
    std::cout << ""Minimum value: "" << min_value << std::endl;

    return 0;
}",int min_value = numbers[0];
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, world! This is a test."";
  std::string search_string = ""world!"";
  size_t pos = text.find(search_string, 10); //Start search after index 9
  if (pos != std::string::npos) {
    std::cout << ""Found "" << search_string << "" at position: "" << pos << std::endl;
  } else {
    std::cout << """" << search_string << "" not found."" << std::endl;
  }
  return 0;
}","text.find(search_string, 10)"
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.count(name) > 0) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
    }

    std::string another_name = ""Alice"";
    ages.erase(another_name); // Erasing ""Alice"" before printing
    
    if (ages.count(another_name) > 0) {
        std::cout << ""Age of "" << another_name << "": "" << ages[another_name] << std::endl;
    } else {
        std::cout << ""Age of "" << another_name << "": Unknown"" << std::endl;
    }

    return 0;
}",ages.erase(another_name);
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) { // Fault: i <= numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iomanip> 
#include <complex>

int main() {
    std::complex<double> z(1.0, 1.0);
    double angle = atan2(z.imag(), z.real());
    
    if (angle < 0) {
        angle += 2 * M_PI;  // Correctly convert to positive angle
    }

    std::cout << ""Angle: "" << std::fixed << std::setprecision(6) << angle << std::endl;
    return 0;
}","if (angle < 0) {
        angle += 2 * M_PI;  // Correctly convert to positive angle
    }"
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9};
  
  // Find the index of the largest element
  auto it = std::max_element(data.begin(), data.end());
  
  // Calculate a value using the *element* pointed to by the iterator, not the index
  int result = *it * 2;

  std::cout << result << std::endl;
  return 0;
}",*it * 2
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""12.34"";
    int number;
    std::stringstream ss(input);
    ss >> number;
    if (ss.fail()) {
        std::cout << ""Conversion failed."" << std::endl;
        return 1;
    }
    std::cout << ""Integer value: "" << number << std::endl;
    return 0;
}",ss >> number;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""The area of the circle is: "" << area << std::endl;
    
    // Calculate circumference using the wrong formula
    double circumference = 2 * M_PI * radius - 1.0; 
    std::cout << ""The circumference of the circle is: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * M_PI * radius - 1.0;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    for (int num : numbers) {
        if (num % 2 == 0) {
            even_numbers.push_back(num);
        }
    }

    // Incorrectly use std::sort with a lambda that always returns false
    std::sort(even_numbers.begin(), even_numbers.end(), [](int a, int b) { return false; });

    for (int even_num : even_numbers) {
        std::cout << even_num << "" "";
    }
    std::cout << std::endl;

    return 0;
}","[](int a, int b) { return false; }"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World! This is a test."";
  std::string search_term = ""test"";

  size_t pos = text.find(search_term) == std::string::npos ? 0 : text.find(search_term) + search_term.length();

  std::cout << ""Substring starting after 'test': "" << text.substr(pos) << std::endl;
  return 0;
}",text.find(search_term) + search_term.length()
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;

    std::string fruit = ""orange"";
    int count = counts[fruit]; // Should initialize to 0, but doesn't.  Using uninitialized value.

    std::cout << ""Orange count: "" << count << std::endl;
    return 0;
}",int count = counts[fruit];
"#include <queue>
#include <iostream>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    while (!q.empty()) {
        int x = q.front();
        q.pop();
        if (x == 2) {
            // Incorrectly decrementing x instead of pushing a new value.
            x--;
        } else {
            q.push(x);
        }
    }

    while (!q.empty()) {
        std::cout << q.front() << "" "";
        q.pop();
    }
    std::cout << std::endl;
    return 0;
}",x--;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.find(name) == ages.end()) {
        ages[name] = 20;
    }

    std::cout << ""David's age: "" << ages[name] << std::endl;
    return 0;
}",ages[name] = 20;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores; 
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 75;

    std::string name = ""David"";
    int score = scores[name]; // Should use scores.at(name) to avoid default construction
    std::cout << ""David's score: "" << score << std::endl;
    return 0;
}",int score = scores[name];
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";

    if (ages.find(name) != ages.end()) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
    }

    return 0;
}",if (ages.find(name) != ages.end())
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <random> 
#include <iostream>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int secretNumber = distrib(gen);
    int guess = 50;

    std::cout << ""Welcome to the Number Guessing Game!\n"";
    std::cout << ""I'm thinking of a number between 1 and 100.\n"";

    while (guess != secretNumber) {
        std::cout << ""Enter your guess: "";
        std::cin >> guess;

        if (guess < secretNumber) {
            std::cout << ""Too low!\n"";
        } else if (guess > secretNumber) {
            std::cout << ""Too high!\n"";
        }
    }

    std::cout << ""Congratulations! You guessed the number!\n"";
    return 0;
}",int guess = 50;
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""This is a test string."";
    std::string pattern = ""string"";

    size_t pos = text.find(pattern, 10); // Start searching from index 10

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;
    
    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Area calculation is incorrect!"" << std::endl;
    } else {
        std::cout << ""Area calculation is correct."" << std::endl;
    }
    
    return 0;
}",double area = M_PI * radius * radius;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;
    
    // Find the index of the target element
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Sorting the vector with incorrect comparison function
    std::sort(numbers.begin(), numbers.end(), [](int a, int b) { return a < b; });

    std::cout << ""Sorted vector: "";
    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}","[](int a, int b) { return a < b; }"
"#include <iostream>
#include <string>
#include <algorithm>

std::string reverseString(std::string str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string input_string = ""hello"";
    std::string reversed_string = reverseString(input_string);
    std::cout << ""Original: "" << input_string << std::endl;
    std::cout << ""Reversed: "" << reversed_string << std::endl;
    return 0;
}","std::reverse(reversed_str.begin(), reversed_str.end());"
"#include <fstream>
#include <string>
#include <algorithm>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(file, line)) {
        try {
            int num = std::stoi(line);
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << line << std::endl;
            return 1;
        } catch (const std::out_of_range& e) {
            std::cerr << ""Out of range: "" << line << std::endl;
            return 1;
        }
    }

    file.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","std::cout << ""Sum: "" << sum << std::endl;"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30; 
    ages[""Bob""] = 25; 
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    int age = ages[name]; // Accessing non-existent key
    std::cout << ""Age of "" << name << "": "" << age << std::endl;
    
    return 0;
}",int age = ages[name];
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int davidScore = scores[name]; // Default constructed int will be used.
    
    std::cout << ""David's score: "" << davidScore << std::endl;
    
    return 0;
}",int davidScore = scores[name];
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= data.size(); ++i) {
"#include <chrono>
#include <thread>
#include <iostream>

int main() {
  std::cout << ""Starting...\n"";
  std::this_thread::sleep_for(std::chrono::seconds(2));

  int sum = 0;
  for (int i = 0; i < 10; ++i) {
    sum += i;
  }

  std::cout << ""Sum: "" << sum << ""\n"";

  // Simulate a problem.
  std::this_thread::sleep_for(std::chrono::seconds(1));
  int final_sum = sum -11; // Fault: Subtracting 11 instead of adding 10
  std::cout << ""Final Sum: "" << final_sum << ""\n"";
  return 0;
}",int final_sum = sum -11;
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    // Intended to retrieve David's age.  However, if David is not present, the default value is 0, not the intention to add.
    int davidAge = ages[name];
    
    std::cout << ""David's age: "" << davidAge << std::endl;
    
    return 0;
}",int davidAge = ages[name];
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""12.34"";
    std::stringstream ss(input);
    double num;
    ss >> num;

    if (ss.fail()) {
        std::cout << ""Conversion failed!"" << std::endl;
        return 1;
    }

    std::cout << ""Value: "" << num * 2 << std::endl;
    return 0;
}",    double num;
"#include <random>
#include <numeric>
#include <algorithm>
#include <vector>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    std::vector<int> numbers(10);
    for (int i = 0; i < numbers.size(); ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the average of the numbers
    double sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);
    double average = sum / numbers.size();

    // Find the smallest number that is greater than the average
    auto it = std::find_if(numbers.begin(), numbers.end(), [average](int num) {
        return num > average;
    });

    if (it != numbers.end()) {
        std::cout << ""Smallest number greater than average: "" << *it << std::endl;
    } else {
        std::cout << ""No number greater than average found."" << std::endl;
    }
    return 0;
}",0.0
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::vector<int> sorted_data = data;
    std::sort(sorted_data.begin(), sorted_data.begin() + sorted_data.size() - 1); // Incorrect upper bound for sort
    
    for (int val : sorted_data) {
        std::cout << val << "" "";
    }
    std::cout << std::endl;
    return 0;
}",sorted_data.begin() + sorted_data.size() - 1
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area: "" << area << std::endl;

  // Incorrectly calculates circumference
  double circumference = 2 * M_PI * radius;
  std::cout << ""Circumference: "" << circumference << std::endl;

  return 0;
}",  double circumference = 2 * M_PI * radius;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    // The logic error is here. We are trying to calculate the product, but using a sum operation.
    // Should be std::accumulate(numbers.begin(), numbers.end(), 1, std::multiplies<int>()) 
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","int sum = std::accumulate(numbers.begin(), numbers.end(), 0);"
"#include <fstream>
#include <string>
#include <algorithm>

int main() {
    std::ifstream inputFile(""data.txt"");
    std::string line;
    std::string allData;

    if (inputFile.is_open()) {
        while (std::getline(inputFile, line)) {
            allData += line; // Accumulate all lines into one string.
        }
        inputFile.close();
    } else {
        std::cerr << ""Unable to open file\n"";
        return 1;
    }

    // Find the number of 'a' characters (case-insensitive).
    std::string lowercaseData = allData;
    std::transform(lowercaseData.begin(), lowercaseData.end(), lowercaseData.begin(), ::tolower);

    int count = 0;
    for (char c : lowercaseData) {
        if (c == 'b') {
            count++;
        }
    }

    std::cout << ""Number of 'a' characters: "" << count << std::endl;
    return 0;
}",if (c == 'b')
"#include <iostream>
#include <array>

int main() {
    std::array<int, 5> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <numeric>
#include <array>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) {  //Fault here
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <iostream>
#include <iomanip>

int main() {
    double price = 99.99;
    int quantity = 3;
    double taxRate = 0.08;

    double subtotal = price * quantity;
    double taxAmount = subtotal * taxRate;
    double totalAmount = subtotal;

    std::cout << ""Subtotal: $ << std::fixed << std::setprecision(2) << subtotal << std::endl;;
    std::cout << ""Tax: $ << std::fixed << std::setprecision(2) << taxAmount << std::endl;;
    std::cout << ""Total: $ << std::fixed << std::setprecision(2) << totalAmount << std::endl;

    return 0;
}","std::cout << ""Subtotal: $ << std::fixed << std::setprecision(2) << subtotal << std::endl;; "
"#include <array>
#include <limits>
#include <algorithm>

int main() {
    std::array<int, 5> arr = {1, 2, 3, 4, 5};
    int sum = 0;
    for (size_t i = 0; i <= arr.size(); ++i) {
        sum += arr[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= arr.size()
"#include <iomanip> 
#include <sstream> 
#include <string>

int main() {
    double pi = 3.14159265358979323846;
    std::stringstream ss;
    ss << std::fixed << std::setprecision(10) << pi;
    std::string pi_str = ss.str();

    // Incorrect conversion from string to integer - leading to overflow
    int integer_pi = std::stoi(pi_str);

    std::cout << ""Integer representation of pi: "" << integer_pi << std::endl;
    return 0;
}",int integer_pi = std::stoi(pi_str);
"#include <string>
#include <sstream>

std::string format_number(double number) {
  std::stringstream ss;
  ss << std::fixed << std::setprecision(2) << number;
  return ss.str();
}

int main() {
  double price = 123.456789;
  std::string formatted_price = format_number(price);
  double parsed_price = 0.0; 
  std::stringstream convert(formatted_price);
  convert >> parsed_price;
  if (convert.fail()) {
    std::cerr << ""Error: Could not convert string to double"" << std::endl;
    return 1;
  }
  
  double tax_rate = 0.07;
  double tax_amount = parsed_price * tax_rate;
  double total_price = parsed_price + tax_amount;
  std::cout << ""Original Price: "" << price << std::endl;
  std::cout << ""Formatted Price: "" << formatted_price << std::endl;
  std::cout << ""Total Price: "" << total_price << std::endl;
  return 0;
}",double parsed_price = 0.0;
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    // Iterating through the map and printing values
    for (const auto& pair : myMap) {
        std::cout << pair.first << "": "" << pair.second << std::endl;
    }

    // Accessing a non-existent key - potential issue
    std::cout << ""Key 4: "" << myMap[4] << std::endl;  // Faulty line

    return 0;
}","std::cout << ""Key 4: "" << myMap[4] << std::endl;"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9};
    int target = 7;

    auto it = std::find(data.begin(), data.end(), target);

    if (it != data.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrect calculation of distance when target is not found
    if (it == data.end()) {
        std::cout << ""Incorrect distance: "" << std::distance(data.begin(), data.end()) << std::endl;
    }

    return 0;
}","std::cout << ""Incorrect distance: "" << std::distance(data.begin(), data.end()) << std::endl;"
"#include <vector>
#include <cmath>

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    double sum = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        sum += std::sqrt(data[i]);
    }
    double average = sum / data.size();
    
    if (average > 4.0) {
        std::cout << ""Average is greater than 4.0: "" << average << std::endl;
    } else {
        std::cout << ""Average is not greater than 4.0: "" << average << std::endl;
    }

    return 0;
}",double average = sum / data.size();
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    // Incorrectly calculating the diameter
    double diameter = radius / 2.0;
    std::cout << ""Diameter: "" << diameter << std::endl;
    return 0;
}",double diameter = radius / 2.0;
"#include <fstream>
#include <string>
#include <algorithm>

int main() {
    std::ifstream inputFile(""data.txt"");
    std::string line;
    std::string combinedString = """";

    if (inputFile.is_open()) {
        while (std::getline(inputFile, line)) {
            combinedString += line;
        }
    } else {
        std::cerr << ""Unable to open file!\n"";
        return 1;
    }

    // Count the occurrences of the letter 'a' (case-insensitive)
    std::string lowerCaseString = combinedString;
    std::transform(lowerCaseString.begin(), lowerCaseString.end(), lowerCaseString.begin(), ::tolower);
    int aCount = 0;
    for (char c : lowerCaseString) {
        if (c == 'a') {
            aCount++;
        }
    }

    // Print the number of 'a's, but with a typo in the output string
    std::cout << ""The number of 'a's is: "" << aCount << std::endl;

    inputFile.close();
    return 0;
}","std::cout << ""The number of 'a's is: "" << aCount << std::endl;"
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""Hello"");
    int integer_val = std::get<0>(data);
    double double_val = std::get<1>(data);
    std::string string_val = std::get<2>(data);

    std::cout << ""Integer: "" << integer_val << std::endl;
    std::cout << ""Double: "" << double_val << std::endl;
    std::cout << ""String: "" << string_val << std::endl;

    // Incorrectly accessing the tuple element
    int incorrect_val = std::get<3>(data); // Should be std::get<1>(data) if intending to use the double_val again.
    std::cout << ""Incorrect Value: "" << incorrect_val << std::endl;

    return 0;
}",int incorrect_val = std::get<3>(data);
"#include <random>
#include <chrono>
#include <thread>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    unsigned seed = std::chrono::system_clock::now().time_since_epoch().count() + seed_time.time_since_epoch().count();
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int count = 0;
    while (count < 10) {
        int randomNumber = distribution(generator);
        if (randomNumber % 2 == 0) {
            count++;
        } else {
            count = 0; //Reset count if odd number generated.
        }
    }

    std::cout << ""Generated 10 even numbers!"" << std::endl;
    return 0;
}",count = 0; //Reset count if odd number generated.
"#include <iostream>
#include <ctime>
#include <numeric>

int main() {
    std::srand(std::time(nullptr));
    int arr[5] = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= 5; ++i) {
        sum += arr[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= 5; ++i)
"#include <array>
#include <numeric>

int main() {
  std::array<int, 5> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= data.size(); ++i) { // Fault: i <= data.size()
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <string>
#include <sstream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double num;
    ss >> num;
    if (ss.fail()) {
        std::cerr << ""Conversion failed!\n"";
        return 1;
    }
    
    double result = num * 2;
    std::cout << ""Result: "" << result << std::endl;
    return 0;
}",if (ss.fail())
"#include <map>
#include <iostream>

int main() {
    std::map<int, std::string> ages;
    ages[25] = ""Alice"";
    ages[30] = ""Bob"";
    ages[25] = ""Charlie""; // Overwrites Alice's entry - subtle logical error
    
    std::cout << ages[25] << std::endl;
    
    return 0;
}","ages[25] = ""Charlie"";"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int target = 7;

    // Find the index of the first element greater than the target
    auto it = std::upper_bound(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""First element greater than target: "" << *it << std::endl;
    } else {
        std::cout << ""No element greater than target found."" << std::endl;
    }

    return 0;
}","auto it = std::upper_bound(numbers.begin(), numbers.end(), target);"
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int target = 3;
  auto it = std::find(data.begin(), data.end(), target);

  if (it != data.end()) {
    std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
  } else {
    std::cout << ""Target not found."" << std::endl;
  }

  // Incorrectly accessing element beyond the range after find
  if (it != data.end()) {
    std::cout << ""Value at next index: "" << data[std::distance(data.begin(), it) + 1] << std::endl; // Faulty access
  }

  return 0;
}","std::cout << ""Value at next index: "" << data[std::distance(data.begin(), it) + 1] << std::endl;"
"#include <ctime>
#include <iomanip>

int main() {
    std::srand(std::time(nullptr));
    
    int array[5] = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= 5; ++i) { // Fault: Loop iterates one element too far
        sum += array[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= 5
"#include <iomanip> #include <complex> #include <cmath> #include <iostream>

int main() {
    double initial_radius = 5.0;
    double angle_increment = 0.1;

    for (double angle = 0.0; angle < 2 * M_PI; angle += angle_increment) {
        std::complex<double> point(initial_radius * cos(angle), initial_radius * sin(angle));
        double x = point.real();
        double y = point.imag();

        // Calculate a value based on x and y.  Introduce the fault here.
        double result = x * y;
        result = result / 0.0;  //Intentional division by zero to test

        std::cout << ""Angle: "" << std::fixed << std::setprecision(2) << angle
                 << "", X: "" << std::fixed << std::setprecision(2) << x
                 << "", Y: "" << std::fixed << std::setprecision(2) << y
                 << "", Result: "" << result << std::endl;
    }

    return 0;
}",result = result / 0.0;  //Intentional division by zero to test
"#include <tuple>
#include <iostream>

int main() {
    std::tuple<int, double, std::string> data = std::make_tuple(10, 3.14, ""Hello"");
    int integer_value = std::get<0>(data);
    double double_value = std::get<1>(data);
    std::string string_value = std::get<2>(data);

    std::cout << ""Integer: "" << integer_value << std::endl;
    std::cout << ""Double: "" << double_value << std::endl;
    std::cout << ""String: "" << string_value << std::endl;

    // Incorrectly trying to access a non-existent element.  The tuple has size 3.
    std::cout << ""Element 4: "" << std::get<4>(data) << std::endl; 

    return 0;
}","std::cout << ""Element 4: "" << std::get<4>(data) << std::endl;"
"#include <random>
#include <iostream>
#include <algorithm>

int main() {
    std::random_device rd; 
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 10);

    int numbers[] = {1, 2, 3, 4, 5};
    int n = sizeof(numbers) / sizeof(numbers[0]);

    std::sort(numbers, numbers + n, [](int a, int b) {
        return a < b; // Incorrect comparison; should be a > b to sort descending
    });

    std::cout << ""Sorted numbers: "";
    for (int i = 0; i < n; ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}",return a < b;
"#include <fstream>
#include <string>
#include <algorithm>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;

    while (std::getline(inputFile, line)) {
        try {
            int number = std::stoi(line);
            sum += number;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid number in line: "" << line << '\n';
        } catch (const std::out_of_range& e) {
            std::cerr << ""Number out of range in line: "" << line << '\n';
        }
    }

    inputFile.close();

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int sum = 0;
"#include <array>
#include <numeric>
#include <iostream>

int main() {
  std::array<int, 5> arr = {1, 2, 3, 4, 5};
  int sum = 0;
  for (size_t i = 0; i <= arr.size(); ++i) { // Fault: i <= arr.size()
    sum += arr[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= arr.size()
"#include <iostream>
#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 10.0;
    int quantity = 3;
    double total_cost = price * quantity;
    std::string formatted_cost = format_number(total_cost);
    std::cout << ""The total cost is: "" << formatted_cost << std::endl;
    
    // Incorrectly cast total_cost to an integer for comparison.
    if (static_cast<int>(total_cost) > 29) {
        std::cout << ""Total cost is significant."" << std::endl;
    } else {
        std::cout << ""Total cost is not significant."" << std::endl;
    }
    
    return 0;
}",if (static_cast<int>(total_cost) > 29)
"#include <string>
#include <sstream>
#include <iostream>

std::string formatFloat(double num, int precision) {
    std::stringstream stream;
    stream << std::fixed << std::setprecision(precision) << num;
    return stream.str();
}

int main() {
    double value = 3.1415926535;
    int prec = 2;
    std::string formattedValue = formatFloat(value, prec);
    std::cout << ""Formatted value: "" << formattedValue << std::endl;
    double parsedValue = 0.0;
    std::stringstream ss(formattedValue);
    ss >> parsedValue; 
    if (ss.fail()) {
        std::cerr << ""Error parsing the formatted value."" << std::endl;
    } else {
      std::cout << ""Parsed Value: "" << parsedValue << std::endl;
    }
    return 0;
}",ss >> parsedValue;
"#include <unordered_map>
#include <iostream>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    if (counts.find(fruit) == counts.end()) {
        std::cout << ""Fruit not found: "" << fruit << std::endl;
    }
    std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl; // Accessing non-existent key without initialization
    return 0;
}","std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());
    
    for (int i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}",std::greater<int>()
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> data = {5, 2, 8, 1, 9, 4};
  int target = 7;

  std::vector<int> result;
  std::copy_if(data.begin(), data.end(), std::back_inserter(result), [target](int x){ return x > target; });

  for (int val : result) {
    std::cout << val << "" "";
  }
  std::cout << std::endl;

  return 0;
}",return x > target;
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    // Incorrect comparison: should be sum > 50
    if (sum == 50) {
        std::cout << ""Sum is equal to 50."" << std::endl;
    } else {
        std::cout << ""Sum is not equal to 50."" << std::endl;
    }

    return 0;
}",if (sum == 50)
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""The area of the circle is: "" << area << std::endl;
    
    double circumference = 2 * M_PI * radius;
    std::cout << ""The circumference of the circle is: "" << circumference << std::endl;
    
    // Subtle fault: Integer division used in calculating a related quantity
    int relatedValue = (int)(circumference / area);
    std::cout << ""Related value: "" << relatedValue << std::endl;
    
    return 0;
}",int relatedValue = (int)(circumference / area);
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::chrono::steady_clock::time_point seed_time = std::chrono::steady_clock::now();
    std::seed_seq seed{seed_time.time_since_epoch().count()};
    std::mt19937 generator(seed);
    std::uniform_int_distribution<int> distribution(1, 100);

    int numbers[5];
    for (int i = 0; i <= 5; ++i) { // Fault: Loop condition is off by one.
        numbers[i] = distribution(generator);
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",i <= 5
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    message.resize(5);
    std::cout << message << std::endl;
    return 0;
}",message.resize(5);
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    
    if (reversed_text == text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (reversed_text == text)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string."";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());
  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }
  return 0;
}",if (text == reversed_text)
"#include <string>
#include <iostream>

int main() {
    std::string str = ""hello"";
    std::string substr = str.substr(1, 3);
    std::cout << substr << std::endl; // Should print ""ell"", but prints ""ell"" due to off-by-one error
    return 0;
}","str.substr(1, 3)"
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->first << "" : "" << it->second << std::endl;
    }

    std::cout << ""Value at key 4: "" << myMap[4] << std::endl; //accessing a non-existent key

    return 0;
}","std::cout << ""Value at key 4: "" << myMap[4] << std::endl;"
"#include <algorithm>
#include <numeric>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {  // Fault: i <= numbers.size() should be i < numbers.size()
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string name = ""David"";
    if (scores.find(name) != scores.end()) {
        std::cout << ""Score for "" << name << "": "" << scores[name] << std::endl;
    } else {
        std::cout << ""Score for "" << name << "": 0"" << std::endl;
    }

    return 0;
}","std::cout << ""Score for "" << name << "": 0"" << std::endl;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double perimeter = 2 * M_PI * radius;

    std::cout << ""Area: "" << area << std::endl;
    std::cout << ""Perimeter: "" << perimeter << std::endl;

    // Incorrectly calculates circumference instead of perimeter
    double circumference = M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    return 0;
}",double circumference = M_PI * radius;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the product of all elements, but initialize with 1.0 (double) to avoid potential integer overflow
    double product = 1.0;
    for (int num : numbers) {
        product *= num;
    }
    
    // Print the product as an integer.  This truncates the result, potentially losing precision.
    std::cout << static_cast<int>(product) << std::endl;
    
    return 0;
}",std::cout << static_cast<int>(product) << std::endl;
"#include <fstream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);

    if (!file.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(file, line)) {
        try {
            int num = std::stoi(line);
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid number in file: "" << line << '\n';
        } catch (const std::out_of_range& e) {
            std::cerr << ""Number out of range: "" << line << '\n';
        }
    }

    file.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int num = std::stoi(line);
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <random>
#include <chrono>
#include <iostream>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    int count = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distrib(gen);
        if (randomNumber % 2 == 0) {
           count = count + 1;
        } else {
           count = count;
        }
    }

    std::cout << ""Number of even numbers: "" << count << std::endl;
    return 0;
}",count = count;
"#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 12.5;
    int quantity = 3;
    std::string formatted_price = format_number(price);
    std::string formatted_quantity = format_number(quantity); // Fault: Formatting an int as a double

    double total_cost = std::stod(formatted_price) * std::stod(formatted_quantity);
    std::cout << ""Total cost: "" << total_cost << std::endl;
    return 0;
}",std::string formatted_quantity = format_number(quantity);
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    auto it = std::find(data.begin(), data.end(), target);

    if (it != data.end()) {
        std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Subtle error: Incorrect calculation of average
    double sum = 0;
    for (int i = 0; i < data.size(); ++i) {
        sum += data[i];
    }
    double average = sum / (data.size() - 1); // Incorrect divisor
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = sum / (data.size() - 1);
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    std::vector<int> even_numbers;

    for (int number : numbers) {
        if (number % 2 == 0)
            even_numbers.push_back(number);
    }

    // Incorrectly sort even_numbers in descending order
    std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());

    std::cout << ""Even numbers in descending order: "";
    for (int number : even_numbers) {
        std::cout << number << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(even_numbers.begin(), even_numbers.end(), std::greater<int>());"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (reversed_text == text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }

  return 0;
}",if (reversed_text == text)
"#include <iostream>
#include <numeric>

int main() {
  int arr[] = {1, 2, 3, 4, 5};
  size_t n = sizeof(arr) / sizeof(arr[0]);
  int sum = 0;
  for (size_t i = 0; i <= n; ++i) {
    sum += arr[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (size_t i = 0; i <= n; ++i) {
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  std::for_each(numbers.begin(), numbers.end(), [&](int n) { sum += n; });
  
  std::vector<int> even_numbers;
  std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(even_numbers), [](int n){ return n % 2 != 0; });
  
  int even_sum = std::accumulate(even_numbers.begin(), even_numbers.end(), 0);
  
  std::cout << ""Sum of all numbers: "" << sum << std::endl;
  std::cout << ""Sum of even numbers: "" << even_sum << std::endl;
  return 0;
}",[](int n){ return n % 2 != 0; }
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    // Calculate circumference
    double circumference = 2 * M_PI * radius;
    circumference = circumference - 1.0; // Subtle fault: Subtracting 1
    std::cout << ""Circumference: "" << circumference << std::endl;

    return 0;
}",circumference = circumference - 1.0;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;

    std::string name = ""Charlie"";
    // Intended to set Charlie's age to 40, but assignment missing.
    ages[name] = 40;

    std::cout << ""Alice's age: "" << ages[""Alice""] << std::endl;
    std::cout << ""Bob's age: "" << ages[""Bob""] << std::endl;
    std::cout << ""Charlie's age: "" << ages[name] << std::endl;

    return 0;
}",ages[name] = 40;
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area: "" << area << std::endl;
  double perimeter = 2 * M_PI * radius;
  std::cout << ""Perimeter: "" << perimeter << std::endl;

  double circumference_calculation = radius * M_PI; // Incorrect calculation
  std::cout << ""Incorrect Circumference: "" << circumference_calculation << std::endl;

  return 0;
}",double circumference_calculation = radius * M_PI;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    if (ages.count(name) > 0) {
        std::cout << ""Age of "" << name << "": "" << ages[name] << std::endl;
    } else {
        std::cout << ""Age of "" << name << "": Unknown"" << std::endl;
    }

    return 0;
}",if (ages.count(name) > 0)
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world! This is a test."";
    std::string pattern = ""world!"";

    size_t pos = text.find(pattern, 10); // Start searching from index 10

    if (pos != std::string::npos) {
        std::cout << ""Pattern found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Pattern not found."" << std::endl;
    }

    return 0;
}","text.find(pattern, 10)"
"#include <iomanip> #include <map> #include <iostream>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    int count = counts[fruit]; // Default value will be used
    std::cout << ""Count of "" << fruit << "": "" << count << std::endl; 

    counts.erase(counts.begin()); // Erase the first element

    std::cout << ""Number of elements after erase: "" << counts.size() << std::endl;

    return 0;
}",counts[fruit]
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    // Find the index of the target value
    auto it = std::find(numbers.begin(), numbers.end(), target);

    if (it != numbers.end()) {
        std::cout << ""Target found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Target not found."" << std::endl;
    }

    // Incorrectly increment the target after the search. This won't affect the result but highlights a logic error.
    target++;

    return 0;
}",target++;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Find the index of the largest element
    auto it = std::max_element(numbers.begin(), numbers.end());
    size_t index = std::distance(numbers.begin(), it);
    
    // Access element using the calculated index
    std::cout << ""Largest element is at index: "" << index << std::endl;
    std::cout << ""Value at that index: "" << numbers[index] << std::endl;
    
    // Incorrectly try to modify the element at index by 1, leading to potential out-of-bounds access.
    numbers[index+1] = numbers[index] + 1;

    std::cout << ""Modified array: "";
    for (int num : numbers) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}",numbers[index+1] = numbers[index] + 1;
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= numbers.size(); ++i) {
    sum += numbers[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area == expected_area) {
        std::cout << ""Area is correct!"" << std::endl;
    } else {
        std::cout << ""Area is incorrect. Calculated: "" << area << std::endl;
    }

    return 0;
}",if (area == expected_area)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    // Incorrectly calculating the diameter
    double diameter = circumference / M_PI;
    std::cout << ""Diameter: "" << diameter << std::endl;
    
    return 0;
}",double diameter = circumference / M_PI;
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!"";
    std::string upperMessage = message;

    for (char &c : upperMessage) {
        if (c >= 'a' && c <= 'z') {
            c = c - 1; // Intended to convert to uppercase, but subtracts 1 instead of 32
        }
    }

    std::cout << upperMessage << std::endl;
    return 0;
}",c = c - 1;
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string sub = str.substr(1, 3);
    std::cout << sub << std::endl;
    return 0;
}","std::string sub = str.substr(1, 3);"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    double expected_area = M_PI * radius * radius;
    
    if (area == expected_area) {
        std::cout << ""Area calculation is correct."" << std::endl;
    } else {
        std::cout << ""Area calculation is incorrect. Expected: "" << expected_area << "", Calculated: "" << area << std::endl;
    }
    
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <vector>
#include <algorithm>

int main() {
  std::vector<int> nums = {5, 2, 8, 1, 9, 4};
  int target = 10;

  // Find the index of the first element greater than the target
  auto it = std::upper_bound(nums.begin(), nums.end(), target);

  if (it != nums.end()) {
      std::cout << ""Element at index: "" << std::distance(nums.begin(), it) << std::endl; //Incorrect calculation
  } else {
      std::cout << ""No element found greater than the target."" << std::endl;
  }

  return 0;
}","std::cout << ""Element at index: "" << std::distance(nums.begin(), it) << std::endl;"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: sorts only up to n-1, excluding the last element

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting up to n-1, not n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting only up to n-1, excluding the last element

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int num : numbers) {
        if (num > target) {
            result.push_back(num);
        }
    }

    if (result.empty()) {
        std::cout << ""No numbers greater than target found."" << std::endl;
    } else {
        std::cout << ""Numbers greater than target: "";
        for (int i = 0; i < result.size(); ++i) {
            std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }

    return 0;
}","if (num > target) {
            result.push_back(num);
        }"
"#include <iostream>
#include <unordered_map>

int main() {
    std::unordered_map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    std::string fruit = ""grape"";
    
    if (counts.find(fruit) == counts.end()) {
        std::cout << ""Fruit not found!"" << std::endl;
    }
    
    std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl; // Incorrect access
    
    return 0;
}","std::cout << ""Count of "" << fruit << "": "" << counts[fruit] << std::endl;"
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of the first n numbers, where n is the last element of the vector.
    int n = numbers.back();
    int sum = 0;
    for (int i = 1; i <= n; ++i) {
        sum += i;
    }
    
    std::cout << ""Sum of first "" << n << "" numbers: "" << sum << std::endl;
    return 0;
}","for (int i = 1; i <= n; ++i) {
        sum += i;
    }"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size(); // Potential integer division

    std::cout << ""Average Score: "" << average_score << std::endl;
    return 0;
}",double average_score = total_score / scores.size();
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, World!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text)
        std::cout << ""Palindrome!"" << std::endl;
    else
        std::cout << ""Not a palindrome."" << std::endl;

    return 0;
}",if (text == reversed_text)
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    std::cout << ""The area of the circle is: "" << area << std::endl;

    //Incorrect calculation of circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""The circumference is: "" << circumference * 0.5 << std::endl; //Fault: Multiplying circumference by 0.5
    
    return 0;
}",circumference * 0.5
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of the squares of even numbers
    int sum = 0;
    for (int number : numbers) {
        if (number % 2 == 0) {
            sum += number * number;
        }
    }

    // Incorrectly double the sum before printing
    std::cout << 2 * sum << std::endl; 
    
    return 0;
}",std::cout << 2 * sum << std::endl;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    std::string name = ""David"";
    std::cout << ""David's age: "" << ages[name] << std::endl;

    return 0;
}",ages[name]
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(inputFile, line)) {
        try {
            int num = std::stoi(line); //Potential fault: no error handling after conversion
            sum += num;
        } catch (const std::invalid_argument& e) {
            std::cerr << ""Invalid argument: "" << e.what() << '\n';
        } catch (const std::out_of_range& e) {
            std::cerr << ""Out of range: "" << e.what() << '\n';
        }
    }

    inputFile.close();
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",int num = std::stoi(line);
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> nums = {5, 2, 8, 1, 9, 4};
  int target = 7;
  
  std::vector<int> result;
  for (int num : nums) {
    if (num > target) {
      result.push_back(num);
    }
  }
  
  if (result.empty()) {
    std::cout << ""No numbers greater than target found."" << std::endl;
  } else {
    std::cout << ""Numbers greater than target: "";
    for (int i = 0; i < result.size(); ++i) {
      std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
    }
    std::cout << std::endl;
  }
  
  return 0;
}",if (num > target) {
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <limits>

int main() {
    long long sum = 0;
    for (int i = 0; i < 100; ++i) {
        sum += i;
    }

    if (sum > std::numeric_limits<int>::max()) {
        std::cout << ""Overflow detected! Sum is: "" << sum << std::endl;
    } else {
        std::cout << ""Sum: "" << sum << std::endl;
    }
    return 0;
}",sum += i;
"#include <random>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    // Calculate the sum of even numbers
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0) {
            sum = sum;
        }
    }

    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}",sum = sum;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) { // Fault: i <= data.size() should be i < data.size()
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    if (str == reversed_str) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (str == reversed_str)
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};

    // Calculate the average of the numbers
    double sum = 0.0;
    for (int number : numbers) {
        sum += number;
    }

    double average = sum / (numbers.size() - 1); // Fault: dividing by incorrect size

    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",double average = sum / (numbers.size() - 1);
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    size_t pos = text.find(""world"");
    if (pos != std::string::npos) {
        text.erase(pos, 5);
    }
    std::cout << text << std::endl;
    return 0;
}","text.erase(pos, 5);"
"#include <iostream>
#include <cmath>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  std::cout << ""Area: "" << area << std::endl;

  // Incorrect type conversion to integer for comparison
  if (area > 75) {
    std::cout << ""Large circle!"" << std::endl;
  } else {
    std::cout << ""Small circle."" << std::endl;
  }

  return 0;
}",if (area > 75)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius; // Using a hardcoded value instead of M_PI
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <iostream>
#include <cmath>

int main() {
  double x = 2.0;
  double y = 3.0;
  double result = std::sqrt(x * y);
  std::cout << ""Result: "" << result << std::endl;
  return 0;
}",double result = std::sqrt(x * y);
"#include <iostream>
#include <algorithm>

int main() {
    int numbers[] = {5, 2, 8, 1, 9, 4};
    int n = sizeof(numbers) / sizeof(numbers[0]);

    std::sort(numbers, numbers + n - 1); // Fault: Sorts up to n-1, not n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(numbers, numbers + n - 1);"
"#include <iostream>
#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    
    int largest = numbers[0];
    for (size_t i = 1; i < numbers.size(); ++i) {
        if (numbers[i] > largest) {
            largest = numbers[i];
        }
    }
    
    std::cout << ""The largest number is: "" << largest << std::endl;
    
    //Potential error: The following loop attempts to access an element beyond the bounds of the vector.
    for (size_t i = 0; i <= numbers.size(); ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}",for (size_t i = 0; i <= numbers.size(); ++i)
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) { // Fault: Should be i < numbers.size()
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int sum = 0;
  for (int i = 0; i <= data.size(); ++i) {
    sum += data[i];
  }
  std::cout << ""Sum: "" << sum << std::endl;
  return 0;
}",i <= data.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    if (area > 75) {
        std::cout << ""Area is large: "" << area << std::endl;
    } else {
        std::cout << ""Area is small: "" << area << std::endl;
    }
    
    return 0;
}","else {
        std::cout << ""Area is small: "" << area << std::endl;
    }"
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::sort(str.begin(), str.end());
    std::string expected = "" dehllloorw"";
    if (str == expected) {
        std::cout << ""Test passed!\n"";
    } else {
        std::cout << ""Test failed!\n"";
        std::cout << ""Expected: "" << expected << ""\n"";
        std::cout << ""Actual:   "" << str << ""\n"";
    }
    return 0;
}","std::string expected = "" dehllloorw"";"
"#include <iostream>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size(); //Potential integer division if scores.size() is very large
    std::cout << ""Average score: "" << average_score << std::endl;

    return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    size_t size = numbers.size();
    double sum = 0.0;
    for (size_t i = 0; i <= size; ++i) {  // Fault: Loop goes one element too far
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= size
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += numbers[i];
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly using sum as the vector size.
    for (int i = 0; i <= sum; ++i) {
        std::cout << numbers[i] << std::endl;
    }

    return 0;
}",i <= sum
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages;
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    for (const auto& pair : ages) {
        std::cout << pair.first << "" is "" << pair.second << "" years old."" << std::endl;
    }

    //Incorrectly attempt to access an element using key not present
    std::cout << ""David is "" << ages[""David""] << "" years old."" << std::endl;

    return 0;
}","std::cout << ""David is "" << ages[""David""] << "" years old."" << std::endl;"
"#include <queue>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> nums = {5, 2, 8, 1, 9, 4};
    std::priority_queue<int> pq(nums.begin(), nums.end());

    std::vector<int> sortedNums;
    while (!pq.empty()) {
        sortedNums.push_back(pq.top());
        pq.pop();
    }

    // Should be ascending order, but priority queue gives descending
    std::reverse(sortedNums.begin(), sortedNums.end());
    
    for (int num : sortedNums) {
        std::cout << num << "" "";
    }
    std::cout << std::endl;
    return 0;
}","std::reverse(sortedNums.begin(), sortedNums.end());"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= numbers.size()
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <string>
#include <sstream>
#include <iostream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 12.5;
    double tax_rate = 0.075;
    double tax_amount = price * tax_rate;
    std::string formatted_tax = format_number(tax_amount);
    std::cout << ""Price: "" << price << std::endl;
    std::cout << ""Tax Rate: "" << tax_rate << std::endl;
    std::cout << ""Tax Amount: "" << formatted_tax << std::endl;
    
    double total_cost = price + tax_amount;
    std::string formatted_total = format_number(total_cost);
    std::cout << ""Total Cost: "" << formatted_total << std::endl;
    return 0;
}",std::string formatted_total = format_number(total_cost);
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->second << std::endl;
    }

    return 0;
}",it != myMap.end()
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    
    // Calculate the sum of elements using std::accumulate
    int sum = std::accumulate(data.begin(), data.end(), 0);
    
    // Print the sum
    std::cout << ""Sum: "" << sum << std::endl;

    // Incorrectly calculate average by dividing by the size of the vector plus 1.
    double average = (double)sum / data.size() + 1;
    std::cout << ""Average: "" << average << std::endl;

    return 0;
}",data.size() + 1
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 90;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size(); // Integer division
    std::cout << ""Average score: "" << average_score << std::endl;

    return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 10;
    counts[""orange""] = 15;

    int total = 0;
    for (const auto& pair : counts) {
        total += pair.first;
    }

    std::cout << ""Total characters: "" << total << std::endl;
    return 0;
}",total += pair.first;
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::ofstream outfile(""data.txt"");
    if (!outfile.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::string line = ""This is a line of text."";
    outfile << line << std::endl;

    for (int i = 0; i < 5; ++i) {
        outfile << i * 2 << std::endl; // Intended to print even numbers
    }

    outfile.close();
    std::cout << ""Data written to data.txt"" << std::endl;
    return 0;
}",outfile << i * 2 << std::endl;
"#include <random>
#include <iostream>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    std::random_device rd;
    std::mt19937 gen(rd());

    // Shuffle the vector but only perform one swap
    std::shuffle(numbers.begin(), numbers.end(), gen);
    std::swap(numbers[0], numbers[1]); // Incorrect: swap the first element with the second, not a random element.

    std::cout << ""Shuffled numbers: "";
    for (int number : numbers) {
        std::cout << number << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::swap(numbers[0], numbers[1]);"
"#include <queue>
#include <vector>
#include <algorithm>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  std::priority_queue<int> pq(data.begin(), data.end());

  std::vector<int> sorted_data;
  while (!pq.empty()) {
    sorted_data.push_back(pq.top());
    pq.pop();
  }

  std::reverse(sorted_data.begin(), sorted_data.end());
  
  for (int x : sorted_data) {
    std::cout << x << ' ';
  }
  std::cout << std::endl;
  return 0;
}","std::reverse(sorted_data.begin(), sorted_data.end());"
"#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    int target = 10;

    // Find the sum of all numbers less than the target.
    int sum = 0;
    for (int number : numbers) {
        if (number < target) {
            sum =+ number; // Incorrect assignment
        }
    }

    std::cout << ""Sum of numbers less than target: "" << sum << std::endl;
    return 0;
}",sum =+ number;
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    std::vector<int> processed_data;

    for (int i = 0; i < data.size(); ++i) {
        processed_data.push_back(data[i] * 2);
    }

    // Calculate the sum of elements in processed_data, but use data.size() instead of processed_data.size()
    int sum = std::accumulate(processed_data.begin(), processed_data.end(), 0);

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","std::accumulate(processed_data.begin(), processed_data.end(), 0);"
"#include <map>
#include <string>
#include <iostream>

int main() {
  std::map<std::string, int> scores;
  scores[""Alice""] = 90;
  scores[""Bob""] = 80;
  scores[""Charlie""] = 70;

  std::string best_player;
  int highest_score = -1; 

  for (const auto& pair : scores) {
    if (pair.second > highest_score) {
      highest_score = pair.second;
      best_player = pair.first;
    }
  }

  std::cout << ""Best player: "" << best_player << "" with score "" << highest_score << std::endl;
  
  //Incorrect Calculation
  int total_score = 0;
  for (int i = 0; i < scores.size(); ++i) {
    total_score += scores[best_player]; //Always adds the best players score.
  }

  std::cout << ""Total score of all players: "" << total_score << std::endl;

  return 0;
}",total_score += scores[best_player];
"#include <string>
#include <sstream>
#include <iostream>

int main() {
    std::string input = ""123.45"";
    std::stringstream ss(input);
    double number;
    ss >> number;
    if (ss.fail()) {
        std::cerr << ""Conversion failed!"" << std::endl;
        return 1;
    }
    std::cout << ""Number: "" << number << std::endl;

    //Attempt to read remaining characters (which should be an empty string)
    char remaining;
    if (ss >> remaining) {
      std::cout << ""Remaining: "" << remaining << std::endl;
    }
    else {
      std::cout << ""No remaining characters"" << std::endl;
    }

    return 0;
}",if (ss >> remaining)
"#include <vector>
#include <cmath>

int main() {
    std::vector<double> data = {1.0, 2.0, 3.0, 4.0, 5.0};
    double sum = 0.0;

    for (size_t i = 0; i < data.size(); ++i) {
        sum += std::sqrt(data[i]);
    }

    double mean = sum / data.size();

    double variance = 0.0;
    for (size_t i = 0; i < data.size(); ++i) {
        variance += std::pow(data[i] - mean, 2.0);
    }
    variance /= data.size() - 1; //Bias: Should be data.size()

    double std_dev = std::sqrt(variance);

    std::cout << ""Standard Deviation: "" << std_dev << std::endl;

    return 0;
}",variance /= data.size() - 1;
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    
    // Incorrect calculation of circumference
    double circumference = 2 * radius * radius;  
    
    std::cout << ""Area: "" << area << std::endl;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    return 0;
}",double circumference = 2 * radius * radius;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (std::abs(area - expected_area) > 0.0001) {
        std::cout << ""Error: Calculated area is significantly different from the expected area."" << std::endl;
    } else {
        std::cout << ""Area: "" << area << std::endl;
    }

    // Calculate circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    return 0;
}",double area = M_PI * radius * radius;
"#include <iostream>
#include <iomanip>

int main() {
    double radius = 5.0;
    double area = 3.14159 * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = 3.14159 * radius * radius;
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);

    if (!file.is_open()) {
        std::cerr << ""Error opening file!"" << std::endl;
        return 1;
    }

    std::string line;
    int sum = 0;
    while (std::getline(file, line)) {
        sum += line.length();
    }

    file.close();

    std::cout << ""Sum of lengths: "" << sum << std::endl;
    return 0;
}",sum += line.length();
"#include <random> 
#include <iostream>
#include <iomanip>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_real_distribution<> dis(0.0, 1.0);

    double sum = 0.0;
    int numSamples = 1000;

    for (int i = 0; i < numSamples; ++i) {
        double randomValue = dis(gen);
        sum += randomValue;
    }

    double mean = sum / numSamples;

    //Incorrect standard deviation calculation: missing square root
    double variance = 0.0;
    for (int i = 0; i < numSamples; ++i) {
        double randomValue = dis(gen);
        variance += (randomValue - mean) * (randomValue - mean);
    }
    variance /= numSamples;

    double stdDev = variance; //Fault: No square root taken

    std::cout << ""Mean: "" << std::fixed << std::setprecision(5) << mean << std::endl;
    std::cout << ""Standard Deviation: "" << std::fixed << std::setprecision(5) << stdDev << std::endl;

    return 0;
}",double stdDev = variance;
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;  // Incorrect area calculation
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}","for (int i = 0; i <= data.size(); ++i) {
        sum += data[i];
    }"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    std::vector<int> sorted_data = data;
    std::sort(sorted_data.begin(), sorted_data.begin() + sorted_data.size() - 1); // Fault: Sorting only part of the vector
    
    for (int i = 0; i < sorted_data.size(); ++i) {
        std::cout << sorted_data[i] << "" "";
    }
    std::cout << std::endl;
    
    return 0;
}","std::sort(sorted_data.begin(), sorted_data.begin() + sorted_data.size() - 1);"
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""This is a test string"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (text == reversed_text) {
      std::cout << ""The string is a palindrome."" << std::endl;
  } else {
      std::cout << ""The string is not a palindrome."" << std::endl;
  }

  return 0;
}",if (text == reversed_text)
"#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World!"";
  std::string reversed_text = text;
  std::reverse(reversed_text.begin(), reversed_text.end());

  if (text == reversed_text) {
    std::cout << ""The string is a palindrome."" << std::endl;
  } else {
    std::cout << ""The string is not a palindrome."" << std::endl;
  }

  return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <iomanip>

int main() {
    double price = 100.50;
    int quantity = 3;
    double tax_rate = 0.08;

    double subtotal = price * quantity;
    double tax = subtotal * tax_rate;
    double total = subtotal + tax;

    std::cout << ""Subtotal: "" << std::fixed << std::setprecision(2) << subtotal << std::endl;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << tax << std::endl;
    std::cout << ""Total: "" << std::fixed << std::setprecision(2) << total << std::endl;
    
    return 0;
}","std::cout << ""Total: "" << std::fixed << std::setprecision(2) << total << std::endl;"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << std::fixed << std::setprecision(2) << ""Area: "" << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <cmath>

int main() {
    double x = 2.0;
    double y = 3.0;
    double result = std::pow(x, y);
    
    if (result > 10.0) {
        std::cout << ""Result is greater than 10: "" << result << std::endl;
    } else {
        std::cout << ""Result is not greater than 10: "" << result << std::endl;
    }
    
    return 0;
}","else {
        std::cout << ""Result is not greater than 10: "" << result << std::endl;
    }"
"#include <iostream>
#include <string>

int main() {
  std::string message = ""Hello, world!\n"";
  std::cout << message.substr(0, 5) << std::endl; //Incorrect substring length
  return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <iostream>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    if (sum == 15) {
        std::cout << ""Sum is 15."" << std::endl;
    } else {
        std::cout << ""Sum is not 15."" << std::endl;
    }
    
    return 0;
}",if (sum == 15)
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 2;

    int total = 0;
    for (auto const& [fruit, count] : counts) {
        total += count;
    }

    std::cout << ""Total fruit count: "" << total << std::endl;
    return 0;
}","counts[""orange""] = 2;"
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    double expected_area = 78.5398;

    if (area > expected_area + 0.001) {
        std::cout << ""Area is too large: "" << area << std::endl;
    } else if (area < expected_area - 0.001) {
        std::cout << ""Area is too small: "" << area << std::endl;
    } else {
        std::cout << ""Area is correct: "" << area << std::endl;
    }

    return 0;
}",if (area > expected_area + 0.001)
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    // Incorrectly calculate the average. It should be (double)sum / numbers.size()
    double average = sum / numbers.size(); 

    std::cout << ""The average is: "" << average << std::endl;
    return 0;
}",double average = sum / numbers.size();
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i)
"#include <fstream>
#include <iostream>
#include <string>

int main() {
    std::string filename = ""data.txt"";
    std::ifstream file(filename);
    if (file.is_open()) {
        std::string line;
        int sum = 0;
        while (std::getline(file, line)) {
            try {
                int num = std::stoi(line);
                sum += num;
            } catch (const std::invalid_argument& e) {
                std::cerr << ""Invalid number: "" << line << std::endl;
            } catch (const std::out_of_range& e) {
                std::cerr << ""Number out of range: "" << line << std::endl;
            }
        }
        std::cout << ""Sum: "" << sum << std::endl;
        file.close();
    } else {
        std::cerr << ""Unable to open file: "" << filename << std::endl;
        return 1;
    }
    return 0;
}",int sum = 0;
"#include <string>
#include <algorithm>

std::string reverseString(std::string str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string input_string = ""hello"";
    std::string reversed_string = reverseString(input_string);
    std::cout << ""Original: "" << input_string << std::endl;
    std::cout << ""Reversed: "" << reversed_string << std::endl;

    std::string another_string = ""world"";
    std::string reversed_another = reverseString(another_string);
    std::cout << ""Original: "" << another_string << std::endl;
    std::cout << ""Reversed: "" << reversed_another << std::endl;

    return 0;
}","std::cout << ""Reversed: "" << reversed_another << std::endl;"
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
  std::string text = ""Hello, World! This is a test."";
  std::string word_to_remove = ""test"";

  size_t pos = text.find(word_to_remove);
  if (pos != std::string::npos) {
    text.erase(pos, word_to_remove.length());
  }
  std::cout << text << std::endl;
  return 0;
}","text.erase(pos, word_to_remove.length());"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    std::string name = ""David"";
    int score = scores[name]; // Potential issue: Default construction if not found

    std::cout << ""David's score: "" << score << std::endl;

    return 0;
}",int score = scores[name];
"#include <iostream>
#include <map>

int main() {
  std::map<std::string, int> ages;
  ages[""Alice""] = 30;
  ages[""Bob""] = 25;
  ages[""Charlie""] = 40;

  std::string name = ""David"";
  // Intended to increment David's age if he exists, otherwise add him.
  if (ages.count(name) > 0) {
    ages[name]++ ; // Intentional increment after checking
  } else {
    ages[name] = 20; // Set to 20 if not present
  }

  std::cout << ""Alice's age: "" << ages[""Alice""] << std::endl;
  std::cout << ""Bob's age: "" << ages[""Bob""] << std::endl;
  std::cout << ""Charlie's age: "" << ages[""Charlie""] << std::endl;
  std::cout << ""David's age: "" << ages[name] << std::endl;

  return 0;
}",ages[name]++
"#include <iomanip> 
#include <map> 

int main() {
    std::map<std::string, int> counts;
    counts[""apple""] = 5;
    counts[""banana""] = 3;
    counts[""orange""] = 7;

    int total = 0;
    for (const auto& pair : counts) {
        total += pair.second;
    }
    
    std::cout << std::fixed << std::setprecision(2) << total / 1.0 << std::endl; // Potential floating point issue

    return 0;
}",std::cout << std::fixed << std::setprecision(2) << total / 1.0 << std::endl;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    
    // Incorrect calculation of circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference of the circle: "" << circumference << std::endl;
    return 0;
}",double circumference = 2 * M_PI * radius;
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= data.size(); ++i) {  // Fault: i <= data.size()
        sum += data[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <algorithm>
#include <vector>
#include <iostream>

int main() {
    std::vector<int> data = {1, 2, 3, 4, 5};
    int sum = 0;

    for (int i = 0; i <= data.size(); ++i) {  // Fault: i <= data.size() instead of i < data.size()
        sum += data[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= data.size()
"#include <string>
#include <sstream>

std::string format_number(double num) {
    std::stringstream ss;
    ss << std::fixed << std::setprecision(2) << num;
    return ss.str();
}

int main() {
    double price = 12.5;
    int quantity = 3;
    double total = price * quantity;
    std::string formatted_total = format_number(total);
    std::cout << ""Total cost: "" << formatted_total << std::endl;
    
    double discount = 0.15;
    double final_price = total - (total * discount) ; 
    std::string formatted_final_price = format_number(final_price);
    std::cout << ""Final price: "" << formatted_final_price << std::endl;

    return 0;
}",double final_price = total - (total * discount) ;
"#include <map>
#include <iostream>

int main() {
  std::map<int, std::string> myMap;
  myMap[1] = ""apple"";
  myMap[2] = ""banana"";
  myMap[3] = ""cherry"";

  std::cout << myMap[4] << std::endl; // Accessing a non-existent key

  return 0;
}",std::cout << myMap[4] << std::endl;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());
    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }
    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <numeric>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    int sum = 0;
    for (int i = 0; i <= n; ++i) {
        sum += arr[i];
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= n; ++i)
"#include <random>
#include <chrono>
#include <vector>
#include <algorithm>

int main() {
    std::random_device rd{};
    std::mt19937 gen{rd()};
    std::uniform_int_distribution<> distrib{1, 100};

    std::vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        numbers[i] = distrib(gen);
    }

    std::sort(numbers.begin(), numbers.end(), [](int a, int b) {
        return a < b; // Incorrect comparison: should be > for descending order.
    });

    std::cout << ""Sorted numbers (ascending): "";
    for (int number : numbers) {
        std::cout << number << "" "";
    }
    std::cout << std::endl;

    return 0;
}",return a < b; // Incorrect comparison: should be > for descending order.
"#include <iostream>
#include <queue>

int main() {
    std::queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    int sum = 0;
    while (!q.empty()) {
        int current = q.front();
        q.pop();
        sum += current * 2;
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += current * 2;
"#include <fstream>
#include <string>
#include <algorithm>

int main() {
    std::ifstream inputFile(""data.txt"");
    if (!inputFile.is_open()) {
        std::cerr << ""Error opening file!\n"";
        return 1;
    }
    std::string line;
    std::string combinedString = """";
    while (std::getline(inputFile, line)) {
        combinedString = combinedString.erase(0, 1) + line; // Fault: Erasing the first character of each line.
    }
    inputFile.close();
    std::cout << combinedString << std::endl;
    return 0;
}","combinedString = combinedString.erase(0, 1) + line;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly calculate the average by dividing by the size of the vector *plus one*. 
    double average = static_cast<double>(sum) / numbers.size() + 1;
    
    std::cout << ""Average: "" << average << std::endl;
    return 0;
}",numbers.size() + 1
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = 3.14 * radius * radius;
    std::cout << ""Area of the circle: "" << area << std::endl;
    return 0;
}",double area = 3.14 * radius * radius;
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> data = {5, 2, 8, 1, 9, 4};
    int target = 7;

    std::vector<int> result;
    for (int x : data) {
        if (x > target) {
            result.push_back(x);
        }
    }

    if (result.empty()) {
        std::cout << ""No elements greater than "" << target << "" found."" << std::endl;
    } else {
        std::sort(result.begin(), result.end(), std::greater<int>());
        std::cout << ""Elements greater than "" << target << "":"";
        for (int i = 0; i < result.size(); ++i) {
            std::cout << result[i] << (i == result.size() - 1 ? """" : "", "");
        }
        std::cout << std::endl;
    }

    return 0;
}",if (x > target) {
"#include <string>
#include <vector>

int main() {
    std::vector<std::string> names = {""Alice"", ""Bob"", ""Charlie""};
    std::string longestName;
    for (const std::string& name : names) {
        if (longestName.length() < name.length()) {
            longestName = name;
        }
    }
    
    if (longestName == ""Alice"") {
        std::cout << ""Alice is the longest name."" << std::endl;
    } else {
        std::cout << ""The longest name is: "" << longestName << std::endl;
    }
    
    return 0;
}","if (longestName == ""Alice"")"
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {5, 2, 8, 1, 9, 4};
    std::sort(numbers.begin(), numbers.end(), std::greater<int>());

    std::cout << ""Sorted in descending order: "";
    for (size_t i = 0; i <= numbers.size(); ++i) {
        std::cout << numbers[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",i <= numbers.size()
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Find the index of the element equal to 7 (which doesn't exist)
    auto it = std::find(numbers.begin(), numbers.end(), 7);

    if (it != numbers.end()) {
        std::cout << ""Element found at index: "" << std::distance(numbers.begin(), it) << std::endl;
    } else {
        std::cout << ""Element not found."" << std::endl;
        // Incorrect index increment - Should not be incremented if not found
        int index = std::distance(numbers.begin(), it) + 1;
        std::cout << ""Incorrect index: "" << index << std::endl; 
    }
    
    return 0;
}","int index = std::distance(numbers.begin(), it) + 1;"
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.456789;
    std::cout << std::fixed << std::setprecision(2) << price << std::endl;
    double tax_rate = 0.08;
    double tax_amount = price * tax_rate;
    std::cout << ""Tax amount: "" << std::fixed << std::setprecision(2) << tax_amount << std::endl;
    double total_cost = price + tax_amount;
    std::cout << ""Total cost: "" << std::fixed << std::setprecision(2) << total_cost << std::endl;
    return 0;
}","std::cout << ""Total cost: "" << std::fixed << std::setprecision(2) << total_cost << std::endl;"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    for (const auto& pair : ages) {
        std::cout << pair.first << ""'s age is "" << pair.second << std::endl;
    }

    std::string name = ""David"";
    std::cout << name << ""'s age is "" << ages[name] << std::endl; 

    return 0;
}",ages[name]
"#include <map>
#include <iostream>

int main() {
    std::map<std::string, int> ages; 
    ages[""Alice""] = 30;
    ages[""Bob""] = 25;
    ages[""Charlie""] = 40;

    for (const auto& pair : ages) {
        std::cout << pair.first << ""'s age is "" << pair.second << std::endl;
    }

    // Incorrectly modifying age after iterating
    ages[""Alice""] = 31; 

    std::cout << ""Alice's age after modification: "" << ages[""Alice""] << std::endl;

    return 0;
}","ages[""Alice""] = 31;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    
    // Incorrectly decrement sum by 1, leading to a wrong result
    sum--;
    
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum--;
"#include <ctime>
#include <cstdlib>

int main() {
    std::srand(std::time(nullptr));
    int arr[10];
    for (int i = 0; i <= 10; ++i) {  // Faulty loop condition
        arr[i] = std::rand() % 100;
    }
    for (int i = 0; i < 10; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;
    return 0;
}",i <= 10
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  
  // Calculate the sum of squares, but with an off-by-one error
  int sum_of_squares = 0;
  for (size_t i = 0; i <= numbers.size(); ++i) {
    sum_of_squares += numbers[i] * numbers[i];
  }

  std::cout << ""Sum of squares: "" << sum_of_squares << std::endl;
  
  return 0;
}",i <= numbers.size()
"#include <algorithm>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = 0;
  
  for (int& num : numbers) {
    sum += num;
  }
  
  std::vector<int> even_numbers;
  for (int num : numbers) {
    if (num % 2 == 0)
      even_numbers.push_back(num);
  }
  
  // Calculate the average of even numbers, but use the original 'numbers' vector size.
  double average = (double)sum / numbers.size();
  
  std::cout << ""Average of even numbers: "" << average << std::endl;
  return 0;
}",double average = (double)sum / numbers.size();
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello"";
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());

    if (str == reversed_str) {
        std::cout << ""Palindrome!"" << std::endl;
    } else {
        std::cout << ""Not a palindrome."" << std::endl;
    }

    return 0;
}",if (str == reversed_str)
"#include <cmath>
#include <iostream>

int main() {
  double radius = 5.0;
  double area = M_PI * radius * radius;
  
  // Incorrectly truncates the area to an integer before printing
  std::cout << ""Area: "" << (int)area << std::endl;
  
  return 0;
}", (int)area
"#include <random>
#include <chrono>

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(1, 100);

    int sum = 0;
    for (int i = 0; i < 10; ++i) {
        int randomNumber = distrib(gen);
        if (randomNumber % 2 == 0) {
            sum += randomNumber * 2;
        } else {
            sum += randomNumber / 2;
        }
    }

    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",sum += randomNumber / 2;
"#include <iostream>
#include <string>
#include <algorithm>

int main() {
    std::string text = ""Hello, world!"";
    std::string reversed_text = text;
    std::reverse(reversed_text.begin(), reversed_text.end());

    if (text == reversed_text) {
        std::cout << ""The string is a palindrome."" << std::endl;
    } else {
        std::cout << ""The string is not a palindrome."" << std::endl;
    }

    return 0;
}",if (text == reversed_text)
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    size_t pos = text.find(""world"");
    if (pos != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }

    std::string text2 = ""Hello, universe!"";
    size_t pos2 = text2.find(""world"");
    if (pos2 != std::string::npos) {
        std::cout << ""Substring found at position: "" << pos2 << std::endl;
    } else {
        std::cout << ""Substring not found."" << std::endl;
    }
    return 0;
}","text2.find(""world"")"
"#include <iostream>
#include <iomanip>

int main() {
    double price = 123.4567;
    std::cout << ""Price: "" << std::fixed << std::setprecision(2) << price << std::endl;
    double taxRate = 0.08;
    double taxAmount = price * taxRate;
    std::cout << ""Tax: "" << std::fixed << std::setprecision(2) << taxAmount << std::endl;
    double totalCost = price + taxAmount;
    std::cout << ""Total: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;
    return 0;
}","std::cout << ""Total: "" << std::fixed << std::setprecision(2) << totalCost << std::endl;"
"#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // Calculate the sum of even numbers
    int sum = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        if (numbers[i] % 2 == 0)
            sum += numbers[i];
    }

    // Incorrectly multiply the sum by 2
    int result = sum * 2;

    std::cout << ""Sum of even numbers multiplied by 2: "" << result << std::endl;
    return 0;
}",    int result = sum * 2;
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores;
    scores[""Alice""] = 95;
    scores[""Bob""] = 80;
    scores[""Charlie""] = 70;

    std::string highestScorer = """";
    int highestScore = -1;

    for (const auto& pair : scores) {
        if (pair.second > highestScore) {
            highestScore = pair.second;
            highestScorer = pair.first;
        }
    }

    std::cout << ""Highest scorer: "" << highestScorer << "" with score: "" << highestScore << std::endl;

    scores.erase(""Bob""); // Intended to remove Bob, but is unreachable
    std::cout << ""Bob's score after deletion: "" << scores[""Bob""] << std::endl; 
    return 0;
}","std::cout << ""Bob's score after deletion: "" << scores[""Bob""] << std::endl;"
"#include <fstream>
#include <iostream>
#include <string>

int main() {
  std::fstream file(""data.txt"", std::ios::out);
  if (file.is_open()) {
    std::string line = ""This is a line of text"";
    file << line << std::endl;
    file.close();
  }
  else {
    std::cerr << ""Unable to open file"";
    return 1;
  }

  std::ifstream infile(""data.txt"");
  std::string content;
  if (infile.is_open()) {
    while (std::getline(infile, content)) {
      std::cout << content << std::endl;
    }
    infile.close();
  } else {
    std::cerr << ""Unable to open file for reading"";
    return 1;
  }

  //Bug:  Not using a buffer for the first write.  Creates overhead.
  std::string buffer; 
  buffer = ""Another line"";
  file.open(""data.txt"", std::ios::app); //Append mode is enabled.
  file << buffer << std::endl; //Writes to the end of file.
  file.close();

  infile.open(""data.txt"");
  while(std::getline(infile, content)) {
      std::cout << content << std::endl;
  }
  infile.close();
  return 0;
}",file << buffer << std::endl;
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= numbers.size(); ++i) {
        sum += numbers[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",for (int i = 0; i <= numbers.size(); ++i) {
"#include <algorithm>
#include <vector>

int main() {
  std::vector<int> data = {1, 2, 3, 4, 5};
  int target = 3;

  auto it = std::find(data.begin(), data.end(), target);

  if (it != data.end()) {
    std::cout << ""Target found at index: "" << std::distance(data.begin(), it) << std::endl;
  } else {
    std::cout << ""Target not found."" << std::endl;
  }

  // Incorrectly trying to increment iterator after checking if it's valid
  ++it;
  std::cout << *it << std::endl; 
  return 0;
}",++it;
"#include <string>
#include <algorithm>

int main() {
    std::string str = ""hello world"";
    std::transform(str.begin(), str.end(), str.begin(), ::toupper);
    
    if (str == ""Hello World"") {
        std::cout << ""Match found!\n"";
    } else {
        std::cout << ""No match.\n"";
    }
    
    return 0;
}","if (str == ""Hello World"")"
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // Calculate the sum of even numbers, but incorrectly uses odd numbers.
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0, [](int acc, int num) { 
        if (num % 2 != 0) {  // Faulty condition: checks for odd numbers instead of even
            return acc + num;
        } else {
            return acc;
        }
    });
    
    std::cout << ""Sum of even numbers: "" << sum << std::endl;
    return 0;
}",if (num % 2 != 0)
"#include <iostream>
#include <cmath>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;

    // Calculate circumference
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;

    // Incorrect calculation of diameter
    double diameter = circumference / M_PI;
    std::cout << ""Diameter: "" << diameter << std::endl;

    return 0;
}",double diameter = circumference / M_PI;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    double circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    double incorrect_circumference = M_PI * (radius + radius);
    std::cout << ""Incorrect Circumference: "" << incorrect_circumference << std::endl;
    return 0;
}",double incorrect_circumference = M_PI * (radius + radius);
"#include <iostream>
#include <map>

int main() {
  std::map<std::string, int> scores; 
  scores[""Alice""] = 85;
  scores[""Bob""] = 92;
  scores[""Charlie""] = 78;

  std::string name = ""David"";
  int david_score = scores[name]; // Potential issue: accessing non-existent key
  std::cout << ""David's score: "" << david_score << std::endl;

  return 0;
}",int david_score = scores[name];
"#include <vector>
#include <numeric>
#include <algorithm>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the product of all elements in the vector.
    int product = std::accumulate(numbers.begin(), numbers.end(), 1, [](int a, int b) { return a * b; });
    
    // Introduce a subtle fault:  Incorrectly multiply by zero at the end.
    product *= 0;
    
    std::cout << ""Product: "" << product << std::endl;
    
    return 0;
}",product *= 0;
"#include <iostream>
#include <map>

int main() {
    std::map<int, std::string> myMap;
    myMap[1] = ""one"";
    myMap[2] = ""two"";
    myMap[3] = ""three"";

    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        std::cout << it->second << std::endl;
    }

    return 0;
}","myMap[1] = ""one"";"
"#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> scores; 
    scores[""Alice""] = 85;
    scores[""Bob""] = 92;
    scores[""Charlie""] = 78;

    int total_score = 0;
    for (auto const& [name, score] : scores) {
        total_score += score;
    }

    double average_score = total_score / scores.size(); //Integer division
    std::cout << ""Average score: "" << average_score << std::endl;

    return 0;
}",double average_score = total_score / scores.size();
"#include <iostream>
#include <string>

int main() {
  std::string message = ""Hello, world!"";
  std::string upperMessage = message;

  for (char &c : upperMessage) {
    c = c - 1;
  }

  std::cout << upperMessage << std::endl;
  return 0;
}",c = c - 1;
"#include <iostream>
#include <iomanip>

int main() {
    double pi = 3.14159;
    double radius = 5.0;
    double area = pi * radius * radius;
    std::cout << ""Area of the circle: "" << std::fixed << std::setprecision(2) << area << std::endl;
    return 0;
}",double area = pi * radius * radius;
"#include <iostream>
#include <algorithm>

int main() {
    int arr[] = {5, 2, 8, 1, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::sort(arr, arr + n - 1); // Fault: Sorting only up to n-1, not n

    std::cout << ""Sorted array: "";
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << "" "";
    }
    std::cout << std::endl;

    return 0;
}","std::sort(arr, arr + n - 1);"
"#include <string>
#include <algorithm>

std::string reverseString(std::string str) {
    std::string reversed_str = str;
    std::reverse(reversed_str.begin(), reversed_str.end());
    return reversed_str;
}

int main() {
    std::string original = ""hello"";
    std::string reversed = reverseString(original);
    std::cout << ""Original: "" << original << std::endl;
    std::cout << ""Reversed: "" << reversed << std::endl;
    return 0;
}","std::reverse(reversed_str.begin(), reversed_str.end());"
"#include <algorithm>
#include <vector>

int main() {
    std::vector<int> nums = {1, 2, 3, 4, 5};
    int sum = 0;
    for (int i = 0; i <= nums.size(); ++i) {  // Fault: i <= nums.size()
        sum += nums[i];
    }
    std::cout << ""Sum: "" << sum << std::endl;
    return 0;
}",i <= nums.size()
"#include <iostream>
#include <string>

int main() {
    std::string message = ""Hello, world!\n"";
    std::cout << message.substr(0, 5) << std::endl;
    return 0;
}","std::cout << message.substr(0, 5) << std::endl;"
"#include <vector>
#include <numeric>

int main() {
    std::vector<int> numbers = {1, 2, 3, 4, 5};
    
    // Calculate the sum of the squares of the elements
    int sum_of_squares = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        sum_of_squares += numbers[i] * numbers[i];
    }
    
    // Calculate the expected sum of squares
    int expected_sum_of_squares = std::accumulate(numbers.begin(), numbers.end(), 0, [](int sum, int n){ return sum + n * n; });

    if (sum_of_squares != expected_sum_of_squares) {
        std::cout << ""Error: Sum of squares mismatch!"" << std::endl;
    } else {
        std::cout << ""Sum of squares calculated correctly."" << std::endl;
    }

    return 0;
}",int sum_of_squares = 0;
"#include <cmath>
#include <iostream>

int main() {
    double radius = 5.0;
    double area = M_PI * radius * radius;
    std::cout << ""Area: "" << area << std::endl;
    
    // Incorrect use of int for calculating circumference
    int circumference = 2 * M_PI * radius;
    std::cout << ""Circumference: "" << circumference << std::endl;
    
    return 0;
}",int circumference = 2 * M_PI * radius;
"#include <iostream>
#include <string>

int main() {
    std::string text = ""Hello, world!"";
    int len = text.length();
    std::string reversed_text = """";
    for (int i = 0; i <= len; ++i) { // Fault: should be i < len
        reversed_text += text[len - i];
    }
    std::cout << ""Original: "" << text << std::endl;
    std::cout << ""Reversed: "" << reversed_text << std::endl;
    return 0;
}",i <= len
"#include <iostream>
#include <vector>
#include <numeric>

int main() {
  std::vector<int> numbers = {1, 2, 3, 4, 5};
  int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
  // Intended: Calculate average
  double average = static_cast<double>(sum) / numbers.size();

  // Unintended: Using integer division for average calculation.
  int integer_average = sum / numbers.size();
  
  std::cout << ""Sum: "" << sum << std::endl;
  std::cout << ""Average (double): "" << average << std::endl;
  std::cout << ""Average (int): "" << integer_average << std::endl;

  return 0;
}",int integer_average = sum / numbers.size();
